
BKI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  000043b4  00004468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000487  00800146  00800146  0000454e  2**0
                  ALLOC
  3 .eeprom       000000cf  00810000  00810000  0000454e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000067a4  00000000  00000000  00004620  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00002aa0  00000000  00000000  0000adc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000005c  00000000  00000000  0000d864  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000d8c0  2**2
                  CONTENTS, READONLY
  8 .debug_info   000004e6  00000000  00000000  0000d8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004a3  00000000  00000000  0000dde2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0000e285  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000196  00000000  00000000  0000e29f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__ctors_end>
       4:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <__vector_1>
       8:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
       c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      10:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      14:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      18:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      1c:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__vector_7>
      20:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      24:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      28:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      2c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      30:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      34:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <__vector_13>
      38:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      3c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      40:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      44:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      48:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      4c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
      50:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>

00000054 <NEDOSTUPNO>:
      54:	ed e5 e4 ee f1 f2 f3 ef ed ee 00                    ...........

0000005f <NOVOE_ZNACHENIE>:
      5f:	cd ce c2 ce c5 20 c7 cd c0 d7 c5 cd c8 c5 00        ..... .........

0000006e <PAROL>:
      6e:	cf c0 d0 ce cb dc 00                                .......

00000075 <MS>:
      75:	ec f1 00                                            ...

00000078 <OTKL_MTZ>:
      78:	ee f2 ea eb 2e cc d2 c7 3a 00                       ........:.

00000082 <VKL_MTZ>:
      82:	e2 ea eb 2e cc d2 c7 3a 00                          .......:.

0000008b <PUSTO>:
      8b:	3c ef f3 f1 f2 ee 3e 00                             <.....>.

00000093 <OBNARUZHENO>:
      93:	ee e1 ed e0 f0 f3 e6 e5 ed ee 20 c1 c4 c7 3a 00     .......... ...:.

000000a3 <SBROSIT>:
      a3:	d1 e1 f0 ee f1 e8 f2 fc 3f 20 e4 e0 2d 22 c2 c2     ........? ..-"..
      b3:	ce c4 22 00                                         ..".

000000b7 <NET>:
      b7:	ed e5 f2 00                                         ....

000000bb <NET_SVYAZI>:
      bb:	ed e5 f2 20 f1 e2 ff e7 e8 00                       ... ......

000000c5 <OSHIBKA>:
      c5:	ee f8 e8 e1 ea e0 00                                .......

000000cc <NET_GOTOVNOSTI>:
      cc:	cd c5 d2 20 c3 ce d2 ce c2 cd ce d1 d2 c8 00        ... ...........

000000db <VREMYA_UROV>:
      db:	c2 d0 c5 cc df 20 d3 d0 ce c2 00                    ..... .....

000000e6 <VREMYA_MTZ>:
      e6:	c2 d0 c5 cc df 20 cc d2 c7 00                       ..... ....

000000f0 <ADRES>:
      f0:	c0 c4 d0 c5 d1 00                                   ......

000000f6 <C_NONE>:
      f6:	4e 4f 4e 45 00                                      NONE.

000000fb <C_EVEN>:
      fb:	45 56 45 4e 00                                      EVEN.

00000100 <C_ODD>:
     100:	4f 44 44 00                                         ODD.

00000104 <CHETNOST>:
     104:	d7 c5 d2 cd ce d1 d2 dc 00                          .........

0000010d <SKOROST>:
     10d:	d1 ca ce d0 ce d1 d2 dc 00                          .........

00000116 <ASCII_M>:
     116:	41 53 43 49 49 00                                   ASCII.

0000011c <RTU_M>:
     11c:	52 54 55 00                                         RTU.

00000120 <REZHIM>:
     120:	d0 c5 c6 c8 cc 00                                   ......

00000126 <SVYAZ>:
     126:	d1 c2 df c7 dc 20 52 53 34 38 35 00                 ..... RS485.

00000132 <PROGRAMMIROVANIE>:
     132:	cf d0 ce c3 d0 c0 cc cc c8 d0 ce c2 c0 cd c8 c5     ................
	...

00000143 <SCANIROVANIE>:
     143:	d1 ca c0 cd c8 d0 ce c2 c0 cd c8 c5 00              .............

00000150 <DATAVREMYA>:
     150:	c4 c0 d2 c0 2f c2 d0 c5 cc df 00                    ..../......

0000015b <RELE>:
     15b:	d0 c5 cb c5 00                                      .....

00000160 <DVX>:
     160:	c4 c2 d5 00                                         ....

00000164 <VOD>:
     164:	c2 ce c4 00                                         ....

00000168 <BDZ>:
     168:	c1 c4 c7 00                                         ....

0000016c <NASTROYKA>:
     16c:	cd c0 d1 d2 d0 ce c9 ca c0 00                       ..........

00000176 <ARHIV>:
     176:	c0 d0 d5 c8 c2 00                                   ......

0000017c <NA_SVYAZI>:
     17c:	cd c0 20 d1 c2 df c7 c8 00                          .. ......

00000185 <MENU>:
     185:	cc c5 cd de 00                                      .....

0000018a <NEISPRAVNOST>:
     18a:	cd c5 c8 d1 cf d0 c0 c2 cd ce d1 d2 dc 00           ..............

00000198 <AVARIYA>:
     198:	c0 c2 c0 d0 c8 df 00                                .......

0000019f <RABOTA>:
     19f:	d0 c0 c1 ce d2 c0 31 00                             ......1.

000001a7 <YPOB>:
     1a7:	d3 d0 ce c2 00                                      .....

000001ac <MTZ>:
     1ac:	cc d2 c7 00                                         ....

000001b0 <WAIT>:
     1b0:	cf ce c4 ce c6 c4 c8 d2 c5 3a 00                    .........:.

000001bb <EXIT4>:
     1bb:	c2 db d5 34 3a 00                                   ...4:.

000001c1 <EXIT3>:
     1c1:	c2 db d5 33 3a 00                                   ...3:.

000001c7 <EXIT2>:
     1c7:	c2 db d5 32 3a 00                                   ...2:.

000001cd <EXIT1>:
     1cd:	c2 db d5 31 3a 00                                   ...1:.

000001d3 <CHOSE_EXT>:
     1d3:	c2 db d5 ce c4 db 00                                .......

000001da <CONFIRM>:
     1da:	d0 c5 c6 c8 cc 20 cf ce c4 d2 c2 c5 d0 c6 c4 c5     ..... ..........
     1ea:	cd c8 df 00                                         ....

000001ee <OFF>:
     1ee:	c2 db ca cb 00                                      .....

000001f3 <ON>:
     1f3:	c2 ca cb 00                                         ....

000001f7 <DVX3>:
     1f7:	c4 c2 d5 33 00                                      ...3.

000001fc <DVX2>:
     1fc:	c4 c2 d5 32 00                                      ...2.

00000201 <DVX1>:
     201:	c4 c2 d5 31 00                                      ...1.

00000206 <VOD4>:
     206:	c2 ce c4 34 00                                      ...4.

0000020b <VOD3>:
     20b:	c2 ce c4 33 00                                      ...3.

00000210 <VOD2>:
     210:	c2 ce c4 32 00                                      ...2.

00000215 <VOD1>:
     215:	c2 ce c4 31 00                                      ...1.

0000021a <CHOSE_ENT>:
     21a:	c2 d5 ce c4 db 00                                   ......

00000220 <LOGIKA>:
     220:	cb ce c3 c8 ca c0 20 d0 c0 c1 ce d2 db 00           ...... .......

0000022e <OSHIBKA_ADDR>:
     22e:	ce d8 c8 c1 ca c0 20 e0 e4 f0 e5 f1 20 e7 e0 ed     ...... ..... ...
     23e:	ff f2 00                                            ...

00000241 <STAROE_ZNACHENIE>:
     241:	d1 d2 c0 d0 ce c5 20 c7 cd c0 d7 c5 cd c8 c5 00     ...... .........

00000251 <NUMM>:
     251:	cd ce cc c5 d0 20 c1 c4 c7 00                       ..... ....

0000025b <NOVOE>:
     25b:	cd ce c2 ce c5 00                                   ......

00000261 <lcd_codepage>:
     261:	41 a0 42 a1 e0 45 a3 a4 a5 a6 4b a7 4d 48 4f a8     A.B..E....K.MHO.
     271:	50 43 54 a9 aa 58 e1 ab ac e2 ad ae 62 af b0 b1     PCT..X......b...
     281:	61 b2 b3 b4 e3 65 b6 b7 b8 b9 ba bb bc bd 6f be     a....e........o.
     291:	70 63 bf 79 e4 78 e5 c0 c1 e6 c2 c3 c4 c5 c6 c7     pc.y.x..........
	...

000002a2 <__ctors_end>:
     2a2:	11 24       	eor	r1, r1
     2a4:	1f be       	out	0x3f, r1	; 63
     2a6:	cf e5       	ldi	r28, 0x5F	; 95
     2a8:	d8 e0       	ldi	r29, 0x08	; 8
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	cd bf       	out	0x3d, r28	; 61

000002ae <__do_copy_data>:
     2ae:	11 e0       	ldi	r17, 0x01	; 1
     2b0:	a0 e6       	ldi	r26, 0x60	; 96
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	e4 eb       	ldi	r30, 0xB4	; 180
     2b6:	f3 e4       	ldi	r31, 0x43	; 67
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <__do_copy_data+0x10>
     2ba:	05 90       	lpm	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	a6 34       	cpi	r26, 0x46	; 70
     2c0:	b1 07       	cpc	r27, r17
     2c2:	d9 f7       	brne	.-10     	; 0x2ba <__do_copy_data+0xc>

000002c4 <__do_clear_bss>:
     2c4:	25 e0       	ldi	r18, 0x05	; 5
     2c6:	a6 e4       	ldi	r26, 0x46	; 70
     2c8:	b1 e0       	ldi	r27, 0x01	; 1
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <.do_clear_bss_start>

000002cc <.do_clear_bss_loop>:
     2cc:	1d 92       	st	X+, r1

000002ce <.do_clear_bss_start>:
     2ce:	ad 3c       	cpi	r26, 0xCD	; 205
     2d0:	b2 07       	cpc	r27, r18
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <.do_clear_bss_loop>
     2d4:	0e 94 28 19 	call	0x3250	; 0x3250 <main>
     2d8:	0c 94 d8 21 	jmp	0x43b0	; 0x43b0 <_exit>

000002dc <__bad_interrupt>:
     2dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e0 <checkTOUT>:
	return 	checkTOUT(addr);
}

static inline signed char checkTOUT(unsigned char addr)
{
	CAN_timeout=CAN_TOUT;
     2e0:	28 ee       	ldi	r18, 0xE8	; 232
     2e2:	33 e0       	ldi	r19, 0x03	; 3
     2e4:	30 93 df 04 	sts	0x04DF, r19	; 0x8004df <CAN_timeout+0x1>
     2e8:	20 93 de 04 	sts	0x04DE, r18	; 0x8004de <CAN_timeout>
	while(chkBit(inSysBDZ[addr].flags,INL)==0 && (CAN_timeout !=0));	//ждем ответа
     2ec:	29 e0       	ldi	r18, 0x09	; 9
     2ee:	82 9f       	mul	r24, r18
     2f0:	c0 01       	movw	r24, r0
     2f2:	11 24       	eor	r1, r1
     2f4:	fc 01       	movw	r30, r24
     2f6:	e5 59       	subi	r30, 0x95	; 149
     2f8:	fe 4f       	sbci	r31, 0xFE	; 254
     2fa:	80 81       	ld	r24, Z
     2fc:	82 fd       	sbrc	r24, 2
     2fe:	06 c0       	rjmp	.+12     	; 0x30c <checkTOUT+0x2c>
     300:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <CAN_timeout>
     304:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <CAN_timeout+0x1>
     308:	89 2b       	or	r24, r25
     30a:	b9 f7       	brne	.-18     	; 0x2fa <checkTOUT+0x1a>
	return (CAN_timeout ==0 || CAN_ERR !=0)?(-1):(1);					//дождались таймаута или ошибки CAN вернули -1
     30c:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <CAN_timeout>
     310:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <CAN_timeout+0x1>
     314:	89 2b       	or	r24, r25
     316:	31 f0       	breq	.+12     	; 0x324 <checkTOUT+0x44>
     318:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CAN_ERR>
     31c:	81 11       	cpse	r24, r1
     31e:	02 c0       	rjmp	.+4      	; 0x324 <checkTOUT+0x44>
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	08 95       	ret
     324:	8f ef       	ldi	r24, 0xFF	; 255
}
     326:	08 95       	ret

00000328 <LCD_strob>:
}


static inline void LCD_strob(void)
{
	LCP |= 1<<LCD_E;
     328:	ac 9a       	sbi	0x15, 4	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     32a:	8f e9       	ldi	r24, 0x9F	; 159
     32c:	9f e0       	ldi	r25, 0x0F	; 15
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <LCD_strob+0x6>
     332:	00 c0       	rjmp	.+0      	; 0x334 <LCD_strob+0xc>
     334:	00 00       	nop
	_delay_ms(1);
	LCP &= ~(1<<LCD_E);
     336:	ac 98       	cbi	0x15, 4	; 21
     338:	8f e9       	ldi	r24, 0x9F	; 159
     33a:	9f e0       	ldi	r25, 0x0F	; 15
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_strob+0x14>
     340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_strob+0x1a>
     342:	00 00       	nop
     344:	08 95       	ret

00000346 <TWI_init>:
#define MR_DATA_NACK 0x58	//данные пришли, ACK не отправлен

void TWI_init(void)
{
//скорость 100 kHz
TWBR=72;
     346:	88 e4       	ldi	r24, 0x48	; 72
     348:	80 b9       	out	0x00, r24	; 0
//TWEA разрешение бита подтверждения,TWEN разрешение работы TWI модуля,
TWCR |= (1<<TWEA | 1<<TWEN);
     34a:	86 b7       	in	r24, 0x36	; 54
     34c:	84 64       	ori	r24, 0x44	; 68
     34e:	86 bf       	out	0x36, r24	; 54
TWSR &=~(1<<TWPS0) | (1<<TWPS1);
     350:	08 98       	cbi	0x01, 0	; 1
     352:	08 95       	ret

00000354 <twi_write>:
}

unsigned char twi_write(unsigned char addr,unsigned char *data,unsigned char len)
{
TWI_timeout=T_TOUT;
     354:	28 ee       	ldi	r18, 0xE8	; 232
     356:	33 e0       	ldi	r19, 0x03	; 3
     358:	30 93 7b 05 	sts	0x057B, r19	; 0x80057b <TWI_timeout+0x1>
     35c:	20 93 7a 05 	sts	0x057A, r18	; 0x80057a <TWI_timeout>

//TWI_ERR=0;

TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);										//Send START condition
     360:	94 ea       	ldi	r25, 0xA4	; 164
     362:	96 bf       	out	0x36, r25	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//флаг TWINT говорит о том,что текущее задание выполнено
     364:	06 b6       	in	r0, 0x36	; 54
     366:	07 fc       	sbrc	r0, 7
     368:	08 c0       	rjmp	.+16     	; 0x37a <twi_write+0x26>
     36a:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <TWI_timeout>
     36e:	30 91 7b 05 	lds	r19, 0x057B	; 0x80057b <TWI_timeout+0x1>
     372:	23 2b       	or	r18, r19
     374:	b9 f7       	brne	.-18     	; 0x364 <twi_write+0x10>
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	2d c0       	rjmp	.+90     	; 0x3d4 <twi_write+0x80>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел
     37a:	91 b1       	in	r25, 0x01	; 1
     37c:	98 7f       	andi	r25, 0xF8	; 248
     37e:	98 30       	cpi	r25, 0x08	; 8
     380:	11 f0       	breq	.+4      	; 0x386 <twi_write+0x32>
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	27 c0       	rjmp	.+78     	; 0x3d4 <twi_write+0x80>



TWDR = addr & 0xFE;													//грузим адпес и флаг записи (SLA+W)
     386:	8e 7f       	andi	r24, 0xFE	; 254
     388:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
     38a:	84 e8       	ldi	r24, 0x84	; 132
     38c:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
     38e:	06 b6       	in	r0, 0x36	; 54
     390:	07 fc       	sbrc	r0, 7
     392:	07 c0       	rjmp	.+14     	; 0x3a2 <twi_write+0x4e>
     394:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <TWI_timeout>
     398:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <TWI_timeout+0x1>
     39c:	89 2b       	or	r24, r25
     39e:	b9 f7       	brne	.-18     	; 0x38e <twi_write+0x3a>
     3a0:	ea cf       	rjmp	.-44     	; 0x376 <twi_write+0x22>
if ((TWSR & 0xF8) != MT_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     3a2:	81 b1       	in	r24, 0x01	; 1
     3a4:	88 7f       	andi	r24, 0xF8	; 248
     3a6:	88 31       	cpi	r24, 0x18	; 24
     3a8:	21 f4       	brne	.+8      	; 0x3b2 <twi_write+0x5e>
     3aa:	96 2f       	mov	r25, r22
     3ac:	fb 01       	movw	r30, r22


for(unsigned char i=0;i<len;i++)											//данные пошли
{
	TWDR = *(data+i);
	TWCR = (1<<TWINT) | (1<<TWEN);
     3ae:	24 e8       	ldi	r18, 0x84	; 132
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <twi_write+0x62>


TWDR = addr & 0xFE;													//грузим адпес и флаг записи (SLA+W)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MT_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <twi_write+0x80>



for(unsigned char i=0;i<len;i++)											//данные пошли
     3b6:	8e 2f       	mov	r24, r30
     3b8:	89 1b       	sub	r24, r25
     3ba:	84 17       	cp	r24, r20
     3bc:	a8 f4       	brcc	.+42     	; 0x3e8 <twi_write+0x94>
{
	TWDR = *(data+i);
     3be:	81 91       	ld	r24, Z+
     3c0:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     3c2:	26 bf       	out	0x36, r18	; 54
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}
     3c4:	06 b6       	in	r0, 0x36	; 54
     3c6:	07 fe       	sbrs	r0, 7
     3c8:	08 c0       	rjmp	.+16     	; 0x3da <twi_write+0x86>
	if ((TWSR & 0xF8) != MT_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}
     3ca:	81 b1       	in	r24, 0x01	; 1
     3cc:	88 7f       	andi	r24, 0xF8	; 248
     3ce:	88 32       	cpi	r24, 0x28	; 40
     3d0:	91 f3       	breq	.-28     	; 0x3b6 <twi_write+0x62>
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <TWI_ERR>
     3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <twi_write+0x94>

for(unsigned char i=0;i<len;i++)											//данные пошли
{
	TWDR = *(data+i);
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}
     3da:	60 91 7a 05 	lds	r22, 0x057A	; 0x80057a <TWI_timeout>
     3de:	70 91 7b 05 	lds	r23, 0x057B	; 0x80057b <TWI_timeout+0x1>
     3e2:	67 2b       	or	r22, r23
     3e4:	79 f7       	brne	.-34     	; 0x3c4 <twi_write+0x70>
     3e6:	c7 cf       	rjmp	.-114    	; 0x376 <twi_write+0x22>


ERROR:


TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);										//Transmit STOP condition
     3e8:	84 e9       	ldi	r24, 0x94	; 148
     3ea:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ec:	8f e8       	ldi	r24, 0x8F	; 143
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <twi_write+0x9c>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <twi_write+0xa2>
     3f6:	00 00       	nop
_delay_us(100);	//ждем прохождения стопа
#ifdef DEBUG
if(TWI_ERR)uart_puts("writeErr");
#endif
return TWI_ERR;	//возвращаем код ошибки
}
     3f8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <TWI_ERR>
     3fc:	08 95       	ret

000003fe <twi_read>:

unsigned char twi_read(unsigned char addr,unsigned char *data,unsigned char len)
{
     3fe:	98 2f       	mov	r25, r24
unsigned char i=0;

TWI_timeout=T_TOUT;
     400:	28 ee       	ldi	r18, 0xE8	; 232
     402:	33 e0       	ldi	r19, 0x03	; 3
     404:	30 93 7b 05 	sts	0x057B, r19	; 0x80057b <TWI_timeout+0x1>
     408:	20 93 7a 05 	sts	0x057A, r18	; 0x80057a <TWI_timeout>

TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);										//Send START condition
     40c:	84 ea       	ldi	r24, 0xA4	; 164
     40e:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//флаг TWINT говорит о том,что текущее задание выполнено
     410:	06 b6       	in	r0, 0x36	; 54
     412:	07 fc       	sbrc	r0, 7
     414:	08 c0       	rjmp	.+16     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     416:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <TWI_timeout>
     41a:	30 91 7b 05 	lds	r19, 0x057B	; 0x80057b <TWI_timeout+0x1>
     41e:	23 2b       	or	r18, r19
     420:	b9 f7       	brne	.-18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	34 c0       	rjmp	.+104    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел
     426:	81 b1       	in	r24, 0x01	; 1
     428:	88 7f       	andi	r24, 0xF8	; 248
     42a:	88 30       	cpi	r24, 0x08	; 8
     42c:	11 f0       	breq	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	2e c0       	rjmp	.+92     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>

TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
     432:	91 60       	ori	r25, 0x01	; 1
     434:	93 b9       	out	0x03, r25	; 3
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
     436:	84 e8       	ldi	r24, 0x84	; 132
     438:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
     43a:	06 b6       	in	r0, 0x36	; 54
     43c:	07 fc       	sbrc	r0, 7
     43e:	07 c0       	rjmp	.+14     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     440:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <TWI_timeout>
     444:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <TWI_timeout+0x1>
     448:	89 2b       	or	r24, r25
     44a:	b9 f7       	brne	.-18     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     44c:	ea cf       	rjmp	.-44     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     44e:	91 b1       	in	r25, 0x01	; 1
     450:	98 7f       	andi	r25, 0xF8	; 248
     452:	90 34       	cpi	r25, 0x40	; 64
     454:	31 f4       	brne	.+12     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     456:	20 e0       	ldi	r18, 0x00	; 0

for(i=0;i<len-1;i++)												//данные пошли
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	41 50       	subi	r20, 0x01	; 1
     45c:	51 09       	sbc	r21, r1
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
     45e:	e4 ec       	ldi	r30, 0xC4	; 196
     460:	08 c0       	rjmp	.+16     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел

TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	14 c0       	rjmp	.+40     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
for(i=0;i<len-1;i++)												//данные пошли
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
	*(data+i)=TWDR;
     466:	33 b1       	in	r19, 0x03	; 3
     468:	db 01       	movw	r26, r22
     46a:	a8 0f       	add	r26, r24
     46c:	b9 1f       	adc	r27, r25
     46e:	3c 93       	st	X, r19
TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел

for(i=0;i<len-1;i++)												//данные пошли
     470:	2f 5f       	subi	r18, 0xFF	; 255
     472:	82 2f       	mov	r24, r18
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	84 17       	cp	r24, r20
     478:	95 07       	cpc	r25, r21
     47a:	9c f4       	brge	.+38     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
     47c:	e6 bf       	out	0x36, r30	; 54
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
     47e:	06 b6       	in	r0, 0x36	; 54
     480:	07 fe       	sbrs	r0, 7
     482:	08 c0       	rjmp	.+16     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
     484:	31 b1       	in	r19, 0x01	; 1
     486:	38 7f       	andi	r19, 0xF8	; 248
     488:	30 35       	cpi	r19, 0x50	; 80
     48a:	69 f3       	breq	.-38     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     48c:	84 e0       	ldi	r24, 0x04	; 4
     48e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <TWI_ERR>
     492:	1c c0       	rjmp	.+56     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел

for(i=0;i<len-1;i++)												//данные пошли
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
     494:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <TWI_timeout>
     498:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <TWI_timeout+0x1>
     49c:	ab 2b       	or	r26, r27
     49e:	79 f7       	brne	.-34     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     4a0:	c0 cf       	rjmp	.-128    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
	*(data+i)=TWDR;
}
TWCR = (1<<TWINT) | (1<<TWEN);													//запускаем прием последнего байта без подтверждения
     4a2:	24 e8       	ldi	r18, 0x84	; 132
     4a4:	26 bf       	out	0x36, r18	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}		//ждем пока прилетит
     4a6:	06 b6       	in	r0, 0x36	; 54
     4a8:	07 fc       	sbrc	r0, 7
     4aa:	07 c0       	rjmp	.+14     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     4ac:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <TWI_timeout>
     4b0:	30 91 7b 05 	lds	r19, 0x057B	; 0x80057b <TWI_timeout+0x1>
     4b4:	23 2b       	or	r18, r19
     4b6:	b9 f7       	brne	.-18     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     4b8:	b4 cf       	rjmp	.-152    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
if ((TWSR & 0xF8) != MR_DATA_NACK){TWI_ERR=TWIDATA;goto ERROR;}					//данные не прошли
     4ba:	21 b1       	in	r18, 0x01	; 1
     4bc:	28 7f       	andi	r18, 0xF8	; 248
     4be:	28 35       	cpi	r18, 0x58	; 88
     4c0:	29 f7       	brne	.-54     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
*(data+i)=TWDR;
     4c2:	23 b1       	in	r18, 0x03	; 3
     4c4:	fb 01       	movw	r30, r22
     4c6:	e8 0f       	add	r30, r24
     4c8:	f9 1f       	adc	r31, r25
     4ca:	20 83       	st	Z, r18

ERROR:
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWEA);											//Transmit STOP condition
     4cc:	84 ed       	ldi	r24, 0xD4	; 212
     4ce:	86 bf       	out	0x36, r24	; 54
     4d0:	8f e8       	ldi	r24, 0x8F	; 143
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
     4da:	00 00       	nop
#ifdef DEBUG
if(TWI_ERR){uart_puts("readErr");}
#endif

return TWI_ERR;	//возвращаем код ошибки
}
     4dc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <TWI_ERR>
     4e0:	08 95       	ret

000004e2 <rtc_set>:
signed char rtc_check(void);
static inline unsigned char bcd2dec(unsigned char n);
static inline unsigned char dec2bcd(unsigned char n);

signed char rtc_set(struct RTC *rtc)
{
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	2a 97       	sbiw	r28, 0x0a	; 10
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	fc 01       	movw	r30, r24
	unsigned char data[10];

	data[0]=0;									//начальный регистр
     4f8:	19 82       	std	Y+1, r1	; 0x01
	data[1]=(dec2bcd(rtc->seconds) & ~(1<<CH));	//секунды с запуском тактового
     4fa:	85 81       	ldd	r24, Z+5	; 0x05
     4fc:	2a e0       	ldi	r18, 0x0A	; 10
     4fe:	62 2f       	mov	r22, r18
     500:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__udivmodqi4>
     504:	39 2f       	mov	r19, r25
     506:	40 e1       	ldi	r20, 0x10	; 16
     508:	84 9f       	mul	r24, r20
     50a:	c0 01       	movw	r24, r0
     50c:	11 24       	eor	r1, r1
     50e:	83 2b       	or	r24, r19
     510:	8f 77       	andi	r24, 0x7F	; 127
     512:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=dec2bcd(rtc->minutes);
     514:	84 81       	ldd	r24, Z+4	; 0x04
     516:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__udivmodqi4>
     51a:	39 2f       	mov	r19, r25
     51c:	40 e1       	ldi	r20, 0x10	; 16
     51e:	84 9f       	mul	r24, r20
     520:	c0 01       	movw	r24, r0
     522:	11 24       	eor	r1, r1
     524:	83 2b       	or	r24, r19
     526:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=dec2bcd(rtc->hours);
     528:	83 81       	ldd	r24, Z+3	; 0x03
     52a:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__udivmodqi4>
     52e:	39 2f       	mov	r19, r25
     530:	40 e1       	ldi	r20, 0x10	; 16
     532:	84 9f       	mul	r24, r20
     534:	c0 01       	movw	r24, r0
     536:	11 24       	eor	r1, r1
     538:	83 2b       	or	r24, r19
     53a:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=0;									//день недели
     53c:	1d 82       	std	Y+5, r1	; 0x05
	data[5]=dec2bcd(rtc->day);
     53e:	82 81       	ldd	r24, Z+2	; 0x02
     540:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__udivmodqi4>
     544:	39 2f       	mov	r19, r25
     546:	40 e1       	ldi	r20, 0x10	; 16
     548:	84 9f       	mul	r24, r20
     54a:	c0 01       	movw	r24, r0
     54c:	11 24       	eor	r1, r1
     54e:	83 2b       	or	r24, r19
     550:	8e 83       	std	Y+6, r24	; 0x06
	data[6]=dec2bcd(rtc->month);
     552:	81 81       	ldd	r24, Z+1	; 0x01
     554:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__udivmodqi4>
     558:	39 2f       	mov	r19, r25
     55a:	40 e1       	ldi	r20, 0x10	; 16
     55c:	84 9f       	mul	r24, r20
     55e:	c0 01       	movw	r24, r0
     560:	11 24       	eor	r1, r1
     562:	83 2b       	or	r24, r19
     564:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=dec2bcd(rtc->year);
     566:	80 81       	ld	r24, Z
     568:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__udivmodqi4>
     56c:	29 2f       	mov	r18, r25
     56e:	30 e1       	ldi	r19, 0x10	; 16
     570:	83 9f       	mul	r24, r19
     572:	c0 01       	movw	r24, r0
     574:	11 24       	eor	r1, r1
     576:	82 2b       	or	r24, r18
     578:	88 87       	std	Y+8, r24	; 0x08
	data[8]=0;									//управляющий регистр
     57a:	19 86       	std	Y+9, r1	; 0x09
	data[9]=STRT;								//первый регистр ОЗУ(часы работают)
     57c:	8a ea       	ldi	r24, 0xAA	; 170
     57e:	8a 87       	std	Y+10, r24	; 0x0a
	if(twi_write(DS1307ADDR,data,10) !=0) return -1;//посыл
     580:	4a e0       	ldi	r20, 0x0A	; 10
     582:	be 01       	movw	r22, r28
     584:	6f 5f       	subi	r22, 0xFF	; 255
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	80 ed       	ldi	r24, 0xD0	; 208
     58a:	0e 94 aa 01 	call	0x354	; 0x354 <twi_write>
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	81 11       	cpse	r24, r1
     592:	01 c0       	rjmp	.+2      	; 0x596 <rtc_set+0xb4>
     594:	90 e0       	ldi	r25, 0x00	; 0

	return 0;
}
     596:	89 2f       	mov	r24, r25
     598:	81 95       	neg	r24
     59a:	2a 96       	adiw	r28, 0x0a	; 10
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <rtc_get>:

signed char rtc_get(struct RTC *rtc)
{
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	28 97       	sbiw	r28, 0x08	; 8
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	8c 01       	movw	r16, r24
	unsigned char data[7]={0},startreg=0;
     5ca:	ce 01       	movw	r24, r28
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	7c 01       	movw	r14, r24
     5d0:	87 e0       	ldi	r24, 0x07	; 7
     5d2:	f7 01       	movw	r30, r14
     5d4:	11 92       	st	Z+, r1
     5d6:	8a 95       	dec	r24
     5d8:	e9 f7       	brne	.-6      	; 0x5d4 <rtc_get+0x28>
     5da:	18 86       	std	Y+8, r1	; 0x08

	twi_write(DS1307ADDR,&startreg,1);							//посыл начальнОго регистра
     5dc:	41 e0       	ldi	r20, 0x01	; 1
     5de:	be 01       	movw	r22, r28
     5e0:	68 5f       	subi	r22, 0xF8	; 248
     5e2:	7f 4f       	sbci	r23, 0xFF	; 255
     5e4:	80 ed       	ldi	r24, 0xD0	; 208
     5e6:	0e 94 aa 01 	call	0x354	; 0x354 <twi_write>
	if(twi_read(DS1307ADDR,data,7) !=0)return -1;	//читаем
     5ea:	47 e0       	ldi	r20, 0x07	; 7
     5ec:	b7 01       	movw	r22, r14
     5ee:	80 ed       	ldi	r24, 0xD0	; 208
     5f0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <twi_read>
     5f4:	81 11       	cpse	r24, r1
     5f6:	44 c0       	rjmp	.+136    	; 0x680 <rtc_get+0xd4>

	rtc->seconds=bcd2dec(data[0]);
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	98 2f       	mov	r25, r24
     5fc:	92 95       	swap	r25
     5fe:	9f 70       	andi	r25, 0x0F	; 15
     600:	8f 70       	andi	r24, 0x0F	; 15
     602:	fa e0       	ldi	r31, 0x0A	; 10
     604:	9f 9f       	mul	r25, r31
     606:	80 0d       	add	r24, r0
     608:	11 24       	eor	r1, r1
     60a:	f8 01       	movw	r30, r16
     60c:	85 83       	std	Z+5, r24	; 0x05
	rtc->minutes=bcd2dec(data[1]);
     60e:	8a 81       	ldd	r24, Y+2	; 0x02
     610:	98 2f       	mov	r25, r24
     612:	92 95       	swap	r25
     614:	9f 70       	andi	r25, 0x0F	; 15
     616:	8f 70       	andi	r24, 0x0F	; 15
     618:	fa e0       	ldi	r31, 0x0A	; 10
     61a:	9f 9f       	mul	r25, r31
     61c:	80 0d       	add	r24, r0
     61e:	11 24       	eor	r1, r1
     620:	f8 01       	movw	r30, r16
     622:	84 83       	std	Z+4, r24	; 0x04
	rtc->hours  =bcd2dec(data[2]);
     624:	8b 81       	ldd	r24, Y+3	; 0x03
     626:	98 2f       	mov	r25, r24
     628:	92 95       	swap	r25
     62a:	9f 70       	andi	r25, 0x0F	; 15
     62c:	8f 70       	andi	r24, 0x0F	; 15
     62e:	fa e0       	ldi	r31, 0x0A	; 10
     630:	9f 9f       	mul	r25, r31
     632:	80 0d       	add	r24, r0
     634:	11 24       	eor	r1, r1
     636:	f8 01       	movw	r30, r16
     638:	83 83       	std	Z+3, r24	; 0x03
	rtc->day    =bcd2dec(data[4]);			//дни недели пропускаем
     63a:	8d 81       	ldd	r24, Y+5	; 0x05
     63c:	98 2f       	mov	r25, r24
     63e:	92 95       	swap	r25
     640:	9f 70       	andi	r25, 0x0F	; 15
     642:	8f 70       	andi	r24, 0x0F	; 15
     644:	fa e0       	ldi	r31, 0x0A	; 10
     646:	9f 9f       	mul	r25, r31
     648:	80 0d       	add	r24, r0
     64a:	11 24       	eor	r1, r1
     64c:	f8 01       	movw	r30, r16
     64e:	82 83       	std	Z+2, r24	; 0x02
	rtc->month  =bcd2dec(data[5]);
     650:	8e 81       	ldd	r24, Y+6	; 0x06
     652:	98 2f       	mov	r25, r24
     654:	92 95       	swap	r25
     656:	9f 70       	andi	r25, 0x0F	; 15
     658:	8f 70       	andi	r24, 0x0F	; 15
     65a:	fa e0       	ldi	r31, 0x0A	; 10
     65c:	9f 9f       	mul	r25, r31
     65e:	80 0d       	add	r24, r0
     660:	11 24       	eor	r1, r1
     662:	f8 01       	movw	r30, r16
     664:	81 83       	std	Z+1, r24	; 0x01
	rtc->year   =bcd2dec(data[6]);	//год без десятков
     666:	8f 81       	ldd	r24, Y+7	; 0x07
     668:	98 2f       	mov	r25, r24
     66a:	92 95       	swap	r25
     66c:	9f 70       	andi	r25, 0x0F	; 15
     66e:	8f 70       	andi	r24, 0x0F	; 15
     670:	fa e0       	ldi	r31, 0x0A	; 10
     672:	9f 9f       	mul	r25, r31
     674:	80 0d       	add	r24, r0
     676:	11 24       	eor	r1, r1
     678:	f8 01       	movw	r30, r16
     67a:	80 83       	st	Z, r24

	return 0;
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	01 c0       	rjmp	.+2      	; 0x682 <rtc_get+0xd6>
signed char rtc_get(struct RTC *rtc)
{
	unsigned char data[7]={0},startreg=0;

	twi_write(DS1307ADDR,&startreg,1);							//посыл начальнОго регистра
	if(twi_read(DS1307ADDR,data,7) !=0)return -1;	//читаем
     680:	8f ef       	ldi	r24, 0xFF	; 255
	rtc->day    =bcd2dec(data[4]);			//дни недели пропускаем
	rtc->month  =bcd2dec(data[5]);
	rtc->year   =bcd2dec(data[6]);	//год без десятков

	return 0;
}
     682:	28 96       	adiw	r28, 0x08	; 8
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	08 95       	ret

0000069c <rtc_check>:

signed char rtc_check(void)
{
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	00 d0       	rcall	.+0      	; 0x6a2 <rtc_check+0x6>
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
	unsigned char result=0,startreg=8;
     6a6:	1a 82       	std	Y+2, r1	; 0x02
     6a8:	88 e0       	ldi	r24, 0x08	; 8
     6aa:	89 83       	std	Y+1, r24	; 0x01

	twi_write(DS1307ADDR,&startreg,1);								//посыл начальнОго регистра
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	be 01       	movw	r22, r28
     6b0:	6f 5f       	subi	r22, 0xFF	; 255
     6b2:	7f 4f       	sbci	r23, 0xFF	; 255
     6b4:	80 ed       	ldi	r24, 0xD0	; 208
     6b6:	0e 94 aa 01 	call	0x354	; 0x354 <twi_write>
	if(twi_read(DS1307ADDR,&result,1) !=0)return -1;	//читаем
     6ba:	41 e0       	ldi	r20, 0x01	; 1
     6bc:	be 01       	movw	r22, r28
     6be:	6e 5f       	subi	r22, 0xFE	; 254
     6c0:	7f 4f       	sbci	r23, 0xFF	; 255
     6c2:	80 ed       	ldi	r24, 0xD0	; 208
     6c4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <twi_read>
     6c8:	81 11       	cpse	r24, r1
     6ca:	07 c0       	rjmp	.+14     	; 0x6da <rtc_check+0x3e>

	if(result==STRT) return 0;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	9a 3a       	cpi	r25, 0xAA	; 170
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <rtc_check+0x3a>
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	81 95       	neg	r24
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <rtc_check+0x40>
signed char rtc_check(void)
{
	unsigned char result=0,startreg=8;

	twi_write(DS1307ADDR,&startreg,1);								//посыл начальнОго регистра
	if(twi_read(DS1307ADDR,&result,1) !=0)return -1;	//читаем
     6da:	8f ef       	ldi	r24, 0xFF	; 255

	if(result==STRT) return 0;
	return -1;
}
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <LCD_sendCmd>:
	_delay_ms(1);
}

void LCD_sendCmd(unsigned char cmd)	//Sends Command to LCD
{
     6e6:	cf 92       	push	r12
     6e8:	df 92       	push	r13
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	c8 2f       	mov	r28, r24
	//старшие полбайта команды
	LDP |= ((cmd>>7 & 0x01)<<LCD_DB7) | ((cmd>>6 & 0x01)<<LCD_DB6) | ((cmd>>5 & 0x01)<<LCD_DB5) | ((cmd>>4 & 0x01)<<LCD_DB4);
     6f6:	88 b3       	in	r24, 0x18	; 24
     6f8:	c6 fb       	bst	r28, 6
     6fa:	66 27       	eor	r22, r22
     6fc:	60 f9       	bld	r22, 0
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	66 0f       	add	r22, r22
     702:	77 1f       	adc	r23, r23
     704:	9c 2f       	mov	r25, r28
     706:	99 1f       	adc	r25, r25
     708:	99 27       	eor	r25, r25
     70a:	99 1f       	adc	r25, r25
     70c:	89 2b       	or	r24, r25
     70e:	68 2b       	or	r22, r24
     710:	c5 fb       	bst	r28, 5
     712:	44 27       	eor	r20, r20
     714:	40 f9       	bld	r20, 0
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	44 0f       	add	r20, r20
     71a:	55 1f       	adc	r21, r21
     71c:	44 0f       	add	r20, r20
     71e:	55 1f       	adc	r21, r21
     720:	46 2b       	or	r20, r22
     722:	c4 fb       	bst	r28, 4
     724:	22 27       	eor	r18, r18
     726:	20 f9       	bld	r18, 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	53 e0       	ldi	r21, 0x03	; 3
     72c:	22 0f       	add	r18, r18
     72e:	33 1f       	adc	r19, r19
     730:	5a 95       	dec	r21
     732:	e1 f7       	brne	.-8      	; 0x72c <LCD_sendCmd+0x46>
     734:	24 2b       	or	r18, r20
     736:	28 bb       	out	0x18, r18	; 24
	LCD_strob();
     738:	0e 94 94 01 	call	0x328	; 0x328 <LCD_strob>
	//младшие полбайта команды
	CLRLDP;
     73c:	88 b3       	in	r24, 0x18	; 24
     73e:	80 7f       	andi	r24, 0xF0	; 240
     740:	88 bb       	out	0x18, r24	; 24
	LDP = ((cmd>>3 & 0x01)<<LCD_DB7) | ((cmd>>2 & 0x01)<<LCD_DB6) | ((cmd>>1 & 0x01)<<LCD_DB5) | ((cmd>>0 & 0x01)<<LCD_DB4);
     742:	c3 fb       	bst	r28, 3
     744:	88 27       	eor	r24, r24
     746:	80 f9       	bld	r24, 0
     748:	c0 fb       	bst	r28, 0
     74a:	cc 24       	eor	r12, r12
     74c:	c0 f8       	bld	r12, 0
     74e:	d1 2c       	mov	r13, r1
     750:	63 e0       	ldi	r22, 0x03	; 3
     752:	cc 0c       	add	r12, r12
     754:	dd 1c       	adc	r13, r13
     756:	6a 95       	dec	r22
     758:	e1 f7       	brne	.-8      	; 0x752 <LCD_sendCmd+0x6c>
     75a:	c8 2a       	or	r12, r24
     75c:	c2 fb       	bst	r28, 2
     75e:	ee 24       	eor	r14, r14
     760:	e0 f8       	bld	r14, 0
     762:	f1 2c       	mov	r15, r1
     764:	ee 0c       	add	r14, r14
     766:	ff 1c       	adc	r15, r15
     768:	ec 28       	or	r14, r12
     76a:	c1 fb       	bst	r28, 1
     76c:	00 27       	eor	r16, r16
     76e:	00 f9       	bld	r16, 0
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	00 0f       	add	r16, r16
     774:	11 1f       	adc	r17, r17
     776:	00 0f       	add	r16, r16
     778:	11 1f       	adc	r17, r17
     77a:	0e 29       	or	r16, r14
     77c:	08 bb       	out	0x18, r16	; 24
	LCD_strob();
     77e:	0e 94 94 01 	call	0x328	; 0x328 <LCD_strob>
	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины
     782:	85 b3       	in	r24, 0x15	; 21
     784:	83 7e       	andi	r24, 0xE3	; 227
     786:	85 bb       	out	0x15, r24	; 21
     788:	88 b3       	in	r24, 0x18	; 24
     78a:	80 7f       	andi	r24, 0xF0	; 240
     78c:	88 bb       	out	0x18, r24	; 24
}
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	08 95       	ret

0000079e <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     79e:	2f ef       	ldi	r18, 0xFF	; 255
     7a0:	89 ef       	ldi	r24, 0xF9	; 249
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	21 50       	subi	r18, 0x01	; 1
     7a6:	80 40       	sbci	r24, 0x00	; 0
     7a8:	90 40       	sbci	r25, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <LCD_init+0x6>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <LCD_init+0x10>
     7ae:	00 00       	nop

void LCD_init(void)//Initializes LCD
{
	//инициализация портов
	_delay_ms(20);								//Wait for more than 15 ms after VCC rises to 4.5 V
	CLRLDP; 								//пины порта данных =0
     7b0:	88 b3       	in	r24, 0x18	; 24
     7b2:	80 7f       	andi	r24, 0xF0	; 240
     7b4:	88 bb       	out	0x18, r24	; 24
	LDDR |= (1<<LCD_DB7) | (1<<LCD_DB6) | (1<<LCD_DB5) | (1<<LCD_DB4);	//пины порта данных =выходы
     7b6:	87 b3       	in	r24, 0x17	; 23
     7b8:	8f 60       	ori	r24, 0x0F	; 15
     7ba:	87 bb       	out	0x17, r24	; 23
	CLRLCP;									//пины порта управляющих сигналов =0
     7bc:	85 b3       	in	r24, 0x15	; 21
     7be:	83 7e       	andi	r24, 0xE3	; 227
     7c0:	85 bb       	out	0x15, r24	; 21
	LCDR |= (1<<LCD_E) | (1<<LCD_RW) | (1<<LCD_RS);				//пины порта управляющих сигналов =выходы
     7c2:	84 b3       	in	r24, 0x14	; 20
     7c4:	8c 61       	ori	r24, 0x1C	; 28
     7c6:	84 bb       	out	0x14, r24	; 20

//	LDP |= convert(0b00110000);		//1
//	CLRLDP;								//обнулили пины DB
	LDP |= (1<<LCD_DB4) | (1<<LCD_DB5);	//step1
     7c8:	88 b3       	in	r24, 0x18	; 24
     7ca:	8c 60       	ori	r24, 0x0C	; 12
     7cc:	88 bb       	out	0x18, r24	; 24
	LCD_strob();
     7ce:	0e 94 94 01 	call	0x328	; 0x328 <LCD_strob>
     7d2:	8f e1       	ldi	r24, 0x1F	; 31
     7d4:	9e e4       	ldi	r25, 0x4E	; 78
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <LCD_init+0x38>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <LCD_init+0x3e>
     7dc:	00 00       	nop
	_delay_ms(5);						//Wait for more than 4.1 m
	LCD_strob();						//step2
     7de:	0e 94 94 01 	call	0x328	; 0x328 <LCD_strob>
     7e2:	8f e1       	ldi	r24, 0x1F	; 31
     7e4:	9e e4       	ldi	r25, 0x4E	; 78
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <LCD_init+0x48>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <LCD_init+0x4e>
     7ec:	00 00       	nop
	_delay_ms(5);
	LCD_strob();						//step3
     7ee:	0e 94 94 01 	call	0x328	; 0x328 <LCD_strob>
	LDP &= ~(1<<LCD_DB4);				//step4 обнулили DB4
     7f2:	c3 98       	cbi	0x18, 3	; 24
	LCD_strob();
     7f4:	0e 94 94 01 	call	0x328	; 0x328 <LCD_strob>
     7f8:	8f e3       	ldi	r24, 0x3F	; 63
     7fa:	9f e1       	ldi	r25, 0x1F	; 31
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <LCD_init+0x5e>
     800:	00 c0       	rjmp	.+0      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     802:	00 00       	nop
	_delay_ms(2);
	LCD_sendCmd(0b00101000);	//4х разрядный режим(4);страница знакогенератора(1)
     804:	88 e2       	ldi	r24, 0x28	; 40
     806:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LCD_sendCmd>
   	LCD_sendCmd(0b00001000);	//дисплей откл(2);курсор выкл(1);мигание курсора выкл(0)
     80a:	88 e0       	ldi	r24, 0x08	; 8
     80c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LCD_sendCmd>
   	LCD_sendCmd(0b00000001);	//очистка дисплея
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LCD_sendCmd>
   	LCD_sendCmd(0b00000110);	//сдвиг курсора вправо(1)
     816:	86 e0       	ldi	r24, 0x06	; 6
     818:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LCD_sendCmd>

   	CLRLDP; CLRLCP;
     81c:	88 b3       	in	r24, 0x18	; 24
     81e:	80 7f       	andi	r24, 0xF0	; 240
     820:	88 bb       	out	0x18, r24	; 24
     822:	85 b3       	in	r24, 0x15	; 21
     824:	83 7e       	andi	r24, 0xE3	; 227
     826:	85 bb       	out	0x15, r24	; 21
     828:	08 95       	ret

0000082a <LCD_cursorOn>:
}

void LCD_cursorOn(void) //displays LCD cursor
{
	LCD_sendCmd(0x0E);
     82a:	8e e0       	ldi	r24, 0x0E	; 14
     82c:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <LCD_sendCmd>

00000830 <LCD_cursorBlink>:
}

void LCD_cursorBlink(void)	//displays LCD blinking cursor
{
	LCD_sendCmd(0x0F);
     830:	8f e0       	ldi	r24, 0x0F	; 15
     832:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <LCD_sendCmd>

00000836 <LCD_visible>:
	LCD_sendCmd(0x0C);
}

void LCD_visible(void)		//Shows LCD
{
	LCD_sendCmd(0x0C);
     836:	8c e0       	ldi	r24, 0x0C	; 12
     838:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <LCD_sendCmd>

0000083c <LCD_cursorOff>:
     83c:	0c 94 1b 04 	jmp	0x836	; 0x836 <LCD_visible>

00000840 <LCD_clr>:
}

void LCD_clr(void)				//Clears LCD
{
	LCD_sendCmd(0x01);x=0;y=0;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LCD_sendCmd>
     846:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <x>
     84a:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <y>
     84e:	8f e1       	ldi	r24, 0x1F	; 31
     850:	9e e4       	ldi	r25, 0x4E	; 78
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <LCD_clr+0x12>
     856:	00 c0       	rjmp	.+0      	; 0x858 <LCD_clr+0x18>
     858:	00 00       	nop
     85a:	08 95       	ret

0000085c <LCD_gotoXY>:
	_delay_ms(5);
}

void LCD_gotoXY(char cx, char cy)	//Cursor to X Y position
{
	x=cx;y=cy;
     85c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <x>
     860:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <y>
	// remap lines into proper order
	switch(y)
     864:	61 30       	cpi	r22, 0x01	; 1
     866:	39 f0       	breq	.+14     	; 0x876 <__stack+0x17>
     868:	48 f0       	brcs	.+18     	; 0x87c <__stack+0x1d>
     86a:	62 30       	cpi	r22, 0x02	; 2
     86c:	31 f0       	breq	.+12     	; 0x87a <__stack+0x1b>
     86e:	63 30       	cpi	r22, 0x03	; 3
     870:	29 f4       	brne	.+10     	; 0x87c <__stack+0x1d>
	{
	case 0: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
	case 1: LCD_sendCmd(0x80 | (LCD_LINE1_DDRAMADDR+x)); break;
	case 2: LCD_sendCmd(0x80 | (LCD_LINE2_DDRAMADDR+x)); break;
	case 3: LCD_sendCmd(0x80 | (LCD_LINE3_DDRAMADDR+x)); break;
     872:	8c 5a       	subi	r24, 0xAC	; 172
     874:	03 c0       	rjmp	.+6      	; 0x87c <__stack+0x1d>
	x=cx;y=cy;
	// remap lines into proper order
	switch(y)
	{
	case 0: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
	case 1: LCD_sendCmd(0x80 | (LCD_LINE1_DDRAMADDR+x)); break;
     876:	80 5c       	subi	r24, 0xC0	; 192
     878:	01 c0       	rjmp	.+2      	; 0x87c <__stack+0x1d>
	case 2: LCD_sendCmd(0x80 | (LCD_LINE2_DDRAMADDR+x)); break;
     87a:	8c 5e       	subi	r24, 0xEC	; 236
	case 3: LCD_sendCmd(0x80 | (LCD_LINE3_DDRAMADDR+x)); break;
	default: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
     87c:	80 68       	ori	r24, 0x80	; 128
     87e:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <LCD_sendCmd>

00000882 <LCD_putchar>:
	}

}

void LCD_putchar(char ch)
{
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	c8 2f       	mov	r28, r24
	if ( ch >= 0xC0 ) ch = (char)pgm_read_byte(&lcd_codepage[ch - 0xC0]); //преобразование СР1251 в коды LCD
     894:	80 3c       	cpi	r24, 0xC0	; 192
     896:	28 f0       	brcs	.+10     	; 0x8a2 <LCD_putchar+0x20>
     898:	d0 e0       	ldi	r29, 0x00	; 0
     89a:	fe 01       	movw	r30, r28
     89c:	ef 55       	subi	r30, 0x5F	; 95
     89e:	fe 4f       	sbci	r31, 0xFE	; 254
     8a0:	c4 91       	lpm	r28, Z

	//4 bit part
	LCP |= 1<<LCD_RS; 	//установили RS
     8a2:	aa 9a       	sbi	0x15, 2	; 21

	//старшие полбайта символа
	LDP |= ((ch>>7 & 0x01)<<LCD_DB7) | ((ch>>6 & 0x01)<<LCD_DB6) | ((ch>>5 & 0x01)<<LCD_DB5) | ((ch>>4 & 0x01)<<LCD_DB4);
     8a4:	88 b3       	in	r24, 0x18	; 24
     8a6:	c6 fb       	bst	r28, 6
     8a8:	66 27       	eor	r22, r22
     8aa:	60 f9       	bld	r22, 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	66 0f       	add	r22, r22
     8b0:	77 1f       	adc	r23, r23
     8b2:	9c 2f       	mov	r25, r28
     8b4:	99 1f       	adc	r25, r25
     8b6:	99 27       	eor	r25, r25
     8b8:	99 1f       	adc	r25, r25
     8ba:	89 2b       	or	r24, r25
     8bc:	68 2b       	or	r22, r24
     8be:	c5 fb       	bst	r28, 5
     8c0:	44 27       	eor	r20, r20
     8c2:	40 f9       	bld	r20, 0
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	44 0f       	add	r20, r20
     8c8:	55 1f       	adc	r21, r21
     8ca:	44 0f       	add	r20, r20
     8cc:	55 1f       	adc	r21, r21
     8ce:	46 2b       	or	r20, r22
     8d0:	c4 fb       	bst	r28, 4
     8d2:	22 27       	eor	r18, r18
     8d4:	20 f9       	bld	r18, 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	53 e0       	ldi	r21, 0x03	; 3
     8da:	22 0f       	add	r18, r18
     8dc:	33 1f       	adc	r19, r19
     8de:	5a 95       	dec	r21
     8e0:	e1 f7       	brne	.-8      	; 0x8da <LCD_putchar+0x58>
     8e2:	24 2b       	or	r18, r20
     8e4:	28 bb       	out	0x18, r18	; 24
	LCD_strob();
     8e6:	0e 94 94 01 	call	0x328	; 0x328 <LCD_strob>

	//младшие полбайта символа
	CLRLDP;
     8ea:	88 b3       	in	r24, 0x18	; 24
     8ec:	80 7f       	andi	r24, 0xF0	; 240
     8ee:	88 bb       	out	0x18, r24	; 24
	LDP |= ((ch>>3 & 0x01)<<LCD_DB7) | ((ch>>2 & 0x01)<<LCD_DB6) | ((ch>>1 & 0x01)<<LCD_DB5) | ((ch>>0 & 0x01)<<LCD_DB4);
     8f0:	88 b3       	in	r24, 0x18	; 24
     8f2:	c3 fb       	bst	r28, 3
     8f4:	99 27       	eor	r25, r25
     8f6:	90 f9       	bld	r25, 0
     8f8:	89 2b       	or	r24, r25
     8fa:	c0 fb       	bst	r28, 0
     8fc:	cc 24       	eor	r12, r12
     8fe:	c0 f8       	bld	r12, 0
     900:	d1 2c       	mov	r13, r1
     902:	63 e0       	ldi	r22, 0x03	; 3
     904:	cc 0c       	add	r12, r12
     906:	dd 1c       	adc	r13, r13
     908:	6a 95       	dec	r22
     90a:	e1 f7       	brne	.-8      	; 0x904 <LCD_putchar+0x82>
     90c:	c8 2a       	or	r12, r24
     90e:	c2 fb       	bst	r28, 2
     910:	ee 24       	eor	r14, r14
     912:	e0 f8       	bld	r14, 0
     914:	f1 2c       	mov	r15, r1
     916:	ee 0c       	add	r14, r14
     918:	ff 1c       	adc	r15, r15
     91a:	ec 28       	or	r14, r12
     91c:	c1 fb       	bst	r28, 1
     91e:	00 27       	eor	r16, r16
     920:	00 f9       	bld	r16, 0
     922:	10 e0       	ldi	r17, 0x00	; 0
     924:	00 0f       	add	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	00 0f       	add	r16, r16
     92a:	11 1f       	adc	r17, r17
     92c:	0e 29       	or	r16, r14
     92e:	08 bb       	out	0x18, r16	; 24
	LCD_strob();
     930:	0e 94 94 01 	call	0x328	; 0x328 <LCD_strob>

	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины
     934:	85 b3       	in	r24, 0x15	; 21
     936:	83 7e       	andi	r24, 0xE3	; 227
     938:	85 bb       	out	0x15, r24	; 21
     93a:	88 b3       	in	r24, 0x18	; 24
     93c:	80 7f       	andi	r24, 0xF0	; 240
     93e:	88 bb       	out	0x18, r24	; 24

	if(++x >= LCD_MAXX)
     940:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <x>
     944:	8f 5f       	subi	r24, 0xFF	; 255
     946:	84 31       	cpi	r24, 0x14	; 20
     948:	58 f4       	brcc	.+22     	; 0x960 <LCD_putchar+0xde>
     94a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <x>
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
		}
	}
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	df 90       	pop	r13
     95c:	cf 90       	pop	r12
     95e:	08 95       	ret

	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины

	if(++x >= LCD_MAXX)
	{
		x=0;y++;
     960:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <x>
     964:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <y>
     968:	8f 5f       	subi	r24, 0xFF	; 255
     96a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <y>
		switch (y)
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	39 f0       	breq	.+14     	; 0x980 <LCD_putchar+0xfe>
     972:	50 f0       	brcs	.+20     	; 0x988 <LCD_putchar+0x106>
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	31 f0       	breq	.+12     	; 0x984 <LCD_putchar+0x102>
     978:	83 30       	cpi	r24, 0x03	; 3
     97a:	31 f4       	brne	.+12     	; 0x988 <LCD_putchar+0x106>
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
     97c:	84 ed       	ldi	r24, 0xD4	; 212
     97e:	05 c0       	rjmp	.+10     	; 0x98a <LCD_putchar+0x108>
	{
		x=0;y++;
		switch (y)
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
     980:	80 ec       	ldi	r24, 0xC0	; 192
     982:	03 c0       	rjmp	.+6      	; 0x98a <LCD_putchar+0x108>
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
     984:	84 e9       	ldi	r24, 0x94	; 148
     986:	01 c0       	rjmp	.+2      	; 0x98a <LCD_putchar+0x108>
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
     988:	80 e8       	ldi	r24, 0x80	; 128
		}
	}
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
     99a:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <LCD_sendCmd>

0000099e <LCD_puts>:
		}
	}
}

void LCD_puts(char* data, char nBytes)	//Outputs string to LCD с автоматической перекодировкой с СР1251
{
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	d6 2f       	mov	r29, r22
     9a8:	8c 01       	movw	r16, r24
	// print data
	for(unsigned char i=0; i<nBytes; i++)
     9aa:	c0 e0       	ldi	r28, 0x00	; 0
     9ac:	cd 17       	cp	r28, r29
     9ae:	81 f0       	breq	.+32     	; 0x9d0 <LCD_puts+0x32>
	{
		if(data[i]==0)								//если дошли до конца строки
     9b0:	f8 01       	movw	r30, r16
     9b2:	81 91       	ld	r24, Z+
     9b4:	8f 01       	movw	r16, r30
     9b6:	81 11       	cpse	r24, r1
     9b8:	07 c0       	rjmp	.+14     	; 0x9c8 <LCD_puts+0x2a>
		{
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
     9ba:	80 e2       	ldi	r24, 0x20	; 32
     9bc:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
     9c0:	cf 5f       	subi	r28, 0xFF	; 255
     9c2:	cd 17       	cp	r28, r29
     9c4:	d0 f3       	brcs	.-12     	; 0x9ba <LCD_puts+0x1c>
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <LCD_puts+0x32>
			return;
		}
		else LCD_putchar(data[i]);
     9c8:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
}

void LCD_puts(char* data, char nBytes)	//Outputs string to LCD с автоматической перекодировкой с СР1251
{
	// print data
	for(unsigned char i=0; i<nBytes; i++)
     9cc:	cf 5f       	subi	r28, 0xFF	; 255
     9ce:	ee cf       	rjmp	.-36     	; 0x9ac <LCD_puts+0xe>
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
			return;
		}
		else LCD_putchar(data[i]);
	}
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <printIOStr>:
	LCD_gotoXY(x,y);
	LCD_puts(buffer,20);
}

static inline void printIOStr(volatile unsigned char *data)
{
     9da:	cf 92       	push	r12
     9dc:	df 92       	push	r13
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	6b 97       	sbiw	r28, 0x1b	; 27
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	7c 01       	movw	r14, r24
	char buffer[20];
	char tmpStr[7];
	unsigned char i;

	//строка 2 "ВОД:  ДВХ:"
	LCD_gotoXY(0,2);
     9fc:	62 e0       	ldi	r22, 0x02	; 2
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
	strcpy_P(buffer,VOD);strcat(buffer,":");										//ВОД:
     a04:	64 e6       	ldi	r22, 0x64	; 100
     a06:	71 e0       	ldi	r23, 0x01	; 1
     a08:	ce 01       	movw	r24, r28
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <strcpy_P>
     a10:	66 ef       	ldi	r22, 0xF6	; 246
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	ce 01       	movw	r24, r28
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <strcat>
	if((*data & 0x0F) ==0) strcat_P(buffer,NET);									//"нет"
     a1c:	f7 01       	movw	r30, r14
     a1e:	80 81       	ld	r24, Z
     a20:	8f 70       	andi	r24, 0x0F	; 15
     a22:	39 f4       	brne	.+14     	; 0xa32 <printIOStr+0x58>
     a24:	67 eb       	ldi	r22, 0xB7	; 183
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	ce 01       	movw	r24, r28
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <strcat_P>
     a30:	2d c0       	rjmp	.+90     	; 0xa8c <printIOStr+0xb2>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
	else for(i=0;i<4;i++) if( chkBit(*data,i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//или номера
     a36:	cc 24       	eor	r12, r12
     a38:	c3 94       	inc	r12
     a3a:	d1 2c       	mov	r13, r1
     a3c:	f7 01       	movw	r30, r14
     a3e:	30 81       	ld	r19, Z
     a40:	a6 01       	movw	r20, r12
     a42:	08 2e       	mov	r0, r24
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <printIOStr+0x70>
     a46:	44 0f       	add	r20, r20
     a48:	55 1f       	adc	r21, r21
     a4a:	0a 94       	dec	r0
     a4c:	e2 f7       	brpl	.-8      	; 0xa46 <printIOStr+0x6c>
     a4e:	23 2f       	mov	r18, r19
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	24 23       	and	r18, r20
     a54:	35 23       	and	r19, r21
     a56:	08 2e       	mov	r0, r24
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <printIOStr+0x84>
     a5a:	35 95       	asr	r19
     a5c:	27 95       	ror	r18
     a5e:	0a 94       	dec	r0
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <printIOStr+0x80>
     a62:	8c 01       	movw	r16, r24
     a64:	0f 5f       	subi	r16, 0xFF	; 255
     a66:	1f 4f       	sbci	r17, 0xFF	; 255
     a68:	23 2b       	or	r18, r19
     a6a:	61 f0       	breq	.+24     	; 0xa84 <printIOStr+0xaa>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     a6c:	4a e0       	ldi	r20, 0x0A	; 10
     a6e:	be 01       	movw	r22, r28
     a70:	6b 5e       	subi	r22, 0xEB	; 235
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	c8 01       	movw	r24, r16
     a76:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
     a7a:	bc 01       	movw	r22, r24
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <strcat>
     a84:	c8 01       	movw	r24, r16
     a86:	04 30       	cpi	r16, 0x04	; 4
     a88:	11 05       	cpc	r17, r1
     a8a:	c1 f6       	brne	.-80     	; 0xa3c <printIOStr+0x62>
	LCD_puts(buffer,20);
     a8c:	64 e1       	ldi	r22, 0x14	; 20
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
	LCD_gotoXY(9,2);
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	89 e0       	ldi	r24, 0x09	; 9
     a9a:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
	strcpy_P(buffer,DVX);strcat(buffer,":");	//ДВХ:
     a9e:	60 e6       	ldi	r22, 0x60	; 96
     aa0:	71 e0       	ldi	r23, 0x01	; 1
     aa2:	ce 01       	movw	r24, r28
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <strcpy_P>
     aaa:	66 ef       	ldi	r22, 0xF6	; 246
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	ce 01       	movw	r24, r28
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <strcat>
	if((*data & 0xF0) ==0) strcat_P(buffer,NET);	//"нет"
     ab6:	f7 01       	movw	r30, r14
     ab8:	80 81       	ld	r24, Z
     aba:	80 7f       	andi	r24, 0xF0	; 240
     abc:	39 f4       	brne	.+14     	; 0xacc <printIOStr+0xf2>
     abe:	67 eb       	ldi	r22, 0xB7	; 183
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <strcat_P>
     aca:	2b c0       	rjmp	.+86     	; 0xb22 <printIOStr+0x148>
     acc:	04 e0       	ldi	r16, 0x04	; 4
     ace:	10 e0       	ldi	r17, 0x00	; 0
	else for(i=4;i<8;i++) if( chkBit(*data,i) ) strcat(buffer,itoa(i-4+1,tmpStr,10));	//рисуем номера неисправных
     ad0:	cc 24       	eor	r12, r12
     ad2:	c3 94       	inc	r12
     ad4:	d1 2c       	mov	r13, r1
     ad6:	f7 01       	movw	r30, r14
     ad8:	80 81       	ld	r24, Z
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	96 01       	movw	r18, r12
     ade:	00 2e       	mov	r0, r16
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <printIOStr+0x10c>
     ae2:	22 0f       	add	r18, r18
     ae4:	33 1f       	adc	r19, r19
     ae6:	0a 94       	dec	r0
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <printIOStr+0x108>
     aea:	82 23       	and	r24, r18
     aec:	93 23       	and	r25, r19
     aee:	00 2e       	mov	r0, r16
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <printIOStr+0x11c>
     af2:	95 95       	asr	r25
     af4:	87 95       	ror	r24
     af6:	0a 94       	dec	r0
     af8:	e2 f7       	brpl	.-8      	; 0xaf2 <printIOStr+0x118>
     afa:	89 2b       	or	r24, r25
     afc:	69 f0       	breq	.+26     	; 0xb18 <printIOStr+0x13e>
     afe:	4a e0       	ldi	r20, 0x0A	; 10
     b00:	be 01       	movw	r22, r28
     b02:	6b 5e       	subi	r22, 0xEB	; 235
     b04:	7f 4f       	sbci	r23, 0xFF	; 255
     b06:	c8 01       	movw	r24, r16
     b08:	03 97       	sbiw	r24, 0x03	; 3
     b0a:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
     b0e:	bc 01       	movw	r22, r24
     b10:	ce 01       	movw	r24, r28
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <strcat>
     b18:	0f 5f       	subi	r16, 0xFF	; 255
     b1a:	1f 4f       	sbci	r17, 0xFF	; 255
     b1c:	08 30       	cpi	r16, 0x08	; 8
     b1e:	11 05       	cpc	r17, r1
     b20:	d1 f6       	brne	.-76     	; 0xad6 <printIOStr+0xfc>
	LCD_puts(buffer,20);
     b22:	64 e1       	ldi	r22, 0x14	; 20
     b24:	ce 01       	movw	r24, r28
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
}
     b2c:	6b 96       	adiw	r28, 0x1b	; 27
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	cf 90       	pop	r12
     b48:	08 95       	ret

00000b4a <printMTZStr>:

static inline void printMTZStr(unsigned int MTZon,unsigned int MTZoff)
{
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	6b 97       	sbiw	r28, 0x1b	; 27
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	7c 01       	movw	r14, r24
     b68:	8b 01       	movw	r16, r22
	char buffer[20];
	char tmpStr[7];
	//строка 2 "вкл.МТЗ"
	LCD_gotoXY(0,2);
     b6a:	62 e0       	ldi	r22, 0x02	; 2
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
	strcpy_P(buffer,VKL_MTZ);
     b72:	62 e8       	ldi	r22, 0x82	; 130
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <strcpy_P>
	if(MTZon==0xFFFF)strcat_P(buffer,NET);
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f8 06       	cpc	r15, r24
     b84:	19 f4       	brne	.+6      	; 0xb8c <printMTZStr+0x42>
     b86:	67 eb       	ldi	r22, 0xB7	; 183
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	0e c0       	rjmp	.+28     	; 0xba8 <printMTZStr+0x5e>
     b8c:	4a e0       	ldi	r20, 0x0A	; 10
     b8e:	be 01       	movw	r22, r28
     b90:	6b 5e       	subi	r22, 0xEB	; 235
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
     b94:	c7 01       	movw	r24, r14
     b96:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
	else {strcat(buffer,itoa(MTZon,tmpStr,10));strcat_P(buffer,MS);}
     b9a:	bc 01       	movw	r22, r24
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <strcat>
     ba4:	65 e7       	ldi	r22, 0x75	; 117
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <strcat_P>
	LCD_puts(buffer,20);
     bb0:	64 e1       	ldi	r22, 0x14	; 20
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>

	//строка 3 "откл.МТЗ"
	LCD_gotoXY(0,3);
     bba:	63 e0       	ldi	r22, 0x03	; 3
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
	strcpy_P(buffer,OTKL_MTZ);
     bc2:	68 e7       	ldi	r22, 0x78	; 120
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	ce 01       	movw	r24, r28
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <strcpy_P>
	if(MTZoff==0xFFFF)strcat_P(buffer,NET);
     bce:	0f 3f       	cpi	r16, 0xFF	; 255
     bd0:	8f ef       	ldi	r24, 0xFF	; 255
     bd2:	18 07       	cpc	r17, r24
     bd4:	19 f4       	brne	.+6      	; 0xbdc <printMTZStr+0x92>
     bd6:	67 eb       	ldi	r22, 0xB7	; 183
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	0e c0       	rjmp	.+28     	; 0xbf8 <printMTZStr+0xae>
     bdc:	4a e0       	ldi	r20, 0x0A	; 10
     bde:	be 01       	movw	r22, r28
     be0:	6b 5e       	subi	r22, 0xEB	; 235
     be2:	7f 4f       	sbci	r23, 0xFF	; 255
     be4:	c8 01       	movw	r24, r16
     be6:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
	else{strcat(buffer,itoa(MTZoff,tmpStr,10));strcat_P(buffer,MS);}
     bea:	bc 01       	movw	r22, r24
     bec:	ce 01       	movw	r24, r28
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <strcat>
     bf4:	65 e7       	ldi	r22, 0x75	; 117
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <strcat_P>
	LCD_puts(buffer,20);
     c00:	64 e1       	ldi	r22, 0x14	; 20
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>

}
     c0a:	6b 96       	adiw	r28, 0x1b	; 27
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	08 95       	ret

00000c24 <printTimeStr.constprop.3>:
		}
	}
	return 0;
}

static inline void printTimeStr(volatile unsigned char *data, unsigned char x,unsigned char y)
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	64 97       	sbiw	r28, 0x14	; 20
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	fc 01       	movw	r30, r24
{
	char buffer[20];

	sprintf(buffer,"%02u.%02u.%02u  %02u:%02u:%02u",*data,*(data+1),*(data+2),*(data+3),*(data+4),*(data+5));
     c3e:	55 81       	ldd	r21, Z+5	; 0x05
     c40:	44 81       	ldd	r20, Z+4	; 0x04
     c42:	33 81       	ldd	r19, Z+3	; 0x03
     c44:	22 81       	ldd	r18, Z+2	; 0x02
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	80 81       	ld	r24, Z
     c4a:	1f 92       	push	r1
     c4c:	5f 93       	push	r21
     c4e:	1f 92       	push	r1
     c50:	4f 93       	push	r20
     c52:	1f 92       	push	r1
     c54:	3f 93       	push	r19
     c56:	1f 92       	push	r1
     c58:	2f 93       	push	r18
     c5a:	1f 92       	push	r1
     c5c:	9f 93       	push	r25
     c5e:	1f 92       	push	r1
     c60:	8f 93       	push	r24
     c62:	88 ef       	ldi	r24, 0xF8	; 248
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	8e 01       	movw	r16, r28
     c6c:	0f 5f       	subi	r16, 0xFF	; 255
     c6e:	1f 4f       	sbci	r17, 0xFF	; 255
     c70:	1f 93       	push	r17
     c72:	0f 93       	push	r16
     c74:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <sprintf>
	LCD_gotoXY(x,y);
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
	LCD_puts(buffer,20);
     c80:	64 e1       	ldi	r22, 0x14	; 20
     c82:	c8 01       	movw	r24, r16
     c84:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
}
     c92:	64 96       	adiw	r28, 0x14	; 20
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret

00000ca8 <LCD_puts_P>:

void LCD_puts_P(const char *FlashLoc, char nBytes)
{
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	d6 2f       	mov	r29, r22

	for(unsigned char i=0; i<nBytes; i++)
     cb2:	c0 e0       	ldi	r28, 0x00	; 0
     cb4:	cd 17       	cp	r28, r29
     cb6:	a9 f0       	breq	.+42     	; 0xce2 <LCD_puts_P+0x3a>
	{
		if(pgm_read_byte(&FlashLoc[i])==0)			//если дошли до конца строки
     cb8:	fc 01       	movw	r30, r24
     cba:	24 91       	lpm	r18, Z
     cbc:	8c 01       	movw	r16, r24
     cbe:	0f 5f       	subi	r16, 0xFF	; 255
     cc0:	1f 4f       	sbci	r17, 0xFF	; 255
     cc2:	21 11       	cpse	r18, r1
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <LCD_puts_P+0x2c>
		{
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
     cc6:	80 e2       	ldi	r24, 0x20	; 32
     cc8:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
     ccc:	cf 5f       	subi	r28, 0xFF	; 255
     cce:	cd 17       	cp	r28, r29
     cd0:	d0 f3       	brcs	.-12     	; 0xcc6 <LCD_puts_P+0x1e>
     cd2:	07 c0       	rjmp	.+14     	; 0xce2 <LCD_puts_P+0x3a>
			return;
		}
		else LCD_putchar(pgm_read_byte(&FlashLoc[i]));
     cd4:	fc 01       	movw	r30, r24
     cd6:	84 91       	lpm	r24, Z
     cd8:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
}

void LCD_puts_P(const char *FlashLoc, char nBytes)
{

	for(unsigned char i=0; i<nBytes; i++)
     cdc:	cf 5f       	subi	r28, 0xFF	; 255
     cde:	c8 01       	movw	r24, r16
     ce0:	e9 cf       	rjmp	.-46     	; 0xcb4 <LCD_puts_P+0xc>
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
			return;
		}
		else LCD_putchar(pgm_read_byte(&FlashLoc[i]));
	}
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	08 95       	ret

00000cec <printTOUT>:
	return tmpKey;
}

static inline void printTOUT(void)
{
	LCD_gotoXY(0,2);LCD_puts_P(NET_SVYAZI,20);
     cec:	62 e0       	ldi	r22, 0x02	; 2
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
     cf4:	64 e1       	ldi	r22, 0x14	; 20
     cf6:	8b eb       	ldi	r24, 0xBB	; 187
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0c 94 54 06 	jmp	0xca8	; 0xca8 <LCD_puts_P>

00000cfe <printMenuHeader>:
static void dvx3(void)
{
	printPodmenu(7);
}
static inline void printMenuHeader(PGM_P name)
{
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	ec 01       	movw	r28, r24
	//прорисовываем заголовок "NAME:"
	LCD_clr();
     d04:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clr>
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
     d08:	ce 01       	movw	r24, r28
     d0a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__strlen_P>
	LCD_puts_P(name,strlen_P(name));
     d0e:	68 2f       	mov	r22, r24
     d10:	ce 01       	movw	r24, r28
     d12:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
	LCD_putchar(0x3A);
     d16:	8a e3       	ldi	r24, 0x3A	; 58
}
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
static inline void printMenuHeader(PGM_P name)
{
	//прорисовываем заголовок "NAME:"
	LCD_clr();
	LCD_puts_P(name,strlen_P(name));
	LCD_putchar(0x3A);
     d1c:	0c 94 41 04 	jmp	0x882	; 0x882 <LCD_putchar>

00000d20 <SPI_init>:
#define DD_MOSI DDB5
#define DD_SCK  DDB7
#define DD_CS DDB4

/* Set MOSI and SCK and CS output, all others input */
DDRB |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     d20:	87 b3       	in	r24, 0x17	; 23
     d22:	80 6b       	ori	r24, 0xB0	; 176
     d24:	87 bb       	out	0x17, r24	; 23
//все выходы pullup
PORTB |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     d26:	88 b3       	in	r24, 0x18	; 24
     d28:	80 6b       	ori	r24, 0xB0	; 176
     d2a:	88 bb       	out	0x18, r24	; 24
/* Enable SPI, Master, set clock rate fck/64 (250kHz) SCK в покое=hi, выборка по зад. фронту CPHA=1*/
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<CPOL)|(1<<CPHA);//
     d2c:	8e e5       	ldi	r24, 0x5E	; 94
     d2e:	8d b9       	out	0x0d, r24	; 13
     d30:	08 95       	ret

00000d32 <SPI_transmit>:

unsigned char SPI_transmit(char cData)
{

/* Start transmission */
SPDR = cData;
     d32:	8f b9       	out	0x0f, r24	; 15
SPI_timeout=S_TOUT;
     d34:	88 ee       	ldi	r24, 0xE8	; 232
     d36:	93 e0       	ldi	r25, 0x03	; 3
     d38:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <SPI_timeout+0x1>
     d3c:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <SPI_timeout>

/* Wait for transmission complete */
#warning НЕКОРРЕКТНАЯ ОТРАБОТКА ОШИБКИ (spi.h)

while(!(SPSR & (1<<SPIF))) if(SPI_timeout==0){CAN_ERR=SPI;return -1;}
     d40:	77 99       	sbic	0x0e, 7	; 14
     d42:	0b c0       	rjmp	.+22     	; 0xd5a <SPI_transmit+0x28>
     d44:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <SPI_timeout>
     d48:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <SPI_timeout+0x1>
     d4c:	89 2b       	or	r24, r25
     d4e:	c1 f7       	brne	.-16     	; 0xd40 <SPI_transmit+0xe>
     d50:	86 e0       	ldi	r24, 0x06	; 6
     d52:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	08 95       	ret

return SPDR;
     d5a:	8f b1       	in	r24, 0x0f	; 15
}
     d5c:	08 95       	ret

00000d5e <CAN_getStatus>:
}

static unsigned char CAN_getStatus(void)
{
unsigned char data;
clrBit(CSPINPORT,CSPIN);
     d5e:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0xA0);
     d60:	80 ea       	ldi	r24, 0xA0	; 160
     d62:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
//SPI_transmit(0x00);
data=SPI_transmit(0x00);
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     d6c:	c4 9a       	sbi	0x18, 4	; 24
return data;
}
     d6e:	08 95       	ret

00000d70 <CAN_read>:
	setBit(CSPINPORT,CSPIN);
}
}

static unsigned char CAN_read(unsigned char numOfReg)
{
     d70:	cf 93       	push	r28
     d72:	c8 2f       	mov	r28, r24
unsigned char data;

clrBit(CSPINPORT,CSPIN);
     d74:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x03);  //команда чтения
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(numOfReg);
     d7c:	8c 2f       	mov	r24, r28
     d7e:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
data=SPI_transmit(0x00);
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     d88:	c4 9a       	sbi	0x18, 4	; 24
return data;
}
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <CAN_bitModify>:
SPI_transmit(data);
setBit(CSPINPORT,CSPIN);
}

static void CAN_bitModify(unsigned char numOfReg, unsigned char MASK, unsigned char DATA)
{
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	18 2f       	mov	r17, r24
     d96:	d6 2f       	mov	r29, r22
     d98:	c4 2f       	mov	r28, r20
clrBit(CSPINPORT,CSPIN);
     d9a:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x05);//Команда модификации
     d9c:	85 e0       	ldi	r24, 0x05	; 5
     d9e:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(numOfReg);
     da2:	81 2f       	mov	r24, r17
     da4:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(MASK);
     da8:	8d 2f       	mov	r24, r29
     daa:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(DATA);
     dae:	8c 2f       	mov	r24, r28
     db0:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     db4:	c4 9a       	sbi	0x18, 4	; 24
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	08 95       	ret

00000dbe <CAN_write>:
setBit(CSPINPORT,CSPIN);
return data;
}

static void CAN_write(unsigned char numOfReg, unsigned char data)
{
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	d8 2f       	mov	r29, r24
     dc4:	c6 2f       	mov	r28, r22
clrBit(CSPINPORT,CSPIN);
     dc6:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);  //команда записи
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(numOfReg);
     dce:	8d 2f       	mov	r24, r29
     dd0:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(data);
     dd4:	8c 2f       	mov	r24, r28
     dd6:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     dda:	c4 9a       	sbi	0x18, 4	; 24
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <CANgetPosition>:

signed char CANgetPosition(void)
{
	signed char index;

	CAN_timeout=CAN_TOUT;
     de2:	88 ee       	ldi	r24, 0xE8	; 232
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <CAN_timeout+0x1>
     dea:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <CAN_timeout>
	while(CANRXcounter==0)
     dee:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <CANRXcounter>
     df2:	81 11       	cpse	r24, r1
     df4:	0b c0       	rjmp	.+22     	; 0xe0c <CANgetPosition+0x2a>
	{
		if(CAN_timeout==0) {CAN_ERR=CANTOUT;return -1;};
     df6:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <CAN_timeout>
     dfa:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <CAN_timeout+0x1>
     dfe:	89 2b       	or	r24, r25
     e00:	b1 f7       	brne	.-20     	; 0xdee <CANgetPosition+0xc>
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	08 95       	ret
	}
	asm ("cli");
     e0c:	f8 94       	cli
	CANRXcounter--;
     e0e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <CANRXcounter>
     e12:	81 50       	subi	r24, 0x01	; 1
     e14:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <CANRXcounter>
	asm ("sei");
     e18:	78 94       	sei
	index=CANRDindex;
     e1a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <CANRDindex>
	if(++CANRDindex == CAN_RX_BUFFER_SIZE)CANRDindex=0;
     e1e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <CANRDindex>
     e22:	9f 5f       	subi	r25, 0xFF	; 255
     e24:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <CANRDindex>
     e28:	9a 30       	cpi	r25, 0x0A	; 10
     e2a:	11 f4       	brne	.+4      	; 0xe30 <CANgetPosition+0x4e>
     e2c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <CANRDindex>
	return index;
}
     e30:	08 95       	ret

00000e32 <CAN_gets>:
	if(CAN_ERR)return -1;
	return 1;
}
//получить строку
char *CAN_gets(char *str,unsigned char length)
{
     e32:	9f 92       	push	r9
     e34:	af 92       	push	r10
     e36:	bf 92       	push	r11
     e38:	cf 92       	push	r12
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	d8 2f       	mov	r29, r24
     e4a:	c9 2f       	mov	r28, r25
     e4c:	b6 2e       	mov	r11, r22
	unsigned char i=CANgetPosition(),j;
     e4e:	0e 94 f1 06 	call	0xde2	; 0xde2 <CANgetPosition>
	unsigned long int ID=CANRXbuf[i].ID;
     e52:	9d e0       	ldi	r25, 0x0D	; 13
     e54:	89 9f       	mul	r24, r25
     e56:	f0 01       	movw	r30, r0
     e58:	11 24       	eor	r1, r1
     e5a:	e8 50       	subi	r30, 0x08	; 8
     e5c:	fb 4f       	sbci	r31, 0xFB	; 251
     e5e:	c0 80       	ld	r12, Z
     e60:	d1 80       	ldd	r13, Z+1	; 0x01
     e62:	e2 80       	ldd	r14, Z+2	; 0x02
     e64:	f3 80       	ldd	r15, Z+3	; 0x03
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
     e66:	0d 2f       	mov	r16, r29
     e68:	1c 2f       	mov	r17, r28
	{
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
     e6a:	9d e0       	ldi	r25, 0x0D	; 13
     e6c:	a9 2e       	mov	r10, r25
     e6e:	2d e0       	ldi	r18, 0x0D	; 13
     e70:	92 2e       	mov	r9, r18
	unsigned char i=CANgetPosition(),j;
	unsigned long int ID=CANRXbuf[i].ID;
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
     e72:	b1 10       	cpse	r11, r1
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <CAN_gets+0x4a>
			str+=CANRXbuf[i].dataLength;
			i=CANgetPosition();
			if(CAN_ERR) return NULL;
			if(CANRXbuf[i].ID != ID){CAN_ERR=CANID;return NULL;}//LCDsendChar('e')
		}
		else return tmp;
     e76:	8d 2f       	mov	r24, r29
     e78:	9c 2f       	mov	r25, r28
     e7a:	41 c0       	rjmp	.+130    	; 0xefe <CAN_gets+0xcc>
     e7c:	40 e0       	ldi	r20, 0x00	; 0
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
	{
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
     e7e:	a8 9e       	mul	r10, r24
     e80:	f0 01       	movw	r30, r0
     e82:	11 24       	eor	r1, r1
     e84:	e8 50       	subi	r30, 0x08	; 8
     e86:	fb 4f       	sbci	r31, 0xFB	; 251
     e88:	bf 01       	movw	r22, r30
     e8a:	6c 5f       	subi	r22, 0xFC	; 252
     e8c:	7f 4f       	sbci	r23, 0xFF	; 255
     e8e:	db 01       	movw	r26, r22
     e90:	8c 91       	ld	r24, X
     e92:	24 2f       	mov	r18, r20
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	48 17       	cp	r20, r24
     e98:	60 f4       	brcc	.+24     	; 0xeb2 <CAN_gets+0x80>
     e9a:	cf 01       	movw	r24, r30
     e9c:	82 0f       	add	r24, r18
     e9e:	93 1f       	adc	r25, r19
     ea0:	dc 01       	movw	r26, r24
     ea2:	15 96       	adiw	r26, 0x05	; 5
     ea4:	8c 91       	ld	r24, X
     ea6:	20 0f       	add	r18, r16
     ea8:	31 1f       	adc	r19, r17
     eaa:	d9 01       	movw	r26, r18
     eac:	8c 93       	st	X, r24
     eae:	4f 5f       	subi	r20, 0xFF	; 255
     eb0:	ee cf       	rjmp	.-36     	; 0xe8e <CAN_gets+0x5c>
		if(str[j-1] !=0)	//последний принятый символ не \0
     eb2:	20 0f       	add	r18, r16
     eb4:	31 1f       	adc	r19, r17
     eb6:	d9 01       	movw	r26, r18
     eb8:	11 97       	sbiw	r26, 0x01	; 1
     eba:	8c 91       	ld	r24, X
     ebc:	88 23       	and	r24, r24
     ebe:	d9 f2       	breq	.-74     	; 0xe76 <CAN_gets+0x44>
		{
			str+=CANRXbuf[i].dataLength;
     ec0:	84 81       	ldd	r24, Z+4	; 0x04
     ec2:	08 0f       	add	r16, r24
     ec4:	11 1d       	adc	r17, r1
			i=CANgetPosition();
     ec6:	0e 94 f1 06 	call	0xde2	; 0xde2 <CANgetPosition>
			if(CAN_ERR) return NULL;
     eca:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <CAN_ERR>
     ece:	91 11       	cpse	r25, r1
     ed0:	14 c0       	rjmp	.+40     	; 0xefa <CAN_gets+0xc8>
			if(CANRXbuf[i].ID != ID){CAN_ERR=CANID;return NULL;}//LCDsendChar('e')
     ed2:	98 9e       	mul	r9, r24
     ed4:	f0 01       	movw	r30, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	e8 50       	subi	r30, 0x08	; 8
     eda:	fb 4f       	sbci	r31, 0xFB	; 251
     edc:	40 81       	ld	r20, Z
     ede:	51 81       	ldd	r21, Z+1	; 0x01
     ee0:	62 81       	ldd	r22, Z+2	; 0x02
     ee2:	73 81       	ldd	r23, Z+3	; 0x03
     ee4:	ba 94       	dec	r11
     ee6:	c4 16       	cp	r12, r20
     ee8:	d5 06       	cpc	r13, r21
     eea:	e6 06       	cpc	r14, r22
     eec:	f7 06       	cpc	r15, r23
     eee:	09 f2       	breq	.-126    	; 0xe72 <CAN_gets+0x40>
     ef0:	83 e0       	ldi	r24, 0x03	; 3
     ef2:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <CAN_gets+0xcc>
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
		if(str[j-1] !=0)	//последний принятый символ не \0
		{
			str+=CANRXbuf[i].dataLength;
			i=CANgetPosition();
			if(CAN_ERR) return NULL;
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
		}
		else return tmp;
	}
	if(length==0){CAN_ERR=CANSTROVF;return NULL;}
	return tmp;
}
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	bf 90       	pop	r11
     f10:	af 90       	pop	r10
     f12:	9f 90       	pop	r9
     f14:	08 95       	ret

00000f16 <CAN_loadTXbuf>:
	CAN_ERR=0;
}


signed char CAN_loadTXbuf(unsigned long int ID, unsigned char dataLenght, unsigned char *data, unsigned char CAN_TX_MSG_SETTING)
{//ID==EID<28:11> SID<10:0>
     f16:	af 92       	push	r10
     f18:	bf 92       	push	r11
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	6b 01       	movw	r12, r22
     f2c:	7c 01       	movw	r14, r24
     f2e:	14 2f       	mov	r17, r20
     f30:	59 01       	movw	r10, r18
#define EIDFLG  CAN_TX_MSG_SETTING & 0x08 //флаг расширенного идентификатора

unsigned char i,j;
unsigned char SIDL = 0;
unsigned char status=CAN_getStatus();
     f32:	0e 94 af 06 	call	0xd5e	; 0xd5e <CAN_getStatus>


//SID<2:0> == ID & 0x00000007
//EID<17:16> == (ID >> 27) & 0x00000003
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);
     f36:	dc 2d       	mov	r29, r12
     f38:	d2 95       	swap	r29
     f3a:	dd 0f       	add	r29, r29
     f3c:	d0 7e       	andi	r29, 0xE0	; 224
     f3e:	90 2f       	mov	r25, r16
     f40:	98 70       	andi	r25, 0x08	; 8
     f42:	d9 2b       	or	r29, r25
     f44:	b7 01       	movw	r22, r14
     f46:	a6 01       	movw	r20, r12
     f48:	eb e1       	ldi	r30, 0x1B	; 27
     f4a:	76 95       	lsr	r23
     f4c:	67 95       	ror	r22
     f4e:	57 95       	ror	r21
     f50:	47 95       	ror	r20
     f52:	ea 95       	dec	r30
     f54:	d1 f7       	brne	.-12     	; 0xf4a <CAN_loadTXbuf+0x34>
     f56:	43 70       	andi	r20, 0x03	; 3
     f58:	d4 2b       	or	r29, r20


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
  {
  if( chkBit(status,(i*2)) )continue; //если установлен флаг TXREQ -значить буфер занят
     f5a:	86 ff       	sbrs	r24, 6
     f5c:	0b c0       	rjmp	.+22     	; 0xf74 <CAN_loadTXbuf+0x5e>
     f5e:	84 ff       	sbrs	r24, 4
     f60:	0b c0       	rjmp	.+22     	; 0xf78 <CAN_loadTXbuf+0x62>
     f62:	82 fd       	sbrc	r24, 2
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <CAN_loadTXbuf+0x54>
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
     f66:	c1 e0       	ldi	r28, 0x01	; 1
     f68:	08 c0       	rjmp	.+16     	; 0xf7a <CAN_loadTXbuf+0x64>
  {
  if( chkBit(status,(i*2)) )continue; //если установлен флаг TXREQ -значить буфер занят
  else break;
  }

if(i==0) {CAN_ERR=CANBUFOVF;return -1;} //всё занято
     f6a:	85 e0       	ldi	r24, 0x05	; 5
     f6c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
     f70:	8f ef       	ldi	r24, 0xFF	; 255
     f72:	58 c0       	rjmp	.+176    	; 0x1024 <CAN_loadTXbuf+0x10e>
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
     f74:	c3 e0       	ldi	r28, 0x03	; 3
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <CAN_loadTXbuf+0x64>
     f78:	c2 e0       	ldi	r28, 0x02	; 2
  }

if(i==0) {CAN_ERR=CANBUFOVF;return -1;} //всё занято
//в результате i-это номер свободного буфера с более высоким приоритетом

asm("cli");
     f7a:	f8 94       	cli
clrBit(CSPINPORT,CSPIN);
     f7c:	c4 98       	cbi	0x18, 4	; 24
//запись регистров командой write
SPI_transmit(0x02);                   	//Команда записи
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(i*0x10+0x20);             	//начало записи(TXBnCTRL)-регистр конфигурации
     f84:	8c 2f       	mov	r24, r28
     f86:	82 95       	swap	r24
     f88:	80 7f       	andi	r24, 0xF0	; 240
     f8a:	80 5e       	subi	r24, 0xE0	; 224
     f8c:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(CAN_TX_MSG_SETTING & 0x03);//приоритет сообщения
     f90:	80 2f       	mov	r24, r16
     f92:	83 70       	andi	r24, 0x03	; 3
     f94:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
//запись ID
SPI_transmit((ID >> 3)  & 0x000000FF); 	//SIDH
     f98:	d7 01       	movw	r26, r14
     f9a:	c6 01       	movw	r24, r12
     f9c:	23 e0       	ldi	r18, 0x03	; 3
     f9e:	b6 95       	lsr	r27
     fa0:	a7 95       	ror	r26
     fa2:	97 95       	ror	r25
     fa4:	87 95       	ror	r24
     fa6:	2a 95       	dec	r18
     fa8:	d1 f7       	brne	.-12     	; 0xf9e <CAN_loadTXbuf+0x88>
     faa:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(SIDL);
     fae:	8d 2f       	mov	r24, r29
     fb0:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
if(1/*EIDFLG*/)	//EID пишем палюбому(запись по регистрам идет подряд)
{
	SPI_transmit((ID >> 19) & 0x000000FF);	//EID
     fb4:	d7 01       	movw	r26, r14
     fb6:	c6 01       	movw	r24, r12
     fb8:	33 e1       	ldi	r19, 0x13	; 19
     fba:	b6 95       	lsr	r27
     fbc:	a7 95       	ror	r26
     fbe:	97 95       	ror	r25
     fc0:	87 95       	ror	r24
     fc2:	3a 95       	dec	r19
     fc4:	d1 f7       	brne	.-12     	; 0xfba <CAN_loadTXbuf+0xa4>
     fc6:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
	SPI_transmit((ID >> 11) & 0x000000FF);
     fca:	d7 01       	movw	r26, r14
     fcc:	c6 01       	movw	r24, r12
     fce:	4b e0       	ldi	r20, 0x0B	; 11
     fd0:	b6 95       	lsr	r27
     fd2:	a7 95       	ror	r26
     fd4:	97 95       	ror	r25
     fd6:	87 95       	ror	r24
     fd8:	4a 95       	dec	r20
     fda:	d1 f7       	brne	.-12     	; 0xfd0 <CAN_loadTXbuf+0xba>
     fdc:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
}

//запись количества байт в сообщении
SPI_transmit(dataLenght);
     fe0:	81 2f       	mov	r24, r17
     fe2:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
     fe6:	75 01       	movw	r14, r10
//запись данных(не более 8 байт)
for(j=0;(j<dataLenght) && j<8;j++) SPI_transmit(*(data+j));
     fe8:	d0 e0       	ldi	r29, 0x00	; 0
     fea:	d1 17       	cp	r29, r17
     fec:	49 f0       	breq	.+18     	; 0x1000 <CAN_loadTXbuf+0xea>
     fee:	d8 30       	cpi	r29, 0x08	; 8
     ff0:	39 f0       	breq	.+14     	; 0x1000 <CAN_loadTXbuf+0xea>
     ff2:	f7 01       	movw	r30, r14
     ff4:	81 91       	ld	r24, Z+
     ff6:	7f 01       	movw	r14, r30
     ff8:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
     ffc:	df 5f       	subi	r29, 0xFF	; 255
     ffe:	f5 cf       	rjmp	.-22     	; 0xfea <CAN_loadTXbuf+0xd4>
setBit(CSPINPORT,CSPIN);
    1000:	c4 9a       	sbi	0x18, 4	; 24

//автоматический запрос на передачу
if(CAN_TX_MSG_SETTING & 0x04) CAN_RTS(i-1);
    1002:	02 ff       	sbrs	r16, 2
    1004:	0d c0       	rjmp	.+26     	; 0x1020 <CAN_loadTXbuf+0x10a>

static void CAN_RTS(unsigned char numOfBuf) //request to send
{
if(numOfBuf < 3)
{
	clrBit(CSPINPORT,CSPIN);
    1006:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(0x80 | (1<<numOfBuf));
    1008:	2f ef       	ldi	r18, 0xFF	; 255
    100a:	2c 0f       	add	r18, r28
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <CAN_loadTXbuf+0xfe>
    1012:	88 0f       	add	r24, r24
    1014:	2a 95       	dec	r18
    1016:	ea f7       	brpl	.-6      	; 0x1012 <CAN_loadTXbuf+0xfc>
    1018:	80 68       	ori	r24, 0x80	; 128
    101a:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
	setBit(CSPINPORT,CSPIN);
    101e:	c4 9a       	sbi	0x18, 4	; 24
for(j=0;(j<dataLenght) && j<8;j++) SPI_transmit(*(data+j));
setBit(CSPINPORT,CSPIN);

//автоматический запрос на передачу
if(CAN_TX_MSG_SETTING & 0x04) CAN_RTS(i-1);
asm("sei");
    1020:	78 94       	sei
return i; //если все ОК возвращаем номер буфера
    1022:	8c 2f       	mov	r24, r28
}
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	bf 90       	pop	r11
    1036:	af 90       	pop	r10
    1038:	08 95       	ret

0000103a <CAN_puts>:
	return 1;
}

//отсыл строки
signed char CAN_puts(char *str, unsigned char length, unsigned long int ID)	//посылаем строку с /0 на конце
{
    103a:	8f 92       	push	r8
    103c:	9f 92       	push	r9
    103e:	af 92       	push	r10
    1040:	bf 92       	push	r11
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	7c 01       	movw	r14, r24
    1050:	c6 2f       	mov	r28, r22
    1052:	49 01       	movw	r8, r18
    1054:	5a 01       	movw	r10, r20
	for(unsigned char i=0;i<length/8;i++)
    1056:	16 2f       	mov	r17, r22
    1058:	16 95       	lsr	r17
    105a:	16 95       	lsr	r17
    105c:	16 95       	lsr	r17
    105e:	d0 e0       	ldi	r29, 0x00	; 0
    1060:	d1 17       	cp	r29, r17
    1062:	91 f0       	breq	.+36     	; 0x1088 <CAN_puts+0x4e>
	{
		CAN_loadTXbuf(ID,8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME );//LCDsendChar+'0'& CAN_TX_NO_RTS
    1064:	0f ef       	ldi	r16, 0xFF	; 255
    1066:	97 01       	movw	r18, r14
    1068:	48 e0       	ldi	r20, 0x08	; 8
    106a:	c5 01       	movw	r24, r10
    106c:	b4 01       	movw	r22, r8
    106e:	0e 94 8b 07 	call	0xf16	; 0xf16 <CAN_loadTXbuf>
		if(CAN_ERR)return -1;
    1072:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CAN_ERR>
    1076:	88 23       	and	r24, r24
    1078:	11 f0       	breq	.+4      	; 0x107e <CAN_puts+0x44>
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	13 c0       	rjmp	.+38     	; 0x10a4 <CAN_puts+0x6a>
		str+=8;
    107e:	88 e0       	ldi	r24, 0x08	; 8
    1080:	e8 0e       	add	r14, r24
    1082:	f1 1c       	adc	r15, r1
}

//отсыл строки
signed char CAN_puts(char *str, unsigned char length, unsigned long int ID)	//посылаем строку с /0 на конце
{
	for(unsigned char i=0;i<length/8;i++)
    1084:	df 5f       	subi	r29, 0xFF	; 255
    1086:	ec cf       	rjmp	.-40     	; 0x1060 <CAN_puts+0x26>
	{
		CAN_loadTXbuf(ID,8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME );//LCDsendChar+'0'& CAN_TX_NO_RTS
		if(CAN_ERR)return -1;
		str+=8;
	}
	if(length%8)CAN_loadTXbuf(ID,length%8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME);
    1088:	4c 2f       	mov	r20, r28
    108a:	47 70       	andi	r20, 0x07	; 7
    108c:	31 f0       	breq	.+12     	; 0x109a <CAN_puts+0x60>
    108e:	0f ef       	ldi	r16, 0xFF	; 255
    1090:	97 01       	movw	r18, r14
    1092:	c5 01       	movw	r24, r10
    1094:	b4 01       	movw	r22, r8
    1096:	0e 94 8b 07 	call	0xf16	; 0xf16 <CAN_loadTXbuf>
	if(CAN_ERR)return -1;
    109a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CAN_ERR>
    109e:	81 11       	cpse	r24, r1
    10a0:	ec cf       	rjmp	.-40     	; 0x107a <CAN_puts+0x40>
	return 1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
}
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	bf 90       	pop	r11
    10b2:	af 90       	pop	r10
    10b4:	9f 90       	pop	r9
    10b6:	8f 90       	pop	r8
    10b8:	08 95       	ret

000010ba <CAN_readRXbuf>:
asm("sei");
return i; //если все ОК возвращаем номер буфера
}

volatile unsigned char *CAN_readRXbuf(volatile unsigned long int *ID, volatile unsigned char *data, volatile unsigned char *dataLen, unsigned char *CAN_RX_MSG_FLAGS)
{
    10ba:	2f 92       	push	r2
    10bc:	3f 92       	push	r3
    10be:	4f 92       	push	r4
    10c0:	5f 92       	push	r5
    10c2:	6f 92       	push	r6
    10c4:	7f 92       	push	r7
    10c6:	8f 92       	push	r8
    10c8:	9f 92       	push	r9
    10ca:	af 92       	push	r10
    10cc:	bf 92       	push	r11
    10ce:	cf 92       	push	r12
    10d0:	df 92       	push	r13
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <CAN_readRXbuf+0x26>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <CAN_readRXbuf+0x28>
    10e2:	1f 92       	push	r1
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	1c 01       	movw	r2, r24
    10ea:	8b 01       	movw	r16, r22
    10ec:	5d 83       	std	Y+5, r21	; 0x05
    10ee:	4c 83       	std	Y+4, r20	; 0x04
    10f0:	79 01       	movw	r14, r18
#define EID ( EID0 | EID8<<8 | (SIDL&0x03)<<16 )

//поиск заполненного буфера
for(i=0;i<2;i++)
  {
  if( CAN_getStatus() & (1<<i)  ) break;
    10f2:	0e 94 af 06 	call	0xd5e	; 0xd5e <CAN_getStatus>
    10f6:	80 fd       	sbrc	r24, 0
    10f8:	07 c0       	rjmp	.+14     	; 0x1108 <CAN_readRXbuf+0x4e>
    10fa:	0e 94 af 06 	call	0xd5e	; 0xd5e <CAN_getStatus>
    10fe:	81 fd       	sbrc	r24, 1
    1100:	05 c0       	rjmp	.+10     	; 0x110c <CAN_readRXbuf+0x52>
  }
// i-содержит номер буфера
if(i==2)return 0;//если все буферы пусты возвращаем 0
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	91 c0       	rjmp	.+290    	; 0x122a <CAN_readRXbuf+0x170>

#define SID ( SIDL>>5 | SIDH<<3 )
#define EID ( EID0 | EID8<<8 | (SIDL&0x03)<<16 )

//поиск заполненного буфера
for(i=0;i<2;i++)
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	01 c0       	rjmp	.+2      	; 0x110e <CAN_readRXbuf+0x54>
    110c:	81 e0       	ldi	r24, 0x01	; 1
  if( CAN_getStatus() & (1<<i)  ) break;
  }
// i-содержит номер буфера
if(i==2)return 0;//если все буферы пусты возвращаем 0

clrBit(CSPINPORT,CSPIN);
    110e:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit( 0x90 | (i<<2) );// команда чтения с SIDH
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	80 69       	ori	r24, 0x90	; 144
    111c:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SIDH = SPI_transmit(0x00);
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
    1126:	88 2e       	mov	r8, r24
    1128:	91 2c       	mov	r9, r1
    112a:	a1 2c       	mov	r10, r1
    112c:	b1 2c       	mov	r11, r1
SIDL = SPI_transmit(0x00);
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	48 2e       	mov	r4, r24
    1138:	51 2c       	mov	r5, r1
    113a:	61 2c       	mov	r6, r1
    113c:	71 2c       	mov	r7, r1

EID8 = SPI_transmit(0x00);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
    1144:	8a 83       	std	Y+2, r24	; 0x02
EID0 = SPI_transmit(0x00);
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
    114c:	8b 83       	std	Y+3, r24	; 0x03
*dataLen = SPI_transmit(0x00);
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
    1154:	ec 81       	ldd	r30, Y+4	; 0x04
    1156:	fd 81       	ldd	r31, Y+5	; 0x05
    1158:	80 83       	st	Z, r24
    115a:	1d 82       	std	Y+5, r1	; 0x05
    115c:	1c 82       	std	Y+4, r1	; 0x04
    115e:	cc 80       	ldd	r12, Y+4	; 0x04
    1160:	dd 80       	ldd	r13, Y+5	; 0x05
    1162:	c0 0e       	add	r12, r16
    1164:	d1 1e       	adc	r13, r17

for(i=0;i<8;i++) *(data+i) = SPI_transmit(0x00);
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
    116c:	f6 01       	movw	r30, r12
    116e:	80 83       	st	Z, r24
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	9d 83       	std	Y+5, r25	; 0x05
    1178:	8c 83       	std	Y+4, r24	; 0x04
    117a:	08 97       	sbiw	r24, 0x08	; 8
    117c:	81 f7       	brne	.-32     	; 0x115e <CAN_readRXbuf+0xa4>
setBit(CSPINPORT,CSPIN);
    117e:	c4 9a       	sbi	0x18, 4	; 24

if((SIDL & 0x08) ==0) EID8=EID0=0;	//если идентификатор не расширенный обнуляем EID
    1180:	99 81       	ldd	r25, Y+1	; 0x01
    1182:	93 ff       	sbrs	r25, 3
    1184:	0b c0       	rjmp	.+22     	; 0x119c <CAN_readRXbuf+0xe2>
clrBit(CSPINPORT,CSPIN);
SPI_transmit( 0x90 | (i<<2) );// команда чтения с SIDH
SIDH = SPI_transmit(0x00);
SIDL = SPI_transmit(0x00);

EID8 = SPI_transmit(0x00);
    1186:	ea 81       	ldd	r30, Y+2	; 0x02
    1188:	4e 2f       	mov	r20, r30
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	70 e0       	ldi	r23, 0x00	; 0
EID0 = SPI_transmit(0x00);
    1190:	fb 81       	ldd	r31, Y+3	; 0x03
    1192:	8f 2f       	mov	r24, r31
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a0 e0       	ldi	r26, 0x00	; 0
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	06 c0       	rjmp	.+12     	; 0x11a8 <CAN_readRXbuf+0xee>
*dataLen = SPI_transmit(0x00);

for(i=0;i<8;i++) *(data+i) = SPI_transmit(0x00);
setBit(CSPINPORT,CSPIN);

if((SIDL & 0x08) ==0) EID8=EID0=0;	//если идентификатор не расширенный обнуляем EID
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	dc 01       	movw	r26, r24
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	ba 01       	movw	r22, r20

*ID=0;
    11a8:	f1 01       	movw	r30, r2
    11aa:	10 82       	st	Z, r1
    11ac:	11 82       	std	Z+1, r1	; 0x01
    11ae:	12 82       	std	Z+2, r1	; 0x02
    11b0:	13 82       	std	Z+3, r1	; 0x03
*ID= EID<<11 | SID;
    11b2:	29 81       	ldd	r18, Y+1	; 0x01
    11b4:	23 70       	andi	r18, 0x03	; 3
    11b6:	a2 2b       	or	r26, r18
    11b8:	76 2f       	mov	r23, r22
    11ba:	65 2f       	mov	r22, r21
    11bc:	54 2f       	mov	r21, r20
    11be:	44 27       	eor	r20, r20
    11c0:	48 2b       	or	r20, r24
    11c2:	59 2b       	or	r21, r25
    11c4:	6a 2b       	or	r22, r26
    11c6:	7b 2b       	or	r23, r27
    11c8:	ab e0       	ldi	r26, 0x0B	; 11
    11ca:	44 0f       	add	r20, r20
    11cc:	55 1f       	adc	r21, r21
    11ce:	66 1f       	adc	r22, r22
    11d0:	77 1f       	adc	r23, r23
    11d2:	aa 95       	dec	r26
    11d4:	d1 f7       	brne	.-12     	; 0x11ca <CAN_readRXbuf+0x110>
    11d6:	b5 e0       	ldi	r27, 0x05	; 5
    11d8:	76 94       	lsr	r7
    11da:	67 94       	ror	r6
    11dc:	57 94       	ror	r5
    11de:	47 94       	ror	r4
    11e0:	ba 95       	dec	r27
    11e2:	d1 f7       	brne	.-12     	; 0x11d8 <CAN_readRXbuf+0x11e>
    11e4:	83 e0       	ldi	r24, 0x03	; 3
    11e6:	88 0c       	add	r8, r8
    11e8:	99 1c       	adc	r9, r9
    11ea:	aa 1c       	adc	r10, r10
    11ec:	bb 1c       	adc	r11, r11
    11ee:	8a 95       	dec	r24
    11f0:	d1 f7       	brne	.-12     	; 0x11e6 <CAN_readRXbuf+0x12c>
    11f2:	84 28       	or	r8, r4
    11f4:	95 28       	or	r9, r5
    11f6:	a6 28       	or	r10, r6
    11f8:	b7 28       	or	r11, r7
    11fa:	48 29       	or	r20, r8
    11fc:	59 29       	or	r21, r9
    11fe:	6a 29       	or	r22, r10
    1200:	7b 29       	or	r23, r11
    1202:	40 83       	st	Z, r20
    1204:	51 83       	std	Z+1, r21	; 0x01
    1206:	62 83       	std	Z+2, r22	; 0x02
    1208:	73 83       	std	Z+3, r23	; 0x03

*CAN_RX_MSG_FLAGS=0;
    120a:	f7 01       	movw	r30, r14
    120c:	10 82       	st	Z, r1
*CAN_RX_MSG_FLAGS|=CAN_read(0x2D) & CAN_RX_OVF; //ошибка переполнения
    120e:	8d e2       	ldi	r24, 0x2D	; 45
    1210:	0e 94 b8 06 	call	0xd70	; 0xd70 <CAN_read>
    1214:	80 7c       	andi	r24, 0xC0	; 192
    1216:	f7 01       	movw	r30, r14
    1218:	90 81       	ld	r25, Z
    121a:	89 2b       	or	r24, r25
    121c:	80 83       	st	Z, r24

if(*CAN_RX_MSG_FLAGS & CAN_RX_OVF );//PORTC |= 1<<3;

CAN_bitModify(0x2D,0xC0,0x00);            //сброс флага переполнения
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	60 ec       	ldi	r22, 0xC0	; 192
    1222:	8d e2       	ldi	r24, 0x2D	; 45
    1224:	0e 94 c7 06 	call	0xd8e	; 0xd8e <CAN_bitModify>
return data;
    1228:	c8 01       	movw	r24, r16
}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	df 90       	pop	r13
    1242:	cf 90       	pop	r12
    1244:	bf 90       	pop	r11
    1246:	af 90       	pop	r10
    1248:	9f 90       	pop	r9
    124a:	8f 90       	pop	r8
    124c:	7f 90       	pop	r7
    124e:	6f 90       	pop	r6
    1250:	5f 90       	pop	r5
    1252:	4f 90       	pop	r4
    1254:	3f 90       	pop	r3
    1256:	2f 90       	pop	r2
    1258:	08 95       	ret

0000125a <CAN_readMessage>:



//чтение сообщения из "железного" буфера в программный
signed char CAN_readMessage(void)
{
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	1f 92       	push	r1
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
	unsigned char msg_flags=0;
    1264:	19 82       	std	Y+1, r1	; 0x01

	CAN_readRXbuf(&CANRXbuf[CANRWindex].ID, CANRXbuf[CANRWindex].data, &CANRXbuf[CANRWindex].dataLength, &msg_flags);
    1266:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <CANRWindex>
    126a:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <CANRWindex>
    126e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <CANRWindex>
    1272:	8d e0       	ldi	r24, 0x0D	; 13
    1274:	84 9f       	mul	r24, r20
    1276:	a0 01       	movw	r20, r0
    1278:	11 24       	eor	r1, r1
    127a:	44 50       	subi	r20, 0x04	; 4
    127c:	5b 4f       	sbci	r21, 0xFB	; 251
    127e:	86 9f       	mul	r24, r22
    1280:	b0 01       	movw	r22, r0
    1282:	11 24       	eor	r1, r1
    1284:	63 50       	subi	r22, 0x03	; 3
    1286:	7b 4f       	sbci	r23, 0xFB	; 251
    1288:	89 9f       	mul	r24, r25
    128a:	c0 01       	movw	r24, r0
    128c:	11 24       	eor	r1, r1
    128e:	9e 01       	movw	r18, r28
    1290:	2f 5f       	subi	r18, 0xFF	; 255
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
    1294:	88 50       	subi	r24, 0x08	; 8
    1296:	9b 4f       	sbci	r25, 0xFB	; 251
    1298:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CAN_readRXbuf>

	if(++CANRWindex==CAN_RX_BUFFER_SIZE)   CANRWindex=0;
    129c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <CANRWindex>
    12a0:	8f 5f       	subi	r24, 0xFF	; 255
    12a2:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <CANRWindex>
    12a6:	8a 30       	cpi	r24, 0x0A	; 10
    12a8:	11 f4       	brne	.+4      	; 0x12ae <CAN_readMessage+0x54>
    12aa:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <CANRWindex>
	if((++CANRXcounter==CAN_RX_BUFFER_SIZE)) {CANRXcounter=0;CAN_ERR=CANBUFOVF;return -1;}	//переполнение программного буфера
    12ae:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <CANRXcounter>
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
    12b4:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <CANRXcounter>
    12b8:	8a 30       	cpi	r24, 0x0A	; 10
    12ba:	19 f4       	brne	.+6      	; 0x12c2 <CAN_readMessage+0x68>
    12bc:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <CANRXcounter>
    12c0:	03 c0       	rjmp	.+6      	; 0x12c8 <CAN_readMessage+0x6e>
	if(msg_flags & CAN_RX_OVF){CAN_ERR=CANBUFOVF;return -1;}								//переполнение аппаратног буфера
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	80 7c       	andi	r24, 0xC0	; 192
    12c6:	29 f0       	breq	.+10     	; 0x12d2 <CAN_readMessage+0x78>
    12c8:	85 e0       	ldi	r24, 0x05	; 5
    12ca:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <CAN_readMessage+0x7a>
	return 1;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
}
    12d4:	0f 90       	pop	r0
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <CAN_setMask>:
CAN_bitModify(0x2D,0xC0,0x00);            //сброс флага переполнения
return data;
}

void CAN_setMask(unsigned char addrOfMask,unsigned long int MASK)
{//MASK==EID<28:11> SID<10:0>
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	d8 2f       	mov	r29, r24
    12ea:	6a 01       	movw	r12, r20
    12ec:	7b 01       	movw	r14, r22
unsigned char RXM_SIDL = ((MASK & 0x00000007) << 5) | ((MASK >> 27) & 0x00000003);
    12ee:	db 01       	movw	r26, r22
    12f0:	ca 01       	movw	r24, r20
    12f2:	2b e1       	ldi	r18, 0x1B	; 27
    12f4:	b6 95       	lsr	r27
    12f6:	a7 95       	ror	r26
    12f8:	97 95       	ror	r25
    12fa:	87 95       	ror	r24
    12fc:	2a 95       	dec	r18
    12fe:	d1 f7       	brne	.-12     	; 0x12f4 <CAN_setMask+0x18>
    1300:	c8 2f       	mov	r28, r24
    1302:	c3 70       	andi	r28, 0x03	; 3
    1304:	84 2f       	mov	r24, r20
    1306:	82 95       	swap	r24
    1308:	88 0f       	add	r24, r24
    130a:	80 7e       	andi	r24, 0xE0	; 224
    130c:	c8 2b       	or	r28, r24
//unsigned char i=0;

//if(addrOfMask>0x24)return;

clrBit(CSPINPORT,CSPIN);
    130e:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);        //команда записи
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(addrOfMask);   //начальная ячейка
    1316:	8d 2f       	mov	r24, r29
    1318:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit((MASK >> 3)  & 0x000000FF);
    131c:	d7 01       	movw	r26, r14
    131e:	c6 01       	movw	r24, r12
    1320:	33 e0       	ldi	r19, 0x03	; 3
    1322:	b6 95       	lsr	r27
    1324:	a7 95       	ror	r26
    1326:	97 95       	ror	r25
    1328:	87 95       	ror	r24
    132a:	3a 95       	dec	r19
    132c:	d1 f7       	brne	.-12     	; 0x1322 <CAN_setMask+0x46>
    132e:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(RXM_SIDL);
    1332:	8c 2f       	mov	r24, r28
    1334:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit((MASK >> 19) & 0x000000FF);
    1338:	d7 01       	movw	r26, r14
    133a:	c6 01       	movw	r24, r12
    133c:	43 e1       	ldi	r20, 0x13	; 19
    133e:	b6 95       	lsr	r27
    1340:	a7 95       	ror	r26
    1342:	97 95       	ror	r25
    1344:	87 95       	ror	r24
    1346:	4a 95       	dec	r20
    1348:	d1 f7       	brne	.-12     	; 0x133e <CAN_setMask+0x62>
    134a:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit((MASK >> 11) & 0x000000FF);
    134e:	d7 01       	movw	r26, r14
    1350:	c6 01       	movw	r24, r12
    1352:	5b e0       	ldi	r21, 0x0B	; 11
    1354:	b6 95       	lsr	r27
    1356:	a7 95       	ror	r26
    1358:	97 95       	ror	r25
    135a:	87 95       	ror	r24
    135c:	5a 95       	dec	r21
    135e:	d1 f7       	brne	.-12     	; 0x1354 <CAN_setMask+0x78>
    1360:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    1364:	c4 9a       	sbi	0x18, 4	; 24
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	08 95       	ret

00001374 <CAN_setFilter>:

void CAN_setFilter(unsigned char addrOfFilter, unsigned long int FILTER, unsigned char CAN_TYPE_FRAME)
{//FILTER==EID<28:11> SID<10:0>
    1374:	cf 92       	push	r12
    1376:	df 92       	push	r13
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	d8 2f       	mov	r29, r24
    1382:	6a 01       	movw	r12, r20
    1384:	7b 01       	movw	r14, r22
unsigned char RXF_SIDL = ((FILTER & 0x00000007) << 5) | ((FILTER >> 27) & 0x00000003) | (CAN_TYPE_FRAME & 0x08);
    1386:	c4 2f       	mov	r28, r20
    1388:	c2 95       	swap	r28
    138a:	cc 0f       	add	r28, r28
    138c:	c0 7e       	andi	r28, 0xE0	; 224
    138e:	28 70       	andi	r18, 0x08	; 8
    1390:	c2 2b       	or	r28, r18
    1392:	8b e1       	ldi	r24, 0x1B	; 27
    1394:	76 95       	lsr	r23
    1396:	67 95       	ror	r22
    1398:	57 95       	ror	r21
    139a:	47 95       	ror	r20
    139c:	8a 95       	dec	r24
    139e:	d1 f7       	brne	.-12     	; 0x1394 <CAN_setFilter+0x20>
    13a0:	43 70       	andi	r20, 0x03	; 3
    13a2:	c4 2b       	or	r28, r20
//unsigned char i=0;

//if(addrOfFilter>0x18)return;

clrBit(CSPINPORT,CSPIN);
    13a4:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);        //команда записи
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(addrOfFilter); //начальная ячейка
    13ac:	8d 2f       	mov	r24, r29
    13ae:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit((FILTER >> 3)  & 0x000000FF);  //RXF_SIDH
    13b2:	d7 01       	movw	r26, r14
    13b4:	c6 01       	movw	r24, r12
    13b6:	23 e0       	ldi	r18, 0x03	; 3
    13b8:	b6 95       	lsr	r27
    13ba:	a7 95       	ror	r26
    13bc:	97 95       	ror	r25
    13be:	87 95       	ror	r24
    13c0:	2a 95       	dec	r18
    13c2:	d1 f7       	brne	.-12     	; 0x13b8 <CAN_setFilter+0x44>
    13c4:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit(RXF_SIDL);
    13c8:	8c 2f       	mov	r24, r28
    13ca:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit((FILTER >> 19) & 0x000000FF);  //RXF_EID8
    13ce:	d7 01       	movw	r26, r14
    13d0:	c6 01       	movw	r24, r12
    13d2:	33 e1       	ldi	r19, 0x13	; 19
    13d4:	b6 95       	lsr	r27
    13d6:	a7 95       	ror	r26
    13d8:	97 95       	ror	r25
    13da:	87 95       	ror	r24
    13dc:	3a 95       	dec	r19
    13de:	d1 f7       	brne	.-12     	; 0x13d4 <CAN_setFilter+0x60>
    13e0:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
SPI_transmit((FILTER >> 11) & 0x000000FF);  //RXF_EID0
    13e4:	d7 01       	movw	r26, r14
    13e6:	c6 01       	movw	r24, r12
    13e8:	4b e0       	ldi	r20, 0x0B	; 11
    13ea:	b6 95       	lsr	r27
    13ec:	a7 95       	ror	r26
    13ee:	97 95       	ror	r25
    13f0:	87 95       	ror	r24
    13f2:	4a 95       	dec	r20
    13f4:	d1 f7       	brne	.-12     	; 0x13ea <CAN_setFilter+0x76>
    13f6:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    13fa:	c4 9a       	sbi	0x18, 4	; 24
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	08 95       	ret

0000140a <interrupt_init>:


void interrupt_init(void)
{
	//���� ��� ���������� �� CAN
	DDRD &= ~(1<<DDD2);	//PORTD.2 ����
    140a:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= 1<<DDD2;	//pull up
    140c:	92 9a       	sbi	0x12, 2	; 18

	MCUCR &= 0xFC;	//���������� �� ������� ������
    140e:	85 b7       	in	r24, 0x35	; 53
    1410:	8c 7f       	andi	r24, 0xFC	; 252
    1412:	85 bf       	out	0x35, r24	; 53
	GICR |= 0x40;	//INT0 ���
    1414:	8b b7       	in	r24, 0x3b	; 59
    1416:	80 64       	ori	r24, 0x40	; 64
    1418:	8b bf       	out	0x3b, r24	; 59
    141a:	08 95       	ret

0000141c <timers_init>:
	// Input Capture on Falling Edge
	// Timer 1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=0x00;
    141c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x0A; 	// Clock value: 2000 kHz
    141e:	8a e0       	ldi	r24, 0x0A	; 10
    1420:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
    1422:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
    1424:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
    1426:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
    1428:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x07;	//���������� 1 ��
    142a:	87 e0       	ldi	r24, 0x07	; 7
    142c:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0xD0;
    142e:	80 ed       	ldi	r24, 0xD0	; 208
    1430:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;	//
    1432:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
    1434:	18 bc       	out	0x28, r1	; 40

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK |= 1<<OCIE1A;// | 1<<OCIE1B;
    1436:	89 b7       	in	r24, 0x39	; 57
    1438:	80 61       	ori	r24, 0x10	; 16
    143a:	89 bf       	out	0x39, r24	; 57
    143c:	08 95       	ret

0000143e <CAN_init>:
}

signed char CAN_init(unsigned char mode)
  {
    143e:	cf 93       	push	r28
    1440:	c8 2f       	mov	r28, r24
  signed char result;

  SPI_init();
    1442:	0e 94 90 06 	call	0xd20	; 0xd20 <SPI_init>
  //��������� ����������
  //DDRB &= ~(1<<2);	//PORTB.2 ����
  //PORTB |= 1<<2;		//pull up
  //GICR=0x00;	//���������� �� ������� ������

  CSPINDDR |= 1<<CSPIN; 	//��� CS �����
    1446:	bc 9a       	sbi	0x17, 4	; 23
  CSPINPORT |= 1<<CSPIN;	// Hi-level
    1448:	c4 9a       	sbi	0x18, 4	; 24

static void CAN_reset(void)
{
clrBit(CSPINPORT,CSPIN);
    144a:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0xC0);
    144c:	80 ec       	ldi	r24, 0xC0	; 192
    144e:	0e 94 99 06 	call	0xd32	; 0xd32 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    1452:	c4 9a       	sbi	0x18, 4	; 24

  CAN_reset();

  //��������� �������� (125 kib/s)
    CAN_bitModify(CNF2,0x80,0x80); //���������� ���������� ���������������� PHSEG2 (BTLMODE==1)
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	60 e8       	ldi	r22, 0x80	; 128
    1458:	89 e2       	ldi	r24, 0x29	; 41
    145a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <CAN_bitModify>
    CAN_write(CNF1,0x05);// SJW==1Tq, BRP==6;
    145e:	65 e0       	ldi	r22, 0x05	; 5
    1460:	8a e2       	ldi	r24, 0x2A	; 42
    1462:	0e 94 df 06 	call	0xdbe	; 0xdbe <CAN_write>
    CAN_write(CNF2,0x89);// BTLMODE==1,SAM==0,PRSEG2==2Tq,PHSEG1==2Tq ;
    1466:	69 e8       	ldi	r22, 0x89	; 137
    1468:	89 e2       	ldi	r24, 0x29	; 41
    146a:	0e 94 df 06 	call	0xdbe	; 0xdbe <CAN_write>
    CAN_write(CNF3,0x02);// PHSEG2==3Tq ;
    146e:	62 e0       	ldi	r22, 0x02	; 2
    1470:	88 e2       	ldi	r24, 0x28	; 40
    1472:	0e 94 df 06 	call	0xdbe	; 0xdbe <CAN_write>
  //��������� ������� 5 ��� SID
  CAN_bitModify(RXB1CTRL,0b01100111,0b00100101);
  #endif

  //��������� ���������� �� ������ ����� �������
  CAN_bitModify(CANINTE,0x03,0x03);
    1476:	43 e0       	ldi	r20, 0x03	; 3
    1478:	63 e0       	ldi	r22, 0x03	; 3
    147a:	8b e2       	ldi	r24, 0x2B	; 43
    147c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <CAN_bitModify>
return (CAN_read(CANSTAT) & 0xE0);
}

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0
    1480:	4c 2f       	mov	r20, r28
    1482:	6f ef       	ldi	r22, 0xFF	; 255
    1484:	8f e0       	ldi	r24, 0x0F	; 15
    1486:	0e 94 c7 06 	call	0xd8e	; 0xd8e <CAN_bitModify>
return data;
}

static unsigned char CAN_getOpMode(void)
{
return (CAN_read(CANSTAT) & 0xE0);
    148a:	8e e0       	ldi	r24, 0x0E	; 14
    148c:	0e 94 b8 06 	call	0xd70	; 0xd70 <CAN_read>

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0

if( (CAN_getOpMode() )!=CAN_MODE ) return -1;
    1490:	80 7e       	andi	r24, 0xE0	; 224
    1492:	c8 13       	cpse	r28, r24
    1494:	02 c0       	rjmp	.+4      	; 0x149a <CAN_init+0x5c>
else return 1;//
    1496:	c1 e0       	ldi	r28, 0x01	; 1
    1498:	01 c0       	rjmp	.+2      	; 0x149c <CAN_init+0x5e>

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0

if( (CAN_getOpMode() )!=CAN_MODE ) return -1;
    149a:	cf ef       	ldi	r28, 0xFF	; 255
//  will not occur and the new message will be moved into
//  RXB1, regardless of the acceptance criteria of RXB1.


  //set rollover-mode
  CAN_bitModify(RXB0CTRL,0x04,0x04);
    149c:	44 e0       	ldi	r20, 0x04	; 4
    149e:	64 e0       	ldi	r22, 0x04	; 4
    14a0:	80 e6       	ldi	r24, 0x60	; 96
    14a2:	0e 94 c7 06 	call	0xd8e	; 0xd8e <CAN_bitModify>

  //set one-shot-mode
  //CAN_bitModify(CANCTRL,0x08,0x08);

  return result;
  }
    14a6:	8c 2f       	mov	r24, r28
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <bki_init>:

void bki_init(void)
{
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	cf 93       	push	r28
	asm("cli");
    14b6:	f8 94       	cli
	//������������� ����������
	DDRC &= ~((1<<7) | (1<<6) | (1<<5));//�����
    14b8:	84 b3       	in	r24, 0x14	; 20
    14ba:	8f 71       	andi	r24, 0x1F	; 31
    14bc:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<7) | (1<<6) | (1<<5);	//Pull Up
    14be:	85 b3       	in	r24, 0x15	; 21
    14c0:	80 6e       	ori	r24, 0xE0	; 224
    14c2:	85 bb       	out	0x15, r24	; 21
	DDRD &= ~((1<<5) | (1<<4) | (1<<3));//�����
    14c4:	81 b3       	in	r24, 0x11	; 17
    14c6:	87 7c       	andi	r24, 0xC7	; 199
    14c8:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<5) | (1<<4) | (1<<3);	//Pull Up
    14ca:	82 b3       	in	r24, 0x12	; 18
    14cc:	88 63       	ori	r24, 0x38	; 56
    14ce:	82 bb       	out	0x12, r24	; 18
	DDRA |= (1<<BEEP);					//�������
    14d0:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1<<BEEP);
    14d2:	dc 98       	cbi	0x1b, 4	; 27
	DDRA |= 1<<5;						//��� ����������
    14d4:	d5 9a       	sbi	0x1a, 5	; 26
	PORTA |= 1<<5;
    14d6:	dd 9a       	sbi	0x1b, 5	; 27
	DDRA |= (1<<OUT1) | (1<<OUT2) | (1<<OUT3) | (1<<OUT4);	//����
    14d8:	8a b3       	in	r24, 0x1a	; 26
    14da:	8f 60       	ori	r24, 0x0F	; 15
    14dc:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<OUT1) | (1<<OUT2) | (1<<OUT3) | (1<<OUT4);	//��������
    14de:	8b b3       	in	r24, 0x1b	; 27
    14e0:	8f 60       	ori	r24, 0x0F	; 15
    14e2:	8b bb       	out	0x1b, r24	; 27

	//������������� LCD
	LCD_init();
    14e4:	0e 94 cf 03 	call	0x79e	; 0x79e <LCD_init>
	LCD_visible();
    14e8:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_visible>
	LCD_clr();
    14ec:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clr>

	//����
	TWI_init();
    14f0:	0e 94 a3 01 	call	0x346	; 0x346 <TWI_init>
	rtc_get(&rtc);
    14f4:	82 ef       	ldi	r24, 0xF2	; 242
    14f6:	94 e0       	ldi	r25, 0x04	; 4
    14f8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <rtc_get>
	if(rtc_check()<0){ERROR=RTC;/*return;*/}
    14fc:	0e 94 4e 03 	call	0x69c	; 0x69c <rtc_check>
    1500:	87 ff       	sbrs	r24, 7
    1502:	03 c0       	rjmp	.+6      	; 0x150a <bki_init+0x5e>
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>

	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <eeprom_read_dword>
    1512:	6b 01       	movw	r12, r22
    1514:	7c 01       	movw	r14, r24
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    151e:	c8 2f       	mov	r28, r24
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    1528:	a7 01       	movw	r20, r14
    152a:	96 01       	movw	r18, r12
    152c:	6c 2f       	mov	r22, r28
    152e:	0e 94 0d 1c 	call	0x381a	; 0x381a <MODB_init>

UCSRB |= 1<<RXCIE;	//���������� UARTRX
    1532:	57 9a       	sbi	0x0a, 7	; 10

	interrupt_init();
    1534:	0e 94 05 0a 	call	0x140a	; 0x140a <interrupt_init>
	timers_init();
    1538:	0e 94 0e 0a 	call	0x141c	; 0x141c <timers_init>
	asm("sei");
    153c:	78 94       	sei
    153e:	2f ef       	ldi	r18, 0xFF	; 255
    1540:	89 e6       	ldi	r24, 0x69	; 105
    1542:	98 e1       	ldi	r25, 0x18	; 24
    1544:	21 50       	subi	r18, 0x01	; 1
    1546:	80 40       	sbci	r24, 0x00	; 0
    1548:	90 40       	sbci	r25, 0x00	; 0
    154a:	e1 f7       	brne	.-8      	; 0x1544 <bki_init+0x98>
    154c:	00 c0       	rjmp	.+0      	; 0x154e <bki_init+0xa2>
    154e:	00 00       	nop

	_delay_ms(500);
	if(CAN_init(CAN_MODE_NORMAL)<1){ERROR=CAN;return;}
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	0e 94 1f 0a 	call	0x143e	; 0x143e <CAN_init>
    1556:	18 16       	cp	r1, r24
    1558:	1c f0       	brlt	.+6      	; 0x1560 <bki_init+0xb4>
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>

//	_
//_delay_ms(500);


}
    1560:	cf 91       	pop	r28
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	df 90       	pop	r13
    1568:	cf 90       	pop	r12
    156a:	08 95       	ret

0000156c <ping>:
static inline signed char checkTOUT(unsigned char addr);
signed char aks_for_logic(unsigned char addr);


void ping(void)
{
    156c:	0f 93       	push	r16
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	27 97       	sbiw	r28, 0x07	; 7
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char data[7];

	for(unsigned char i=1;i<MAXQDEV;i++) inSysBDZ[i].flags=1<<FLT;	//перед посылкой команды обнуляем все флаги.Установленный флаг INL будет говорить о том,что ответ принят
    1586:	39 e0       	ldi	r19, 0x09	; 9
    1588:	22 e0       	ldi	r18, 0x02	; 2
    158a:	38 9f       	mul	r19, r24
    158c:	f0 01       	movw	r30, r0
    158e:	39 9f       	mul	r19, r25
    1590:	f0 0d       	add	r31, r0
    1592:	11 24       	eor	r1, r1
    1594:	ed 59       	subi	r30, 0x9D	; 157
    1596:	fe 4f       	sbci	r31, 0xFE	; 254
    1598:	20 87       	std	Z+8, r18	; 0x08
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	83 36       	cpi	r24, 0x63	; 99
    159e:	91 05       	cpc	r25, r1
    15a0:	a1 f7       	brne	.-24     	; 0x158a <ping+0x1e>
	data[0]=PING;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	89 83       	std	Y+1, r24	; 0x01
	//синхронизация времени для БДЗ
	data[1]=rtc.day;
    15a6:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <rtc+0x2>
    15aa:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=rtc.month;
    15ac:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <rtc+0x1>
    15b0:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=rtc.year;
    15b2:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <rtc>
    15b6:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=rtc.hours;
    15b8:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <rtc+0x3>
    15bc:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=rtc.minutes;
    15be:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <rtc+0x4>
    15c2:	8e 83       	std	Y+6, r24	; 0x06
	data[6]=rtc.seconds;
    15c4:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <rtc+0x5>
    15c8:	8f 83       	std	Y+7, r24	; 0x07

	CAN_loadTXbuf(0,7,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    15ca:	07 ef       	ldi	r16, 0xF7	; 247
    15cc:	9e 01       	movw	r18, r28
    15ce:	2f 5f       	subi	r18, 0xFF	; 255
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	47 e0       	ldi	r20, 0x07	; 7
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	cb 01       	movw	r24, r22
    15da:	0e 94 8b 07 	call	0xf16	; 0xf16 <CAN_loadTXbuf>
}
    15de:	27 96       	adiw	r28, 0x07	; 7
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	0f 91       	pop	r16
    15f0:	08 95       	ret

000015f2 <scansys>:


}

static void scansys(void)
{
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <scansys+0xe>
    1600:	00 d0       	rcall	.+0      	; 0x1602 <scansys+0x10>
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
	unsigned char i,j=0;
	char tmpStr[4];

	sys_state |= 1<<SCAN;
    1606:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    160a:	80 61       	ori	r24, 0x10	; 16
    160c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <sys_state>
    1610:	01 e0       	ldi	r16, 0x01	; 1
    1612:	10 e0       	ldi	r17, 0x00	; 0
	for(i=1;i<MAXQDEV;i++) {eeprom_write_byte(&inSysBDZaddr[i],0);inSysBDZ[i].data[7]=0;}
    1614:	99 e0       	ldi	r25, 0x09	; 9
    1616:	f9 2e       	mov	r15, r25
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	c8 01       	movw	r24, r16
    161c:	87 5f       	subi	r24, 0xF7	; 247
    161e:	9f 4f       	sbci	r25, 0xFF	; 255
    1620:	0e 94 77 21 	call	0x42ee	; 0x42ee <eeprom_write_byte>
    1624:	f0 9e       	mul	r15, r16
    1626:	f0 01       	movw	r30, r0
    1628:	f1 9e       	mul	r15, r17
    162a:	f0 0d       	add	r31, r0
    162c:	11 24       	eor	r1, r1
    162e:	ed 59       	subi	r30, 0x9D	; 157
    1630:	fe 4f       	sbci	r31, 0xFE	; 254
    1632:	17 82       	std	Z+7, r1	; 0x07
    1634:	0f 5f       	subi	r16, 0xFF	; 255
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	03 36       	cpi	r16, 0x63	; 99
    163a:	11 05       	cpc	r17, r1
    163c:	69 f7       	brne	.-38     	; 0x1618 <scansys+0x26>
	while(!eeprom_is_ready());
    163e:	e1 99       	sbic	0x1c, 1	; 28
    1640:	fe cf       	rjmp	.-4      	; 0x163e <scansys+0x4c>
	ping();
    1642:	0e 94 b6 0a 	call	0x156c	; 0x156c <ping>
    1646:	2f ef       	ldi	r18, 0xFF	; 255
    1648:	81 ee       	ldi	r24, 0xE1	; 225
    164a:	94 e0       	ldi	r25, 0x04	; 4
    164c:	21 50       	subi	r18, 0x01	; 1
    164e:	80 40       	sbci	r24, 0x00	; 0
    1650:	90 40       	sbci	r25, 0x00	; 0
    1652:	e1 f7       	brne	.-8      	; 0x164c <scansys+0x5a>
    1654:	00 c0       	rjmp	.+0      	; 0x1656 <scansys+0x64>
    1656:	00 00       	nop
	_delay_ms(100);
	LCD_clr();
    1658:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clr>
	LCD_puts_P(SCANIROVANIE,12);
    165c:	6c e0       	ldi	r22, 0x0C	; 12
    165e:	83 e4       	ldi	r24, 0x43	; 67
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
    1666:	18 e0       	ldi	r17, 0x08	; 8
	for(i=0;i<8;i++){LCD_putchar(0x2E);_delay_ms(500);}
    1668:	8e e2       	ldi	r24, 0x2E	; 46
    166a:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
    166e:	2f ef       	ldi	r18, 0xFF	; 255
    1670:	89 e6       	ldi	r24, 0x69	; 105
    1672:	98 e1       	ldi	r25, 0x18	; 24
    1674:	21 50       	subi	r18, 0x01	; 1
    1676:	80 40       	sbci	r24, 0x00	; 0
    1678:	90 40       	sbci	r25, 0x00	; 0
    167a:	e1 f7       	brne	.-8      	; 0x1674 <scansys+0x82>
    167c:	00 c0       	rjmp	.+0      	; 0x167e <scansys+0x8c>
    167e:	00 00       	nop
    1680:	11 50       	subi	r17, 0x01	; 1
    1682:	91 f7       	brne	.-28     	; 0x1668 <scansys+0x76>

	sys_state =0;
    1684:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sys_state>
    1688:	01 e0       	ldi	r16, 0x01	; 1
    168a:	10 e0       	ldi	r17, 0x00	; 0

}

static void scansys(void)
{
	unsigned char i,j=0;
    168c:	f1 2c       	mov	r15, r1
	LCD_clr();
	LCD_puts_P(SCANIROVANIE,12);
	for(i=0;i<8;i++){LCD_putchar(0x2E);_delay_ms(500);}

	sys_state =0;
	for(i=1;i<MAXQDEV;i++) if(inSysBDZ[i].data[7] == i) {writeID(i);j++;}
    168e:	89 e0       	ldi	r24, 0x09	; 9
    1690:	e8 2e       	mov	r14, r24
    1692:	e0 9e       	mul	r14, r16
    1694:	f0 01       	movw	r30, r0
    1696:	e1 9e       	mul	r14, r17
    1698:	f0 0d       	add	r31, r0
    169a:	11 24       	eor	r1, r1
    169c:	ed 59       	subi	r30, 0x9D	; 157
    169e:	fe 4f       	sbci	r31, 0xFE	; 254
    16a0:	67 81       	ldd	r22, Z+7	; 0x07
    16a2:	60 13       	cpse	r22, r16
    16a4:	06 c0       	rjmp	.+12     	; 0x16b2 <scansys+0xc0>
    16a6:	c8 01       	movw	r24, r16
    16a8:	87 5f       	subi	r24, 0xF7	; 247
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	0e 94 77 21 	call	0x42ee	; 0x42ee <eeprom_write_byte>
    16b0:	f3 94       	inc	r15
    16b2:	0f 5f       	subi	r16, 0xFF	; 255
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
    16b6:	03 36       	cpi	r16, 0x63	; 99
    16b8:	11 05       	cpc	r17, r1
    16ba:	59 f7       	brne	.-42     	; 0x1692 <scansys+0xa0>


	LCD_gotoXY(0,2);
    16bc:	62 e0       	ldi	r22, 0x02	; 2
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
	LCD_puts_P(OBNARUZHENO,16);
    16c4:	60 e1       	ldi	r22, 0x10	; 16
    16c6:	83 e9       	ldi	r24, 0x93	; 147
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
    16ce:	4a e0       	ldi	r20, 0x0A	; 10
    16d0:	be 01       	movw	r22, r28
    16d2:	6f 5f       	subi	r22, 0xFF	; 255
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	8f 2d       	mov	r24, r15
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
	LCD_puts(itoa(j,tmpStr,10),3);
    16de:	63 e0       	ldi	r22, 0x03	; 3
    16e0:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
	ping();
    16e4:	0e 94 b6 0a 	call	0x156c	; 0x156c <ping>
    16e8:	2f ef       	ldi	r18, 0xFF	; 255
    16ea:	87 ea       	ldi	r24, 0xA7	; 167
    16ec:	91 e6       	ldi	r25, 0x61	; 97
    16ee:	21 50       	subi	r18, 0x01	; 1
    16f0:	80 40       	sbci	r24, 0x00	; 0
    16f2:	90 40       	sbci	r25, 0x00	; 0
    16f4:	e1 f7       	brne	.-8      	; 0x16ee <scansys+0xfc>
    16f6:	00 c0       	rjmp	.+0      	; 0x16f8 <scansys+0x106>
    16f8:	00 00       	nop
	_delay_ms(2000);
	menuExit=EXITMENU;
    16fa:	80 e3       	ldi	r24, 0x30	; 48
    16fc:	95 e7       	ldi	r25, 0x75	; 117
    16fe:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <menuExit+0x1>
    1702:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <menuExit>
	ERROR=0;
    1706:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <ERROR>

	return ;
}
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	08 95       	ret

00001720 <send_read_arch>:

signed char send_read_arch(unsigned char part,unsigned char addr,unsigned char index)
{
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	00 d0       	rcall	.+0      	; 0x172a <send_read_arch+0xa>
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	16 2f       	mov	r17, r22
	unsigned char data[2]={(part==1)?(RD_ARCH_1):(RD_ARCH_2)};
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	11 f0       	breq	.+4      	; 0x1738 <send_read_arch+0x18>
    1734:	85 e0       	ldi	r24, 0x05	; 5
    1736:	01 c0       	rjmp	.+2      	; 0x173a <send_read_arch+0x1a>
    1738:	84 e0       	ldi	r24, 0x04	; 4
    173a:	89 83       	std	Y+1, r24	; 0x01

	inSysBDZ[addr].flags=1<<FLT;	//перед посылкой команды обнуляем все флаги.Установленный флаг INL будет говорить о том,что ответ принят
    173c:	89 e0       	ldi	r24, 0x09	; 9
    173e:	18 9f       	mul	r17, r24
    1740:	f0 01       	movw	r30, r0
    1742:	11 24       	eor	r1, r1
    1744:	ed 59       	subi	r30, 0x9D	; 157
    1746:	fe 4f       	sbci	r31, 0xFE	; 254
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	80 87       	std	Z+8, r24	; 0x08
	data[1]=index;
    174c:	4a 83       	std	Y+2, r20	; 0x02

	CAN_loadTXbuf((unsigned long int)addr,2,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    174e:	61 2f       	mov	r22, r17
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	07 ef       	ldi	r16, 0xF7	; 247
    1758:	9e 01       	movw	r18, r28
    175a:	2f 5f       	subi	r18, 0xFF	; 255
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	42 e0       	ldi	r20, 0x02	; 2
    1760:	0e 94 8b 07 	call	0xf16	; 0xf16 <CAN_loadTXbuf>
	return 	checkTOUT(addr);
    1764:	81 2f       	mov	r24, r17
    1766:	0e 94 70 01 	call	0x2e0	; 0x2e0 <checkTOUT>
}
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	08 95       	ret

00001778 <send_prog>:

signed char send_prog(unsigned char addr,volatile unsigned char *param)
{
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	00 d0       	rcall	.+0      	; 0x1782 <send_prog+0xa>
    1782:	00 d0       	rcall	.+0      	; 0x1784 <send_prog+0xc>
    1784:	00 d0       	rcall	.+0      	; 0x1786 <send_prog+0xe>
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	18 2f       	mov	r17, r24
	unsigned char data[6]={PROG};
    178c:	86 e0       	ldi	r24, 0x06	; 6
    178e:	9e 01       	movw	r18, r28
    1790:	2f 5f       	subi	r18, 0xFF	; 255
    1792:	3f 4f       	sbci	r19, 0xFF	; 255
    1794:	f9 01       	movw	r30, r18
    1796:	98 2f       	mov	r25, r24
    1798:	11 92       	st	Z+, r1
    179a:	9a 95       	dec	r25
    179c:	e9 f7       	brne	.-6      	; 0x1798 <send_prog+0x20>
    179e:	89 83       	std	Y+1, r24	; 0x01

	if(param != NULL) for(unsigned char i=0;i<6;i++)  data[i]=*(param+i);
    17a0:	61 15       	cp	r22, r1
    17a2:	71 05       	cpc	r23, r1
    17a4:	61 f4       	brne	.+24     	; 0x17be <send_prog+0x46>
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    17a6:	89 e0       	ldi	r24, 0x09	; 9
    17a8:	18 9f       	mul	r17, r24
    17aa:	f0 01       	movw	r30, r0
    17ac:	11 24       	eor	r1, r1
    17ae:	ed 59       	subi	r30, 0x9D	; 157
    17b0:	fe 4f       	sbci	r31, 0xFE	; 254
    17b2:	82 e0       	ldi	r24, 0x02	; 2
    17b4:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,(param != NULL)?(6):(1),data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    17b6:	67 2b       	or	r22, r23
    17b8:	79 f4       	brne	.+30     	; 0x17d8 <send_prog+0x60>
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	0e c0       	rjmp	.+28     	; 0x17da <send_prog+0x62>
    17be:	f9 01       	movw	r30, r18

signed char send_prog(unsigned char addr,volatile unsigned char *param)
{
	unsigned char data[6]={PROG};

	if(param != NULL) for(unsigned char i=0;i<6;i++)  data[i]=*(param+i);
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	db 01       	movw	r26, r22
    17c6:	a8 0f       	add	r26, r24
    17c8:	b9 1f       	adc	r27, r25
    17ca:	4c 91       	ld	r20, X
    17cc:	41 93       	st	Z+, r20
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	86 30       	cpi	r24, 0x06	; 6
    17d2:	91 05       	cpc	r25, r1
    17d4:	b9 f7       	brne	.-18     	; 0x17c4 <send_prog+0x4c>
    17d6:	e7 cf       	rjmp	.-50     	; 0x17a6 <send_prog+0x2e>
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
	CAN_loadTXbuf((unsigned long int)addr,(param != NULL)?(6):(1),data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    17d8:	46 e0       	ldi	r20, 0x06	; 6
    17da:	81 2f       	mov	r24, r17
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a0 e0       	ldi	r26, 0x00	; 0
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	07 ef       	ldi	r16, 0xF7	; 247
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 8b 07 	call	0xf16	; 0xf16 <CAN_loadTXbuf>

	//если программируем широковещательно то ответа не будет
	return (addr==0)?(1):(checkTOUT(addr));
    17ec:	11 23       	and	r17, r17
    17ee:	21 f0       	breq	.+8      	; 0x17f8 <send_prog+0x80>
    17f0:	81 2f       	mov	r24, r17
    17f2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <checkTOUT>
    17f6:	01 c0       	rjmp	.+2      	; 0x17fa <send_prog+0x82>
    17f8:	81 e0       	ldi	r24, 0x01	; 1
}
    17fa:	26 96       	adiw	r28, 0x06	; 6
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	08 95       	ret

00001810 <aks_for_logic>:

signed char aks_for_logic(unsigned char addr)
{
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	00 d0       	rcall	.+0      	; 0x181a <aks_for_logic+0xa>
    181a:	00 d0       	rcall	.+0      	; 0x181c <aks_for_logic+0xc>
    181c:	00 d0       	rcall	.+0      	; 0x181e <aks_for_logic+0xe>
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	18 2f       	mov	r17, r24
	unsigned char data[6]={PROG};
    1824:	86 e0       	ldi	r24, 0x06	; 6
    1826:	9e 01       	movw	r18, r28
    1828:	2f 5f       	subi	r18, 0xFF	; 255
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	f9 01       	movw	r30, r18
    182e:	98 2f       	mov	r25, r24
    1830:	11 92       	st	Z+, r1
    1832:	9a 95       	dec	r25
    1834:	e9 f7       	brne	.-6      	; 0x1830 <aks_for_logic+0x20>
    1836:	89 83       	std	Y+1, r24	; 0x01

	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    1838:	89 e0       	ldi	r24, 0x09	; 9
    183a:	18 9f       	mul	r17, r24
    183c:	f0 01       	movw	r30, r0
    183e:	11 24       	eor	r1, r1
    1840:	ed 59       	subi	r30, 0x9D	; 157
    1842:	fe 4f       	sbci	r31, 0xFE	; 254
    1844:	82 e0       	ldi	r24, 0x02	; 2
    1846:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,2,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    1848:	61 2f       	mov	r22, r17
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	07 ef       	ldi	r16, 0xF7	; 247
    1852:	42 e0       	ldi	r20, 0x02	; 2
    1854:	0e 94 8b 07 	call	0xf16	; 0xf16 <CAN_loadTXbuf>

	//если программируем широковещательно то ответа не будет
	return (addr==0)?(1):(checkTOUT(addr));
    1858:	11 23       	and	r17, r17
    185a:	21 f0       	breq	.+8      	; 0x1864 <aks_for_logic+0x54>
    185c:	81 2f       	mov	r24, r17
    185e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <checkTOUT>
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <aks_for_logic+0x56>
    1864:	81 e0       	ldi	r24, 0x01	; 1
}
    1866:	26 96       	adiw	r28, 0x06	; 6
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <send_cmd>:

signed char send_cmd(unsigned char addr,unsigned char cmd)
{
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	1f 92       	push	r1
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	18 2f       	mov	r17, r24
    188c:	69 83       	std	Y+1, r22	; 0x01
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    188e:	89 e0       	ldi	r24, 0x09	; 9
    1890:	18 9f       	mul	r17, r24
    1892:	f0 01       	movw	r30, r0
    1894:	11 24       	eor	r1, r1
    1896:	ed 59       	subi	r30, 0x9D	; 157
    1898:	fe 4f       	sbci	r31, 0xFE	; 254
    189a:	82 e0       	ldi	r24, 0x02	; 2
    189c:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,1,&cmd,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    189e:	61 2f       	mov	r22, r17
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	07 ef       	ldi	r16, 0xF7	; 247
    18a8:	9e 01       	movw	r18, r28
    18aa:	2f 5f       	subi	r18, 0xFF	; 255
    18ac:	3f 4f       	sbci	r19, 0xFF	; 255
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 8b 07 	call	0xf16	; 0xf16 <CAN_loadTXbuf>

	if(cmd==RESET) return 1;	//не требует ответа
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	82 30       	cpi	r24, 0x02	; 2
    18b8:	21 f0       	breq	.+8      	; 0x18c2 <send_cmd+0x46>
	return 	checkTOUT(addr);
    18ba:	81 2f       	mov	r24, r17
    18bc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <checkTOUT>
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <send_cmd+0x48>
{
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
	CAN_loadTXbuf((unsigned long int)addr,1,&cmd,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);

	if(cmd==RESET) return 1;	//не требует ответа
    18c2:	81 e0       	ldi	r24, 0x01	; 1
	return 	checkTOUT(addr);
}
    18c4:	0f 90       	pop	r0
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	08 95       	ret

000018d0 <__vector_1>:
}


//чтение принятого сообщения из буфера MCP2515 (CAN)
ISR(INT0_vect)
{
    18d0:	1f 92       	push	r1
    18d2:	0f 92       	push	r0
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	0f 92       	push	r0
    18d8:	11 24       	eor	r1, r1
    18da:	8f 92       	push	r8
    18dc:	9f 92       	push	r9
    18de:	af 92       	push	r10
    18e0:	bf 92       	push	r11
    18e2:	cf 92       	push	r12
    18e4:	df 92       	push	r13
    18e6:	ef 92       	push	r14
    18e8:	ff 92       	push	r15
    18ea:	2f 93       	push	r18
    18ec:	3f 93       	push	r19
    18ee:	4f 93       	push	r20
    18f0:	5f 93       	push	r21
    18f2:	6f 93       	push	r22
    18f4:	7f 93       	push	r23
    18f6:	8f 93       	push	r24
    18f8:	9f 93       	push	r25
    18fa:	af 93       	push	r26
    18fc:	bf 93       	push	r27
    18fe:	ef 93       	push	r30
    1900:	ff 93       	push	r31
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	2e 97       	sbiw	r28, 0x0e	; 14
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	cd bf       	out	0x3d, r28	; 61
		unsigned char dataLength;
		unsigned char data[8];
		unsigned char msg_flags;
	}tmpBuf;

	CAN_readRXbuf(&tmpBuf.ID, tmpBuf.data, &tmpBuf.dataLength, &tmpBuf.msg_flags);
    1910:	9e 01       	movw	r18, r28
    1912:	22 5f       	subi	r18, 0xF2	; 242
    1914:	3f 4f       	sbci	r19, 0xFF	; 255
    1916:	ae 01       	movw	r20, r28
    1918:	4b 5f       	subi	r20, 0xFB	; 251
    191a:	5f 4f       	sbci	r21, 0xFF	; 255
    191c:	be 01       	movw	r22, r28
    191e:	6a 5f       	subi	r22, 0xFA	; 250
    1920:	7f 4f       	sbci	r23, 0xFF	; 255
    1922:	ce 01       	movw	r24, r28
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CAN_readRXbuf>
	if(chkBit(sys_state,SCAN)) inSysBDZ[BDZ_ID].data[7]=BDZ_ID;								//если производится сканирование сохраняем откликнувшиеся ID в inSysBDZ[BDZ_ID].data[7]
    192a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    192e:	89 80       	ldd	r8, Y+1	; 0x01
    1930:	9a 80       	ldd	r9, Y+2	; 0x02
    1932:	ab 80       	ldd	r10, Y+3	; 0x03
    1934:	bc 80       	ldd	r11, Y+4	; 0x04
    1936:	84 ff       	sbrs	r24, 4
    1938:	11 c0       	rjmp	.+34     	; 0x195c <__vector_1+0x8c>
    193a:	d5 01       	movw	r26, r10
    193c:	c4 01       	movw	r24, r8
    193e:	8f 77       	andi	r24, 0x7F	; 127
    1940:	99 27       	eor	r25, r25
    1942:	aa 27       	eor	r26, r26
    1944:	bb 27       	eor	r27, r27
    1946:	29 e0       	ldi	r18, 0x09	; 9
    1948:	28 9f       	mul	r18, r24
    194a:	f0 01       	movw	r30, r0
    194c:	29 9f       	mul	r18, r25
    194e:	f0 0d       	add	r31, r0
    1950:	11 24       	eor	r1, r1
    1952:	ed 59       	subi	r30, 0x9D	; 157
    1954:	fe 4f       	sbci	r31, 0xFE	; 254
    1956:	88 2d       	mov	r24, r8
    1958:	8f 77       	andi	r24, 0x7F	; 127
    195a:	87 83       	std	Z+7, r24	; 0x07

	if(readID(BDZ_ID) != BDZ_ID) {ERROR=ID;return;}											//проверка валидности (если ID не зарегистрирован)
    195c:	75 01       	movw	r14, r10
    195e:	64 01       	movw	r12, r8
    1960:	e8 94       	clt
    1962:	c7 f8       	bld	r12, 7
    1964:	dd 24       	eor	r13, r13
    1966:	ee 24       	eor	r14, r14
    1968:	ff 24       	eor	r15, r15
    196a:	c6 01       	movw	r24, r12
    196c:	87 5f       	subi	r24, 0xF7	; 247
    196e:	9f 4f       	sbci	r25, 0xFF	; 255
    1970:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a0 e0       	ldi	r26, 0x00	; 0
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	c8 16       	cp	r12, r24
    197c:	d9 06       	cpc	r13, r25
    197e:	ea 06       	cpc	r14, r26
    1980:	fb 06       	cpc	r15, r27
    1982:	21 f0       	breq	.+8      	; 0x198c <__vector_1+0xbc>
    1984:	84 e0       	ldi	r24, 0x04	; 4
    1986:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>
    198a:	40 c0       	rjmp	.+128    	; 0x1a0c <__vector_1+0x13c>

	setBit(inSysBDZ[BDZ_ID].flags,INL);														//ставим флаг инлайн
    198c:	89 e0       	ldi	r24, 0x09	; 9
    198e:	8c 9d       	mul	r24, r12
    1990:	f0 01       	movw	r30, r0
    1992:	8d 9d       	mul	r24, r13
    1994:	f0 0d       	add	r31, r0
    1996:	11 24       	eor	r1, r1
    1998:	ed 59       	subi	r30, 0x9D	; 157
    199a:	fe 4f       	sbci	r31, 0xFE	; 254
    199c:	80 85       	ldd	r24, Z+8	; 0x08
    199e:	84 60       	ori	r24, 0x04	; 4
    19a0:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,10)==1) setBit(inSysBDZ[BDZ_ID].flags,CONF);
    19a2:	92 fe       	sbrs	r9, 2
    19a4:	03 c0       	rjmp	.+6      	; 0x19ac <__vector_1+0xdc>
    19a6:	80 85       	ldd	r24, Z+8	; 0x08
    19a8:	80 62       	ori	r24, 0x20	; 32
    19aa:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,9) ==0) setBit(inSysBDZ[BDZ_ID].flags,ALM);							//если есть авариz ставим флаг в БДЗ
    19ac:	91 fc       	sbrc	r9, 1
    19ae:	0b c0       	rjmp	.+22     	; 0x19c6 <__vector_1+0xf6>
    19b0:	89 e0       	ldi	r24, 0x09	; 9
    19b2:	8c 9d       	mul	r24, r12
    19b4:	f0 01       	movw	r30, r0
    19b6:	8d 9d       	mul	r24, r13
    19b8:	f0 0d       	add	r31, r0
    19ba:	11 24       	eor	r1, r1
    19bc:	ed 59       	subi	r30, 0x9D	; 157
    19be:	fe 4f       	sbci	r31, 0xFE	; 254
    19c0:	80 85       	ldd	r24, Z+8	; 0x08
    19c2:	81 60       	ori	r24, 0x01	; 1
    19c4:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,8) ==1) clrBit(inSysBDZ[BDZ_ID].flags,FLT);							//если нету неисправности обнуляем флаг в БДЗ
    19c6:	90 fe       	sbrs	r9, 0
    19c8:	0b c0       	rjmp	.+22     	; 0x19e0 <__vector_1+0x110>
    19ca:	89 e0       	ldi	r24, 0x09	; 9
    19cc:	8c 9d       	mul	r24, r12
    19ce:	f0 01       	movw	r30, r0
    19d0:	8d 9d       	mul	r24, r13
    19d2:	f0 0d       	add	r31, r0
    19d4:	11 24       	eor	r1, r1
    19d6:	ed 59       	subi	r30, 0x9D	; 157
    19d8:	fe 4f       	sbci	r31, 0xFE	; 254
    19da:	80 85       	ldd	r24, Z+8	; 0x08
    19dc:	8d 7f       	andi	r24, 0xFD	; 253
    19de:	80 87       	std	Z+8, r24	; 0x08
	//inSysBDZ[BDZ_ID].data[0] = tmpBuf.ID>>8;
	for(unsigned char i=0;i<tmpBuf.dataLength;i++)inSysBDZ[BDZ_ID].data[i] = tmpBuf.data[i];//копируем данные
    19e0:	4d 81       	ldd	r20, Y+5	; 0x05
    19e2:	fe 01       	movw	r30, r28
    19e4:	36 96       	adiw	r30, 0x06	; 6
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	59 e0       	ldi	r21, 0x09	; 9
    19ec:	5c 9d       	mul	r21, r12
    19ee:	90 01       	movw	r18, r0
    19f0:	5d 9d       	mul	r21, r13
    19f2:	30 0d       	add	r19, r0
    19f4:	11 24       	eor	r1, r1
    19f6:	2d 59       	subi	r18, 0x9D	; 157
    19f8:	3e 4f       	sbci	r19, 0xFE	; 254
    19fa:	84 17       	cp	r24, r20
    19fc:	38 f4       	brcc	.+14     	; 0x1a0c <__vector_1+0x13c>
    19fe:	51 91       	ld	r21, Z+
    1a00:	d9 01       	movw	r26, r18
    1a02:	a8 0f       	add	r26, r24
    1a04:	b9 1f       	adc	r27, r25
    1a06:	5c 93       	st	X, r21
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	f7 cf       	rjmp	.-18     	; 0x19fa <__vector_1+0x12a>
}
    1a0c:	2e 96       	adiw	r28, 0x0e	; 14
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	ff 90       	pop	r15
    1a36:	ef 90       	pop	r14
    1a38:	df 90       	pop	r13
    1a3a:	cf 90       	pop	r12
    1a3c:	bf 90       	pop	r11
    1a3e:	af 90       	pop	r10
    1a40:	9f 90       	pop	r9
    1a42:	8f 90       	pop	r8
    1a44:	0f 90       	pop	r0
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	0f 90       	pop	r0
    1a4a:	1f 90       	pop	r1
    1a4c:	18 95       	reti

00001a4e <scanID>:
//	while(1);
	return 3;					//длина сообщения об ошибке фиксирована
}

unsigned char scanID(unsigned char i)
{
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	18 2f       	mov	r17, r24
    1a56:	cc e6       	ldi	r28, 0x6C	; 108
    1a58:	d0 e0       	ldi	r29, 0x00	; 0
	for(unsigned char n=0;n<MAXQDEV;n++)
		if(readIDnew(n)==i) return 0;
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    1a60:	81 17       	cp	r24, r17
    1a62:	39 f0       	breq	.+14     	; 0x1a72 <scanID+0x24>
    1a64:	21 96       	adiw	r28, 0x01	; 1
	return 3;					//длина сообщения об ошибке фиксирована
}

unsigned char scanID(unsigned char i)
{
	for(unsigned char n=0;n<MAXQDEV;n++)
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	cf 3c       	cpi	r28, 0xCF	; 207
    1a6a:	d8 07       	cpc	r29, r24
    1a6c:	b1 f7       	brne	.-20     	; 0x1a5a <scanID+0xc>
		if(readIDnew(n)==i) return 0;
	return 1;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <scanID+0x26>
}

unsigned char scanID(unsigned char i)
{
	for(unsigned char n=0;n<MAXQDEV;n++)
		if(readIDnew(n)==i) return 0;
    1a72:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
}
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	08 95       	ret

00001a7c <scanKBD>:

unsigned char scanKBD(void)
{
	unsigned char kbd = (((PIND&0x38)>>1) | (PINC&0xE0)) & 0xFC;
    1a7c:	20 b3       	in	r18, 0x10	; 16
    1a7e:	83 b3       	in	r24, 0x13	; 19
    1a80:	28 73       	andi	r18, 0x38	; 56
    1a82:	26 95       	lsr	r18
    1a84:	80 7e       	andi	r24, 0xE0	; 224
    1a86:	28 2b       	or	r18, r24
	static unsigned char prevkbd;

	if((kbd)==0xFC){prevkbd=0xFC; return NOKEY;}	//клавиша не нажата,вернули FF
    1a88:	2c 3f       	cpi	r18, 0xFC	; 252
    1a8a:	19 f4       	brne	.+6      	; 0x1a92 <scanKBD+0x16>
    1a8c:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <__data_end>
    1a90:	32 c0       	rjmp	.+100    	; 0x1af6 <scanKBD+0x7a>
//	beep(10);					//пикалка + антидребезг

	if(prevkbd != kbd)
    1a92:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
    1a96:	28 17       	cp	r18, r24
    1a98:	71 f0       	breq	.+28     	; 0x1ab6 <scanKBD+0x3a>
	return NOKEY;						//кнопка не нашлась.типа помеха.
}

static inline void beep(unsigned int lenght)
{
	setBit(PORTA,BEEP);					//пикалка + антидребезг
    1a9a:	dc 9a       	sbi	0x1b, 4	; 27
    1a9c:	8a e0       	ldi	r24, 0x0A	; 10
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	ef e9       	ldi	r30, 0x9F	; 159
    1aa2:	ff e0       	ldi	r31, 0x0F	; 15
    1aa4:	31 97       	sbiw	r30, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <scanKBD+0x28>
    1aa8:	00 c0       	rjmp	.+0      	; 0x1aaa <scanKBD+0x2e>
    1aaa:	00 00       	nop
    1aac:	01 97       	sbiw	r24, 0x01	; 1
	for(unsigned int i=0;i<lenght;i++)_delay_ms(1);
    1aae:	c1 f7       	brne	.-16     	; 0x1aa0 <scanKBD+0x24>
	clrBit(PORTA,BEEP);
    1ab0:	dc 98       	cbi	0x1b, 4	; 27
//	beep(10);					//пикалка + антидребезг

	if(prevkbd != kbd)
	{
		beep(10);					//пикалка + антидребезг
		prevkbd = kbd;
    1ab2:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <__data_end>
	}

	menuExit=EXITMENU;						//взводим таймер автовыхода
    1ab6:	80 e3       	ldi	r24, 0x30	; 48
    1ab8:	95 e7       	ldi	r25, 0x75	; 117
    1aba:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <menuExit+0x1>
    1abe:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <menuExit>
    1ac2:	82 e0       	ldi	r24, 0x02	; 2
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
	for(char i=2;i<8;i++)
	{
		if(chkBit(kbd,i) ==0)return i;	//найдена нажатая кнопка.вернули код кнопки
    1ac6:	61 e0       	ldi	r22, 0x01	; 1
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	ab 01       	movw	r20, r22
    1ace:	08 2e       	mov	r0, r24
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <scanKBD+0x5a>
    1ad2:	44 0f       	add	r20, r20
    1ad4:	55 1f       	adc	r21, r21
    1ad6:	0a 94       	dec	r0
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <scanKBD+0x56>
    1ada:	42 23       	and	r20, r18
    1adc:	53 23       	and	r21, r19
    1ade:	08 2e       	mov	r0, r24
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <scanKBD+0x6a>
    1ae2:	55 95       	asr	r21
    1ae4:	47 95       	ror	r20
    1ae6:	0a 94       	dec	r0
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <scanKBD+0x66>
    1aea:	45 2b       	or	r20, r21
    1aec:	29 f0       	breq	.+10     	; 0x1af8 <scanKBD+0x7c>
    1aee:	01 96       	adiw	r24, 0x01	; 1
		beep(10);					//пикалка + антидребезг
		prevkbd = kbd;
	}

	menuExit=EXITMENU;						//взводим таймер автовыхода
	for(char i=2;i<8;i++)
    1af0:	88 30       	cpi	r24, 0x08	; 8
    1af2:	91 05       	cpc	r25, r1
    1af4:	59 f7       	brne	.-42     	; 0x1acc <scanKBD+0x50>
	{
		if(chkBit(kbd,i) ==0)return i;	//найдена нажатая кнопка.вернули код кнопки
	}
	return NOKEY;						//кнопка не нашлась.типа помеха.
    1af6:	8f ef       	ldi	r24, 0xFF	; 255
}
    1af8:	08 95       	ret

00001afa <whileKey>:
	LCD_puts(buffer,20);

}

static inline unsigned char whileKey(void)
{
    1afa:	cf 93       	push	r28
	unsigned char tmpKey;

	while((tmpKey=scanKBD())==NOKEY) if(menuExit==0)return NOKEY;	//ждем нажатия кнопки или автовыхода
    1afc:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <scanKBD>
    1b00:	c8 2f       	mov	r28, r24
    1b02:	8f 3f       	cpi	r24, 0xFF	; 255
    1b04:	41 f4       	brne	.+16     	; 0x1b16 <whileKey+0x1c>
    1b06:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <menuExit>
    1b0a:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <menuExit+0x1>
    1b0e:	89 2b       	or	r24, r25
    1b10:	a9 f7       	brne	.-22     	; 0x1afc <whileKey+0x2>
    1b12:	8f ef       	ldi	r24, 0xFF	; 255
    1b14:	05 c0       	rjmp	.+10     	; 0x1b20 <whileKey+0x26>
	while(scanKBD()!=NOKEY);										//...отпускания кнопки
    1b16:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <scanKBD>
    1b1a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b1c:	e1 f7       	brne	.-8      	; 0x1b16 <whileKey+0x1c>

static inline unsigned char whileKey(void)
{
	unsigned char tmpKey;

	while((tmpKey=scanKBD())==NOKEY) if(menuExit==0)return NOKEY;	//ждем нажатия кнопки или автовыхода
    1b1e:	8c 2f       	mov	r24, r28
	while(scanKBD()!=NOKEY);										//...отпускания кнопки

	return tmpKey;
}
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <numm>:

	return 0;
}

static unsigned char numm(void)
{
    1b24:	cf 92       	push	r12
    1b26:	df 92       	push	r13
    1b28:	ef 92       	push	r14
    1b2a:	ff 92       	push	r15
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <numm+0x10>
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
	unsigned char i=0;
	printMenuHeader(NUMM);	//прорисовываем заголовок
    1b38:	81 e5       	ldi	r24, 0x51	; 81
    1b3a:	92 e0       	ldi	r25, 0x02	; 2
    1b3c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>
	return 0;
}

static unsigned char numm(void)
{
	unsigned char i=0;
    1b40:	10 e0       	ldi	r17, 0x00	; 0
	printMenuHeader(NUMM);	//прорисовываем заголовок
	while (1)
	{
		char str[2];
		LCD_gotoXY(0,2);
		sprintf(str,"%02d",i);
    1b42:	87 e1       	ldi	r24, 0x17	; 23
    1b44:	e8 2e       	mov	r14, r24
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	f8 2e       	mov	r15, r24
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	6c 01       	movw	r12, r24
	unsigned char i=0;
	printMenuHeader(NUMM);	//прорисовываем заголовок
	while (1)
	{
		char str[2];
		LCD_gotoXY(0,2);
    1b50:	62 e0       	ldi	r22, 0x02	; 2
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		sprintf(str,"%02d",i);
    1b58:	1f 92       	push	r1
    1b5a:	1f 93       	push	r17
    1b5c:	ff 92       	push	r15
    1b5e:	ef 92       	push	r14
    1b60:	df 92       	push	r13
    1b62:	cf 92       	push	r12
    1b64:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <sprintf>
		LCD_puts(str,4);
    1b68:	64 e0       	ldi	r22, 0x04	; 4
    1b6a:	c6 01       	movw	r24, r12
    1b6c:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1b70:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	85 30       	cpi	r24, 0x05	; 5
    1b82:	c9 f0       	breq	.+50     	; 0x1bb6 <numm+0x92>
    1b84:	68 f4       	brcc	.+26     	; 0x1ba0 <numm+0x7c>
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	19 f7       	brne	.-58     	; 0x1b50 <numm+0x2c>
		break;
		case NOKEY:asm("jmp 0");
		break;
		}
	}
}
    1b8a:	81 2f       	mov	r24, r17
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	df 90       	pop	r13
    1b9c:	cf 90       	pop	r12
    1b9e:	08 95       	ret
		char str[2];
		LCD_gotoXY(0,2);
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1ba0:	86 30       	cpi	r24, 0x06	; 6
    1ba2:	29 f0       	breq	.+10     	; 0x1bae <numm+0x8a>
    1ba4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ba6:	a1 f6       	brne	.-88     	; 0x1b50 <numm+0x2c>
		break;
		case UP:if(i==99) i=0; else i++;
		break;
		case ENT:return i;	//выход по ENT (отсылка новых параметров)
		break;
		case NOKEY:asm("jmp 0");
    1ba8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    1bac:	d1 cf       	rjmp	.-94     	; 0x1b50 <numm+0x2c>
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(i==0) i=99; else i--;
    1bae:	11 23       	and	r17, r17
    1bb0:	31 f0       	breq	.+12     	; 0x1bbe <numm+0x9a>
    1bb2:	11 50       	subi	r17, 0x01	; 1
    1bb4:	cd cf       	rjmp	.-102    	; 0x1b50 <numm+0x2c>
		break;
		case UP:if(i==99) i=0; else i++;
    1bb6:	13 36       	cpi	r17, 0x63	; 99
    1bb8:	21 f0       	breq	.+8      	; 0x1bc2 <numm+0x9e>
    1bba:	1f 5f       	subi	r17, 0xFF	; 255
    1bbc:	c9 cf       	rjmp	.-110    	; 0x1b50 <numm+0x2c>
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(i==0) i=99; else i--;
    1bbe:	13 e6       	ldi	r17, 0x63	; 99
    1bc0:	c7 cf       	rjmp	.-114    	; 0x1b50 <numm+0x2c>
		break;
		case UP:if(i==99) i=0; else i++;
    1bc2:	10 e0       	ldi	r17, 0x00	; 0
		case ENT:return i;	//выход по ENT (отсылка новых параметров)
		break;
		case NOKEY:asm("jmp 0");
		break;
		}
	}
    1bc4:	c5 cf       	rjmp	.-118    	; 0x1b50 <numm+0x2c>

00001bc6 <change_param>:
		}
	}
}

static void change_param(unsigned char nParam)
{
    1bc6:	4f 92       	push	r4
    1bc8:	5f 92       	push	r5
    1bca:	6f 92       	push	r6
    1bcc:	7f 92       	push	r7
    1bce:	8f 92       	push	r8
    1bd0:	9f 92       	push	r9
    1bd2:	af 92       	push	r10
    1bd4:	bf 92       	push	r11
    1bd6:	cf 92       	push	r12
    1bd8:	df 92       	push	r13
    1bda:	ef 92       	push	r14
    1bdc:	ff 92       	push	r15
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <change_param+0x22>
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <change_param+0x24>
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <change_param+0x26>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	48 2e       	mov	r4, r24
	signed char numBDZ=0;	//кол-во инлайновых БДЗ;
	unsigned char addr=0,step;
	signed int param=0,max,staroe=0;

	scansys();
    1bf2:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <scansys>
    1bf6:	01 e0       	ldi	r16, 0x01	; 1
    1bf8:	10 e0       	ldi	r17, 0x00	; 0
}

static void change_param(unsigned char nParam)
{
	signed char numBDZ=0;	//кол-во инлайновых БДЗ;
	unsigned char addr=0,step;
    1bfa:	51 2c       	mov	r5, r1
	}
}

static void change_param(unsigned char nParam)
{
	signed char numBDZ=0;	//кол-во инлайновых БДЗ;
    1bfc:	f1 2c       	mov	r15, r1
	signed int param=0,max,staroe=0;

	scansys();
	//считаем кол-во БДЗ инлайн
	for(unsigned char i=1;i<MAXQDEV;i++)
		if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL))
    1bfe:	49 e0       	ldi	r20, 0x09	; 9
    1c00:	e4 2e       	mov	r14, r20
    1c02:	c8 01       	movw	r24, r16
    1c04:	87 5f       	subi	r24, 0xF7	; 247
    1c06:	9f 4f       	sbci	r25, 0xFF	; 255
    1c08:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    1c0c:	80 13       	cpse	r24, r16
    1c0e:	0f c0       	rjmp	.+30     	; 0x1c2e <change_param+0x68>
    1c10:	e0 9e       	mul	r14, r16
    1c12:	f0 01       	movw	r30, r0
    1c14:	e1 9e       	mul	r14, r17
    1c16:	f0 0d       	add	r31, r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	ed 59       	subi	r30, 0x9D	; 157
    1c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1e:	90 85       	ldd	r25, Z+8	; 0x08
    1c20:	92 ff       	sbrs	r25, 2
    1c22:	05 c0       	rjmp	.+10     	; 0x1c2e <change_param+0x68>
		{
			numBDZ++;
    1c24:	f3 94       	inc	r15
			if(numBDZ==1) addr=readID(i); //если в сети 1 БДЗ, то запоминаем его адресс. если найдет еще БДЗ, адрес дальше будет перезаписан
    1c26:	21 e0       	ldi	r18, 0x01	; 1
    1c28:	f2 12       	cpse	r15, r18
    1c2a:	01 c0       	rjmp	.+2      	; 0x1c2e <change_param+0x68>
    1c2c:	58 2e       	mov	r5, r24
    1c2e:	0f 5f       	subi	r16, 0xFF	; 255
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char addr=0,step;
	signed int param=0,max,staroe=0;

	scansys();
	//считаем кол-во БДЗ инлайн
	for(unsigned char i=1;i<MAXQDEV;i++)
    1c32:	03 36       	cpi	r16, 0x63	; 99
    1c34:	11 05       	cpc	r17, r1
    1c36:	29 f7       	brne	.-54     	; 0x1c02 <change_param+0x3c>
		if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL))
		{
			numBDZ++;
			if(numBDZ==1) addr=readID(i); //если в сети 1 БДЗ, то запоминаем его адресс. если найдет еще БДЗ, адрес дальше будет перезаписан
		}
	if (numBDZ==0) return;
    1c38:	ff 20       	and	r15, r15
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <change_param+0x78>
    1c3c:	49 c1       	rjmp	.+658    	; 0x1ed0 <change_param+0x30a>
	if (numBDZ>1) addr=numm();//адрес БДЗ в котором будем менять, если addr=0 значит запрос широковещательный
    1c3e:	31 e0       	ldi	r19, 0x01	; 1
    1c40:	3f 15       	cp	r19, r15
    1c42:	1c f4       	brge	.+6      	; 0x1c4a <change_param+0x84>
    1c44:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <numm>
    1c48:	58 2e       	mov	r5, r24

	if(nParam==0 && addr==0) {printUNAVALIABLE();_delay_ms(2000);return;} //нельзя менять адрес во всех БДЗ разом
    1c4a:	41 10       	cpse	r4, r1
    1c4c:	13 c0       	rjmp	.+38     	; 0x1c74 <change_param+0xae>
    1c4e:	51 10       	cpse	r5, r1
    1c50:	13 c0       	rjmp	.+38     	; 0x1c78 <change_param+0xb2>
	LCD_gotoXY(0,2);LCD_puts_P(NET_SVYAZI,20);
}

static inline void printUNAVALIABLE(void)
{
	LCD_gotoXY(0,2);LCD_puts_P(NEDOSTUPNO,20);
    1c52:	62 e0       	ldi	r22, 0x02	; 2
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    1c5a:	64 e1       	ldi	r22, 0x14	; 20
    1c5c:	84 e5       	ldi	r24, 0x54	; 84
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
    1c64:	8f ef       	ldi	r24, 0xFF	; 255
    1c66:	97 ea       	ldi	r25, 0xA7	; 167
    1c68:	e1 e6       	ldi	r30, 0x61	; 97
    1c6a:	81 50       	subi	r24, 0x01	; 1
    1c6c:	90 40       	sbci	r25, 0x00	; 0
    1c6e:	e0 40       	sbci	r30, 0x00	; 0
    1c70:	e1 f7       	brne	.-8      	; 0x1c6a <change_param+0xa4>
    1c72:	1b c0       	rjmp	.+54     	; 0x1caa <change_param+0xe4>
	if (numBDZ==0) return;
	if (numBDZ>1) addr=numm();//адрес БДЗ в котором будем менять, если addr=0 значит запрос широковещательный

	if(nParam==0 && addr==0) {printUNAVALIABLE();_delay_ms(2000);return;} //нельзя менять адрес во всех БДЗ разом
	//если запрос не широковещательный или если в сети 1 БДЗ, то считываем показания БДЗ под № "addr".(если БДЗ 1, то addr=0)
	if (addr!=0)
    1c74:	55 20       	and	r5, r5
    1c76:	e1 f0       	breq	.+56     	; 0x1cb0 <change_param+0xea>
	{
		if((send_prog(addr,NULL) <0)||(inSysBDZ[addr].data[0] !=PROG))	{printTOUT();_delay_ms(2000);return;}
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	85 2d       	mov	r24, r5
    1c7e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <send_prog>
    1c82:	87 fd       	sbrc	r24, 7
    1c84:	09 c0       	rjmp	.+18     	; 0x1c98 <change_param+0xd2>
    1c86:	29 e0       	ldi	r18, 0x09	; 9
    1c88:	52 9e       	mul	r5, r18
    1c8a:	f0 01       	movw	r30, r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	ed 59       	subi	r30, 0x9D	; 157
    1c90:	fe 4f       	sbci	r31, 0xFE	; 254
    1c92:	80 81       	ld	r24, Z
    1c94:	86 30       	cpi	r24, 0x06	; 6
    1c96:	61 f0       	breq	.+24     	; 0x1cb0 <change_param+0xea>
    1c98:	0e 94 76 06 	call	0xcec	; 0xcec <printTOUT>
    1c9c:	3f ef       	ldi	r19, 0xFF	; 255
    1c9e:	87 ea       	ldi	r24, 0xA7	; 167
    1ca0:	91 e6       	ldi	r25, 0x61	; 97
    1ca2:	31 50       	subi	r19, 0x01	; 1
    1ca4:	80 40       	sbci	r24, 0x00	; 0
    1ca6:	90 40       	sbci	r25, 0x00	; 0
    1ca8:	e1 f7       	brne	.-8      	; 0x1ca2 <change_param+0xdc>
    1caa:	00 c0       	rjmp	.+0      	; 0x1cac <change_param+0xe6>
    1cac:	00 00       	nop
    1cae:	10 c1       	rjmp	.+544    	; 0x1ed0 <change_param+0x30a>
	}

	switch(nParam)
    1cb0:	e1 e0       	ldi	r30, 0x01	; 1
    1cb2:	4e 16       	cp	r4, r30
    1cb4:	01 f1       	breq	.+64     	; 0x1cf6 <change_param+0x130>
    1cb6:	4e 16       	cp	r4, r30
    1cb8:	88 f0       	brcs	.+34     	; 0x1cdc <change_param+0x116>
    1cba:	f2 e0       	ldi	r31, 0x02	; 2
    1cbc:	4f 12       	cpse	r4, r31
    1cbe:	08 c1       	rjmp	.+528    	; 0x1ed0 <change_param+0x30a>
	}
	break;
	//время УРОВ:если на связи 1 БДЗ пишем его время УРОВ, если больше то 0мс
	case 2:
	{
		staroe=(signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5];
    1cc0:	89 e0       	ldi	r24, 0x09	; 9
    1cc2:	58 9e       	mul	r5, r24
    1cc4:	f0 01       	movw	r30, r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	ed 59       	subi	r30, 0x9D	; 157
    1cca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ccc:	84 81       	ldd	r24, Z+4	; 0x04
    1cce:	e5 80       	ldd	r14, Z+5	; 0x05
    1cd0:	f1 2c       	mov	r15, r1
    1cd2:	f8 2a       	or	r15, r24
		//param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5]):(0);
		inSysBDZ[addr].data[2]=inSysBDZ[addr].data[3]=-1;	//в неизменяемый параметр пишем -1
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	83 83       	std	Z+3, r24	; 0x03
    1cd8:	82 83       	std	Z+2, r24	; 0x02
    1cda:	1a c0       	rjmp	.+52     	; 0x1d10 <change_param+0x14a>
	}

	switch(nParam)
	{
	//изменение адреса
	case 0:{staroe=inSysBDZ[addr].data[1];max=99;step=1;}
    1cdc:	29 e0       	ldi	r18, 0x09	; 9
    1cde:	52 9e       	mul	r5, r18
    1ce0:	f0 01       	movw	r30, r0
    1ce2:	11 24       	eor	r1, r1
    1ce4:	ed 59       	subi	r30, 0x9D	; 157
    1ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce8:	e1 80       	ldd	r14, Z+1	; 0x01
    1cea:	f1 2c       	mov	r15, r1
    1cec:	33 e6       	ldi	r19, 0x63	; 99
    1cee:	83 2e       	mov	r8, r19
    1cf0:	91 2c       	mov	r9, r1
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
	break;
    1cf4:	12 c0       	rjmp	.+36     	; 0x1d1a <change_param+0x154>
	//время МТЗ:если на связи 1 БДЗ пишем его время МТЗ, если больше то 0мс
	case 1:
	{
		staroe=(signed int)inSysBDZ[addr].data[2]<<8 | inSysBDZ[addr].data[3];
    1cf6:	39 e0       	ldi	r19, 0x09	; 9
    1cf8:	53 9e       	mul	r5, r19
    1cfa:	f0 01       	movw	r30, r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	ed 59       	subi	r30, 0x9D	; 157
    1d00:	fe 4f       	sbci	r31, 0xFE	; 254
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	e3 80       	ldd	r14, Z+3	; 0x03
    1d06:	f1 2c       	mov	r15, r1
    1d08:	f8 2a       	or	r15, r24
		//param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[2]<<8 | inSysBDZ[addr].data[3]):(0);
		inSysBDZ[addr].data[4]=inSysBDZ[addr].data[5]=-1;	//в неизменяемый параметр пишем -1
    1d0a:	8f ef       	ldi	r24, 0xFF	; 255
    1d0c:	85 83       	std	Z+5, r24	; 0x05
    1d0e:	84 83       	std	Z+4, r24	; 0x04
	case 2:
	{
		staroe=(signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5];
		//param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5]):(0);
		inSysBDZ[addr].data[2]=inSysBDZ[addr].data[3]=-1;	//в неизменяемый параметр пишем -1
		max=30000;
    1d10:	20 e3       	ldi	r18, 0x30	; 48
    1d12:	82 2e       	mov	r8, r18
    1d14:	25 e7       	ldi	r18, 0x75	; 117
    1d16:	92 2e       	mov	r9, r18
		step=10;
    1d18:	8a e0       	ldi	r24, 0x0A	; 10
    1d1a:	00 e0       	ldi	r16, 0x00	; 0
    1d1c:	10 e0       	ldi	r17, 0x00	; 0
    1d1e:	fe 01       	movw	r30, r28
    1d20:	31 96       	adiw	r30, 0x01	; 1
    1d22:	6f 01       	movw	r12, r30
		if(staroe!=0)
		{
			LCD_gotoXY(0,0);
			LCD_puts_P(STAROE_ZNACHENIE,16);
			LCD_putchar(0x3A);
			sprintf(str,"%d",staroe);
    1d24:	9c e1       	ldi	r25, 0x1C	; 28
    1d26:	69 2e       	mov	r6, r25
    1d28:	91 e0       	ldi	r25, 0x01	; 1
    1d2a:	79 2e       	mov	r7, r25
		if(nParam!=0)LCD_puts_P(MS,2);
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(param>(nParam==0)?(1):(0))param-=step;
		break;
		case UP:if(param<max)param+=step;
    1d2c:	a8 2e       	mov	r10, r24
    1d2e:	b1 2c       	mov	r11, r1
	}

	while(1)
	{
		char str[6];
		LCD_clr();
    1d30:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clr>
		if(staroe!=0)
    1d34:	e1 14       	cp	r14, r1
    1d36:	f1 04       	cpc	r15, r1
    1d38:	81 f1       	breq	.+96     	; 0x1d9a <change_param+0x1d4>
		{
			LCD_gotoXY(0,0);
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
			LCD_puts_P(STAROE_ZNACHENIE,16);
    1d42:	60 e1       	ldi	r22, 0x10	; 16
    1d44:	81 e4       	ldi	r24, 0x41	; 65
    1d46:	92 e0       	ldi	r25, 0x02	; 2
    1d48:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
			LCD_putchar(0x3A);
    1d4c:	8a e3       	ldi	r24, 0x3A	; 58
    1d4e:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
			sprintf(str,"%d",staroe);
    1d52:	ff 92       	push	r15
    1d54:	ef 92       	push	r14
    1d56:	7f 92       	push	r7
    1d58:	6f 92       	push	r6
    1d5a:	df 92       	push	r13
    1d5c:	cf 92       	push	r12
    1d5e:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <sprintf>
			LCD_gotoXY(0,1);
    1d62:	61 e0       	ldi	r22, 0x01	; 1
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
			LCD_puts(str,strlen(str));
    1d6a:	f6 01       	movw	r30, r12
    1d6c:	01 90       	ld	r0, Z+
    1d6e:	00 20       	and	r0, r0
    1d70:	e9 f7       	brne	.-6      	; 0x1d6c <change_param+0x1a6>
    1d72:	31 97       	sbiw	r30, 0x01	; 1
    1d74:	bf 01       	movw	r22, r30
    1d76:	6c 19       	sub	r22, r12
    1d78:	7d 09       	sbc	r23, r13
    1d7a:	c6 01       	movw	r24, r12
    1d7c:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
			if(nParam!=0)LCD_puts_P(MS,2);
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	44 20       	and	r4, r4
    1d8e:	29 f0       	breq	.+10     	; 0x1d9a <change_param+0x1d4>
    1d90:	62 e0       	ldi	r22, 0x02	; 2
    1d92:	85 e7       	ldi	r24, 0x75	; 117
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
		}

		LCD_gotoXY(0,2);
    1d9a:	62 e0       	ldi	r22, 0x02	; 2
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		LCD_puts_P(NOVOE_ZNACHENIE,strlen_P(NOVOE_ZNACHENIE));
    1da2:	6e e0       	ldi	r22, 0x0E	; 14
    1da4:	8f e5       	ldi	r24, 0x5F	; 95
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
		LCD_putchar(0x3A);
    1dac:	8a e3       	ldi	r24, 0x3A	; 58
    1dae:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
		sprintf(str,"%d",param);
    1db2:	1f 93       	push	r17
    1db4:	0f 93       	push	r16
    1db6:	7f 92       	push	r7
    1db8:	6f 92       	push	r6
    1dba:	df 92       	push	r13
    1dbc:	cf 92       	push	r12
    1dbe:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <sprintf>
		LCD_gotoXY(0,3);
    1dc2:	63 e0       	ldi	r22, 0x03	; 3
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		LCD_puts(str,strlen(str));
    1dca:	f6 01       	movw	r30, r12
    1dcc:	01 90       	ld	r0, Z+
    1dce:	00 20       	and	r0, r0
    1dd0:	e9 f7       	brne	.-6      	; 0x1dcc <change_param+0x206>
    1dd2:	31 97       	sbiw	r30, 0x01	; 1
    1dd4:	bf 01       	movw	r22, r30
    1dd6:	6c 19       	sub	r22, r12
    1dd8:	7d 09       	sbc	r23, r13
    1dda:	c6 01       	movw	r24, r12
    1ddc:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
		if(nParam!=0)LCD_puts_P(MS,2);
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	44 20       	and	r4, r4
    1dee:	29 f0       	breq	.+10     	; 0x1dfa <change_param+0x234>
    1df0:	62 e0       	ldi	r22, 0x02	; 2
    1df2:	85 e7       	ldi	r24, 0x75	; 117
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1dfa:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    1dfe:	85 30       	cpi	r24, 0x05	; 5
    1e00:	e1 f0       	breq	.+56     	; 0x1e3a <change_param+0x274>
    1e02:	30 f4       	brcc	.+12     	; 0x1e10 <change_param+0x24a>
    1e04:	82 30       	cpi	r24, 0x02	; 2
    1e06:	01 f1       	breq	.+64     	; 0x1e48 <change_param+0x282>
    1e08:	83 30       	cpi	r24, 0x03	; 3
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <change_param+0x248>
    1e0c:	61 c0       	rjmp	.+194    	; 0x1ed0 <change_param+0x30a>
    1e0e:	90 cf       	rjmp	.-224    	; 0x1d30 <change_param+0x16a>
    1e10:	86 30       	cpi	r24, 0x06	; 6
    1e12:	31 f0       	breq	.+12     	; 0x1e20 <change_param+0x25a>
    1e14:	8f 3f       	cpi	r24, 0xFF	; 255
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <change_param+0x254>
    1e18:	8b cf       	rjmp	.-234    	; 0x1d30 <change_param+0x16a>
		break;
		case ENT:goto SEND;	//выход по ENT (отсылка новых параметров)
		break;
		case ESC:return;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");
    1e1a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
		}
	}
    1e1e:	88 cf       	rjmp	.-240    	; 0x1d30 <change_param+0x16a>
		LCD_gotoXY(0,3);
		LCD_puts(str,strlen(str));
		if(nParam!=0)LCD_puts_P(MS,2);
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(param>(nParam==0)?(1):(0))param-=step;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	44 20       	and	r4, r4
    1e26:	11 f0       	breq	.+4      	; 0x1e2c <change_param+0x266>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	80 17       	cp	r24, r16
    1e2e:	91 07       	cpc	r25, r17
    1e30:	0c f0       	brlt	.+2      	; 0x1e34 <change_param+0x26e>
    1e32:	7e cf       	rjmp	.-260    	; 0x1d30 <change_param+0x16a>
    1e34:	0a 19       	sub	r16, r10
    1e36:	1b 09       	sbc	r17, r11
    1e38:	7b cf       	rjmp	.-266    	; 0x1d30 <change_param+0x16a>
		break;
		case UP:if(param<max)param+=step;
    1e3a:	08 15       	cp	r16, r8
    1e3c:	19 05       	cpc	r17, r9
    1e3e:	0c f0       	brlt	.+2      	; 0x1e42 <change_param+0x27c>
    1e40:	77 cf       	rjmp	.-274    	; 0x1d30 <change_param+0x16a>
    1e42:	0a 0d       	add	r16, r10
    1e44:	1b 1d       	adc	r17, r11
    1e46:	74 cf       	rjmp	.-280    	; 0x1d30 <change_param+0x16a>
	}
SEND:
	//отсылка новых параметров
	//if(eeprom_read_byte(&inSysBDZaddr[addr])!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}

	inSysBDZ[addr].data[0]=PROG;
    1e48:	c5 2c       	mov	r12, r5
    1e4a:	d1 2c       	mov	r13, r1
    1e4c:	f9 e0       	ldi	r31, 0x09	; 9
    1e4e:	5f 9e       	mul	r5, r31
    1e50:	c0 01       	movw	r24, r0
    1e52:	11 24       	eor	r1, r1
    1e54:	9c 01       	movw	r18, r24
    1e56:	2d 59       	subi	r18, 0x9D	; 157
    1e58:	3e 4f       	sbci	r19, 0xFE	; 254
    1e5a:	79 01       	movw	r14, r18
    1e5c:	86 e0       	ldi	r24, 0x06	; 6
    1e5e:	f9 01       	movw	r30, r18
    1e60:	80 83       	st	Z, r24
	switch(nParam)
    1e62:	f1 e0       	ldi	r31, 0x01	; 1
    1e64:	4f 16       	cp	r4, r31
    1e66:	f9 f0       	breq	.+62     	; 0x1ea6 <change_param+0x2e0>
    1e68:	4f 16       	cp	r4, r31
    1e6a:	38 f0       	brcs	.+14     	; 0x1e7a <change_param+0x2b4>
    1e6c:	22 e0       	ldi	r18, 0x02	; 2
    1e6e:	42 12       	cpse	r4, r18
    1e70:	2f c0       	rjmp	.+94     	; 0x1ed0 <change_param+0x30a>
	case 0:	if(readID(param)!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}
			inSysBDZ[addr].data[1]=param; //если попоали сюда, знчт адрес свободен -> отсылаем его
	break;
	case 1:{inSysBDZ[addr].data[2]=param >>8; inSysBDZ[addr].data[3]=param & 0x00FF;}
	break;
	case 2:{inSysBDZ[addr].data[4]=param >>8; inSysBDZ[addr].data[5]=param & 0x00FF;}
    1e72:	f7 01       	movw	r30, r14
    1e74:	14 83       	std	Z+4, r17	; 0x04
    1e76:	05 83       	std	Z+5, r16	; 0x05
	break;
    1e78:	19 c0       	rjmp	.+50     	; 0x1eac <change_param+0x2e6>
	//if(eeprom_read_byte(&inSysBDZaddr[addr])!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}

	inSysBDZ[addr].data[0]=PROG;
	switch(nParam)
	{		//если адрес не занят, то в поле inSysBDZaddr[param] будет 0, если не 0, то данный адрес уже занят
	case 0:	if(readID(param)!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}
    1e7a:	c8 01       	movw	r24, r16
    1e7c:	87 5f       	subi	r24, 0xF7	; 247
    1e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e80:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    1e84:	88 23       	and	r24, r24
    1e86:	61 f0       	breq	.+24     	; 0x1ea0 <change_param+0x2da>
    1e88:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clr>
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    1e94:	64 e1       	ldi	r22, 0x14	; 20
    1e96:	8e e2       	ldi	r24, 0x2E	; 46
    1e98:	92 e0       	ldi	r25, 0x02	; 2
    1e9a:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
    1e9e:	fe ce       	rjmp	.-516    	; 0x1c9c <change_param+0xd6>
			inSysBDZ[addr].data[1]=param; //если попоали сюда, знчт адрес свободен -> отсылаем его
    1ea0:	f7 01       	movw	r30, r14
    1ea2:	01 83       	std	Z+1, r16	; 0x01
	break;
    1ea4:	03 c0       	rjmp	.+6      	; 0x1eac <change_param+0x2e6>
	case 1:{inSysBDZ[addr].data[2]=param >>8; inSysBDZ[addr].data[3]=param & 0x00FF;}
    1ea6:	f9 01       	movw	r30, r18
    1ea8:	12 83       	std	Z+2, r17	; 0x02
    1eaa:	03 83       	std	Z+3, r16	; 0x03
	break;
	case 2:{inSysBDZ[addr].data[4]=param >>8; inSysBDZ[addr].data[5]=param & 0x00FF;}
	break;
	default:return;
	}
	if((send_prog(addr,inSysBDZ[addr].data)<0) && (param!=0)){printTOUT();_delay_ms(2000);return;}
    1eac:	89 e0       	ldi	r24, 0x09	; 9
    1eae:	8c 9d       	mul	r24, r12
    1eb0:	b0 01       	movw	r22, r0
    1eb2:	8d 9d       	mul	r24, r13
    1eb4:	70 0d       	add	r23, r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	6d 59       	subi	r22, 0x9D	; 157
    1eba:	7e 4f       	sbci	r23, 0xFE	; 254
    1ebc:	85 2d       	mov	r24, r5
    1ebe:	0e 94 bc 0b 	call	0x1778	; 0x1778 <send_prog>
    1ec2:	87 ff       	sbrs	r24, 7
    1ec4:	03 c0       	rjmp	.+6      	; 0x1ecc <change_param+0x306>
    1ec6:	01 2b       	or	r16, r17
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <change_param+0x306>
    1eca:	e6 ce       	rjmp	.-564    	; 0x1c98 <change_param+0xd2>
	scansys();
    1ecc:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <scansys>

	return;
}
    1ed0:	26 96       	adiw	r28, 0x06	; 6
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	1f 91       	pop	r17
    1ee2:	0f 91       	pop	r16
    1ee4:	ff 90       	pop	r15
    1ee6:	ef 90       	pop	r14
    1ee8:	df 90       	pop	r13
    1eea:	cf 90       	pop	r12
    1eec:	bf 90       	pop	r11
    1eee:	af 90       	pop	r10
    1ef0:	9f 90       	pop	r9
    1ef2:	8f 90       	pop	r8
    1ef4:	7f 90       	pop	r7
    1ef6:	6f 90       	pop	r6
    1ef8:	5f 90       	pop	r5
    1efa:	4f 90       	pop	r4
    1efc:	08 95       	ret

00001efe <vremya_urov>:
	change_param(1);
}

static void vremya_urov(void)
{
	change_param(2);
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <change_param>

00001f04 <vremya_mtz>:
	naviMenu(LVL_prog);
}

static void vremya_mtz(void)
{
	change_param(1);
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <change_param>

00001f0a <adres>:
	change_param(2);
}

static void adres(void)
{
	change_param(0);
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <change_param>

00001f10 <datavremya>:
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}

static void datavremya(void)
{
    1f10:	cf 92       	push	r12
    1f12:	df 92       	push	r13
    1f14:	ef 92       	push	r14
    1f16:	ff 92       	push	r15
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	a6 97       	sbiw	r28, 0x26	; 38
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
	char buffer[20],max[]={31,12,99,23,59,59},min;
    1f30:	86 e0       	ldi	r24, 0x06	; 6
    1f32:	e4 ee       	ldi	r30, 0xE4	; 228
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	de 01       	movw	r26, r28
    1f38:	91 96       	adiw	r26, 0x21	; 33
    1f3a:	01 90       	ld	r0, Z+
    1f3c:	0d 92       	st	X+, r0
    1f3e:	8a 95       	dec	r24
    1f40:	e1 f7       	brne	.-8      	; 0x1f3a <datavremya+0x2a>
	unsigned char cursorPos=0;
	unsigned char *ptr[] = {&rtc.day,&rtc.month,&rtc.year,&rtc.hours,&rtc.minutes,&rtc.seconds};
    1f42:	8c e0       	ldi	r24, 0x0C	; 12
    1f44:	ea ee       	ldi	r30, 0xEA	; 234
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	de 01       	movw	r26, r28
    1f4a:	55 96       	adiw	r26, 0x15	; 21
    1f4c:	01 90       	ld	r0, Z+
    1f4e:	0d 92       	st	X+, r0
    1f50:	8a 95       	dec	r24
    1f52:	e1 f7       	brne	.-8      	; 0x1f4c <datavremya+0x3c>

	printMenuHeader(DATAVREMYA);
    1f54:	80 e5       	ldi	r24, 0x50	; 80
    1f56:	91 e0       	ldi	r25, 0x01	; 1
    1f58:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>

	if(rtc_get(&rtc) < 0) {ERROR=RTC;/*return -1;*/}
    1f5c:	82 ef       	ldi	r24, 0xF2	; 242
    1f5e:	94 e0       	ldi	r25, 0x04	; 4
    1f60:	0e 94 d6 02 	call	0x5ac	; 0x5ac <rtc_get>
    1f64:	87 ff       	sbrs	r24, 7
    1f66:	03 c0       	rjmp	.+6      	; 0x1f6e <datavremya+0x5e>
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}

static void datavremya(void)
{
    1f6e:	10 e0       	ldi	r17, 0x00	; 0
	if(rtc_get(&rtc) < 0) {ERROR=RTC;/*return -1;*/}


	while(1)
	{
		sprintf(buffer," %02u.%02u.%02u %02u:%02u:%02u",*ptr[0],*ptr[1],*ptr[2],*ptr[3],*ptr[4],*ptr[5]);
    1f70:	5f e1       	ldi	r21, 0x1F	; 31
    1f72:	c5 2e       	mov	r12, r21
    1f74:	51 e0       	ldi	r21, 0x01	; 1
    1f76:	d5 2e       	mov	r13, r21
    1f78:	ce 01       	movw	r24, r28
    1f7a:	01 96       	adiw	r24, 0x01	; 1
    1f7c:	7c 01       	movw	r14, r24
    1f7e:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <rtc+0x5>
    1f82:	1f 92       	push	r1
    1f84:	8f 93       	push	r24
    1f86:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <rtc+0x4>
    1f8a:	1f 92       	push	r1
    1f8c:	8f 93       	push	r24
    1f8e:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <rtc+0x3>
    1f92:	1f 92       	push	r1
    1f94:	8f 93       	push	r24
    1f96:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <rtc>
    1f9a:	1f 92       	push	r1
    1f9c:	8f 93       	push	r24
    1f9e:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <rtc+0x1>
    1fa2:	1f 92       	push	r1
    1fa4:	8f 93       	push	r24
    1fa6:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <rtc+0x2>
    1faa:	1f 92       	push	r1
    1fac:	8f 93       	push	r24
    1fae:	df 92       	push	r13
    1fb0:	cf 92       	push	r12
    1fb2:	ff 92       	push	r15
    1fb4:	ef 92       	push	r14
    1fb6:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <sprintf>
		LCD_gotoXY(0,3);
    1fba:	63 e0       	ldi	r22, 0x03	; 3
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		LCD_puts(buffer,18);
    1fc2:	62 e1       	ldi	r22, 0x12	; 18
    1fc4:	c7 01       	movw	r24, r14
    1fc6:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
		LCD_gotoXY(cursorPos*3,3);
    1fca:	63 e0       	ldi	r22, 0x03	; 3
    1fcc:	81 2f       	mov	r24, r17
    1fce:	88 0f       	add	r24, r24
    1fd0:	81 0f       	add	r24, r17
    1fd2:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		LCD_putchar(0x84);
    1fd6:	84 e8       	ldi	r24, 0x84	; 132
    1fd8:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
		min=(cursorPos < 2)?(1):(0);
    1fdc:	01 e0       	ldi	r16, 0x01	; 1
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	12 30       	cpi	r17, 0x02	; 2
    1fea:	08 f0       	brcs	.+2      	; 0x1fee <datavremya+0xde>
    1fec:	00 e0       	ldi	r16, 0x00	; 0

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1fee:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    1ff2:	85 30       	cpi	r24, 0x05	; 5
    1ff4:	b1 f0       	breq	.+44     	; 0x2022 <datavremya+0x112>
    1ff6:	30 f4       	brcc	.+12     	; 0x2004 <datavremya+0xf4>
    1ff8:	82 30       	cpi	r24, 0x02	; 2
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <datavremya+0xee>
    1ffc:	43 c0       	rjmp	.+134    	; 0x2084 <datavremya+0x174>
    1ffe:	84 30       	cpi	r24, 0x04	; 4
    2000:	59 f0       	breq	.+22     	; 0x2018 <datavremya+0x108>
    2002:	44 c0       	rjmp	.+136    	; 0x208c <datavremya+0x17c>
    2004:	86 30       	cpi	r24, 0x06	; 6
    2006:	29 f1       	breq	.+74     	; 0x2052 <datavremya+0x142>
    2008:	87 30       	cpi	r24, 0x07	; 7
    200a:	09 f0       	breq	.+2      	; 0x200e <datavremya+0xfe>
    200c:	3f c0       	rjmp	.+126    	; 0x208c <datavremya+0x17c>
		{
		case RIGHT: if(cursorPos < 5) cursorPos++;
    200e:	15 30       	cpi	r17, 0x05	; 5
    2010:	08 f0       	brcs	.+2      	; 0x2014 <datavremya+0x104>
    2012:	b5 cf       	rjmp	.-150    	; 0x1f7e <datavremya+0x6e>
    2014:	1f 5f       	subi	r17, 0xFF	; 255
    2016:	b3 cf       	rjmp	.-154    	; 0x1f7e <datavremya+0x6e>
		break;
		case LEFT: if(cursorPos >0) cursorPos--;
    2018:	11 23       	and	r17, r17
    201a:	09 f4       	brne	.+2      	; 0x201e <datavremya+0x10e>
    201c:	b0 cf       	rjmp	.-160    	; 0x1f7e <datavremya+0x6e>
    201e:	11 50       	subi	r17, 0x01	; 1
    2020:	ae cf       	rjmp	.-164    	; 0x1f7e <datavremya+0x6e>
		break;
		case UP:(*ptr[cursorPos] < max[cursorPos])?((*ptr[cursorPos])++):(*ptr[cursorPos]=min);
    2022:	21 2f       	mov	r18, r17
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	f9 01       	movw	r30, r18
    2028:	ee 0f       	add	r30, r30
    202a:	ff 1f       	adc	r31, r31
    202c:	ee 0d       	add	r30, r14
    202e:	ff 1d       	adc	r31, r15
    2030:	04 88       	ldd	r0, Z+20	; 0x14
    2032:	f5 89       	ldd	r31, Z+21	; 0x15
    2034:	e0 2d       	mov	r30, r0
    2036:	80 81       	ld	r24, Z
    2038:	a1 e2       	ldi	r26, 0x21	; 33
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	ac 0f       	add	r26, r28
    203e:	bd 1f       	adc	r27, r29
    2040:	a2 0f       	add	r26, r18
    2042:	b3 1f       	adc	r27, r19
    2044:	9c 91       	ld	r25, X
    2046:	89 17       	cp	r24, r25
    2048:	10 f4       	brcc	.+4      	; 0x204e <datavremya+0x13e>
    204a:	8f 5f       	subi	r24, 0xFF	; 255
    204c:	19 c0       	rjmp	.+50     	; 0x2080 <datavremya+0x170>
    204e:	00 83       	st	Z, r16
    2050:	96 cf       	rjmp	.-212    	; 0x1f7e <datavremya+0x6e>
		break;
		case DOWN:(*ptr[cursorPos] > min)?((*ptr[cursorPos])--):(*ptr[cursorPos]=max[cursorPos]);
    2052:	81 2f       	mov	r24, r17
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	fc 01       	movw	r30, r24
    2058:	ee 0f       	add	r30, r30
    205a:	ff 1f       	adc	r31, r31
    205c:	ee 0d       	add	r30, r14
    205e:	ff 1d       	adc	r31, r15
    2060:	04 88       	ldd	r0, Z+20	; 0x14
    2062:	f5 89       	ldd	r31, Z+21	; 0x15
    2064:	e0 2d       	mov	r30, r0
    2066:	20 81       	ld	r18, Z
    2068:	02 17       	cp	r16, r18
    206a:	18 f4       	brcc	.+6      	; 0x2072 <datavremya+0x162>
    206c:	21 50       	subi	r18, 0x01	; 1
    206e:	20 83       	st	Z, r18
    2070:	86 cf       	rjmp	.-244    	; 0x1f7e <datavremya+0x6e>
    2072:	a1 e2       	ldi	r26, 0x21	; 33
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ac 0f       	add	r26, r28
    2078:	bd 1f       	adc	r27, r29
    207a:	a8 0f       	add	r26, r24
    207c:	b9 1f       	adc	r27, r25
    207e:	8c 91       	ld	r24, X
    2080:	80 83       	st	Z, r24
    2082:	7d cf       	rjmp	.-262    	; 0x1f7e <datavremya+0x6e>
		break;
		case ENT:{rtc_set(&rtc);return;}
    2084:	82 ef       	ldi	r24, 0xF2	; 242
    2086:	94 e0       	ldi	r25, 0x04	; 4
    2088:	0e 94 71 02 	call	0x4e2	; 0x4e2 <rtc_set>
		default: return;
		}
	}


}
    208c:	a6 96       	adiw	r28, 0x26	; 38
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	ff 90       	pop	r15
    20a2:	ef 90       	pop	r14
    20a4:	df 90       	pop	r13
    20a6:	cf 90       	pop	r12
    20a8:	08 95       	ret

000020aa <chetnost>:
		}
	}
}

static void chetnost(void)
{
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
	printMenuHeader(CHETNOST);
    20b0:	84 e0       	ldi	r24, 0x04	; 4
    20b2:	91 e0       	ldi	r25, 0x01	; 1
    20b4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>
	unsigned char mparity=eeprom_read_byte(&parity);
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    20c0:	c8 2f       	mov	r28, r24
	PGM_P ptr=0;
    20c2:	00 e0       	ldi	r16, 0x00	; 0
    20c4:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		LCD_gotoXY(10,0);
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	8a e0       	ldi	r24, 0x0A	; 10
    20ca:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		switch(mparity)
    20ce:	c0 32       	cpi	r28, 0x20	; 32
    20d0:	19 f1       	breq	.+70     	; 0x2118 <chetnost+0x6e>
    20d2:	c0 33       	cpi	r28, 0x30	; 48
    20d4:	61 f0       	breq	.+24     	; 0x20ee <chetnost+0x44>
    20d6:	c1 11       	cpse	r28, r1
    20d8:	0d c0       	rjmp	.+26     	; 0x20f4 <chetnost+0x4a>
		{
		case NONE:ptr=C_NONE;
    20da:	06 ef       	ldi	r16, 0xF6	; 246
    20dc:	10 e0       	ldi	r17, 0x00	; 0
    20de:	c0 e0       	ldi	r28, 0x00	; 0
		break;
    20e0:	09 c0       	rjmp	.+18     	; 0x20f4 <chetnost+0x4a>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mparity==EVEN) mparity=ODD;
    20e2:	c0 32       	cpi	r28, 0x20	; 32
    20e4:	39 f5       	brne	.+78     	; 0x2134 <chetnost+0x8a>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	8a e0       	ldi	r24, 0x0A	; 10
    20ea:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		{
		case NONE:ptr=C_NONE;
		break;
		case EVEN:ptr=C_EVEN;
		break;
		case ODD:ptr=C_ODD;
    20ee:	00 e0       	ldi	r16, 0x00	; 0
    20f0:	11 e0       	ldi	r17, 0x01	; 1
    20f2:	c0 e3       	ldi	r28, 0x30	; 48
		break;
		}
		LCD_puts_P(ptr,5);
    20f4:	65 e0       	ldi	r22, 0x05	; 5
    20f6:	c8 01       	movw	r24, r16
    20f8:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    20fc:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    2100:	85 30       	cpi	r24, 0x05	; 5
    2102:	79 f3       	breq	.-34     	; 0x20e2 <chetnost+0x38>
    2104:	86 30       	cpi	r24, 0x06	; 6
    2106:	61 f4       	brne	.+24     	; 0x2120 <chetnost+0x76>
			else if(mparity==ODD)mparity=NONE;
		}
		break;
		case DOWN:
		{
			if(mparity==NONE) mparity=ODD;
    2108:	cc 23       	and	r28, r28
    210a:	69 f3       	breq	.-38     	; 0x20e6 <chetnost+0x3c>
			else if(mparity==ODD)mparity=EVEN;
    210c:	c0 33       	cpi	r28, 0x30	; 48
    210e:	d9 f6       	brne	.-74     	; 0x20c6 <chetnost+0x1c>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	8a e0       	ldi	r24, 0x0A	; 10
    2114:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		switch(mparity)
		{
		case NONE:ptr=C_NONE;
		break;
		case EVEN:ptr=C_EVEN;
    2118:	0b ef       	ldi	r16, 0xFB	; 251
    211a:	10 e0       	ldi	r17, 0x00	; 0
    211c:	c0 e2       	ldi	r28, 0x20	; 32
		break;
    211e:	ea cf       	rjmp	.-44     	; 0x20f4 <chetnost+0x4a>
		case ODD:ptr=C_ODD;
		break;
		}
		LCD_puts_P(ptr,5);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2120:	82 30       	cpi	r24, 0x02	; 2
    2122:	79 f4       	brne	.+30     	; 0x2142 <chetnost+0x98>
			else if(mparity==ODD)mparity=EVEN;
		}
		break;
		case ENT:
		{
			eeprom_write_byte(&parity,mparity);
    2124:	6c 2f       	mov	r22, r28
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		default: return;
		}
	}
}
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
			else if(mparity==ODD)mparity=EVEN;
		}
		break;
		case ENT:
		{
			eeprom_write_byte(&parity,mparity);
    2130:	0c 94 77 21 	jmp	0x42ee	; 0x42ee <eeprom_write_byte>
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mparity==EVEN) mparity=ODD;
			else if(mparity==ODD)mparity=NONE;
    2134:	c0 33       	cpi	r28, 0x30	; 48
    2136:	39 f6       	brne	.-114    	; 0x20c6 <chetnost+0x1c>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	8a e0       	ldi	r24, 0x0A	; 10
    213c:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    2140:	cc cf       	rjmp	.-104    	; 0x20da <chetnost+0x30>
			return;
		}
		default: return;
		}
	}
}
    2142:	cf 91       	pop	r28
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	08 95       	ret

0000214a <skorost>:
		}
	}
}

static void skorost(void)
{
    214a:	cf 92       	push	r12
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	27 97       	sbiw	r28, 0x07	; 7
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61

//	unsigned int speeds_table[SPEED_INDEX]={9600,19200,38400,76800};
	unsigned long int mspeed=eeprom_read_dword(&speed);
    2166:	82 e0       	ldi	r24, 0x02	; 2
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <eeprom_read_dword>
    216e:	6b 01       	movw	r12, r22
    2170:	7c 01       	movw	r14, r24
	char buf[7];

	printMenuHeader(SKOROST);
    2172:	8d e0       	ldi	r24, 0x0D	; 13
    2174:	91 e0       	ldi	r25, 0x01	; 1
    2176:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>

	while(1)
	{
		LCD_gotoXY(10,0);
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	8a e0       	ldi	r24, 0x0A	; 10
    217e:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    2182:	2a e0       	ldi	r18, 0x0A	; 10
    2184:	ae 01       	movw	r20, r28
    2186:	4f 5f       	subi	r20, 0xFF	; 255
    2188:	5f 4f       	sbci	r21, 0xFF	; 255
    218a:	c7 01       	movw	r24, r14
    218c:	b6 01       	movw	r22, r12
    218e:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__ltoa_ncheck>
		LCD_puts(ltoa(mspeed,buf,10),5);
    2192:	65 e0       	ldi	r22, 0x05	; 5
    2194:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>


		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2198:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    219c:	85 30       	cpi	r24, 0x05	; 5
    219e:	59 f0       	breq	.+22     	; 0x21b6 <skorost+0x6c>
    21a0:	86 30       	cpi	r24, 0x06	; 6
    21a2:	a9 f0       	breq	.+42     	; 0x21ce <skorost+0x84>
    21a4:	82 30       	cpi	r24, 0x02	; 2
    21a6:	f9 f4       	brne	.+62     	; 0x21e6 <skorost+0x9c>
		{
			if(mspeed>9600) mspeed/=2;
		}

		break;
		case ENT:{eeprom_write_dword(&speed,mspeed);return;}
    21a8:	b7 01       	movw	r22, r14
    21aa:	a6 01       	movw	r20, r12
    21ac:	82 e0       	ldi	r24, 0x02	; 2
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 94 84 21 	call	0x4308	; 0x4308 <eeprom_write_dword>
    21b4:	18 c0       	rjmp	.+48     	; 0x21e6 <skorost+0x9c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mspeed<76800) mspeed*=2;
    21b6:	c1 14       	cp	r12, r1
    21b8:	8c e2       	ldi	r24, 0x2C	; 44
    21ba:	d8 06       	cpc	r13, r24
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	e8 06       	cpc	r14, r24
    21c0:	f1 04       	cpc	r15, r1
    21c2:	d8 f6       	brcc	.-74     	; 0x217a <skorost+0x30>
    21c4:	cc 0c       	add	r12, r12
    21c6:	dd 1c       	adc	r13, r13
    21c8:	ee 1c       	adc	r14, r14
    21ca:	ff 1c       	adc	r15, r15
    21cc:	d6 cf       	rjmp	.-84     	; 0x217a <skorost+0x30>
		}
		break;
		case DOWN:
		{
			if(mspeed>9600) mspeed/=2;
    21ce:	81 e8       	ldi	r24, 0x81	; 129
    21d0:	c8 16       	cp	r12, r24
    21d2:	85 e2       	ldi	r24, 0x25	; 37
    21d4:	d8 06       	cpc	r13, r24
    21d6:	e1 04       	cpc	r14, r1
    21d8:	f1 04       	cpc	r15, r1
    21da:	78 f2       	brcs	.-98     	; 0x217a <skorost+0x30>
    21dc:	f6 94       	lsr	r15
    21de:	e7 94       	ror	r14
    21e0:	d7 94       	ror	r13
    21e2:	c7 94       	ror	r12
    21e4:	ca cf       	rjmp	.-108    	; 0x217a <skorost+0x30>
		break;
		case ENT:{eeprom_write_dword(&speed,mspeed);return;}
		default: return;
		}
	}
}
    21e6:	27 96       	adiw	r28, 0x07	; 7
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	ff 90       	pop	r15
    21f8:	ef 90       	pop	r14
    21fa:	df 90       	pop	r13
    21fc:	cf 90       	pop	r12
    21fe:	08 95       	ret

00002200 <rezhim>:
	naviMenu(LVL_svyaz);
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
}

static void rezhim(void)
{
    2200:	cf 93       	push	r28
	printMenuHeader(REZHIM);
    2202:	80 e2       	ldi	r24, 0x20	; 32
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>
	unsigned char mmode=eeprom_read_byte(&mode);
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    2212:	c8 2f       	mov	r28, r24

	while(1)
	{
		LCD_gotoXY(10,0);
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	8a e0       	ldi	r24, 0x0A	; 10
    2218:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		(mmode==RTU)?(LCD_puts_P(RTU_M,5)):(LCD_puts_P(ASCII_M,5));
    221c:	65 e0       	ldi	r22, 0x05	; 5
    221e:	c1 11       	cpse	r28, r1
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <rezhim+0x28>
    2222:	8c e1       	ldi	r24, 0x1C	; 28
    2224:	91 e0       	ldi	r25, 0x01	; 1
    2226:	02 c0       	rjmp	.+4      	; 0x222c <rezhim+0x2c>
    2228:	86 e1       	ldi	r24, 0x16	; 22
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2230:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    2234:	85 30       	cpi	r24, 0x05	; 5
    2236:	51 f0       	breq	.+20     	; 0x224c <rezhim+0x4c>
    2238:	86 30       	cpi	r24, 0x06	; 6
    223a:	61 f0       	breq	.+24     	; 0x2254 <rezhim+0x54>
    223c:	82 30       	cpi	r24, 0x02	; 2
    223e:	71 f4       	brne	.+28     	; 0x225c <rezhim+0x5c>
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
		break;
		case ENT:
		{
			eeprom_write_byte(&mode,mmode);
    2240:	6c 2f       	mov	r22, r28
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		default: return;
		}
	}
}
    2246:	cf 91       	pop	r28
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
		break;
		case ENT:
		{
			eeprom_write_byte(&mode,mmode);
    2248:	0c 94 77 21 	jmp	0x42ee	; 0x42ee <eeprom_write_byte>
		LCD_gotoXY(10,0);
		(mmode==RTU)?(LCD_puts_P(RTU_M,5)):(LCD_puts_P(ASCII_M,5));

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:if(mmode==RTU)mmode=ASCII;
    224c:	c1 11       	cpse	r28, r1
    224e:	e2 cf       	rjmp	.-60     	; 0x2214 <rezhim+0x14>
    2250:	c1 e0       	ldi	r28, 0x01	; 1
    2252:	e0 cf       	rjmp	.-64     	; 0x2214 <rezhim+0x14>
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
    2254:	c1 30       	cpi	r28, 0x01	; 1
    2256:	f1 f6       	brne	.-68     	; 0x2214 <rezhim+0x14>
    2258:	c0 e0       	ldi	r28, 0x00	; 0
    225a:	dc cf       	rjmp	.-72     	; 0x2214 <rezhim+0x14>
			return;
		}
		default: return;
		}
	}
}
    225c:	cf 91       	pop	r28
    225e:	08 95       	ret

00002260 <printSubMenu>:
		}
	}
}

static inline unsigned char printSubMenu(const char *flashName,unsigned char flag)
{
    2260:	2f 92       	push	r2
    2262:	3f 92       	push	r3
    2264:	4f 92       	push	r4
    2266:	5f 92       	push	r5
    2268:	6f 92       	push	r6
    226a:	7f 92       	push	r7
    226c:	8f 92       	push	r8
    226e:	9f 92       	push	r9
    2270:	af 92       	push	r10
    2272:	bf 92       	push	r11
    2274:	cf 92       	push	r12
    2276:	df 92       	push	r13
    2278:	ef 92       	push	r14
    227a:	ff 92       	push	r15
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	c8 56       	subi	r28, 0x68	; 104
    228a:	d1 09       	sbc	r29, r1
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	4c 01       	movw	r8, r24
	unsigned char addr[MAXQDEV]={0};
    2298:	ce 01       	movw	r24, r28
    229a:	01 96       	adiw	r24, 0x01	; 1
    229c:	7c 01       	movw	r14, r24
    229e:	83 e6       	ldi	r24, 0x63	; 99
    22a0:	f7 01       	movw	r30, r14
    22a2:	11 92       	st	Z+, r1
    22a4:	8a 95       	dec	r24
    22a6:	e9 f7       	brne	.-6      	; 0x22a2 <printSubMenu+0x42>
	unsigned char screenPos=0;	//указатель на позицию экрана
	unsigned char numPunkt=0,currPunkt=0;	//счетчик пунктов меню,
	char tmpStr[4];

	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);
    22a8:	a6 2e       	mov	r10, r22
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	6c 01       	movw	r12, r24
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <printSubMenu+0x56>
    22b2:	cc 0c       	add	r12, r12
    22b4:	dd 1c       	adc	r13, r13
    22b6:	6a 95       	dec	r22
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <printSubMenu+0x52>
    22ba:	01 e0       	ldi	r16, 0x01	; 1
    22bc:	10 e0       	ldi	r17, 0x00	; 0
static inline unsigned char printSubMenu(const char *flashName,unsigned char flag)
{
	unsigned char addr[MAXQDEV]={0};
	unsigned char cursorPos=1;	//указатель на текущий пункт
	unsigned char screenPos=0;	//указатель на позицию экрана
	unsigned char numPunkt=0,currPunkt=0;	//счетчик пунктов меню,
    22be:	41 2c       	mov	r4, r1
	char tmpStr[4];

	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);
    22c0:	89 e0       	ldi	r24, 0x09	; 9
    22c2:	78 2e       	mov	r7, r24
    22c4:	c8 01       	movw	r24, r16
    22c6:	87 5f       	subi	r24, 0xF7	; 247
    22c8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ca:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    22ce:	80 13       	cpse	r24, r16
    22d0:	18 c0       	rjmp	.+48     	; 0x2302 <printSubMenu+0xa2>
    22d2:	70 9e       	mul	r7, r16
    22d4:	f0 01       	movw	r30, r0
    22d6:	71 9e       	mul	r7, r17
    22d8:	f0 0d       	add	r31, r0
    22da:	11 24       	eor	r1, r1
    22dc:	ed 59       	subi	r30, 0x9D	; 157
    22de:	fe 4f       	sbci	r31, 0xFE	; 254
    22e0:	20 85       	ldd	r18, Z+8	; 0x08
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	2c 21       	and	r18, r12
    22e6:	3d 21       	and	r19, r13
    22e8:	0a 2c       	mov	r0, r10
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <printSubMenu+0x90>
    22ec:	35 95       	asr	r19
    22ee:	27 95       	ror	r18
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <printSubMenu+0x8c>
    22f4:	23 2b       	or	r18, r19
    22f6:	29 f0       	breq	.+10     	; 0x2302 <printSubMenu+0xa2>
    22f8:	f7 01       	movw	r30, r14
    22fa:	e4 0d       	add	r30, r4
    22fc:	f1 1d       	adc	r31, r1
    22fe:	80 83       	st	Z, r24
    2300:	43 94       	inc	r4
    2302:	0f 5f       	subi	r16, 0xFF	; 255
    2304:	1f 4f       	sbci	r17, 0xFF	; 255
    2306:	03 36       	cpi	r16, 0x63	; 99
    2308:	11 05       	cpc	r17, r1
    230a:	e1 f6       	brne	.-72     	; 0x22c4 <printSubMenu+0x64>
    230c:	61 2c       	mov	r6, r1
    230e:	51 2c       	mov	r5, r1
    2310:	77 24       	eor	r7, r7
    2312:	73 94       	inc	r7

	while(1)
	{	//рисуем: "NAME:XX БДЗ"
		printMenuHeader(flashName);
		itoa(numPunkt,tmpStr,10);
    2314:	04 2d       	mov	r16, r4
    2316:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2318:	6e 01       	movw	r12, r28
    231a:	f4 e6       	ldi	r31, 0x64	; 100
    231c:	cf 0e       	add	r12, r31
    231e:	d1 1c       	adc	r13, r1

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt-1)
    2320:	18 01       	movw	r2, r16
    2322:	21 e0       	ldi	r18, 0x01	; 1
    2324:	22 1a       	sub	r2, r18
    2326:	31 08       	sbc	r3, r1
	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);

	while(1)
	{	//рисуем: "NAME:XX БДЗ"
		printMenuHeader(flashName);
    2328:	c4 01       	movw	r24, r8
    232a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>
    232e:	4a e0       	ldi	r20, 0x0A	; 10
    2330:	b6 01       	movw	r22, r12
    2332:	c8 01       	movw	r24, r16
    2334:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
		itoa(numPunkt,tmpStr,10);
		LCD_puts(tmpStr,strlen(tmpStr)+1);
    2338:	f6 01       	movw	r30, r12
    233a:	01 90       	ld	r0, Z+
    233c:	00 20       	and	r0, r0
    233e:	e9 f7       	brne	.-6      	; 0x233a <printSubMenu+0xda>
    2340:	6e 2f       	mov	r22, r30
    2342:	6c 19       	sub	r22, r12
    2344:	c6 01       	movw	r24, r12
    2346:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
		LCD_puts_P(BDZ,3);
    234a:	63 e0       	ldi	r22, 0x03	; 3
    234c:	88 e6       	ldi	r24, 0x68	; 104
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
    2354:	57 01       	movw	r10, r14
    2356:	a5 0c       	add	r10, r5
    2358:	b1 1c       	adc	r11, r1

		for(unsigned char i=0;(i<NUMOFMENUSTRING) && (addr[i+screenPos]);i++)		//прорисовываем не более NUMOFMENUSTRING строк меню
    235a:	41 2c       	mov	r4, r1
    235c:	f5 01       	movw	r30, r10
    235e:	21 91       	ld	r18, Z+
    2360:	5f 01       	movw	r10, r30
    2362:	a9 96       	adiw	r28, 0x29	; 41
    2364:	2f af       	std	Y+63, r18	; 0x3f
    2366:	a9 97       	sbiw	r28, 0x29	; 41
    2368:	22 23       	and	r18, r18
    236a:	c9 f0       	breq	.+50     	; 0x239e <printSubMenu+0x13e>
		{
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
    236c:	43 94       	inc	r4
    236e:	64 2d       	mov	r22, r4
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    2376:	64 e0       	ldi	r22, 0x04	; 4
    2378:	88 e6       	ldi	r24, 0x68	; 104
    237a:	91 e0       	ldi	r25, 0x01	; 1
    237c:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
    2380:	4a e0       	ldi	r20, 0x0A	; 10
    2382:	b6 01       	movw	r22, r12
    2384:	a9 96       	adiw	r28, 0x29	; 41
    2386:	ef ad       	ldd	r30, Y+63	; 0x3f
    2388:	a9 97       	sbiw	r28, 0x29	; 41
    238a:	8e 2f       	mov	r24, r30
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
    2392:	63 e0       	ldi	r22, 0x03	; 3
    2394:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
		printMenuHeader(flashName);
		itoa(numPunkt,tmpStr,10);
		LCD_puts(tmpStr,strlen(tmpStr)+1);
		LCD_puts_P(BDZ,3);

		for(unsigned char i=0;(i<NUMOFMENUSTRING) && (addr[i+screenPos]);i++)		//прорисовываем не более NUMOFMENUSTRING строк меню
    2398:	f3 e0       	ldi	r31, 0x03	; 3
    239a:	4f 12       	cpse	r4, r31
    239c:	df cf       	rjmp	.-66     	; 0x235c <printSubMenu+0xfc>
		{
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
		}
		LCD_gotoXY(0,cursorPos);LCD_putchar(0x84);			//...и курсор (символ >)
    239e:	67 2d       	mov	r22, r7
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    23a6:	84 e8       	ldi	r24, 0x84	; 132
    23a8:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    23ac:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    23b0:	85 30       	cpi	r24, 0x05	; 5
    23b2:	f1 f0       	breq	.+60     	; 0x23f0 <printSubMenu+0x190>
    23b4:	38 f4       	brcc	.+14     	; 0x23c4 <printSubMenu+0x164>
    23b6:	82 30       	cpi	r24, 0x02	; 2
    23b8:	31 f1       	breq	.+76     	; 0x2406 <printSubMenu+0x1a6>
    23ba:	83 30       	cpi	r24, 0x03	; 3
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <printSubMenu+0x160>
    23be:	b4 cf       	rjmp	.-152    	; 0x2328 <printSubMenu+0xc8>
			}
		}
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
		break;
		case ESC:return 0;	//выход по ESC
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	25 c0       	rjmp	.+74     	; 0x240e <printSubMenu+0x1ae>
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
		}
		LCD_gotoXY(0,cursorPos);LCD_putchar(0x84);			//...и курсор (символ >)

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    23c4:	86 30       	cpi	r24, 0x06	; 6
    23c6:	31 f0       	breq	.+12     	; 0x23d4 <printSubMenu+0x174>
    23c8:	8f 3f       	cpi	r24, 0xFF	; 255
    23ca:	09 f0       	breq	.+2      	; 0x23ce <printSubMenu+0x16e>
    23cc:	ad cf       	rjmp	.-166    	; 0x2328 <printSubMenu+0xc8>
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
		break;
		case ESC:return 0;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");//автовыход
    23ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    23d2:	aa cf       	rjmp	.-172    	; 0x2328 <printSubMenu+0xc8>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt-1)
    23d4:	86 2d       	mov	r24, r6
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	82 15       	cp	r24, r2
    23da:	93 05       	cpc	r25, r3
    23dc:	0c f0       	brlt	.+2      	; 0x23e0 <printSubMenu+0x180>
    23de:	a4 cf       	rjmp	.-184    	; 0x2328 <printSubMenu+0xc8>
			{
				++currPunkt;
    23e0:	63 94       	inc	r6
				(cursorPos < NUMOFMENUSTRING)?(cursorPos++):(screenPos++);
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	87 15       	cp	r24, r7
    23e6:	10 f0       	brcs	.+4      	; 0x23ec <printSubMenu+0x18c>
    23e8:	73 94       	inc	r7
    23ea:	9e cf       	rjmp	.-196    	; 0x2328 <printSubMenu+0xc8>
    23ec:	53 94       	inc	r5
    23ee:	9c cf       	rjmp	.-200    	; 0x2328 <printSubMenu+0xc8>
			}
		}
		break;
		case UP:
		{
			if(currPunkt > 0 )
    23f0:	66 20       	and	r6, r6
    23f2:	09 f4       	brne	.+2      	; 0x23f6 <printSubMenu+0x196>
    23f4:	99 cf       	rjmp	.-206    	; 0x2328 <printSubMenu+0xc8>
			{
				--currPunkt;
    23f6:	6a 94       	dec	r6
				(cursorPos > 1)?(cursorPos--):(screenPos--);
    23f8:	91 e0       	ldi	r25, 0x01	; 1
    23fa:	79 16       	cp	r7, r25
    23fc:	11 f0       	breq	.+4      	; 0x2402 <printSubMenu+0x1a2>
    23fe:	7a 94       	dec	r7
    2400:	93 cf       	rjmp	.-218    	; 0x2328 <printSubMenu+0xc8>
    2402:	5a 94       	dec	r5
    2404:	91 cf       	rjmp	.-222    	; 0x2328 <printSubMenu+0xc8>
			}
		}
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
    2406:	f7 01       	movw	r30, r14
    2408:	e6 0d       	add	r30, r6
    240a:	f1 1d       	adc	r31, r1
    240c:	80 81       	ld	r24, Z
		default:continue;	//любая другая клавиша
		break;
		}
	}
	return NOKEY;
}
    240e:	c8 59       	subi	r28, 0x98	; 152
    2410:	df 4f       	sbci	r29, 0xFF	; 255
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	ff 90       	pop	r15
    2426:	ef 90       	pop	r14
    2428:	df 90       	pop	r13
    242a:	cf 90       	pop	r12
    242c:	bf 90       	pop	r11
    242e:	af 90       	pop	r10
    2430:	9f 90       	pop	r9
    2432:	8f 90       	pop	r8
    2434:	7f 90       	pop	r7
    2436:	6f 90       	pop	r6
    2438:	5f 90       	pop	r5
    243a:	4f 90       	pop	r4
    243c:	3f 90       	pop	r3
    243e:	2f 90       	pop	r2
    2440:	08 95       	ret

00002442 <in_line>:

static void in_line(void)
{
	printSubMenu(NA_SVYAZI,INL);
    2442:	62 e0       	ldi	r22, 0x02	; 2
    2444:	8c e7       	ldi	r24, 0x7C	; 124
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	0c 94 30 11 	jmp	0x2260	; 0x2260 <printSubMenu>

0000244c <viewArch>:

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
}

static unsigned char viewArch(unsigned char currBDZaddr,unsigned char index)
{
    244c:	cf 92       	push	r12
    244e:	df 92       	push	r13
    2450:	ff 92       	push	r15
    2452:	0f 93       	push	r16
    2454:	1f 93       	push	r17
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	a9 97       	sbiw	r28, 0x29	; 41
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	f8 2e       	mov	r15, r24
    246c:	d6 2e       	mov	r13, r22
	char tmpStr[7];
	unsigned char tmpData[14];
	unsigned char i,page=0;

	printMenuHeader(ARHIV);
    246e:	86 e7       	ldi	r24, 0x76	; 118
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>

	LCD_puts_P(BDZ,4);
    2476:	64 e0       	ldi	r22, 0x04	; 4
    2478:	88 e6       	ldi	r24, 0x68	; 104
    247a:	91 e0       	ldi	r25, 0x01	; 1
    247c:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
	LCD_puts(itoa(currBDZaddr,tmpStr,10),3);
    2480:	0f 2d       	mov	r16, r15
    2482:	10 e0       	ldi	r17, 0x00	; 0
    2484:	4a e0       	ldi	r20, 0x0A	; 10
    2486:	be 01       	movw	r22, r28
    2488:	6d 5d       	subi	r22, 0xDD	; 221
    248a:	7f 4f       	sbci	r23, 0xFF	; 255
    248c:	c8 01       	movw	r24, r16
    248e:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
    2492:	63 e0       	ldi	r22, 0x03	; 3
    2494:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
	LCD_gotoXY(18,0);
    2498:	60 e0       	ldi	r22, 0x00	; 0
    249a:	82 e1       	ldi	r24, 0x12	; 18
    249c:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    24a0:	8d 2d       	mov	r24, r13
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	4a e0       	ldi	r20, 0x0A	; 10
    24a6:	be 01       	movw	r22, r28
    24a8:	6d 5d       	subi	r22, 0xDD	; 221
    24aa:	7f 4f       	sbci	r23, 0xFF	; 255
    24ac:	01 96       	adiw	r24, 0x01	; 1
    24ae:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
	LCD_puts(itoa(index+1,tmpStr,10),2);
    24b2:	62 e0       	ldi	r22, 0x02	; 2
    24b4:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>

	//первая часть архива
	if(send_read_arch(1,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
    24b8:	4d 2d       	mov	r20, r13
    24ba:	6f 2d       	mov	r22, r15
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	0e 94 90 0b 	call	0x1720	; 0x1720 <send_read_arch>
    24c2:	87 ff       	sbrs	r24, 7
    24c4:	03 c0       	rjmp	.+6      	; 0x24cc <viewArch+0x80>
    24c6:	0e 94 76 06 	call	0xcec	; 0xcec <printTOUT>
    24ca:	1c c0       	rjmp	.+56     	; 0x2504 <viewArch+0xb8>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
    24cc:	89 e0       	ldi	r24, 0x09	; 9
    24ce:	80 9f       	mul	r24, r16
    24d0:	f0 01       	movw	r30, r0
    24d2:	81 9f       	mul	r24, r17
    24d4:	f0 0d       	add	r31, r0
    24d6:	11 24       	eor	r1, r1
    24d8:	ed 59       	subi	r30, 0x9D	; 157
    24da:	fe 4f       	sbci	r31, 0xFE	; 254
    24dc:	80 81       	ld	r24, Z
    24de:	84 30       	cpi	r24, 0x04	; 4
    24e0:	11 f0       	breq	.+4      	; 0x24e6 <viewArch+0x9a>
	else return 0;
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	c6 c0       	rjmp	.+396    	; 0x2672 <viewArch+0x226>
    24e6:	de 01       	movw	r26, r28
    24e8:	55 96       	adiw	r26, 0x15	; 21
	LCD_gotoXY(18,0);
	LCD_puts(itoa(index+1,tmpStr,10),2);

	//первая часть архива
	if(send_read_arch(1,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	af 01       	movw	r20, r30
    24f0:	9a 01       	movw	r18, r20
    24f2:	28 0f       	add	r18, r24
    24f4:	39 1f       	adc	r19, r25
    24f6:	f9 01       	movw	r30, r18
    24f8:	20 81       	ld	r18, Z
    24fa:	2d 93       	st	X+, r18
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	87 30       	cpi	r24, 0x07	; 7
    2500:	91 05       	cpc	r25, r1
    2502:	b1 f7       	brne	.-20     	; 0x24f0 <viewArch+0xa4>
	else return 0;

	//вторая часть архива
	if(send_read_arch(2,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
    2504:	4d 2d       	mov	r20, r13
    2506:	6f 2d       	mov	r22, r15
    2508:	82 e0       	ldi	r24, 0x02	; 2
    250a:	0e 94 90 0b 	call	0x1720	; 0x1720 <send_read_arch>
    250e:	87 ff       	sbrs	r24, 7
    2510:	07 c0       	rjmp	.+14     	; 0x2520 <viewArch+0xd4>
    2512:	0e 94 76 06 	call	0xcec	; 0xcec <printTOUT>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_2) for(i=7;i<14;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i-7];	//скопировали данные
    2516:	f1 2c       	mov	r15, r1

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
    2518:	cc 24       	eor	r12, r12
    251a:	c3 94       	inc	r12
    251c:	d1 2c       	mov	r13, r1
    251e:	51 c0       	rjmp	.+162    	; 0x25c2 <viewArch+0x176>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
	else return 0;

	//вторая часть архива
	if(send_read_arch(2,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_2) for(i=7;i<14;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i-7];	//скопировали данные
    2520:	89 e0       	ldi	r24, 0x09	; 9
    2522:	80 9f       	mul	r24, r16
    2524:	f0 01       	movw	r30, r0
    2526:	81 9f       	mul	r24, r17
    2528:	f0 0d       	add	r31, r0
    252a:	11 24       	eor	r1, r1
    252c:	ed 59       	subi	r30, 0x9D	; 157
    252e:	fe 4f       	sbci	r31, 0xFE	; 254
    2530:	80 81       	ld	r24, Z
    2532:	85 30       	cpi	r24, 0x05	; 5
    2534:	b1 f6       	brne	.-84     	; 0x24e2 <viewArch+0x96>
    2536:	de 01       	movw	r26, r28
    2538:	5c 96       	adiw	r26, 0x1c	; 28
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	af 01       	movw	r20, r30
    2540:	9a 01       	movw	r18, r20
    2542:	28 0f       	add	r18, r24
    2544:	39 1f       	adc	r19, r25
    2546:	f9 01       	movw	r30, r18
    2548:	20 81       	ld	r18, Z
    254a:	2d 93       	st	X+, r18
    254c:	01 96       	adiw	r24, 0x01	; 1
    254e:	87 30       	cpi	r24, 0x07	; 7
    2550:	91 05       	cpc	r25, r1
    2552:	b1 f7       	brne	.-20     	; 0x2540 <viewArch+0xf4>
    2554:	e0 cf       	rjmp	.-64     	; 0x2516 <viewArch+0xca>

		if(tmpData[3]==0xFF) {LCD_gotoXY(0,2);LCD_puts_P(PUSTO,7);}	//если год 0xFF строка 0 "пусто"
		else
		{
			//строка 1 дата/время
			printTimeStr(&tmpData[1],0,1);
    2556:	ce 01       	movw	r24, r28
    2558:	46 96       	adiw	r24, 0x16	; 22
    255a:	0e 94 12 06 	call	0xc24	; 0xc24 <printTimeStr.constprop.3>

			switch(page)
    255e:	f1 10       	cpse	r15, r1
    2560:	3d c0       	rjmp	.+122    	; 0x25dc <viewArch+0x190>
			{
			case 0:
			{
				//строка ВОД1234 ДВХ1234
				printIOStr(&tmpData[8]);
    2562:	ce 01       	movw	r24, r28
    2564:	4d 96       	adiw	r24, 0x1d	; 29
    2566:	0e 94 ed 04 	call	0x9da	; 0x9da <printIOStr>

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
    256a:	63 e0       	ldi	r22, 0x03	; 3
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
    2572:	6b e5       	ldi	r22, 0x5B	; 91
    2574:	71 e0       	ldi	r23, 0x01	; 1
    2576:	ce 01       	movw	r24, r28
    2578:	01 96       	adiw	r24, 0x01	; 1
    257a:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <strcpy_P>
    257e:	66 ef       	ldi	r22, 0xF6	; 246
    2580:	70 e0       	ldi	r23, 0x00	; 0
    2582:	ce 01       	movw	r24, r28
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <strcat>
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
    258a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    258c:	8f 70       	andi	r24, 0x0F	; 15
    258e:	b1 f5       	brne	.+108    	; 0x25fc <viewArch+0x1b0>
    2590:	67 eb       	ldi	r22, 0xB7	; 183
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	ce 01       	movw	r24, r28
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <strcat_P>
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
				LCD_puts(buffer,20);
    259c:	64 e1       	ldi	r22, 0x14	; 20
    259e:	ce 01       	movw	r24, r28
    25a0:	01 96       	adiw	r24, 0x01	; 1
    25a2:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
			break;
			}//switch

		}

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    25a6:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    25aa:	87 30       	cpi	r24, 0x07	; 7
    25ac:	08 f0       	brcs	.+2      	; 0x25b0 <viewArch+0x164>
    25ae:	4f c0       	rjmp	.+158    	; 0x264e <viewArch+0x202>
    25b0:	85 30       	cpi	r24, 0x05	; 5
    25b2:	08 f0       	brcs	.+2      	; 0x25b6 <viewArch+0x16a>
    25b4:	5e c0       	rjmp	.+188    	; 0x2672 <viewArch+0x226>
    25b6:	83 30       	cpi	r24, 0x03	; 3
    25b8:	09 f4       	brne	.+2      	; 0x25bc <viewArch+0x170>
    25ba:	5b c0       	rjmp	.+182    	; 0x2672 <viewArch+0x226>
    25bc:	84 30       	cpi	r24, 0x04	; 4
    25be:	09 f4       	brne	.+2      	; 0x25c2 <viewArch+0x176>
    25c0:	53 c0       	rjmp	.+166    	; 0x2668 <viewArch+0x21c>

	while(1)
	{
		char buffer[20];

		if(tmpData[3]==0xFF) {LCD_gotoXY(0,2);LCD_puts_P(PUSTO,7);}	//если год 0xFF строка 0 "пусто"
    25c2:	88 8d       	ldd	r24, Y+24	; 0x18
    25c4:	8f 3f       	cpi	r24, 0xFF	; 255
    25c6:	39 f6       	brne	.-114    	; 0x2556 <viewArch+0x10a>
    25c8:	62 e0       	ldi	r22, 0x02	; 2
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    25d0:	67 e0       	ldi	r22, 0x07	; 7
    25d2:	8b e8       	ldi	r24, 0x8B	; 139
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
    25da:	e5 cf       	rjmp	.-54     	; 0x25a6 <viewArch+0x15a>
		else
		{
			//строка 1 дата/время
			printTimeStr(&tmpData[1],0,1);

			switch(page)
    25dc:	f1 e0       	ldi	r31, 0x01	; 1
    25de:	ff 12       	cpse	r15, r31
    25e0:	e2 cf       	rjmp	.-60     	; 0x25a6 <viewArch+0x15a>
			}
			break;
			case 1:
			{
				//строки вкл/откл МТЗ
				printMTZStr((unsigned int)tmpData[10]<<8 | tmpData[11],(unsigned int)tmpData[12]<<8 | tmpData[13]);
    25e2:	69 a1       	ldd	r22, Y+33	; 0x21
    25e4:	7a a1       	ldd	r23, Y+34	; 0x22
    25e6:	76 27       	eor	r23, r22
    25e8:	67 27       	eor	r22, r23
    25ea:	76 27       	eor	r23, r22
    25ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ee:	98 a1       	ldd	r25, Y+32	; 0x20
    25f0:	98 27       	eor	r25, r24
    25f2:	89 27       	eor	r24, r25
    25f4:	98 27       	eor	r25, r24
    25f6:	0e 94 a5 05 	call	0xb4a	; 0xb4a <printMTZStr>
			}
			break;
    25fa:	d5 cf       	rjmp	.-86     	; 0x25a6 <viewArch+0x15a>
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
    2600:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	a6 01       	movw	r20, r12
    2606:	08 2e       	mov	r0, r24
    2608:	02 c0       	rjmp	.+4      	; 0x260e <viewArch+0x1c2>
    260a:	44 0f       	add	r20, r20
    260c:	55 1f       	adc	r21, r21
    260e:	0a 94       	dec	r0
    2610:	e2 f7       	brpl	.-8      	; 0x260a <viewArch+0x1be>
    2612:	24 23       	and	r18, r20
    2614:	35 23       	and	r19, r21
    2616:	08 2e       	mov	r0, r24
    2618:	02 c0       	rjmp	.+4      	; 0x261e <viewArch+0x1d2>
    261a:	35 95       	asr	r19
    261c:	27 95       	ror	r18
    261e:	0a 94       	dec	r0
    2620:	e2 f7       	brpl	.-8      	; 0x261a <viewArch+0x1ce>
    2622:	8c 01       	movw	r16, r24
    2624:	0f 5f       	subi	r16, 0xFF	; 255
    2626:	1f 4f       	sbci	r17, 0xFF	; 255
    2628:	23 2b       	or	r18, r19
    262a:	61 f0       	breq	.+24     	; 0x2644 <viewArch+0x1f8>
    262c:	4a e0       	ldi	r20, 0x0A	; 10
    262e:	be 01       	movw	r22, r28
    2630:	6d 5d       	subi	r22, 0xDD	; 221
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
    2634:	c8 01       	movw	r24, r16
    2636:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
    263a:	bc 01       	movw	r22, r24
    263c:	ce 01       	movw	r24, r28
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <strcat>
    2644:	c8 01       	movw	r24, r16
    2646:	04 30       	cpi	r16, 0x04	; 4
    2648:	11 05       	cpc	r17, r1
    264a:	d1 f6       	brne	.-76     	; 0x2600 <viewArch+0x1b4>
    264c:	a7 cf       	rjmp	.-178    	; 0x259c <viewArch+0x150>
			break;
			}//switch

		}

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    264e:	87 30       	cpi	r24, 0x07	; 7
    2650:	31 f0       	breq	.+12     	; 0x265e <viewArch+0x212>
    2652:	8f 3f       	cpi	r24, 0xFF	; 255
    2654:	09 f0       	breq	.+2      	; 0x2658 <viewArch+0x20c>
    2656:	b5 cf       	rjmp	.-150    	; 0x25c2 <viewArch+0x176>
		break;
		case LEFT:if(page>0)page--;
		break;
		case ESC:return ESC;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    2658:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    265c:	b2 cf       	rjmp	.-156    	; 0x25c2 <viewArch+0x176>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:return UP;
		case DOWN:return DOWN;
		case RIGHT:if(page<1)page++;
    265e:	f1 10       	cpse	r15, r1
    2660:	b0 cf       	rjmp	.-160    	; 0x25c2 <viewArch+0x176>
    2662:	ff 24       	eor	r15, r15
    2664:	f3 94       	inc	r15
    2666:	ad cf       	rjmp	.-166    	; 0x25c2 <viewArch+0x176>
		break;
		case LEFT:if(page>0)page--;
    2668:	ff 20       	and	r15, r15
    266a:	09 f4       	brne	.+2      	; 0x266e <viewArch+0x222>
    266c:	aa cf       	rjmp	.-172    	; 0x25c2 <viewArch+0x176>
    266e:	fa 94       	dec	r15
    2670:	a8 cf       	rjmp	.-176    	; 0x25c2 <viewArch+0x176>
		default:continue;	//любая другая клавиша
		break;
		}
	}
	return 0;
}
    2672:	a9 96       	adiw	r28, 0x29	; 41
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	df 90       	pop	r13
    268a:	cf 90       	pop	r12
    268c:	08 95       	ret

0000268e <archieve>:
	if( whileKey() ==ESC)reset(currBDZaddr);//а если ответ был правильный предлагаем ресетнуть

}

static void archieve(void)
{
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
	unsigned char currBDZaddr = printSubMenu(ARHIV,INL); /*выполнить просмотр архива инлайновых*/
    2692:	62 e0       	ldi	r22, 0x02	; 2
    2694:	86 e7       	ldi	r24, 0x76	; 118
    2696:	91 e0       	ldi	r25, 0x01	; 1
    2698:	0e 94 30 11 	call	0x2260	; 0x2260 <printSubMenu>
    269c:	d8 2f       	mov	r29, r24
	unsigned char index=0;

	if(currBDZaddr<1)return;
    269e:	88 23       	and	r24, r24
    26a0:	91 f0       	breq	.+36     	; 0x26c6 <archieve+0x38>
    26a2:	c0 e0       	ldi	r28, 0x00	; 0

	while(1)
	{
		switch(viewArch(currBDZaddr,index))
    26a4:	6c 2f       	mov	r22, r28
    26a6:	8d 2f       	mov	r24, r29
    26a8:	0e 94 26 12 	call	0x244c	; 0x244c <viewArch>
    26ac:	85 30       	cpi	r24, 0x05	; 5
    26ae:	19 f0       	breq	.+6      	; 0x26b6 <archieve+0x28>
    26b0:	86 30       	cpi	r24, 0x06	; 6
    26b2:	29 f0       	breq	.+10     	; 0x26be <archieve+0x30>
    26b4:	08 c0       	rjmp	.+16     	; 0x26c6 <archieve+0x38>
		{
		case UP:if(index>0)index--;
    26b6:	cc 23       	and	r28, r28
    26b8:	a9 f3       	breq	.-22     	; 0x26a4 <archieve+0x16>
    26ba:	c1 50       	subi	r28, 0x01	; 1
    26bc:	f3 cf       	rjmp	.-26     	; 0x26a4 <archieve+0x16>
		break;
		case DOWN:if(index<31)index++;
    26be:	cf 31       	cpi	r28, 0x1F	; 31
    26c0:	88 f7       	brcc	.-30     	; 0x26a4 <archieve+0x16>
    26c2:	cf 5f       	subi	r28, 0xFF	; 255
    26c4:	ef cf       	rjmp	.-34     	; 0x26a4 <archieve+0x16>
		break;
		default:return;
		}
	}
}
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	08 95       	ret

000026cc <reset>:

	return;
}

static void reset(unsigned char currBDZaddr)
{
    26cc:	cf 93       	push	r28
    26ce:	c8 2f       	mov	r28, r24
	whileKey();	//ждем нажатия/отпускания кнопки или автовыхода
    26d0:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>

	LCD_clr();
    26d4:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clr>
	LCD_puts_P(SBROSIT,20);
    26d8:	64 e1       	ldi	r22, 0x14	; 20
    26da:	83 ea       	ldi	r24, 0xA3	; 163
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
    26e2:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    26e6:	82 30       	cpi	r24, 0x02	; 2
    26e8:	29 f4       	brne	.+10     	; 0x26f4 <reset+0x28>
    26ea:	62 e0       	ldi	r22, 0x02	; 2
    26ec:	8c 2f       	mov	r24, r28
}
    26ee:	cf 91       	pop	r28
	whileKey();	//ждем нажатия/отпускания кнопки или автовыхода

	LCD_clr();
	LCD_puts_P(SBROSIT,20);

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
    26f0:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <send_cmd>
}
    26f4:	cf 91       	pop	r28
    26f6:	08 95       	ret

000026f8 <fault>:
		}
	}
}

static void fault(void)
{
    26f8:	ef 92       	push	r14
    26fa:	ff 92       	push	r15
    26fc:	1f 93       	push	r17
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	00 d0       	rcall	.+0      	; 0x2704 <fault+0xc>
    2704:	00 d0       	rcall	.+0      	; 0x2706 <fault+0xe>
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
	char tmpStr[4];
	unsigned char currBDZaddr = printSubMenu(NEISPRAVNOST,FLT);	//получили адрес выбранного БДЗ
    270a:	61 e0       	ldi	r22, 0x01	; 1
    270c:	8a e8       	ldi	r24, 0x8A	; 138
    270e:	91 e0       	ldi	r25, 0x01	; 1
    2710:	0e 94 30 11 	call	0x2260	; 0x2260 <printSubMenu>
    2714:	18 2f       	mov	r17, r24
//LCD_gotoXY(0,0);
//LCD_putchar(currBDZaddr+'0');
//_delay_ms(2000);
	if(currBDZaddr<1)return;
    2716:	88 23       	and	r24, r24
    2718:	09 f4       	brne	.+2      	; 0x271c <fault+0x24>
    271a:	4c c0       	rjmp	.+152    	; 0x27b4 <fault+0xbc>

	printMenuHeader(NEISPRAVNOST);
    271c:	8a e8       	ldi	r24, 0x8A	; 138
    271e:	91 e0       	ldi	r25, 0x01	; 1
    2720:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>

	LCD_puts_P(BDZ,4);
    2724:	64 e0       	ldi	r22, 0x04	; 4
    2726:	88 e6       	ldi	r24, 0x68	; 104
    2728:	91 e0       	ldi	r25, 0x01	; 1
    272a:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
	LCD_puts(itoa(currBDZaddr,tmpStr,10),3);
    272e:	e1 2e       	mov	r14, r17
    2730:	f1 2c       	mov	r15, r1
    2732:	4a e0       	ldi	r20, 0x0A	; 10
    2734:	be 01       	movw	r22, r28
    2736:	6f 5f       	subi	r22, 0xFF	; 255
    2738:	7f 4f       	sbci	r23, 0xFF	; 255
    273a:	c7 01       	movw	r24, r14
    273c:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
    2740:	63 e0       	ldi	r22, 0x03	; 3
    2742:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>

	if(send_cmd(currBDZaddr,RD_FAULT) <0) printTOUT();	//послали команду,дождались таймаута -"нет связи"
    2746:	63 e0       	ldi	r22, 0x03	; 3
    2748:	81 2f       	mov	r24, r17
    274a:	0e 94 3e 0c 	call	0x187c	; 0x187c <send_cmd>
    274e:	87 ff       	sbrs	r24, 7
    2750:	03 c0       	rjmp	.+6      	; 0x2758 <fault+0x60>
    2752:	0e 94 76 06 	call	0xcec	; 0xcec <printTOUT>
    2756:	27 c0       	rjmp	.+78     	; 0x27a6 <fault+0xae>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_FAULT)	//иначе если принятое сообщени это ответ на этот запрос
    2758:	29 e0       	ldi	r18, 0x09	; 9
    275a:	2e 9d       	mul	r18, r14
    275c:	c0 01       	movw	r24, r0
    275e:	2f 9d       	mul	r18, r15
    2760:	90 0d       	add	r25, r0
    2762:	11 24       	eor	r1, r1
    2764:	9c 01       	movw	r18, r24
    2766:	2d 59       	subi	r18, 0x9D	; 157
    2768:	3e 4f       	sbci	r19, 0xFE	; 254
    276a:	79 01       	movw	r14, r18
    276c:	f9 01       	movw	r30, r18
    276e:	20 81       	ld	r18, Z
    2770:	23 30       	cpi	r18, 0x03	; 3
    2772:	01 f5       	brne	.+64     	; 0x27b4 <fault+0xbc>
	{
//		data[1] -состояния входов	 <7>ЦВХ3; <6>ЦВХ2; <5>ЦВХ1; <4>ЦВХ0; <3>ОВХ3; <2>ОВХ2; <1>ОВХ1; <0>ОВХ0  (неисправный вход ==1)
//		data[2] -код ошибки {TEST=1,DATACRC,WATCHDOG,HARDMEM,SOFTHAND,SOFTTIM,UART,RTC,CAN,MSG}
		printIOStr(&inSysBDZ[currBDZaddr].data[1]);
    2774:	8c 59       	subi	r24, 0x9C	; 156
    2776:	9e 4f       	sbci	r25, 0xFE	; 254
    2778:	0e 94 ed 04 	call	0x9da	; 0x9da <printIOStr>

		LCD_gotoXY(0,3);
    277c:	63 e0       	ldi	r22, 0x03	; 3
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		LCD_puts_P(OSHIBKA,7);
    2784:	67 e0       	ldi	r22, 0x07	; 7
    2786:	85 ec       	ldi	r24, 0xC5	; 197
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
		LCD_puts(itoa(inSysBDZ[currBDZaddr].data[2],tmpStr,10),2);
    278e:	f7 01       	movw	r30, r14
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	4a e0       	ldi	r20, 0x0A	; 10
    2794:	be 01       	movw	r22, r28
    2796:	6f 5f       	subi	r22, 0xFF	; 255
    2798:	7f 4f       	sbci	r23, 0xFF	; 255
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
    27a0:	62 e0       	ldi	r22, 0x02	; 2
    27a2:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
	}
	else return;							//если получен не тот ответ выходим
	if( whileKey() ==ESC)reset(currBDZaddr);//а если ответ был правильный предлагаем ресетнуть
    27a6:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    27aa:	83 30       	cpi	r24, 0x03	; 3
    27ac:	19 f4       	brne	.+6      	; 0x27b4 <fault+0xbc>
    27ae:	81 2f       	mov	r24, r17
    27b0:	0e 94 66 13 	call	0x26cc	; 0x26cc <reset>

}
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	df 91       	pop	r29
    27be:	cf 91       	pop	r28
    27c0:	1f 91       	pop	r17
    27c2:	ff 90       	pop	r15
    27c4:	ef 90       	pop	r14
    27c6:	08 95       	ret

000027c8 <alarm>:
{
	printSubMenu(NA_SVYAZI,INL);
}

static void alarm(void)
{
    27c8:	8f 92       	push	r8
    27ca:	9f 92       	push	r9
    27cc:	af 92       	push	r10
    27ce:	bf 92       	push	r11
    27d0:	cf 92       	push	r12
    27d2:	df 92       	push	r13
    27d4:	ef 92       	push	r14
    27d6:	ff 92       	push	r15
    27d8:	0f 93       	push	r16
    27da:	1f 93       	push	r17
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <alarm+0x1a>
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <alarm+0x1c>
    27e4:	1f 92       	push	r1
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
	unsigned char Ndev=0,tmpAddr=0;
	char tmpStr[5];

	printMenuHeader(AVARIYA);//рисуем название пункта':'
    27ea:	88 e9       	ldi	r24, 0x98	; 152
    27ec:	91 e0       	ldi	r25, 0x01	; 1
    27ee:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>
    27f2:	aa 24       	eor	r10, r10
    27f4:	a3 94       	inc	r10
    27f6:	b1 2c       	mov	r11, r1
static void alarm(void)
{
	unsigned char currBDZaddr = 0;
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
	unsigned char Ndev=0,tmpAddr=0;
    27f8:	10 e0       	ldi	r17, 0x00	; 0
    27fa:	00 e0       	ldi	r16, 0x00	; 0

static void alarm(void)
{
	unsigned char currBDZaddr = 0;
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
    27fc:	ee 24       	eor	r14, r14
    27fe:	ea 94       	dec	r14
    2800:	fe 2c       	mov	r15, r14
    2802:	cc 24       	eor	r12, r12
    2804:	ca 94       	dec	r12
    2806:	dc 2c       	mov	r13, r12

	printMenuHeader(AVARIYA);//рисуем название пункта':'

	for(unsigned char i=1;i<MAXQDEV;i++)
	{
		if(readID(i)==i && chkBit(inSysBDZ[i].flags,ALM))	//обнаружили девайс с флагом авария
    2808:	39 e0       	ldi	r19, 0x09	; 9
    280a:	83 2e       	mov	r8, r19
    280c:	c5 01       	movw	r24, r10
    280e:	87 5f       	subi	r24, 0xF7	; 247
    2810:	9f 4f       	sbci	r25, 0xFF	; 255
    2812:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    2816:	98 2e       	mov	r9, r24
    2818:	8a 11       	cpse	r24, r10
    281a:	2f c0       	rjmp	.+94     	; 0x287a <alarm+0xb2>
    281c:	8a 9c       	mul	r8, r10
    281e:	f0 01       	movw	r30, r0
    2820:	8b 9c       	mul	r8, r11
    2822:	f0 0d       	add	r31, r0
    2824:	11 24       	eor	r1, r1
    2826:	ed 59       	subi	r30, 0x9D	; 157
    2828:	fe 4f       	sbci	r31, 0xFE	; 254
    282a:	80 85       	ldd	r24, Z+8	; 0x08
    282c:	80 ff       	sbrs	r24, 0
    282e:	25 c0       	rjmp	.+74     	; 0x287a <alarm+0xb2>
		{
			if(tmpAddr==0)tmpAddr=i;						//на случай если не найдется БДЗ,зафиксировавщих время сраб.МТЗ
    2830:	11 11       	cpse	r17, r1
    2832:	01 c0       	rjmp	.+2      	; 0x2836 <alarm+0x6e>
    2834:	19 2d       	mov	r17, r9
			Ndev++;											//добавляем кол-во обнаруженных девайсов
    2836:	0f 5f       	subi	r16, 0xFF	; 255
			if(send_read_arch(2,i,0) <0) printTOUT();		//запрашиваем чась архива со значениями МТЗ.Если получен таймаут...
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	69 2d       	mov	r22, r9
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	0e 94 90 0b 	call	0x1720	; 0x1720 <send_read_arch>
    2842:	87 ff       	sbrs	r24, 7
    2844:	03 c0       	rjmp	.+6      	; 0x284c <alarm+0x84>
    2846:	0e 94 76 06 	call	0xcec	; 0xcec <printTOUT>
    284a:	17 c0       	rjmp	.+46     	; 0x287a <alarm+0xb2>
			else if(inSysBDZ[i].data[0]==RD_ARCH_2)			//получили тот ответ который надо
    284c:	8a 9c       	mul	r8, r10
    284e:	f0 01       	movw	r30, r0
    2850:	8b 9c       	mul	r8, r11
    2852:	f0 0d       	add	r31, r0
    2854:	11 24       	eor	r1, r1
    2856:	ed 59       	subi	r30, 0x9D	; 157
    2858:	fe 4f       	sbci	r31, 0xFE	; 254
    285a:	80 81       	ld	r24, Z
    285c:	85 30       	cpi	r24, 0x05	; 5
    285e:	69 f4       	brne	.+26     	; 0x287a <alarm+0xb2>
			{
				unsigned int tmpTime=(unsigned int)inSysBDZ[i].data[3]<<8 | inSysBDZ[i].data[4];
    2860:	23 81       	ldd	r18, Z+3	; 0x03
    2862:	84 81       	ldd	r24, Z+4	; 0x04
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	92 2b       	or	r25, r18

				if(tmpTime < minMTZ_ontime)
    2868:	8c 15       	cp	r24, r12
    286a:	9d 05       	cpc	r25, r13
    286c:	30 f4       	brcc	.+12     	; 0x287a <alarm+0xb2>
				{
					minMTZ_ontime=tmpTime;				//если полученное время меньше сохраненного минимального-перезаписываем
					MTZ_offtime = (unsigned int)inSysBDZ[i].data[5]<<8 | inSysBDZ[i].data[6];	//время отпускания
    286e:	25 81       	ldd	r18, Z+5	; 0x05
    2870:	e6 80       	ldd	r14, Z+6	; 0x06
    2872:	f1 2c       	mov	r15, r1
    2874:	f2 2a       	or	r15, r18
    2876:	19 2d       	mov	r17, r9
    2878:	6c 01       	movw	r12, r24
    287a:	2f ef       	ldi	r18, 0xFF	; 255
    287c:	a2 1a       	sub	r10, r18
    287e:	b2 0a       	sbc	r11, r18
	unsigned char Ndev=0,tmpAddr=0;
	char tmpStr[5];

	printMenuHeader(AVARIYA);//рисуем название пункта':'

	for(unsigned char i=1;i<MAXQDEV;i++)
    2880:	83 e6       	ldi	r24, 0x63	; 99
    2882:	a8 16       	cp	r10, r24
    2884:	b1 04       	cpc	r11, r1
    2886:	11 f6       	brne	.-124    	; 0x280c <alarm+0x44>
				}
			}
		}
	}

	LCD_puts(itoa(Ndev,tmpStr,10),strlen(tmpStr)+2);LCD_puts_P(BDZ,4);		//ХХX	БД3
    2888:	be 01       	movw	r22, r28
    288a:	6f 5f       	subi	r22, 0xFF	; 255
    288c:	7f 4f       	sbci	r23, 0xFF	; 255
    288e:	fb 01       	movw	r30, r22
    2890:	01 90       	ld	r0, Z+
    2892:	00 20       	and	r0, r0
    2894:	e9 f7       	brne	.-6      	; 0x2890 <alarm+0xc8>
    2896:	31 97       	sbiw	r30, 0x01	; 1
    2898:	5f 01       	movw	r10, r30
    289a:	a6 1a       	sub	r10, r22
    289c:	b7 0a       	sbc	r11, r23
    289e:	4a e0       	ldi	r20, 0x0A	; 10
    28a0:	80 2f       	mov	r24, r16
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__itoa_ncheck>
    28a8:	62 e0       	ldi	r22, 0x02	; 2
    28aa:	6a 0d       	add	r22, r10
    28ac:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
    28b0:	64 e0       	ldi	r22, 0x04	; 4
    28b2:	88 e6       	ldi	r24, 0x68	; 104
    28b4:	91 e0       	ldi	r25, 0x01	; 1
    28b6:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
	if(tmpAddr !=0)
    28ba:	11 23       	and	r17, r17
    28bc:	e1 f0       	breq	.+56     	; 0x28f6 <alarm+0x12e>
	{
		if(send_read_arch(1,tmpAddr,0) <0)printTOUT();		//запрашиваем часть архива со значениями RTC. Если получен таймаут...
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	61 2f       	mov	r22, r17
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	0e 94 90 0b 	call	0x1720	; 0x1720 <send_read_arch>
    28c8:	87 ff       	sbrs	r24, 7
    28ca:	03 c0       	rjmp	.+6      	; 0x28d2 <alarm+0x10a>
    28cc:	0e 94 76 06 	call	0xcec	; 0xcec <printTOUT>
    28d0:	12 c0       	rjmp	.+36     	; 0x28f6 <alarm+0x12e>
		else if(inSysBDZ[tmpAddr].data[0]==RD_ARCH_1)
    28d2:	29 e0       	ldi	r18, 0x09	; 9
    28d4:	12 9f       	mul	r17, r18
    28d6:	c0 01       	movw	r24, r0
    28d8:	11 24       	eor	r1, r1
    28da:	fc 01       	movw	r30, r24
    28dc:	ed 59       	subi	r30, 0x9D	; 157
    28de:	fe 4f       	sbci	r31, 0xFE	; 254
    28e0:	20 81       	ld	r18, Z
    28e2:	24 30       	cpi	r18, 0x04	; 4
    28e4:	41 f4       	brne	.+16     	; 0x28f6 <alarm+0x12e>
		{
			//строка дата/время
			printTimeStr(&inSysBDZ[tmpAddr].data[1],0,1);
    28e6:	8c 59       	subi	r24, 0x9C	; 156
    28e8:	9e 4f       	sbci	r25, 0xFE	; 254
    28ea:	0e 94 12 06 	call	0xc24	; 0xc24 <printTimeStr.constprop.3>
			//строки вкл/откл МТЗ
			printMTZStr(minMTZ_ontime,MTZ_offtime);
    28ee:	b7 01       	movw	r22, r14
    28f0:	c6 01       	movw	r24, r12
    28f2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <printMTZStr>
		}
	}
LOOP:
	switch(whileKey())	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    28f6:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    28fa:	83 30       	cpi	r24, 0x03	; 3
    28fc:	29 f0       	breq	.+10     	; 0x2908 <alarm+0x140>
    28fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2900:	59 f1       	breq	.+86     	; 0x2958 <alarm+0x190>
    2902:	82 30       	cpi	r24, 0x02	; 2
    2904:	c1 f7       	brne	.-16     	; 0x28f6 <alarm+0x12e>
    2906:	06 c0       	rjmp	.+12     	; 0x2914 <alarm+0x14c>
	{
	case ESC:	//нажат ESC посылаем общий сброс
	{
		if(Ndev !=0) reset(0);
    2908:	00 23       	and	r16, r16
    290a:	31 f1       	breq	.+76     	; 0x2958 <alarm+0x190>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	0e 94 66 13 	call	0x26cc	; 0x26cc <reset>
    2912:	22 c0       	rjmp	.+68     	; 0x2958 <alarm+0x190>
		return;
	}
	break;
	case ENT:if(Ndev==0)return;	//нажат ENT подолжаем далее(если есть аварии)
    2914:	00 23       	and	r16, r16
    2916:	01 f1       	breq	.+64     	; 0x2958 <alarm+0x190>
	break;
	default:goto LOOP;	//любая другая клавиша
	break;
	}

	currBDZaddr = printSubMenu(AVARIYA,ALM);
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	88 e9       	ldi	r24, 0x98	; 152
    291c:	91 e0       	ldi	r25, 0x01	; 1
    291e:	0e 94 30 11 	call	0x2260	; 0x2260 <printSubMenu>
    2922:	08 2f       	mov	r16, r24
	if(currBDZaddr<1)return;
    2924:	88 23       	and	r24, r24
    2926:	c1 f0       	breq	.+48     	; 0x2958 <alarm+0x190>
    2928:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		switch(viewArch(currBDZaddr,index))
    292a:	61 2f       	mov	r22, r17
    292c:	80 2f       	mov	r24, r16
    292e:	0e 94 26 12 	call	0x244c	; 0x244c <viewArch>
    2932:	85 30       	cpi	r24, 0x05	; 5
    2934:	49 f0       	breq	.+18     	; 0x2948 <alarm+0x180>
    2936:	18 f4       	brcc	.+6      	; 0x293e <alarm+0x176>
    2938:	83 30       	cpi	r24, 0x03	; 3
    293a:	71 f0       	breq	.+28     	; 0x2958 <alarm+0x190>
    293c:	f6 cf       	rjmp	.-20     	; 0x292a <alarm+0x162>
    293e:	86 30       	cpi	r24, 0x06	; 6
    2940:	39 f0       	breq	.+14     	; 0x2950 <alarm+0x188>
    2942:	8f 3f       	cpi	r24, 0xFF	; 255
    2944:	49 f0       	breq	.+18     	; 0x2958 <alarm+0x190>
    2946:	f1 cf       	rjmp	.-30     	; 0x292a <alarm+0x162>
		{
		case UP:if(index>0)index--;
    2948:	11 23       	and	r17, r17
    294a:	79 f3       	breq	.-34     	; 0x292a <alarm+0x162>
    294c:	11 50       	subi	r17, 0x01	; 1
    294e:	ed cf       	rjmp	.-38     	; 0x292a <alarm+0x162>
		break;
		case DOWN:if(index<31)index++;
    2950:	1f 31       	cpi	r17, 0x1F	; 31
    2952:	58 f7       	brcc	.-42     	; 0x292a <alarm+0x162>
    2954:	1f 5f       	subi	r17, 0xFF	; 255
    2956:	e9 cf       	rjmp	.-46     	; 0x292a <alarm+0x162>
		break;
		default:continue;	//любая другая клавиша
		break;
		}
	}
}
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	df 91       	pop	r29
    2964:	cf 91       	pop	r28
    2966:	1f 91       	pop	r17
    2968:	0f 91       	pop	r16
    296a:	ff 90       	pop	r15
    296c:	ef 90       	pop	r14
    296e:	df 90       	pop	r13
    2970:	cf 90       	pop	r12
    2972:	bf 90       	pop	r11
    2974:	af 90       	pop	r10
    2976:	9f 90       	pop	r9
    2978:	8f 90       	pop	r8
    297a:	08 95       	ret

0000297c <naviMenu>:
		LCD_puts(lowerCase,19);	//прорисовали пункты меню:
	}
}

void naviMenu(struct menu *level)
{
    297c:	7f 92       	push	r7
    297e:	8f 92       	push	r8
    2980:	9f 92       	push	r9
    2982:	af 92       	push	r10
    2984:	bf 92       	push	r11
    2986:	cf 92       	push	r12
    2988:	df 92       	push	r13
    298a:	ef 92       	push	r14
    298c:	ff 92       	push	r15
    298e:	0f 93       	push	r16
    2990:	1f 93       	push	r17
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	64 97       	sbiw	r28, 0x14	; 20
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	5c 01       	movw	r10, r24
	unsigned char cursorPos=1;			//указатель на текущий пункт
	unsigned char screenPos=0;			//указатель на текущий пункт
	unsigned char numPunkt,currPunkt=1;	//счетчик пунктов меню,

	for(numPunkt=0;(level+1+numPunkt)->name != NULL;numPunkt++);	//считаем кол-во пунктов в подменю (level -заголовок; level+1  -первый пункт)
    29a8:	e1 2c       	mov	r14, r1
    29aa:	f5 01       	movw	r30, r10
    29ac:	24 e0       	ldi	r18, 0x04	; 4
    29ae:	e2 9e       	mul	r14, r18
    29b0:	e0 0d       	add	r30, r0
    29b2:	f1 1d       	adc	r31, r1
    29b4:	11 24       	eor	r1, r1
    29b6:	84 81       	ldd	r24, Z+4	; 0x04
    29b8:	95 81       	ldd	r25, Z+5	; 0x05
    29ba:	89 2b       	or	r24, r25
    29bc:	11 f0       	breq	.+4      	; 0x29c2 <naviMenu+0x46>
    29be:	e3 94       	inc	r14
    29c0:	f4 cf       	rjmp	.-24     	; 0x29aa <naviMenu+0x2e>
    29c2:	01 e0       	ldi	r16, 0x01	; 1
    29c4:	f1 2c       	mov	r15, r1
    29c6:	11 e0       	ldi	r17, 0x01	; 1

	while(1)
	{
		printMenuHeader(level->name);		//рисуем заголовок
    29c8:	f5 01       	movw	r30, r10
    29ca:	80 81       	ld	r24, Z
    29cc:	91 81       	ldd	r25, Z+1	; 0x01
    29ce:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>
    29d2:	c5 01       	movw	r24, r10
    29d4:	f4 e0       	ldi	r31, 0x04	; 4
    29d6:	ff 9e       	mul	r15, r31
    29d8:	80 0d       	add	r24, r0
    29da:	91 1d       	adc	r25, r1
    29dc:	11 24       	eor	r1, r1
    29de:	9c 01       	movw	r18, r24
    29e0:	2c 5f       	subi	r18, 0xFC	; 252
    29e2:	3f 4f       	sbci	r19, 0xFF	; 255
    29e4:	69 01       	movw	r12, r18

static inline void printMenuPunkt(struct menu *level)
{
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
    29e6:	91 2c       	mov	r9, r1
	{
		if((level+i)->name == NULL)return;	//если вместо имени заглушка(пункта не существует)
    29e8:	f6 01       	movw	r30, r12
    29ea:	20 81       	ld	r18, Z
    29ec:	31 81       	ldd	r19, Z+1	; 0x01
    29ee:	21 15       	cp	r18, r1
    29f0:	31 05       	cpc	r19, r1
    29f2:	29 f1       	breq	.+74     	; 0x2a3e <naviMenu+0xc2>
    29f4:	de 01       	movw	r26, r28
    29f6:	11 96       	adiw	r26, 0x01	; 1
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	7a 2e       	mov	r7, r26
    29fe:	8b 2e       	mov	r8, r27
    2a00:	f9 01       	movw	r30, r18
    2a02:	e8 0f       	add	r30, r24
    2a04:	f9 1f       	adc	r31, r25
		for(unsigned char j=0;j<19;j++)		//преобразуем названия пунктов меню в нижний регистр
		{
			lowerCase[j]=(pgm_read_byte(&(level+i)->name[j]) >= 0xC0)?( pgm_read_byte(&(level+i)->name[j])+0x20 ):(pgm_read_byte(&(level+i)->name[j]));
    2a06:	44 91       	lpm	r20, Z
    2a08:	40 3c       	cpi	r20, 0xC0	; 192
    2a0a:	18 f0       	brcs	.+6      	; 0x2a12 <naviMenu+0x96>
    2a0c:	e4 91       	lpm	r30, Z
    2a0e:	e0 5e       	subi	r30, 0xE0	; 224
    2a10:	01 c0       	rjmp	.+2      	; 0x2a14 <naviMenu+0x98>
    2a12:	e4 91       	lpm	r30, Z
    2a14:	ed 93       	st	X+, r30
    2a16:	01 96       	adiw	r24, 0x01	; 1
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
	{
		if((level+i)->name == NULL)return;	//если вместо имени заглушка(пункта не существует)
		for(unsigned char j=0;j<19;j++)		//преобразуем названия пунктов меню в нижний регистр
    2a18:	83 31       	cpi	r24, 0x13	; 19
    2a1a:	91 05       	cpc	r25, r1
    2a1c:	89 f7       	brne	.-30     	; 0x2a00 <naviMenu+0x84>
		{
			lowerCase[j]=(pgm_read_byte(&(level+i)->name[j]) >= 0xC0)?( pgm_read_byte(&(level+i)->name[j])+0x20 ):(pgm_read_byte(&(level+i)->name[j]));
		}
		LCD_gotoXY(1,i+1);
    2a1e:	93 94       	inc	r9
    2a20:	69 2d       	mov	r22, r9
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		LCD_puts(lowerCase,19);	//прорисовали пункты меню:
    2a28:	63 e1       	ldi	r22, 0x13	; 19
    2a2a:	87 2d       	mov	r24, r7
    2a2c:	98 2d       	mov	r25, r8
    2a2e:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
    2a32:	f4 e0       	ldi	r31, 0x04	; 4
    2a34:	cf 0e       	add	r12, r31
    2a36:	d1 1c       	adc	r13, r1

static inline void printMenuPunkt(struct menu *level)
{
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
    2a38:	23 e0       	ldi	r18, 0x03	; 3
    2a3a:	92 12       	cpse	r9, r18
    2a3c:	d5 cf       	rjmp	.-86     	; 0x29e8 <naviMenu+0x6c>

	while(1)
	{
		printMenuHeader(level->name);		//рисуем заголовок
		printMenuPunkt(level+screenPos+1);	//пункты меню
		LCD_gotoXY(0,cursorPos);			//и курсор (символ >)
    2a3e:	61 2f       	mov	r22, r17
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		LCD_putchar(0x84);
    2a46:	84 e8       	ldi	r24, 0x84	; 132
    2a48:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2a4c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    2a50:	85 30       	cpi	r24, 0x05	; 5
    2a52:	61 f1       	breq	.+88     	; 0x2aac <naviMenu+0x130>
    2a54:	c8 f4       	brcc	.+50     	; 0x2a88 <naviMenu+0x10c>
    2a56:	82 30       	cpi	r24, 0x02	; 2
    2a58:	99 f1       	breq	.+102    	; 0x2ac0 <naviMenu+0x144>
    2a5a:	83 30       	cpi	r24, 0x03	; 3
    2a5c:	09 f0       	breq	.+2      	; 0x2a60 <naviMenu+0xe4>
    2a5e:	b4 cf       	rjmp	.-152    	; 0x29c8 <naviMenu+0x4c>
		break;
		case NOKEY:asm("jmp 0");	//автовыход
		break;
		}
	}
}
    2a60:	64 96       	adiw	r28, 0x14	; 20
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	1f 91       	pop	r17
    2a72:	0f 91       	pop	r16
    2a74:	ff 90       	pop	r15
    2a76:	ef 90       	pop	r14
    2a78:	df 90       	pop	r13
    2a7a:	cf 90       	pop	r12
    2a7c:	bf 90       	pop	r11
    2a7e:	af 90       	pop	r10
    2a80:	9f 90       	pop	r9
    2a82:	8f 90       	pop	r8
    2a84:	7f 90       	pop	r7
    2a86:	08 95       	ret
		printMenuHeader(level->name);		//рисуем заголовок
		printMenuPunkt(level+screenPos+1);	//пункты меню
		LCD_gotoXY(0,cursorPos);			//и курсор (символ >)
		LCD_putchar(0x84);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2a88:	86 30       	cpi	r24, 0x06	; 6
    2a8a:	31 f0       	breq	.+12     	; 0x2a98 <naviMenu+0x11c>
    2a8c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <naviMenu+0x116>
    2a90:	9b cf       	rjmp	.-202    	; 0x29c8 <naviMenu+0x4c>
		break;
		case ENT:(level+currPunkt)->pFunc();	//-запускаем функцию выбранного пункта	(она также может вызвать naviMenu -следующий подуровень)
		break;
		case ESC:return;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    2a92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    2a96:	98 cf       	rjmp	.-208    	; 0x29c8 <naviMenu+0x4c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt)
    2a98:	0e 15       	cp	r16, r14
    2a9a:	08 f0       	brcs	.+2      	; 0x2a9e <naviMenu+0x122>
    2a9c:	95 cf       	rjmp	.-214    	; 0x29c8 <naviMenu+0x4c>
			{
				++currPunkt;
    2a9e:	0f 5f       	subi	r16, 0xFF	; 255
				(cursorPos < NUMOFMENUSTRING)?(cursorPos++):(screenPos++);
    2aa0:	13 30       	cpi	r17, 0x03	; 3
    2aa2:	10 f4       	brcc	.+4      	; 0x2aa8 <naviMenu+0x12c>
    2aa4:	1f 5f       	subi	r17, 0xFF	; 255
    2aa6:	90 cf       	rjmp	.-224    	; 0x29c8 <naviMenu+0x4c>
    2aa8:	f3 94       	inc	r15
    2aaa:	8e cf       	rjmp	.-228    	; 0x29c8 <naviMenu+0x4c>
			}
		}
		break;
		case UP:
		{
			if(currPunkt > 1 )
    2aac:	02 30       	cpi	r16, 0x02	; 2
    2aae:	08 f4       	brcc	.+2      	; 0x2ab2 <naviMenu+0x136>
    2ab0:	8b cf       	rjmp	.-234    	; 0x29c8 <naviMenu+0x4c>
			{
				--currPunkt;
    2ab2:	01 50       	subi	r16, 0x01	; 1
				(cursorPos > 1)?(cursorPos--):(screenPos--);
    2ab4:	11 30       	cpi	r17, 0x01	; 1
    2ab6:	11 f0       	breq	.+4      	; 0x2abc <naviMenu+0x140>
    2ab8:	11 50       	subi	r17, 0x01	; 1
    2aba:	86 cf       	rjmp	.-244    	; 0x29c8 <naviMenu+0x4c>
    2abc:	fa 94       	dec	r15
    2abe:	84 cf       	rjmp	.-248    	; 0x29c8 <naviMenu+0x4c>
			}
		}
		break;
		case ENT:(level+currPunkt)->pFunc();	//-запускаем функцию выбранного пункта	(она также может вызвать naviMenu -следующий подуровень)
    2ac0:	f5 01       	movw	r30, r10
    2ac2:	34 e0       	ldi	r19, 0x04	; 4
    2ac4:	03 9f       	mul	r16, r19
    2ac6:	e0 0d       	add	r30, r0
    2ac8:	f1 1d       	adc	r31, r1
    2aca:	11 24       	eor	r1, r1
    2acc:	02 80       	ldd	r0, Z+2	; 0x02
    2ace:	f3 81       	ldd	r31, Z+3	; 0x03
    2ad0:	e0 2d       	mov	r30, r0
    2ad2:	09 95       	icall
		break;
    2ad4:	79 cf       	rjmp	.-270    	; 0x29c8 <naviMenu+0x4c>

00002ad6 <change_logic>:
		}
	}
}

static void change_logic(void)
{
    2ad6:	0f 93       	push	r16
    2ad8:	1f 93       	push	r17
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29

	unsigned char numBDZ=0;
	scansys();
    2ade:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <scansys>
    2ae2:	c1 e0       	ldi	r28, 0x01	; 1
    2ae4:	d0 e0       	ldi	r29, 0x00	; 0
}

static void change_logic(void)
{

	unsigned char numBDZ=0;
    2ae6:	10 e0       	ldi	r17, 0x00	; 0
	scansys();
	//считаем кол-во БДЗ инлайн(в сети)
	for(unsigned char i=1;i<MAXQDEV;i++)
		if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL))
    2ae8:	09 e0       	ldi	r16, 0x09	; 9
    2aea:	ce 01       	movw	r24, r28
    2aec:	87 5f       	subi	r24, 0xF7	; 247
    2aee:	9f 4f       	sbci	r25, 0xFF	; 255
    2af0:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    2af4:	8c 13       	cpse	r24, r28
    2af6:	11 c0       	rjmp	.+34     	; 0x2b1a <change_logic+0x44>
    2af8:	0c 9f       	mul	r16, r28
    2afa:	f0 01       	movw	r30, r0
    2afc:	0d 9f       	mul	r16, r29
    2afe:	f0 0d       	add	r31, r0
    2b00:	11 24       	eor	r1, r1
    2b02:	ed 59       	subi	r30, 0x9D	; 157
    2b04:	fe 4f       	sbci	r31, 0xFE	; 254
    2b06:	80 85       	ldd	r24, Z+8	; 0x08
    2b08:	82 ff       	sbrs	r24, 2
    2b0a:	07 c0       	rjmp	.+14     	; 0x2b1a <change_logic+0x44>
		{
			numBDZ++;
    2b0c:	1f 5f       	subi	r17, 0xFF	; 255
			if(numBDZ==1) *&address=readID(i); //если в сети 1 БДЗ, то запоминаем его адресс. если найдет еще БДЗ, адрес дальше будет перезаписан
    2b0e:	11 30       	cpi	r17, 0x01	; 1
    2b10:	21 f4       	brne	.+8      	; 0x2b1a <change_logic+0x44>
    2b12:	d0 93 5d 01 	sts	0x015D, r29	; 0x80015d <address+0x1>
    2b16:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <address>
    2b1a:	21 96       	adiw	r28, 0x01	; 1
{

	unsigned char numBDZ=0;
	scansys();
	//считаем кол-во БДЗ инлайн(в сети)
	for(unsigned char i=1;i<MAXQDEV;i++)
    2b1c:	c3 36       	cpi	r28, 0x63	; 99
    2b1e:	d1 05       	cpc	r29, r1
    2b20:	21 f7       	brne	.-56     	; 0x2aea <change_logic+0x14>
		{
			numBDZ++;
			if(numBDZ==1) *&address=readID(i); //если в сети 1 БДЗ, то запоминаем его адресс. если найдет еще БДЗ, адрес дальше будет перезаписан
		}
	//if (numBDZ==0) return;
	if (numBDZ>1) *&address=numm();//если бдз в сети >1 то запрашиваем адрес БДЗ в котором будем менять п-тры
    2b22:	12 30       	cpi	r17, 0x02	; 2
    2b24:	38 f0       	brcs	.+14     	; 0x2b34 <change_logic+0x5e>
    2b26:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <numm>
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <address+0x1>
    2b30:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <address>
			unsigned char data[6]={PROG};
			inSysBDZ[*&address].flags=1<<FLT;
			CAN_loadTXbuf((unsigned long int)*&address,3,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
			if((checkTOUT(*&address) <0)||(inSysBDZ[*&address].data[0] !=PROG)){printTOUT();_delay_ms(2000);return;}
		}*/
	naviMenu(LVL_in);
    2b34:	8c e7       	ldi	r24, 0x7C	; 124
    2b36:	90 e0       	ldi	r25, 0x00	; 0
	return;
}
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	1f 91       	pop	r17
    2b3e:	0f 91       	pop	r16
			unsigned char data[6]={PROG};
			inSysBDZ[*&address].flags=1<<FLT;
			CAN_loadTXbuf((unsigned long int)*&address,3,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
			if((checkTOUT(*&address) <0)||(inSysBDZ[*&address].data[0] !=PROG)){printTOUT();_delay_ms(2000);return;}
		}*/
	naviMenu(LVL_in);
    2b40:	0c 94 be 14 	jmp	0x297c	; 0x297c <naviMenu>

00002b44 <svyaz>:
{
	change_param(0);
}

static void svyaz(void)
{
    2b44:	cf 92       	push	r12
    2b46:	df 92       	push	r13
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	cf 93       	push	r28
	naviMenu(LVL_svyaz);
    2b4e:	80 ea       	ldi	r24, 0xA0	; 160
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 be 14 	call	0x297c	; 0x297c <naviMenu>
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    2b56:	82 e0       	ldi	r24, 0x02	; 2
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <eeprom_read_dword>
    2b5e:	6b 01       	movw	r12, r22
    2b60:	7c 01       	movw	r14, r24
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    2b6a:	c8 2f       	mov	r28, r24
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    2b74:	a7 01       	movw	r20, r14
    2b76:	96 01       	movw	r18, r12
    2b78:	6c 2f       	mov	r22, r28
}
    2b7a:	cf 91       	pop	r28
    2b7c:	ff 90       	pop	r15
    2b7e:	ef 90       	pop	r14
    2b80:	df 90       	pop	r13
    2b82:	cf 90       	pop	r12
}

static void svyaz(void)
{
	naviMenu(LVL_svyaz);
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    2b84:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <MODB_init>

00002b88 <progsys>:
}

static void progsys(void)
{
	//scansys();
	naviMenu(LVL_prog);
    2b88:	8c ec       	ldi	r24, 0xCC	; 204
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0c 94 be 14 	jmp	0x297c	; 0x297c <naviMenu>

00002b90 <nastroyka>:
		}
	}
}

static void nastroyka(void)
{
    2b90:	6f 92       	push	r6
    2b92:	7f 92       	push	r7
    2b94:	8f 92       	push	r8
    2b96:	9f 92       	push	r9
    2b98:	af 92       	push	r10
    2b9a:	bf 92       	push	r11
    2b9c:	cf 92       	push	r12
    2b9e:	df 92       	push	r13
    2ba0:	ef 92       	push	r14
    2ba2:	ff 92       	push	r15
    2ba4:	0f 93       	push	r16
    2ba6:	1f 93       	push	r17
    2ba8:	cf 93       	push	r28
    2baa:	df 93       	push	r29
    2bac:	00 d0       	rcall	.+0      	; 0x2bae <nastroyka+0x1e>
    2bae:	00 d0       	rcall	.+0      	; 0x2bb0 <nastroyka+0x20>
    2bb0:	1f 92       	push	r1
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62

static unsigned char passwd(void)
{
	signed int currPasswd=0,step=1;
	char str[5];
	unsigned char cursorPos=3;
    2bb6:	33 e0       	ldi	r19, 0x03	; 3
    2bb8:	73 2e       	mov	r7, r19
	LCD_gotoXY(0,2);LCD_puts_P(NEDOSTUPNO,20);
}

static unsigned char passwd(void)
{
	signed int currPasswd=0,step=1;
    2bba:	ee 24       	eor	r14, r14
    2bbc:	e3 94       	inc	r14
    2bbe:	f1 2c       	mov	r15, r1
    2bc0:	00 e0       	ldi	r16, 0x00	; 0
    2bc2:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		printMenuHeader(PAROL);	//прорисовываем заголовок
		LCD_gotoXY(0,2);
		sprintf(str,"%04d",currPasswd);
    2bc4:	5e e3       	ldi	r21, 0x3E	; 62
    2bc6:	c5 2e       	mov	r12, r21
    2bc8:	51 e0       	ldi	r21, 0x01	; 1
    2bca:	d5 2e       	mov	r13, r21
    2bcc:	ce 01       	movw	r24, r28
    2bce:	01 96       	adiw	r24, 0x01	; 1
    2bd0:	5c 01       	movw	r10, r24
			(cursorPos>0)?(cursorPos--):(cursorPos=3);
		}
		break;
		case RIGHT:
		{
			(step > 1)?(step /= 10):(step=1000);
    2bd2:	6a e0       	ldi	r22, 0x0A	; 10
    2bd4:	86 2e       	mov	r8, r22
    2bd6:	91 2c       	mov	r9, r1
			currPasswd=((currPasswd + step)>=9999)?(0):(currPasswd+step);
		}
		break;
		case LEFT:
		{
			(step < 1000)?(step *= 10):(step=1);
    2bd8:	7a e0       	ldi	r23, 0x0A	; 10
    2bda:	67 2e       	mov	r6, r23
	char str[5];
	unsigned char cursorPos=3;

	while(1)
	{
		printMenuHeader(PAROL);	//прорисовываем заголовок
    2bdc:	8e e6       	ldi	r24, 0x6E	; 110
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>
		LCD_gotoXY(0,2);
    2be4:	62 e0       	ldi	r22, 0x02	; 2
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		sprintf(str,"%04d",currPasswd);
    2bec:	1f 93       	push	r17
    2bee:	0f 93       	push	r16
    2bf0:	df 92       	push	r13
    2bf2:	cf 92       	push	r12
    2bf4:	bf 92       	push	r11
    2bf6:	af 92       	push	r10
    2bf8:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <sprintf>
		LCD_puts(str,4);
    2bfc:	64 e0       	ldi	r22, 0x04	; 4
    2bfe:	c5 01       	movw	r24, r10
    2c00:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
		LCD_gotoXY(cursorPos,2);
    2c04:	62 e0       	ldi	r22, 0x02	; 2
    2c06:	87 2d       	mov	r24, r7
    2c08:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		LCD_cursorBlink();
    2c0c:	0e 94 18 04 	call	0x830	; 0x830 <LCD_cursorBlink>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2c10:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	85 30       	cpi	r24, 0x05	; 5
    2c22:	c1 f0       	breq	.+48     	; 0x2c54 <nastroyka+0xc4>
    2c24:	40 f4       	brcc	.+16     	; 0x2c36 <nastroyka+0xa6>
    2c26:	83 30       	cpi	r24, 0x03	; 3
    2c28:	09 f4       	brne	.+2      	; 0x2c2c <nastroyka+0x9c>
    2c2a:	57 c0       	rjmp	.+174    	; 0x2cda <nastroyka+0x14a>
    2c2c:	e8 f4       	brcc	.+58     	; 0x2c68 <nastroyka+0xd8>
    2c2e:	82 30       	cpi	r24, 0x02	; 2
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <nastroyka+0xa4>
    2c32:	45 c0       	rjmp	.+138    	; 0x2cbe <nastroyka+0x12e>
    2c34:	d3 cf       	rjmp	.-90     	; 0x2bdc <nastroyka+0x4c>
    2c36:	87 30       	cpi	r24, 0x07	; 7
    2c38:	69 f1       	breq	.+90     	; 0x2c94 <nastroyka+0x104>
    2c3a:	28 f0       	brcs	.+10     	; 0x2c46 <nastroyka+0xb6>
    2c3c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3e:	71 f6       	brne	.-100    	; 0x2bdc <nastroyka+0x4c>
			else return 0;
		}
		break;
		case ESC:{LCD_cursorOff();return 0;}	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    2c40:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2c44:	cb cf       	rjmp	.-106    	; 0x2bdc <nastroyka+0x4c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			currPasswd=((currPasswd - step)>=0)?(currPasswd-step):(9999);
    2c46:	0e 19       	sub	r16, r14
    2c48:	1f 09       	sbc	r17, r15
    2c4a:	17 ff       	sbrs	r17, 7
    2c4c:	c7 cf       	rjmp	.-114    	; 0x2bdc <nastroyka+0x4c>
    2c4e:	0f e0       	ldi	r16, 0x0F	; 15
    2c50:	17 e2       	ldi	r17, 0x27	; 39
    2c52:	c4 cf       	rjmp	.-120    	; 0x2bdc <nastroyka+0x4c>
		}
		break;
		case UP:
		{
			currPasswd=((currPasswd + step)>=9999)?(0):(currPasswd+step);
    2c54:	0e 0d       	add	r16, r14
    2c56:	1f 1d       	adc	r17, r15
    2c58:	0f 30       	cpi	r16, 0x0F	; 15
    2c5a:	97 e2       	ldi	r25, 0x27	; 39
    2c5c:	19 07       	cpc	r17, r25
    2c5e:	0c f4       	brge	.+2      	; 0x2c62 <nastroyka+0xd2>
    2c60:	bd cf       	rjmp	.-134    	; 0x2bdc <nastroyka+0x4c>
    2c62:	00 e0       	ldi	r16, 0x00	; 0
    2c64:	10 e0       	ldi	r17, 0x00	; 0
    2c66:	ba cf       	rjmp	.-140    	; 0x2bdc <nastroyka+0x4c>
		}
		break;
		case LEFT:
		{
			(step < 1000)?(step *= 10):(step=1);
    2c68:	88 ee       	ldi	r24, 0xE8	; 232
    2c6a:	e8 16       	cp	r14, r24
    2c6c:	83 e0       	ldi	r24, 0x03	; 3
    2c6e:	f8 06       	cpc	r15, r24
    2c70:	3c f4       	brge	.+14     	; 0x2c80 <nastroyka+0xf0>
    2c72:	c7 01       	movw	r24, r14
    2c74:	68 9e       	mul	r6, r24
    2c76:	70 01       	movw	r14, r0
    2c78:	69 9e       	mul	r6, r25
    2c7a:	f0 0c       	add	r15, r0
    2c7c:	11 24       	eor	r1, r1
    2c7e:	03 c0       	rjmp	.+6      	; 0x2c86 <nastroyka+0xf6>
    2c80:	ee 24       	eor	r14, r14
    2c82:	e3 94       	inc	r14
    2c84:	f1 2c       	mov	r15, r1
			(cursorPos>0)?(cursorPos--):(cursorPos=3);
    2c86:	71 10       	cpse	r7, r1
    2c88:	03 c0       	rjmp	.+6      	; 0x2c90 <nastroyka+0x100>
    2c8a:	23 e0       	ldi	r18, 0x03	; 3
    2c8c:	72 2e       	mov	r7, r18
    2c8e:	a6 cf       	rjmp	.-180    	; 0x2bdc <nastroyka+0x4c>
    2c90:	7a 94       	dec	r7
    2c92:	a4 cf       	rjmp	.-184    	; 0x2bdc <nastroyka+0x4c>
		}
		break;
		case RIGHT:
		{
			(step > 1)?(step /= 10):(step=1000);
    2c94:	92 e0       	ldi	r25, 0x02	; 2
    2c96:	e9 16       	cp	r14, r25
    2c98:	f1 04       	cpc	r15, r1
    2c9a:	34 f0       	brlt	.+12     	; 0x2ca8 <nastroyka+0x118>
    2c9c:	c7 01       	movw	r24, r14
    2c9e:	b4 01       	movw	r22, r8
    2ca0:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__divmodhi4>
    2ca4:	7b 01       	movw	r14, r22
    2ca6:	04 c0       	rjmp	.+8      	; 0x2cb0 <nastroyka+0x120>
    2ca8:	88 ee       	ldi	r24, 0xE8	; 232
    2caa:	e8 2e       	mov	r14, r24
    2cac:	83 e0       	ldi	r24, 0x03	; 3
    2cae:	f8 2e       	mov	r15, r24
			(cursorPos<3)?(cursorPos++):(cursorPos=0);
    2cb0:	83 e0       	ldi	r24, 0x03	; 3
    2cb2:	78 12       	cpse	r7, r24
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <nastroyka+0x12a>
    2cb6:	71 2c       	mov	r7, r1
    2cb8:	91 cf       	rjmp	.-222    	; 0x2bdc <nastroyka+0x4c>
    2cba:	73 94       	inc	r7
    2cbc:	8f cf       	rjmp	.-226    	; 0x2bdc <nastroyka+0x4c>
		}
		break;
		case ENT:
		{
			LCD_cursorOff();
    2cbe:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_visible>
			if(eeprom_read_word(&password) == currPasswd)return 1;	//
    2cc2:	87 e0       	ldi	r24, 0x07	; 7
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	0e 94 71 21 	call	0x42e2	; 0x42e2 <eeprom_read_word>
    2cca:	08 17       	cp	r16, r24
    2ccc:	19 07       	cpc	r17, r25
    2cce:	39 f4       	brne	.+14     	; 0x2cde <nastroyka+0x14e>
	}
}

static void nastroyka(void)
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
    2cd0:	84 eb       	ldi	r24, 0xB4	; 180
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 be 14 	call	0x297c	; 0x297c <naviMenu>
}
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <nastroyka+0x14e>
			LCD_cursorOff();
			if(eeprom_read_word(&password) == currPasswd)return 1;	//
			else return 0;
		}
		break;
		case ESC:{LCD_cursorOff();return 0;}	//выход по ESC
    2cda:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_visible>
}

static void nastroyka(void)
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	ff 90       	pop	r15
    2cf2:	ef 90       	pop	r14
    2cf4:	df 90       	pop	r13
    2cf6:	cf 90       	pop	r12
    2cf8:	bf 90       	pop	r11
    2cfa:	af 90       	pop	r10
    2cfc:	9f 90       	pop	r9
    2cfe:	8f 90       	pop	r8
    2d00:	7f 90       	pop	r7
    2d02:	6f 90       	pop	r6
    2d04:	08 95       	ret

00002d06 <printRejim>:
		}
	}
}

void printRejim(unsigned char numm)
{
    2d06:	ff 92       	push	r15
    2d08:	0f 93       	push	r16
    2d0a:	1f 93       	push	r17
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	00 d0       	rcall	.+0      	; 0x2d12 <printRejim+0xc>
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <printRejim+0xe>
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <printRejim+0x10>
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	18 2f       	mov	r17, r24
	char n[10];
	unsigned char punkt;
	if (*&address!=0) //если запрос не широковещательный(адресс не 0), то считываем показания БДЗ под № "addr"
    2d1c:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <address>
    2d20:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <address+0x1>
    2d24:	61 15       	cp	r22, r1
    2d26:	71 05       	cpc	r23, r1
    2d28:	09 f4       	brne	.+2      	; 0x2d2c <printRejim+0x26>
    2d2a:	41 c0       	rjmp	.+130    	; 0x2dae <printRejim+0xa8>
		{
			unsigned char data[6]={PROG};
    2d2c:	86 e0       	ldi	r24, 0x06	; 6
    2d2e:	9e 01       	movw	r18, r28
    2d30:	2f 5f       	subi	r18, 0xFF	; 255
    2d32:	3f 4f       	sbci	r19, 0xFF	; 255
    2d34:	f9 01       	movw	r30, r18
    2d36:	98 2f       	mov	r25, r24
    2d38:	11 92       	st	Z+, r1
    2d3a:	9a 95       	dec	r25
    2d3c:	e9 f7       	brne	.-6      	; 0x2d38 <printRejim+0x32>
    2d3e:	89 83       	std	Y+1, r24	; 0x01
			inSysBDZ[*&address].flags=1<<FLT;
    2d40:	89 e0       	ldi	r24, 0x09	; 9
    2d42:	f8 2e       	mov	r15, r24
    2d44:	f6 9e       	mul	r15, r22
    2d46:	f0 01       	movw	r30, r0
    2d48:	f7 9e       	mul	r15, r23
    2d4a:	f0 0d       	add	r31, r0
    2d4c:	11 24       	eor	r1, r1
    2d4e:	ed 59       	subi	r30, 0x9D	; 157
    2d50:	fe 4f       	sbci	r31, 0xFE	; 254
    2d52:	82 e0       	ldi	r24, 0x02	; 2
    2d54:	80 87       	std	Z+8, r24	; 0x08
			CAN_loadTXbuf((unsigned long int)*&address,3,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    2d56:	07 2e       	mov	r0, r23
    2d58:	00 0c       	add	r0, r0
    2d5a:	88 0b       	sbc	r24, r24
    2d5c:	99 0b       	sbc	r25, r25
    2d5e:	07 ef       	ldi	r16, 0xF7	; 247
    2d60:	43 e0       	ldi	r20, 0x03	; 3
    2d62:	0e 94 8b 07 	call	0xf16	; 0xf16 <CAN_loadTXbuf>
			printMenuHeader(WAIT);
    2d66:	80 eb       	ldi	r24, 0xB0	; 176
    2d68:	91 e0       	ldi	r25, 0x01	; 1
    2d6a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>
			if((checkTOUT(*&address) <0)||(inSysBDZ[*&address].data[0] !=PROG)){printTOUT();_delay_ms(2000);return;}
    2d6e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <address>
    2d72:	0e 94 70 01 	call	0x2e0	; 0x2e0 <checkTOUT>
    2d76:	87 fd       	sbrc	r24, 7
    2d78:	0e c0       	rjmp	.+28     	; 0x2d96 <printRejim+0x90>
    2d7a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <address>
    2d7e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <address+0x1>
    2d82:	f8 9e       	mul	r15, r24
    2d84:	f0 01       	movw	r30, r0
    2d86:	f9 9e       	mul	r15, r25
    2d88:	f0 0d       	add	r31, r0
    2d8a:	11 24       	eor	r1, r1
    2d8c:	ed 59       	subi	r30, 0x9D	; 157
    2d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d90:	80 81       	ld	r24, Z
    2d92:	86 30       	cpi	r24, 0x06	; 6
    2d94:	61 f0       	breq	.+24     	; 0x2dae <printRejim+0xa8>
    2d96:	0e 94 76 06 	call	0xcec	; 0xcec <printTOUT>
    2d9a:	ef ef       	ldi	r30, 0xFF	; 255
    2d9c:	f7 ea       	ldi	r31, 0xA7	; 167
    2d9e:	21 e6       	ldi	r18, 0x61	; 97
    2da0:	e1 50       	subi	r30, 0x01	; 1
    2da2:	f0 40       	sbci	r31, 0x00	; 0
    2da4:	20 40       	sbci	r18, 0x00	; 0
    2da6:	e1 f7       	brne	.-8      	; 0x2da0 <printRejim+0x9a>
    2da8:	00 c0       	rjmp	.+0      	; 0x2daa <printRejim+0xa4>
    2daa:	00 00       	nop
    2dac:	46 c0       	rjmp	.+140    	; 0x2e3a <printRejim+0x134>
		}
	//if (*&address) value=inSysBDZ[*&address].data[numm];
	printMenuHeader(CONFIRM);
    2dae:	8a ed       	ldi	r24, 0xDA	; 218
    2db0:	91 e0       	ldi	r25, 0x01	; 1
    2db2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>
	if (inSysBDZ[*&address].data[numm]<<8) (inSysBDZ[*&address].data[numm]&(1<<4))?(punkt=1):(punkt=0);
    2db6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <address>
    2dba:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <address+0x1>
    2dbe:	29 e0       	ldi	r18, 0x09	; 9
    2dc0:	28 9f       	mul	r18, r24
    2dc2:	f0 01       	movw	r30, r0
    2dc4:	29 9f       	mul	r18, r25
    2dc6:	f0 0d       	add	r31, r0
    2dc8:	11 24       	eor	r1, r1
    2dca:	ed 59       	subi	r30, 0x9D	; 157
    2dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dce:	e1 0f       	add	r30, r17
    2dd0:	f1 1d       	adc	r31, r1
    2dd2:	80 81       	ld	r24, Z
    2dd4:	88 23       	and	r24, r24
    2dd6:	21 f0       	breq	.+8      	; 0x2de0 <printRejim+0xda>
    2dd8:	10 81       	ld	r17, Z
	else punkt=2;
    2dda:	12 95       	swap	r17
    2ddc:	11 70       	andi	r17, 0x01	; 1
    2dde:	01 c0       	rjmp	.+2      	; 0x2de2 <printRejim+0xdc>
				else punkt++;
			}//DOWN
			break;
			case UP:
			{
				if (punkt==0) punkt=2;
    2de0:	12 e0       	ldi	r17, 0x02	; 2
	if (inSysBDZ[*&address].data[numm]<<8) (inSysBDZ[*&address].data[numm]&(1<<4))?(punkt=1):(punkt=0);
	else punkt=2;
	//LCD_puts(itoa(inSysBDZ[*&address].data[numm],n,2),10);
	while(1)
		{
			LCD_gotoXY(0,2);
    2de2:	62 e0       	ldi	r22, 0x02	; 2
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
			if (punkt==0) LCD_puts_P(MTZ,20);
    2dea:	64 e1       	ldi	r22, 0x14	; 20
    2dec:	11 11       	cpse	r17, r1
    2dee:	03 c0       	rjmp	.+6      	; 0x2df6 <printRejim+0xf0>
    2df0:	8c ea       	ldi	r24, 0xAC	; 172
    2df2:	91 e0       	ldi	r25, 0x01	; 1
    2df4:	07 c0       	rjmp	.+14     	; 0x2e04 <printRejim+0xfe>
			else if(punkt==1) LCD_puts_P(YPOB,20);
    2df6:	11 30       	cpi	r17, 0x01	; 1
    2df8:	19 f4       	brne	.+6      	; 0x2e00 <printRejim+0xfa>
    2dfa:	87 ea       	ldi	r24, 0xA7	; 167
    2dfc:	91 e0       	ldi	r25, 0x01	; 1
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <printRejim+0xfe>
			else LCD_puts_P(OFF,20);
    2e00:	8e ee       	ldi	r24, 0xEE	; 238
    2e02:	91 e0       	ldi	r25, 0x01	; 1
    2e04:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
			switch( whileKey() )
    2e08:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    2e0c:	85 30       	cpi	r24, 0x05	; 5
    2e0e:	89 f0       	breq	.+34     	; 0x2e32 <printRejim+0x12c>
    2e10:	18 f4       	brcc	.+6      	; 0x2e18 <printRejim+0x112>
    2e12:	83 30       	cpi	r24, 0x03	; 3
    2e14:	91 f0       	breq	.+36     	; 0x2e3a <printRejim+0x134>
    2e16:	e5 cf       	rjmp	.-54     	; 0x2de2 <printRejim+0xdc>
    2e18:	86 30       	cpi	r24, 0x06	; 6
    2e1a:	29 f0       	breq	.+10     	; 0x2e26 <printRejim+0x120>
    2e1c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e1e:	09 f7       	brne	.-62     	; 0x2de2 <printRejim+0xdc>
			break;
			/*case ENT: return;
			break;*/
			case ESC: return;	//выход по ESC
			break;
			case NOKEY:asm("jmp 0");	//автовыход
    2e20:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2e24:	de cf       	rjmp	.-68     	; 0x2de2 <printRejim+0xdc>
			else LCD_puts_P(OFF,20);
			switch( whileKey() )
			{
			case DOWN:
			{
				if (punkt==2) punkt=0;
    2e26:	12 30       	cpi	r17, 0x02	; 2
    2e28:	11 f4       	brne	.+4      	; 0x2e2e <printRejim+0x128>
    2e2a:	10 e0       	ldi	r17, 0x00	; 0
    2e2c:	da cf       	rjmp	.-76     	; 0x2de2 <printRejim+0xdc>
				else punkt++;
    2e2e:	1f 5f       	subi	r17, 0xFF	; 255
    2e30:	d8 cf       	rjmp	.-80     	; 0x2de2 <printRejim+0xdc>
			}//DOWN
			break;
			case UP:
			{
				if (punkt==0) punkt=2;
    2e32:	11 23       	and	r17, r17
    2e34:	a9 f2       	breq	.-86     	; 0x2de0 <printRejim+0xda>
				else punkt --;
    2e36:	11 50       	subi	r17, 0x01	; 1
    2e38:	d4 cf       	rjmp	.-88     	; 0x2de2 <printRejim+0xdc>
			break;
			case NOKEY:asm("jmp 0");	//автовыход
			break;
			}
		}
}
    2e3a:	26 96       	adiw	r28, 0x06	; 6
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	f8 94       	cli
    2e40:	de bf       	out	0x3e, r29	; 62
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	cd bf       	out	0x3d, r28	; 61
    2e46:	df 91       	pop	r29
    2e48:	cf 91       	pop	r28
    2e4a:	1f 91       	pop	r17
    2e4c:	0f 91       	pop	r16
    2e4e:	ff 90       	pop	r15
    2e50:	08 95       	ret

00002e52 <printPodmenu>:
	naviMenu(LVL_in);
	return;
}

void printPodmenu(unsigned char numm)
{
    2e52:	5f 92       	push	r5
    2e54:	6f 92       	push	r6
    2e56:	7f 92       	push	r7
    2e58:	8f 92       	push	r8
    2e5a:	9f 92       	push	r9
    2e5c:	af 92       	push	r10
    2e5e:	bf 92       	push	r11
    2e60:	cf 92       	push	r12
    2e62:	df 92       	push	r13
    2e64:	ef 92       	push	r14
    2e66:	ff 92       	push	r15
    2e68:	0f 93       	push	r16
    2e6a:	1f 93       	push	r17
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <printPodmenu+0x20>
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <printPodmenu+0x22>
    2e74:	00 d0       	rcall	.+0      	; 0x2e76 <printPodmenu+0x24>
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
    2e7a:	58 2e       	mov	r5, r24
	unsigned char y=1,punkt=1;
    2e7c:	77 24       	eor	r7, r7
    2e7e:	73 94       	inc	r7
			//value&= ~(1<<punkt);
		}
		break;
		case UP: //вкл/выкл
		{
			(value&(1<<punkt))?(value&= ~(1<<punkt)):(value|= 1<<punkt); //меняем бит на 1/0 соответствующий текущему пункту
    2e80:	cc 24       	eor	r12, r12
    2e82:	c3 94       	inc	r12
    2e84:	d1 2c       	mov	r13, r1
			CAN_loadTXbuf((unsigned long int)*&address,2,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
			printMenuHeader(WAIT);
			if((checkTOUT(*&address) <0)||(inSysBDZ[*&address].data[0] !=PROG)){printTOUT();_delay_ms(2000);return 0;}
		}

	if (*&address) value=inSysBDZ[*&address].data[numm];
    2e86:	88 2e       	mov	r8, r24
    2e88:	91 2c       	mov	r9, r1
    2e8a:	39 e0       	ldi	r19, 0x09	; 9
    2e8c:	63 2e       	mov	r6, r19
	_delay_ms(5000);
	return 0;*/

	if (*&address!=0) //если запрос не широковещательный(адресс не 0), то считываем показания БДЗ под № "addr"
		{
			unsigned char data[6]={PROG};
    2e8e:	ce 01       	movw	r24, r28
    2e90:	01 96       	adiw	r24, 0x01	; 1
    2e92:	5c 01       	movw	r10, r24
{
	unsigned char y=1,punkt=1;

	while(1)
	{
		printMenuHeader(LOGIKA);
    2e94:	80 e2       	ldi	r24, 0x20	; 32
    2e96:	92 e0       	ldi	r25, 0x02	; 2
    2e98:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>
		if (punkt==1) {LCD_gotoXY(0,1);LCD_putchar(0x84);}
    2e9c:	91 e0       	ldi	r25, 0x01	; 1
    2e9e:	79 12       	cpse	r7, r25
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <printPodmenu+0x54>
    2ea2:	61 e0       	ldi	r22, 0x01	; 1
    2ea4:	01 c0       	rjmp	.+2      	; 0x2ea8 <printPodmenu+0x56>
		else {LCD_gotoXY(0,2);LCD_putchar(0x84);}
    2ea6:	62 e0       	ldi	r22, 0x02	; 2
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    2eae:	84 e8       	ldi	r24, 0x84	; 132
    2eb0:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
		LCD_gotoXY(1,1);LCD_puts_P(CHOSE_EXT,10);
    2eb4:	61 e0       	ldi	r22, 0x01	; 1
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    2ebc:	6a e0       	ldi	r22, 0x0A	; 10
    2ebe:	83 ed       	ldi	r24, 0xD3	; 211
    2ec0:	91 e0       	ldi	r25, 0x01	; 1
    2ec2:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
		LCD_gotoXY(1,2);LCD_puts_P(CONFIRM,20);
    2ec6:	62 e0       	ldi	r22, 0x02	; 2
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    2ece:	64 e1       	ldi	r22, 0x14	; 20
    2ed0:	8a ed       	ldi	r24, 0xDA	; 218
    2ed2:	91 e0       	ldi	r25, 0x01	; 1
    2ed4:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
		switch( whileKey() )
    2ed8:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    2edc:	85 30       	cpi	r24, 0x05	; 5
    2ede:	59 f1       	breq	.+86     	; 0x2f36 <printPodmenu+0xe4>
    2ee0:	d0 f4       	brcc	.+52     	; 0x2f16 <printPodmenu+0xc4>
    2ee2:	82 30       	cpi	r24, 0x02	; 2
    2ee4:	81 f1       	breq	.+96     	; 0x2f46 <printPodmenu+0xf4>
    2ee6:	83 30       	cpi	r24, 0x03	; 3
    2ee8:	a9 f6       	brne	.-86     	; 0x2e94 <printPodmenu+0x42>
		break;
		case NOKEY:asm("jmp 0");	//автовыход
		break;
		}
	}
}
    2eea:	26 96       	adiw	r28, 0x06	; 6
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	ff 90       	pop	r15
    2f00:	ef 90       	pop	r14
    2f02:	df 90       	pop	r13
    2f04:	cf 90       	pop	r12
    2f06:	bf 90       	pop	r11
    2f08:	af 90       	pop	r10
    2f0a:	9f 90       	pop	r9
    2f0c:	8f 90       	pop	r8
    2f0e:	7f 90       	pop	r7
    2f10:	6f 90       	pop	r6
    2f12:	5f 90       	pop	r5
    2f14:	08 95       	ret
		printMenuHeader(LOGIKA);
		if (punkt==1) {LCD_gotoXY(0,1);LCD_putchar(0x84);}
		else {LCD_gotoXY(0,2);LCD_putchar(0x84);}
		LCD_gotoXY(1,1);LCD_puts_P(CHOSE_EXT,10);
		LCD_gotoXY(1,2);LCD_puts_P(CONFIRM,20);
		switch( whileKey() )
    2f16:	86 30       	cpi	r24, 0x06	; 6
    2f18:	31 f0       	breq	.+12     	; 0x2f26 <printPodmenu+0xd4>
    2f1a:	8f 3f       	cpi	r24, 0xFF	; 255
    2f1c:	09 f0       	breq	.+2      	; 0x2f20 <printPodmenu+0xce>
    2f1e:	ba cf       	rjmp	.-140    	; 0x2e94 <printPodmenu+0x42>
		break;
		case ENT:(punkt==1)?(printOut(numm)):(printRejim(numm));
		break;
		case ESC:return;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    2f20:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    2f24:	b7 cf       	rjmp	.-146    	; 0x2e94 <printPodmenu+0x42>
		LCD_gotoXY(1,2);LCD_puts_P(CONFIRM,20);
		switch( whileKey() )
		{
		case DOWN:
		{
			if(punkt==2)
    2f26:	e2 e0       	ldi	r30, 0x02	; 2
    2f28:	7e 12       	cpse	r7, r30
    2f2a:	03 c0       	rjmp	.+6      	; 0x2f32 <printPodmenu+0xe0>
			{
				//LCD_gotoXY(0,punkt); //идем в текущее положение курсора
				//LCD_putchar(' '); //стрираем старый курсор курсор
				punkt--; //y--;
    2f2c:	77 24       	eor	r7, r7
    2f2e:	73 94       	inc	r7
    2f30:	b1 cf       	rjmp	.-158    	; 0x2e94 <printPodmenu+0x42>
			}
			else
			{
				//LCD_gotoXY(0,punkt); //идем в текущее положение курсора
				//LCD_putchar(' '); //стрираем старый курсор курсор
				punkt++; //y++;
    2f32:	73 94       	inc	r7
    2f34:	af cf       	rjmp	.-162    	; 0x2e94 <printPodmenu+0x42>

		}//DOWN
		break;
		case UP:
		{
			if(punkt==1)
    2f36:	f1 e0       	ldi	r31, 0x01	; 1
    2f38:	7f 12       	cpse	r7, r31
    2f3a:	03 c0       	rjmp	.+6      	; 0x2f42 <printPodmenu+0xf0>
			{
				//LCD_gotoXY(0,punkt); //идем в текущее положение курсора
				//LCD_putchar(' '); //стрираем старый курсор курсор
				punkt++; //y++;
    2f3c:	92 e0       	ldi	r25, 0x02	; 2
    2f3e:	79 2e       	mov	r7, r25
    2f40:	a9 cf       	rjmp	.-174    	; 0x2e94 <printPodmenu+0x42>
			}
			else
			{
				//LCD_gotoXY(0,punkt); //идем в текущее положение курсора
				//LCD_putchar(' '); //стрираем старый курсор курсор
				punkt--; //y--;
    2f42:	7a 94       	dec	r7
    2f44:	a7 cf       	rjmp	.-178    	; 0x2e94 <printPodmenu+0x42>
				//LCD_gotoXY(0,y); //идем в новые координаты для стрелки
				//LCD_putchar(0x84); //идем в новые координаты для стрелки
			}
		}//UP
		break;
		case ENT:(punkt==1)?(printOut(numm)):(printRejim(numm));
    2f46:	21 e0       	ldi	r18, 0x01	; 1
    2f48:	72 12       	cpse	r7, r18
    2f4a:	54 c1       	rjmp	.+680    	; 0x31f4 <printPodmenu+0x3a2>
	itoa(*&address,n,10);
	LCD_puts(n, 10);
	_delay_ms(5000);
	return 0;*/

	if (*&address!=0) //если запрос не широковещательный(адресс не 0), то считываем показания БДЗ под № "addr"
    2f4c:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <address>
    2f50:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <address+0x1>
    2f54:	61 15       	cp	r22, r1
    2f56:	71 05       	cpc	r23, r1
    2f58:	e1 f1       	breq	.+120    	; 0x2fd2 <printPodmenu+0x180>
		{
			unsigned char data[6]={PROG};
    2f5a:	96 e0       	ldi	r25, 0x06	; 6
    2f5c:	f5 01       	movw	r30, r10
    2f5e:	29 2f       	mov	r18, r25
    2f60:	11 92       	st	Z+, r1
    2f62:	2a 95       	dec	r18
    2f64:	e9 f7       	brne	.-6      	; 0x2f60 <printPodmenu+0x10e>
    2f66:	99 83       	std	Y+1, r25	; 0x01
			inSysBDZ[*&address].flags=1<<FLT;
    2f68:	66 9e       	mul	r6, r22
    2f6a:	f0 01       	movw	r30, r0
    2f6c:	67 9e       	mul	r6, r23
    2f6e:	f0 0d       	add	r31, r0
    2f70:	11 24       	eor	r1, r1
    2f72:	ed 59       	subi	r30, 0x9D	; 157
    2f74:	fe 4f       	sbci	r31, 0xFE	; 254
    2f76:	80 87       	std	Z+8, r24	; 0x08
			CAN_loadTXbuf((unsigned long int)*&address,2,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    2f78:	07 2e       	mov	r0, r23
    2f7a:	00 0c       	add	r0, r0
    2f7c:	88 0b       	sbc	r24, r24
    2f7e:	99 0b       	sbc	r25, r25
    2f80:	07 ef       	ldi	r16, 0xF7	; 247
    2f82:	95 01       	movw	r18, r10
    2f84:	42 e0       	ldi	r20, 0x02	; 2
    2f86:	0e 94 8b 07 	call	0xf16	; 0xf16 <CAN_loadTXbuf>
			printMenuHeader(WAIT);
    2f8a:	80 eb       	ldi	r24, 0xB0	; 176
    2f8c:	91 e0       	ldi	r25, 0x01	; 1
    2f8e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>
			if((checkTOUT(*&address) <0)||(inSysBDZ[*&address].data[0] !=PROG)){printTOUT();_delay_ms(2000);return 0;}
    2f92:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <address>
    2f96:	0e 94 70 01 	call	0x2e0	; 0x2e0 <checkTOUT>
    2f9a:	87 fd       	sbrc	r24, 7
    2f9c:	0e c0       	rjmp	.+28     	; 0x2fba <printPodmenu+0x168>
    2f9e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <address>
    2fa2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <address+0x1>
    2fa6:	68 9e       	mul	r6, r24
    2fa8:	f0 01       	movw	r30, r0
    2faa:	69 9e       	mul	r6, r25
    2fac:	f0 0d       	add	r31, r0
    2fae:	11 24       	eor	r1, r1
    2fb0:	ed 59       	subi	r30, 0x9D	; 157
    2fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb4:	80 81       	ld	r24, Z
    2fb6:	86 30       	cpi	r24, 0x06	; 6
    2fb8:	61 f0       	breq	.+24     	; 0x2fd2 <printPodmenu+0x180>
    2fba:	0e 94 76 06 	call	0xcec	; 0xcec <printTOUT>
    2fbe:	8f ef       	ldi	r24, 0xFF	; 255
    2fc0:	97 ea       	ldi	r25, 0xA7	; 167
    2fc2:	e1 e6       	ldi	r30, 0x61	; 97
    2fc4:	81 50       	subi	r24, 0x01	; 1
    2fc6:	90 40       	sbci	r25, 0x00	; 0
    2fc8:	e0 40       	sbci	r30, 0x00	; 0
    2fca:	e1 f7       	brne	.-8      	; 0x2fc4 <printPodmenu+0x172>
    2fcc:	00 c0       	rjmp	.+0      	; 0x2fce <printPodmenu+0x17c>
    2fce:	00 00       	nop
    2fd0:	61 cf       	rjmp	.-318    	; 0x2e94 <printPodmenu+0x42>
		}

	if (*&address) value=inSysBDZ[*&address].data[numm];
    2fd2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <address>
    2fd6:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <address+0x1>
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	59 f0       	breq	.+22     	; 0x2ff4 <printPodmenu+0x1a2>
    2fde:	68 9e       	mul	r6, r24
    2fe0:	f0 01       	movw	r30, r0
    2fe2:	69 9e       	mul	r6, r25
    2fe4:	f0 0d       	add	r31, r0
    2fe6:	11 24       	eor	r1, r1
    2fe8:	ed 59       	subi	r30, 0x9D	; 157
    2fea:	fe 4f       	sbci	r31, 0xFE	; 254
    2fec:	e8 0d       	add	r30, r8
    2fee:	f9 1d       	adc	r31, r9
    2ff0:	e0 80       	ld	r14, Z
    2ff2:	01 c0       	rjmp	.+2      	; 0x2ff6 <printPodmenu+0x1a4>
		}
}

static inline unsigned char printOut(unsigned char numm)
{
	unsigned char x=0,y=1,punkt=0,value=0;
    2ff4:	e1 2c       	mov	r14, r1
			if((checkTOUT(*&address) <0)||(inSysBDZ[*&address].data[0] !=PROG)){printTOUT();_delay_ms(2000);return 0;}
		}

	if (*&address) value=inSysBDZ[*&address].data[numm];
	//отрисовка выходов
	printMenuHeader(CHOSE_EXT);
    2ff6:	83 ed       	ldi	r24, 0xD3	; 211
    2ff8:	91 e0       	ldi	r25, 0x01	; 1
    2ffa:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printMenuHeader>
	LCD_gotoXY(0,1);LCD_putchar(0x84);
    2ffe:	61 e0       	ldi	r22, 0x01	; 1
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    3006:	84 e8       	ldi	r24, 0x84	; 132
    3008:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
	/*LCD_clr();
	LCD_gotoXY(0,0);
	LCD_puts_P(CHOSE_EXT,10);*/
	LCD_gotoXY(1,1);
    300c:	61 e0       	ldi	r22, 0x01	; 1
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
	LCD_puts_P(EXIT1,5);
    3014:	65 e0       	ldi	r22, 0x05	; 5
    3016:	8d ec       	ldi	r24, 0xCD	; 205
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
	LCD_gotoXY(11,1);
    301e:	61 e0       	ldi	r22, 0x01	; 1
    3020:	8b e0       	ldi	r24, 0x0B	; 11
    3022:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
	LCD_puts_P(EXIT2,5);
    3026:	65 e0       	ldi	r22, 0x05	; 5
    3028:	87 ec       	ldi	r24, 0xC7	; 199
    302a:	91 e0       	ldi	r25, 0x01	; 1
    302c:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
	LCD_gotoXY(1,2);
    3030:	62 e0       	ldi	r22, 0x02	; 2
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
	LCD_puts_P(EXIT3,5);
    3038:	65 e0       	ldi	r22, 0x05	; 5
    303a:	81 ec       	ldi	r24, 0xC1	; 193
    303c:	91 e0       	ldi	r25, 0x01	; 1
    303e:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
	LCD_gotoXY(11,2);
    3042:	62 e0       	ldi	r22, 0x02	; 2
    3044:	8b e0       	ldi	r24, 0x0B	; 11
    3046:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
	LCD_puts_P(EXIT4,5);
    304a:	65 e0       	ldi	r22, 0x05	; 5
    304c:	8b eb       	ldi	r24, 0xBB	; 187
    304e:	91 e0       	ldi	r25, 0x01	; 1
    3050:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
		}
}

static inline unsigned char printOut(unsigned char numm)
{
	unsigned char x=0,y=1,punkt=0,value=0;
    3054:	f1 2c       	mov	r15, r1
    3056:	01 e0       	ldi	r16, 0x01	; 1
    3058:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		//отрисовка вкл/выкл
		//if(punkt==0){LCD_gotoXY(0,1);LCD_putchar(0x84);}//это чтобы выставить курсор в первый пункт при первом попадании в цикл
		LCD_gotoXY(6,1);
    305a:	61 e0       	ldi	r22, 0x01	; 1
    305c:	86 e0       	ldi	r24, 0x06	; 6
    305e:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		(value&(1<<0))?(LCD_puts_P(ON,4)):(LCD_puts_P(OFF,4));
    3062:	64 e0       	ldi	r22, 0x04	; 4
    3064:	e0 fe       	sbrs	r14, 0
    3066:	03 c0       	rjmp	.+6      	; 0x306e <printPodmenu+0x21c>
    3068:	83 ef       	ldi	r24, 0xF3	; 243
    306a:	91 e0       	ldi	r25, 0x01	; 1
    306c:	02 c0       	rjmp	.+4      	; 0x3072 <printPodmenu+0x220>
    306e:	8e ee       	ldi	r24, 0xEE	; 238
    3070:	91 e0       	ldi	r25, 0x01	; 1
    3072:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
		LCD_gotoXY(16,1);
    3076:	61 e0       	ldi	r22, 0x01	; 1
    3078:	80 e1       	ldi	r24, 0x10	; 16
    307a:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		(value&(1<<1))?(LCD_puts_P(ON,4)):(LCD_puts_P(OFF,4));
    307e:	64 e0       	ldi	r22, 0x04	; 4
    3080:	e1 fe       	sbrs	r14, 1
    3082:	03 c0       	rjmp	.+6      	; 0x308a <printPodmenu+0x238>
    3084:	83 ef       	ldi	r24, 0xF3	; 243
    3086:	91 e0       	ldi	r25, 0x01	; 1
    3088:	02 c0       	rjmp	.+4      	; 0x308e <printPodmenu+0x23c>
    308a:	8e ee       	ldi	r24, 0xEE	; 238
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
		LCD_gotoXY(6,2);
    3092:	62 e0       	ldi	r22, 0x02	; 2
    3094:	86 e0       	ldi	r24, 0x06	; 6
    3096:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		(value&(1<<2))?(LCD_puts_P(ON,4)):(LCD_puts_P(OFF,4));
    309a:	64 e0       	ldi	r22, 0x04	; 4
    309c:	e2 fe       	sbrs	r14, 2
    309e:	03 c0       	rjmp	.+6      	; 0x30a6 <printPodmenu+0x254>
    30a0:	83 ef       	ldi	r24, 0xF3	; 243
    30a2:	91 e0       	ldi	r25, 0x01	; 1
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <printPodmenu+0x258>
    30a6:	8e ee       	ldi	r24, 0xEE	; 238
    30a8:	91 e0       	ldi	r25, 0x01	; 1
    30aa:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
		LCD_gotoXY(16,2);
    30ae:	62 e0       	ldi	r22, 0x02	; 2
    30b0:	80 e1       	ldi	r24, 0x10	; 16
    30b2:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		(value&(1<<3))?(LCD_puts_P(ON,4)):(LCD_puts_P(OFF,4));
    30b6:	64 e0       	ldi	r22, 0x04	; 4
    30b8:	e3 fe       	sbrs	r14, 3
    30ba:	03 c0       	rjmp	.+6      	; 0x30c2 <printPodmenu+0x270>
    30bc:	83 ef       	ldi	r24, 0xF3	; 243
    30be:	91 e0       	ldi	r25, 0x01	; 1
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <printPodmenu+0x274>
    30c2:	8e ee       	ldi	r24, 0xEE	; 238
    30c4:	91 e0       	ldi	r25, 0x01	; 1
    30c6:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
		LCD_gotoXY(0,3);
    30ca:	63 e0       	ldi	r22, 0x03	; 3
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		/*itoa(value,n,2);
		LCD_puts(n, 10);*/
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    30d2:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <whileKey>
    30d6:	85 30       	cpi	r24, 0x05	; 5
    30d8:	89 f0       	breq	.+34     	; 0x30fc <printPodmenu+0x2aa>
    30da:	38 f4       	brcc	.+14     	; 0x30ea <printPodmenu+0x298>
    30dc:	82 30       	cpi	r24, 0x02	; 2
    30de:	08 f4       	brcc	.+2      	; 0x30e2 <printPodmenu+0x290>
    30e0:	bc cf       	rjmp	.-136    	; 0x305a <printPodmenu+0x208>
    30e2:	84 30       	cpi	r24, 0x04	; 4
    30e4:	08 f4       	brcc	.+2      	; 0x30e8 <printPodmenu+0x296>
    30e6:	d6 ce       	rjmp	.-596    	; 0x2e94 <printPodmenu+0x42>
    30e8:	44 c0       	rjmp	.+136    	; 0x3172 <printPodmenu+0x320>
    30ea:	87 30       	cpi	r24, 0x07	; 7
    30ec:	11 f1       	breq	.+68     	; 0x3132 <printPodmenu+0x2e0>
    30ee:	30 f0       	brcs	.+12     	; 0x30fc <printPodmenu+0x2aa>
    30f0:	8f 3f       	cpi	r24, 0xFF	; 255
    30f2:	09 f0       	breq	.+2      	; 0x30f6 <printPodmenu+0x2a4>
    30f4:	b2 cf       	rjmp	.-156    	; 0x305a <printPodmenu+0x208>
		break;
		case ENT:return value; 	//возвращаем новое значение входа
		break;
		case ESC:return 0;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    30f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    30fa:	af cf       	rjmp	.-162    	; 0x305a <printPodmenu+0x208>
			//value&= ~(1<<punkt);
		}
		break;
		case UP: //вкл/выкл
		{
			(value&(1<<punkt))?(value&= ~(1<<punkt)):(value|= 1<<punkt); //меняем бит на 1/0 соответствующий текущему пункту
    30fc:	8e 2d       	mov	r24, r14
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0f 2c       	mov	r0, r15
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <printPodmenu+0x2b6>
    3104:	95 95       	asr	r25
    3106:	87 95       	ror	r24
    3108:	0a 94       	dec	r0
    310a:	e2 f7       	brpl	.-8      	; 0x3104 <printPodmenu+0x2b2>
    310c:	80 ff       	sbrs	r24, 0
    310e:	09 c0       	rjmp	.+18     	; 0x3122 <printPodmenu+0x2d0>
    3110:	c6 01       	movw	r24, r12
    3112:	0f 2c       	mov	r0, r15
    3114:	01 c0       	rjmp	.+2      	; 0x3118 <printPodmenu+0x2c6>
    3116:	88 0f       	add	r24, r24
    3118:	0a 94       	dec	r0
    311a:	ea f7       	brpl	.-6      	; 0x3116 <printPodmenu+0x2c4>
    311c:	80 95       	com	r24
    311e:	e8 22       	and	r14, r24
    3120:	9c cf       	rjmp	.-200    	; 0x305a <printPodmenu+0x208>
    3122:	c6 01       	movw	r24, r12
    3124:	0f 2c       	mov	r0, r15
    3126:	01 c0       	rjmp	.+2      	; 0x312a <printPodmenu+0x2d8>
    3128:	88 0f       	add	r24, r24
    312a:	0a 94       	dec	r0
    312c:	ea f7       	brpl	.-6      	; 0x3128 <printPodmenu+0x2d6>
    312e:	e8 2a       	or	r14, r24
    3130:	94 cf       	rjmp	.-216    	; 0x305a <printPodmenu+0x208>
			//value|= 1<<punkt;
		}
		break;
		case RIGHT: //перемещаемся в следующий пункт
		{
			if((x+10)>10 && y!=2) //перемещение для ВЫХ2 и ВЫХ4(в этом случае надо перескочить на другую строку)
    3132:	11 23       	and	r17, r17
    3134:	a1 f0       	breq	.+40     	; 0x315e <printPodmenu+0x30c>
    3136:	02 30       	cpi	r16, 0x02	; 2
    3138:	09 f4       	brne	.+2      	; 0x313c <printPodmenu+0x2ea>
    313a:	60 c0       	rjmp	.+192    	; 0x31fc <printPodmenu+0x3aa>
			{
				LCD_gotoXY(x,y); //идем в текущее положение курсора
    313c:	60 2f       	mov	r22, r16
    313e:	81 2f       	mov	r24, r17
    3140:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
				LCD_putchar(' '); //стрираем старый курсор курсор
    3144:	80 e2       	ldi	r24, 0x20	; 32
    3146:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
				y++;x=0;punkt++; //увеличиваем координату y(переходим в след строку), х обнуляем, меняем номер пункта
    314a:	0f 5f       	subi	r16, 0xFF	; 255
    314c:	f3 94       	inc	r15
				LCD_gotoXY(x,y); //идем в новые координаты для стрелки
    314e:	60 2f       	mov	r22, r16
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
				LCD_putchar(0x84); //идем в новые координаты для стрелки
    3156:	84 e8       	ldi	r24, 0x84	; 132
    3158:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
    315c:	7d cf       	rjmp	.-262    	; 0x3058 <printPodmenu+0x206>
			}
			else if(x!=10) //перемещение для ВЫХ1 и ВЫХ3(в этом случае надо перейти в соседний пункт на той же строке)
			{

				LCD_gotoXY(x,y); //идем в текущее положение курсора
    315e:	60 2f       	mov	r22, r16
    3160:	81 2f       	mov	r24, r17
    3162:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
				LCD_putchar(' '); //стрираем старый курсор курсор
    3166:	80 e2       	ldi	r24, 0x20	; 32
    3168:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
				punkt++;x+=10; //увеличиваем координату x (переходим в соседний пункт), y не меняем, меняем номер пункта
    316c:	f3 94       	inc	r15
    316e:	16 5f       	subi	r17, 0xF6	; 246
    3170:	23 c0       	rjmp	.+70     	; 0x31b8 <printPodmenu+0x366>
			}
		}
		break;
		case LEFT: //возвращаемся в предыдущий пункт
		{
			if((x-10)<0 && y!=1) //перемещение для ВЫХ1 и ВЫХ3(в этом случае надо перескочить на другую строку)
    3172:	81 2f       	mov	r24, r17
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0a 97       	sbiw	r24, 0x0a	; 10
    3178:	a4 f4       	brge	.+40     	; 0x31a2 <printPodmenu+0x350>
    317a:	01 30       	cpi	r16, 0x01	; 1
    317c:	09 f4       	brne	.+2      	; 0x3180 <printPodmenu+0x32e>
    317e:	50 c0       	rjmp	.+160    	; 0x3220 <printPodmenu+0x3ce>
			{
				LCD_gotoXY(x,y); //идем в текущее положение курсора
    3180:	60 2f       	mov	r22, r16
    3182:	81 2f       	mov	r24, r17
    3184:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
				LCD_putchar(' '); //стрираем старый курсор курсор
    3188:	80 e2       	ldi	r24, 0x20	; 32
    318a:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
				y--;x=10;punkt--; //уменьшаем координату y(переходим на предыдущюю строку),координата х=10, уменьшаем номер пункта
    318e:	01 50       	subi	r16, 0x01	; 1
    3190:	fa 94       	dec	r15
				LCD_gotoXY(x,y); //идем в новые координаты для стрелки
    3192:	60 2f       	mov	r22, r16
    3194:	8a e0       	ldi	r24, 0x0A	; 10
    3196:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
				LCD_putchar(0x84); //идем в новые координаты для стрелки
    319a:	84 e8       	ldi	r24, 0x84	; 132
    319c:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
    31a0:	27 c0       	rjmp	.+78     	; 0x31f0 <printPodmenu+0x39e>
			}
			else if(x!=0) //перемещение для ВЫХ2 и ВЫХ4(в этом случае надо перейти в соседний пункт на той же строке)
    31a2:	11 23       	and	r17, r17
    31a4:	89 f0       	breq	.+34     	; 0x31c8 <printPodmenu+0x376>
			{
				LCD_gotoXY(x,y); //идем в текущее положение курсора
    31a6:	60 2f       	mov	r22, r16
    31a8:	81 2f       	mov	r24, r17
    31aa:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
				LCD_putchar(' '); //стрираем старый курсор курсор
    31ae:	80 e2       	ldi	r24, 0x20	; 32
    31b0:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
				punkt--;x-=10; //уменьшаем координату х (ставим курсор на предыдущий пункт),координата y не меняется, уменьшаем номер пункта
    31b4:	fa 94       	dec	r15
    31b6:	1a 50       	subi	r17, 0x0A	; 10
				LCD_gotoXY(x,y); //идем в новые координаты для стрелки
    31b8:	60 2f       	mov	r22, r16
    31ba:	81 2f       	mov	r24, r17
    31bc:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
				LCD_putchar(0x84); //идем в новые координаты для стрелки
    31c0:	84 e8       	ldi	r24, 0x84	; 132
    31c2:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
    31c6:	49 cf       	rjmp	.-366    	; 0x305a <printPodmenu+0x208>
			}
			else if(y==1)
    31c8:	01 30       	cpi	r16, 0x01	; 1
    31ca:	09 f0       	breq	.+2      	; 0x31ce <printPodmenu+0x37c>
    31cc:	46 cf       	rjmp	.-372    	; 0x305a <printPodmenu+0x208>
			{
				LCD_gotoXY(x,y); //идем в текущее положение курсора
    31ce:	61 e0       	ldi	r22, 0x01	; 1
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
				LCD_putchar(' '); //стрираем старый курсор курсор
    31d6:	80 e2       	ldi	r24, 0x20	; 32
    31d8:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
				punkt=3; x=10; y=2;
				LCD_gotoXY(x,y); //идем в новые координаты для стрелки
    31dc:	62 e0       	ldi	r22, 0x02	; 2
    31de:	8a e0       	ldi	r24, 0x0A	; 10
    31e0:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
				LCD_putchar(0x84); //идем в новые координаты для стрелки
    31e4:	84 e8       	ldi	r24, 0x84	; 132
    31e6:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
			}
			else if(y==1)
			{
				LCD_gotoXY(x,y); //идем в текущее положение курсора
				LCD_putchar(' '); //стрираем старый курсор курсор
				punkt=3; x=10; y=2;
    31ea:	83 e0       	ldi	r24, 0x03	; 3
    31ec:	f8 2e       	mov	r15, r24
    31ee:	02 e0       	ldi	r16, 0x02	; 2
    31f0:	1a e0       	ldi	r17, 0x0A	; 10
    31f2:	33 cf       	rjmp	.-410    	; 0x305a <printPodmenu+0x208>
				//LCD_gotoXY(0,y); //идем в новые координаты для стрелки
				//LCD_putchar(0x84); //идем в новые координаты для стрелки
			}
		}//UP
		break;
		case ENT:(punkt==1)?(printOut(numm)):(printRejim(numm));
    31f4:	85 2d       	mov	r24, r5
    31f6:	0e 94 83 16 	call	0x2d06	; 0x2d06 <printRejim>
    31fa:	4c ce       	rjmp	.-872    	; 0x2e94 <printPodmenu+0x42>
				LCD_putchar(' '); //стрираем старый курсор курсор
				y++;x=0;punkt++; //увеличиваем координату y(переходим в след строку), х обнуляем, меняем номер пункта
				LCD_gotoXY(x,y); //идем в новые координаты для стрелки
				LCD_putchar(0x84); //идем в новые координаты для стрелки
			}
			else if(x!=10) //перемещение для ВЫХ1 и ВЫХ3(в этом случае надо перейти в соседний пункт на той же строке)
    31fc:	1a 30       	cpi	r17, 0x0A	; 10
    31fe:	09 f0       	breq	.+2      	; 0x3202 <printPodmenu+0x3b0>
    3200:	ae cf       	rjmp	.-164    	; 0x315e <printPodmenu+0x30c>
				LCD_gotoXY(x,y); //идем в новые координаты для стрелки
				LCD_putchar(0x84); //идем в новые координаты для стрелки
			}
			else if(y==2)
			{
				LCD_gotoXY(x,y); //идем в текущее положение курсора
    3202:	62 e0       	ldi	r22, 0x02	; 2
    3204:	8a e0       	ldi	r24, 0x0A	; 10
    3206:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
				LCD_putchar(' '); //стрираем старый курсор курсор
    320a:	80 e2       	ldi	r24, 0x20	; 32
    320c:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
				punkt=0; x=0; y=1;
				LCD_gotoXY(x,y); //идем в новые координаты для стрелки
    3210:	61 e0       	ldi	r22, 0x01	; 1
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
				LCD_putchar(0x84); //идем в новые координаты для стрелки
    3218:	84 e8       	ldi	r24, 0x84	; 132
    321a:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
    321e:	1a cf       	rjmp	.-460    	; 0x3054 <printPodmenu+0x202>
				LCD_putchar(' '); //стрираем старый курсор курсор
				y--;x=10;punkt--; //уменьшаем координату y(переходим на предыдущюю строку),координата х=10, уменьшаем номер пункта
				LCD_gotoXY(x,y); //идем в новые координаты для стрелки
				LCD_putchar(0x84); //идем в новые координаты для стрелки
			}
			else if(x!=0) //перемещение для ВЫХ2 и ВЫХ4(в этом случае надо перейти в соседний пункт на той же строке)
    3220:	11 11       	cpse	r17, r1
    3222:	c1 cf       	rjmp	.-126    	; 0x31a6 <printPodmenu+0x354>
    3224:	d4 cf       	rjmp	.-88     	; 0x31ce <printPodmenu+0x37c>

00003226 <dvx3>:
{
	printPodmenu(6);
}
static void dvx3(void)
{
	printPodmenu(7);
    3226:	87 e0       	ldi	r24, 0x07	; 7
    3228:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <printPodmenu>

0000322c <dvx2>:
{
	printPodmenu(5);
}
static void dvx2(void)
{
	printPodmenu(6);
    322c:	86 e0       	ldi	r24, 0x06	; 6
    322e:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <printPodmenu>

00003232 <dvx1>:
{
	printPodmenu(4);
}
static void dvx1(void)
{
	printPodmenu(5);
    3232:	85 e0       	ldi	r24, 0x05	; 5
    3234:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <printPodmenu>

00003238 <vod4>:
{
	printPodmenu(3);
}
static void vod4(void)
{
	printPodmenu(4);
    3238:	84 e0       	ldi	r24, 0x04	; 4
    323a:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <printPodmenu>

0000323e <vod3>:
{
	printPodmenu(2);
}
static void vod3(void)
{
	printPodmenu(3);
    323e:	83 e0       	ldi	r24, 0x03	; 3
    3240:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <printPodmenu>

00003244 <vod2>:
{
	printPodmenu(1);
}
static void vod2(void)
{
	printPodmenu(2);
    3244:	82 e0       	ldi	r24, 0x02	; 2
    3246:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <printPodmenu>

0000324a <vod1>:
	{NULL,NULL}	//затычка
};

static void vod1(void)
{
	printPodmenu(1);
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <printPodmenu>

00003250 <main>:
#include "menu.c"



int main(void)
{
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	64 97       	sbiw	r28, 0x14	; 20
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	f8 94       	cli
    325e:	de bf       	out	0x3e, r29	; 62
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	cd bf       	out	0x3d, r28	; 61
	bki_init();
    3264:	0e 94 56 0a 	call	0x14ac	; 0x14ac <bki_init>
		//PGM_P title=RABOTA;
		PGM_P title;

		if(!(chkBit(sys_state,ALM))&&!(chkBit(sys_state,FLT))) title=RABOTA;
		//заголовок
		(ind_state==0)?(ind_state++):(ind_state=0);
    3268:	33 24       	eor	r3, r3
    326a:	33 94       	inc	r3
		if(chkBit(sys_state,ERR))                  title=NET_GOTOVNOSTI;
		LCD_gotoXY(0,0);LCD_puts_P(title,20);

		//читаем время
		rtc_get(&rtc);
		sprintf(buffer,"%02u.%02u.%02u %02u:%02u:%02u",rtc.day,rtc.month,rtc.year,rtc.hours,rtc.minutes,rtc.seconds);
    326c:	e0 e2       	ldi	r30, 0x20	; 32
    326e:	6e 2e       	mov	r6, r30
    3270:	e1 e0       	ldi	r30, 0x01	; 1
    3272:	7e 2e       	mov	r7, r30
    3274:	ce 01       	movw	r24, r28
    3276:	01 96       	adiw	r24, 0x01	; 1
    3278:	6c 01       	movw	r12, r24
		{
			LCD_puts(buffer,20);
		}


		sprintf(buffer, "%u", sys_state);
    327a:	f3 e4       	ldi	r31, 0x43	; 67
    327c:	af 2e       	mov	r10, r31
    327e:	f1 e0       	ldi	r31, 0x01	; 1
    3280:	bf 2e       	mov	r11, r31
		/*sprintf(buffer, "%u", inSysBDZ[13].data[0]);
		LCD_gotoXY(0,2);
		LCD_puts(buffer,20);*/

		//новое в версии
		if(TWI_ERR)ERROR=RTC;
    3282:	a2 e0       	ldi	r26, 0x02	; 2
    3284:	4a 2e       	mov	r4, r26
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
		{
			if(readID(i)==i)	//если блок есть в списке
			{
				modbusRegisters[BDZ_INSYS]++;																//счетчик инлайн блоков
				if(chkBit(inSysBDZ[i].flags,CONF)) setBit(sys_state,CONF);
    3286:	b9 e0       	ldi	r27, 0x09	; 9
    3288:	5b 2e       	mov	r5, r27

		//здесь можно пингануть.После пинга пройдет "пауза со сканированием"-за это время должны прийти все отклики
		if(pingTime ==0)
		{
			ping();
			pingTime=PINGTIME;
    328a:	18 e8       	ldi	r17, 0x88	; 136
    328c:	81 2e       	mov	r8, r17
    328e:	13 e1       	ldi	r17, 0x13	; 19
    3290:	91 2e       	mov	r9, r17
	{
		char buffer[20];
		//PGM_P title=RABOTA;
		PGM_P title;

		if(!(chkBit(sys_state,ALM))&&!(chkBit(sys_state,FLT))) title=RABOTA;
    3292:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    3296:	98 2f       	mov	r25, r24
    3298:	92 70       	andi	r25, 0x02	; 2
    329a:	28 2f       	mov	r18, r24
    329c:	21 70       	andi	r18, 0x01	; 1
    329e:	80 fd       	sbrc	r24, 0
    32a0:	06 c0       	rjmp	.+12     	; 0x32ae <main+0x5e>
    32a2:	91 11       	cpse	r25, r1
    32a4:	04 c0       	rjmp	.+8      	; 0x32ae <main+0x5e>
    32a6:	7f e9       	ldi	r23, 0x9F	; 159
    32a8:	e7 2e       	mov	r14, r23
    32aa:	71 e0       	ldi	r23, 0x01	; 1
    32ac:	f7 2e       	mov	r15, r23
		//заголовок
		(ind_state==0)?(ind_state++):(ind_state=0);
    32ae:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <ind_state>
    32b2:	31 11       	cpse	r19, r1
    32b4:	03 c0       	rjmp	.+6      	; 0x32bc <main+0x6c>
    32b6:	30 92 4c 01 	sts	0x014C, r3	; 0x80014c <ind_state>
    32ba:	08 c0       	rjmp	.+16     	; 0x32cc <main+0x7c>
    32bc:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <ind_state>
		if(chkBit(sys_state,ALM) && ind_state==0)  title=AVARIYA;
    32c0:	22 23       	and	r18, r18
    32c2:	21 f0       	breq	.+8      	; 0x32cc <main+0x7c>
    32c4:	68 e9       	ldi	r22, 0x98	; 152
    32c6:	e6 2e       	mov	r14, r22
    32c8:	61 e0       	ldi	r22, 0x01	; 1
    32ca:	f6 2e       	mov	r15, r22
		if(chkBit(sys_state,FLT) && ind_state==1)  title=NEISPRAVNOST;
    32cc:	99 23       	and	r25, r25
    32ce:	41 f0       	breq	.+16     	; 0x32e0 <main+0x90>
    32d0:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <ind_state>
    32d4:	91 30       	cpi	r25, 0x01	; 1
    32d6:	21 f4       	brne	.+8      	; 0x32e0 <main+0x90>
    32d8:	5a e8       	ldi	r21, 0x8A	; 138
    32da:	e5 2e       	mov	r14, r21
    32dc:	51 e0       	ldi	r21, 0x01	; 1
    32de:	f5 2e       	mov	r15, r21
		if(chkBit(sys_state,ERR))                  title=NET_GOTOVNOSTI;
    32e0:	83 ff       	sbrs	r24, 3
    32e2:	04 c0       	rjmp	.+8      	; 0x32ec <main+0x9c>
    32e4:	4c ec       	ldi	r20, 0xCC	; 204
    32e6:	e4 2e       	mov	r14, r20
    32e8:	40 e0       	ldi	r20, 0x00	; 0
    32ea:	f4 2e       	mov	r15, r20
		LCD_gotoXY(0,0);LCD_puts_P(title,20);
    32ec:	60 e0       	ldi	r22, 0x00	; 0
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
    32f4:	64 e1       	ldi	r22, 0x14	; 20
    32f6:	c7 01       	movw	r24, r14
    32f8:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>

		//читаем время
		rtc_get(&rtc);
    32fc:	82 ef       	ldi	r24, 0xF2	; 242
    32fe:	94 e0       	ldi	r25, 0x04	; 4
    3300:	0e 94 d6 02 	call	0x5ac	; 0x5ac <rtc_get>
		sprintf(buffer,"%02u.%02u.%02u %02u:%02u:%02u",rtc.day,rtc.month,rtc.year,rtc.hours,rtc.minutes,rtc.seconds);
    3304:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <rtc+0x5>
    3308:	1f 92       	push	r1
    330a:	8f 93       	push	r24
    330c:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <rtc+0x4>
    3310:	1f 92       	push	r1
    3312:	8f 93       	push	r24
    3314:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <rtc+0x3>
    3318:	1f 92       	push	r1
    331a:	8f 93       	push	r24
    331c:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <rtc>
    3320:	1f 92       	push	r1
    3322:	8f 93       	push	r24
    3324:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <rtc+0x1>
    3328:	1f 92       	push	r1
    332a:	8f 93       	push	r24
    332c:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <rtc+0x2>
    3330:	1f 92       	push	r1
    3332:	8f 93       	push	r24
    3334:	7f 92       	push	r7
    3336:	6f 92       	push	r6
    3338:	df 92       	push	r13
    333a:	cf 92       	push	r12
    333c:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <sprintf>
		//обновляем модбас
		modbusRegisters[TIME_YYMM]=(unsigned int)rtc.year<<8 | rtc.month;
    3340:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <rtc>
    3344:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <rtc+0x1>
    3348:	98 27       	eor	r25, r24
    334a:	89 27       	eor	r24, r25
    334c:	98 27       	eor	r25, r24
    334e:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <modbusRegisters+0xb>
    3352:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <modbusRegisters+0xa>
		modbusRegisters[TIME_DDHH]=(unsigned int)rtc.day<<8 | rtc.hours;
    3356:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <rtc+0x2>
    335a:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <rtc+0x3>
    335e:	98 27       	eor	r25, r24
    3360:	89 27       	eor	r24, r25
    3362:	98 27       	eor	r25, r24
    3364:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <modbusRegisters+0xd>
    3368:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <modbusRegisters+0xc>
		modbusRegisters[TIME_MMSS]=(unsigned int)rtc.minutes<<8 | rtc.seconds;
    336c:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <rtc+0x4>
    3370:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <rtc+0x5>
    3374:	98 27       	eor	r25, r24
    3376:	89 27       	eor	r24, r25
    3378:	98 27       	eor	r25, r24
    337a:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <modbusRegisters+0xf>
    337e:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <modbusRegisters+0xe>

		//экран:код ошибки или строка RTC
		LCD_gotoXY(0,3);
    3382:	63 e0       	ldi	r22, 0x03	; 3
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		if(ERROR)
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	de bf       	out	0x3e, r29	; 62
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	cd bf       	out	0x3d, r28	; 61
    3394:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    3398:	88 23       	and	r24, r24
    339a:	a1 f0       	breq	.+40     	; 0x33c4 <main+0x174>
		{
			setBit(sys_state,ERR);
    339c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    33a0:	88 60       	ori	r24, 0x08	; 8
    33a2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <sys_state>
			LCD_puts_P(OSHIBKA,20);
    33a6:	64 e1       	ldi	r22, 0x14	; 20
    33a8:	85 ec       	ldi	r24, 0xC5	; 197
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	0e 94 54 06 	call	0xca8	; 0xca8 <LCD_puts_P>
			LCD_gotoXY(7,3);
    33b0:	63 e0       	ldi	r22, 0x03	; 3
    33b2:	87 e0       	ldi	r24, 0x07	; 7
    33b4:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
			LCD_putchar(ERROR+'0');
    33b8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    33bc:	80 5d       	subi	r24, 0xD0	; 208
    33be:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>
    33c2:	04 c0       	rjmp	.+8      	; 0x33cc <main+0x17c>
		}
		else
		{
			LCD_puts(buffer,20);
    33c4:	64 e1       	ldi	r22, 0x14	; 20
    33c6:	c6 01       	movw	r24, r12
    33c8:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
		}


		sprintf(buffer, "%u", sys_state);
    33cc:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    33d0:	1f 92       	push	r1
    33d2:	8f 93       	push	r24
    33d4:	bf 92       	push	r11
    33d6:	af 92       	push	r10
    33d8:	df 92       	push	r13
    33da:	cf 92       	push	r12
    33dc:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <sprintf>
		LCD_gotoXY(0,1);
    33e0:	61 e0       	ldi	r22, 0x01	; 1
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
		LCD_puts(buffer,20);
    33e8:	64 e1       	ldi	r22, 0x14	; 20
    33ea:	c6 01       	movw	r24, r12
    33ec:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_puts>
		/*sprintf(buffer, "%u", inSysBDZ[13].data[0]);
		LCD_gotoXY(0,2);
		LCD_puts(buffer,20);*/

		//новое в версии
		if(TWI_ERR)ERROR=RTC;
    33f0:	0f 90       	pop	r0
    33f2:	0f 90       	pop	r0
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <TWI_ERR>
    3400:	81 11       	cpse	r24, r1
    3402:	40 92 4b 01 	sts	0x014B, r4	; 0x80014b <ERROR>
		if(MODB_ERR)ERROR=MODB;
    3406:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <MODB_ERR>
    340a:	88 23       	and	r24, r24
    340c:	19 f0       	breq	.+6      	; 0x3414 <main+0x1c4>
    340e:	85 e0       	ldi	r24, 0x05	; 5
    3410:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>
		if(CAN_ERR)ERROR=CAN;
    3414:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CAN_ERR>
    3418:	88 23       	and	r24, r24
    341a:	19 f0       	breq	.+6      	; 0x3422 <main+0x1d2>
    341c:	83 e0       	ldi	r24, 0x03	; 3
    341e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>



		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
    3422:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sys_state>
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
    3426:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <modbusRegisters+0x9>
    342a:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <modbusRegisters+0x8>
    342e:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <modbusRegisters+0x7>
    3432:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <modbusRegisters+0x6>
    3436:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <modbusRegisters+0x5>
    343a:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <modbusRegisters+0x4>
    343e:	01 e0       	ldi	r16, 0x01	; 1
    3440:	10 e0       	ldi	r17, 0x00	; 0
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
		{
			if(readID(i)==i)	//если блок есть в списке
    3442:	c8 01       	movw	r24, r16
    3444:	87 5f       	subi	r24, 0xF7	; 247
    3446:	9f 4f       	sbci	r25, 0xFF	; 255
    3448:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    344c:	80 13       	cpse	r24, r16
    344e:	53 c0       	rjmp	.+166    	; 0x34f6 <main+0x2a6>
			{
				modbusRegisters[BDZ_INSYS]++;																//счетчик инлайн блоков
    3450:	20 91 e6 04 	lds	r18, 0x04E6	; 0x8004e6 <modbusRegisters+0x4>
    3454:	30 91 e7 04 	lds	r19, 0x04E7	; 0x8004e7 <modbusRegisters+0x5>
    3458:	2f 5f       	subi	r18, 0xFF	; 255
    345a:	3f 4f       	sbci	r19, 0xFF	; 255
    345c:	30 93 e7 04 	sts	0x04E7, r19	; 0x8004e7 <modbusRegisters+0x5>
    3460:	20 93 e6 04 	sts	0x04E6, r18	; 0x8004e6 <modbusRegisters+0x4>
				if(chkBit(inSysBDZ[i].flags,CONF)) setBit(sys_state,CONF);
    3464:	50 9e       	mul	r5, r16
    3466:	f0 01       	movw	r30, r0
    3468:	51 9e       	mul	r5, r17
    346a:	f0 0d       	add	r31, r0
    346c:	11 24       	eor	r1, r1
    346e:	ed 59       	subi	r30, 0x9D	; 157
    3470:	fe 4f       	sbci	r31, 0xFE	; 254
    3472:	90 85       	ldd	r25, Z+8	; 0x08
    3474:	95 ff       	sbrs	r25, 5
    3476:	05 c0       	rjmp	.+10     	; 0x3482 <main+0x232>
    3478:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sys_state>
    347c:	90 62       	ori	r25, 0x20	; 32
    347e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sys_state>
				if(chkBit(inSysBDZ[i].flags,ALM))
    3482:	50 9e       	mul	r5, r16
    3484:	f0 01       	movw	r30, r0
    3486:	51 9e       	mul	r5, r17
    3488:	f0 0d       	add	r31, r0
    348a:	11 24       	eor	r1, r1
    348c:	ed 59       	subi	r30, 0x9D	; 157
    348e:	fe 4f       	sbci	r31, 0xFE	; 254
    3490:	90 85       	ldd	r25, Z+8	; 0x08
    3492:	90 ff       	sbrs	r25, 0
    3494:	18 c0       	rjmp	.+48     	; 0x34c6 <main+0x276>
				{
					modbusRegisters[BDZ_ALARM]++;
    3496:	20 91 ea 04 	lds	r18, 0x04EA	; 0x8004ea <modbusRegisters+0x8>
    349a:	30 91 eb 04 	lds	r19, 0x04EB	; 0x8004eb <modbusRegisters+0x9>
    349e:	2f 5f       	subi	r18, 0xFF	; 255
    34a0:	3f 4f       	sbci	r19, 0xFF	; 255
    34a2:	30 93 eb 04 	sts	0x04EB, r19	; 0x8004eb <modbusRegisters+0x9>
    34a6:	20 93 ea 04 	sts	0x04EA, r18	; 0x8004ea <modbusRegisters+0x8>
					setBit(sys_state,ALM);
    34aa:	20 90 4d 01 	lds	r2, 0x014D	; 0x80014d <sys_state>
    34ae:	92 2d       	mov	r25, r2
    34b0:	91 60       	ori	r25, 0x01	; 1
    34b2:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sys_state>
					if (scanID(i)) setBit(sys_state,NEW);
    34b6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <scanID>
    34ba:	88 23       	and	r24, r24
    34bc:	21 f0       	breq	.+8      	; 0x34c6 <main+0x276>
    34be:	82 2d       	mov	r24, r2
    34c0:	81 64       	ori	r24, 0x41	; 65
    34c2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <sys_state>
				}	//счетчик аварийных блоков и установка флага общей аварии
				if(chkBit(inSysBDZ[i].flags,FLT)) {modbusRegisters[BDZ_FAULT]++; setBit(sys_state,FLT);}	//счетчик неисправный блоков и установка флага общей неисправности
    34c6:	50 9e       	mul	r5, r16
    34c8:	f0 01       	movw	r30, r0
    34ca:	51 9e       	mul	r5, r17
    34cc:	f0 0d       	add	r31, r0
    34ce:	11 24       	eor	r1, r1
    34d0:	ed 59       	subi	r30, 0x9D	; 157
    34d2:	fe 4f       	sbci	r31, 0xFE	; 254
    34d4:	80 85       	ldd	r24, Z+8	; 0x08
    34d6:	81 ff       	sbrs	r24, 1
    34d8:	0e c0       	rjmp	.+28     	; 0x34f6 <main+0x2a6>
    34da:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <modbusRegisters+0x6>
    34de:	90 91 e9 04 	lds	r25, 0x04E9	; 0x8004e9 <modbusRegisters+0x7>
    34e2:	01 96       	adiw	r24, 0x01	; 1
    34e4:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <modbusRegisters+0x7>
    34e8:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <modbusRegisters+0x6>
    34ec:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    34f0:	82 60       	ori	r24, 0x02	; 2
    34f2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <sys_state>
				//if(new==i) setBit(sys_state,NEW);
				//sys_state |= inSysBDZ[i].flags & 0x03;				//два мл.бита-это флаги аварии и неисправности
			}

			(chkBit(sys_state,CONF))?(PORTA|=1<<OUT2):(PORTA &= ~(1<<OUT2));
    34f6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    34fa:	85 ff       	sbrs	r24, 5
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <main+0x2b2>
    34fe:	da 9a       	sbi	0x1b, 2	; 27
    3500:	01 c0       	rjmp	.+2      	; 0x3504 <main+0x2b4>
    3502:	da 98       	cbi	0x1b, 2	; 27
			(chkBit(sys_state,ALM))?(PORTA|=1<<OUT1):(PORTA &= ~(1<<OUT1));	//обнаружили аварию ОТКЛЮЧАЕМ
    3504:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    3508:	80 ff       	sbrs	r24, 0
    350a:	02 c0       	rjmp	.+4      	; 0x3510 <main+0x2c0>
    350c:	db 9a       	sbi	0x1b, 3	; 27
    350e:	01 c0       	rjmp	.+2      	; 0x3512 <main+0x2c2>
    3510:	db 98       	cbi	0x1b, 3	; 27
			(chkBit(sys_state,NEW))?(PORTA|=1<<OUT3):(PORTA &= ~(1<<OUT3));
    3512:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    3516:	86 ff       	sbrs	r24, 6
    3518:	02 c0       	rjmp	.+4      	; 0x351e <main+0x2ce>
    351a:	d9 9a       	sbi	0x1b, 1	; 27
    351c:	01 c0       	rjmp	.+2      	; 0x3520 <main+0x2d0>
    351e:	d9 98       	cbi	0x1b, 1	; 27
			(chkBit(sys_state,FLT) || ERROR)?(clrBit(PORTA,OUT4)):(setBit(PORTA,OUT4));
    3520:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    3524:	81 fd       	sbrc	r24, 1
    3526:	04 c0       	rjmp	.+8      	; 0x3530 <main+0x2e0>
    3528:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    352c:	88 23       	and	r24, r24
    352e:	11 f0       	breq	.+4      	; 0x3534 <main+0x2e4>
    3530:	d8 98       	cbi	0x1b, 0	; 27
    3532:	01 c0       	rjmp	.+2      	; 0x3536 <main+0x2e6>
    3534:	d8 9a       	sbi	0x1b, 0	; 27
    3536:	0f 5f       	subi	r16, 0xFF	; 255
    3538:	1f 4f       	sbci	r17, 0xFF	; 255


		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
    353a:	03 36       	cpi	r16, 0x63	; 99
    353c:	11 05       	cpc	r17, r1
    353e:	09 f0       	breq	.+2      	; 0x3542 <main+0x2f2>
    3540:	80 cf       	rjmp	.-256    	; 0x3442 <main+0x1f2>
			(chkBit(sys_state,ALM))?(PORTA|=1<<OUT1):(PORTA &= ~(1<<OUT1));	//обнаружили аварию ОТКЛЮЧАЕМ
			(chkBit(sys_state,NEW))?(PORTA|=1<<OUT3):(PORTA &= ~(1<<OUT3));
			(chkBit(sys_state,FLT) || ERROR)?(clrBit(PORTA,OUT4)):(setBit(PORTA,OUT4));
		}
		//сохраняем ошибку, статус системы и состояния выходов
		modbusRegisters[BKI_STATE]=(unsigned int)ERROR<<8 | sys_state;
    3542:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	98 2f       	mov	r25, r24
    354a:	88 27       	eor	r24, r24
    354c:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <sys_state>
    3550:	82 2b       	or	r24, r18
    3552:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <modbusRegisters+0x1>
    3556:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <modbusRegisters>
		modbusRegisters[BKI_OUTS]= PINA & 0x0F;
    355a:	89 b3       	in	r24, 0x19	; 25
    355c:	8f 70       	andi	r24, 0x0F	; 15
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	90 93 e5 04 	sts	0x04E5, r25	; 0x8004e5 <modbusRegisters+0x3>
    3564:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <modbusRegisters+0x2>

		//здесь можно пингануть.После пинга пройдет "пауза со сканированием"-за это время должны прийти все отклики
		if(pingTime ==0)
    3568:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <pingTime>
    356c:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <pingTime+0x1>
    3570:	89 2b       	or	r24, r25
    3572:	69 f4       	brne	.+26     	; 0x358e <main+0x33e>
		{
			ping();
    3574:	0e 94 b6 0a 	call	0x156c	; 0x156c <ping>
			pingTime=PINGTIME;
    3578:	90 92 5f 01 	sts	0x015F, r9	; 0x80015f <pingTime+0x1>
    357c:	80 92 5e 01 	sts	0x015E, r8	; 0x80015e <pingTime>
			LCD_gotoXY(19,0);
    3580:	60 e0       	ldi	r22, 0x00	; 0
    3582:	83 e1       	ldi	r24, 0x13	; 19
    3584:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_gotoXY>
			LCD_putchar('*');
    3588:	8a e2       	ldi	r24, 0x2A	; 42
    358a:	0e 94 41 04 	call	0x882	; 0x882 <LCD_putchar>



		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
    358e:	08 ee       	ldi	r16, 0xE8	; 232
    3590:	13 e0       	ldi	r17, 0x03	; 3
		}



		//пауза со сканированием клавы.Если появился RX прерываемся
		for(unsigned int i=0;(i<1000) && (!rx_counter);i++)
    3592:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_counter>
    3596:	81 11       	cpse	r24, r1
    3598:	19 c0       	rjmp	.+50     	; 0x35cc <main+0x37c>
    359a:	8f e9       	ldi	r24, 0x9F	; 159
    359c:	9f e0       	ldi	r25, 0x0F	; 15
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <main+0x34e>
    35a2:	00 c0       	rjmp	.+0      	; 0x35a4 <main+0x354>
    35a4:	00 00       	nop
		{
			_delay_ms(1);
			//нажат ENT-висим пока не отпустят-по выходу из меню очищаем экран,обнуляем статус
			if(scanKBD()==ENT){while(scanKBD()!=NOKEY);naviMenu(LVL_main);LCD_clr();sys_state=0;}
    35a6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <scanKBD>
    35aa:	82 30       	cpi	r24, 0x02	; 2
    35ac:	61 f4       	brne	.+24     	; 0x35c6 <main+0x376>
    35ae:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <scanKBD>
    35b2:	8f 3f       	cpi	r24, 0xFF	; 255
    35b4:	e1 f7       	brne	.-8      	; 0x35ae <main+0x35e>
    35b6:	80 e6       	ldi	r24, 0x60	; 96
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	0e 94 be 14 	call	0x297c	; 0x297c <naviMenu>
    35be:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clr>
    35c2:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sys_state>
    35c6:	01 50       	subi	r16, 0x01	; 1
    35c8:	11 09       	sbc	r17, r1
		}



		//пауза со сканированием клавы.Если появился RX прерываемся
		for(unsigned int i=0;(i<1000) && (!rx_counter);i++)
    35ca:	19 f7       	brne	.-58     	; 0x3592 <main+0x342>
			//нажат ENT-висим пока не отпустят-по выходу из меню очищаем экран,обнуляем статус
			if(scanKBD()==ENT){while(scanKBD()!=NOKEY);naviMenu(LVL_main);LCD_clr();sys_state=0;}
		}

		//отработка модбаса.если что то есть в буфере читаем сообщение
		if(rx_counter)
    35cc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_counter>
    35d0:	88 23       	and	r24, r24
    35d2:	09 f4       	brne	.+2      	; 0x35d6 <main+0x386>
    35d4:	5e ce       	rjmp	.-836    	; 0x3292 <main+0x42>
		{
			signed char a=getModbMsg();
    35d6:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <getModbMsg>
			if(a<1)ERROR=MODB;
    35da:	18 16       	cp	r1, r24
    35dc:	24 f0       	brlt	.+8      	; 0x35e6 <main+0x396>
    35de:	85 e0       	ldi	r24, 0x05	; 5
    35e0:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>
    35e4:	56 ce       	rjmp	.-852    	; 0x3292 <main+0x42>
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
    35e6:	dd 98       	cbi	0x1b, 5	; 27
				if(ERROR==MODB)ERROR=0;
    35e8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    35ec:	85 30       	cpi	r24, 0x05	; 5
    35ee:	11 f4       	brne	.+4      	; 0x35f4 <main+0x3a4>
    35f0:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <ERROR>


static signed char modbDecoder(void)
{
	//адрес не наш
	if(MODB_ADDR != eeprom_read_byte(&bki_addr)) return -1;
    35f4:	10 91 a4 05 	lds	r17, 0x05A4	; 0x8005a4 <modb_message>
    35f8:	86 e0       	ldi	r24, 0x06	; 6
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	0e 94 63 21 	call	0x42c6	; 0x42c6 <eeprom_read_byte>
    3600:	18 13       	cpse	r17, r24
    3602:	41 c0       	rjmp	.+130    	; 0x3686 <main+0x436>
    3604:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <modb_message+0x2>
    3608:	f0 91 a7 05 	lds	r31, 0x05A7	; 0x8005a7 <modb_message+0x3>
    360c:	fe 27       	eor	r31, r30
    360e:	ef 27       	eor	r30, r31
    3610:	fe 27       	eor	r31, r30
    3612:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <modb_message+0x4>
    3616:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <modb_message+0x5>
    361a:	98 27       	eor	r25, r24
    361c:	89 27       	eor	r24, r25
    361e:	98 27       	eor	r25, r24
	//неправильный регистр или их кол-во
	if((MODB_START_REG+MODB_QUANT_REG) > MAX_QUANT_MODB_REG) return modbErr(ILLEGAL_DATA_ADDR);
    3620:	af 01       	movw	r20, r30
    3622:	48 0f       	add	r20, r24
    3624:	59 1f       	adc	r21, r25
    3626:	20 91 a5 05 	lds	r18, 0x05A5	; 0x8005a5 <modb_message+0x1>
    362a:	49 30       	cpi	r20, 0x09	; 9
    362c:	51 05       	cpc	r21, r1
    362e:	38 f0       	brcs	.+14     	; 0x363e <main+0x3ee>
	return 0;
}

static unsigned char modbErr(unsigned char errCode)
{
	MODB_FUNC |= 0x80;			//установили флаг ошибки
    3630:	20 68       	ori	r18, 0x80	; 128
    3632:	20 93 a5 05 	sts	0x05A5, r18	; 0x8005a5 <modb_message+0x1>
	MOBD_ERROR_CODE = errCode; 	//код ошибки
    3636:	40 92 a6 05 	sts	0x05A6, r4	; 0x8005a6 <modb_message+0x2>
static signed char modbDecoder(void)
{
	//адрес не наш
	if(MODB_ADDR != eeprom_read_byte(&bki_addr)) return -1;
	//неправильный регистр или их кол-во
	if((MODB_START_REG+MODB_QUANT_REG) > MAX_QUANT_MODB_REG) return modbErr(ILLEGAL_DATA_ADDR);
    363a:	83 e0       	ldi	r24, 0x03	; 3
    363c:	26 c0       	rjmp	.+76     	; 0x368a <main+0x43a>
	//обрабатываем функцию
	switch(MODB_FUNC)
    363e:	23 30       	cpi	r18, 0x03	; 3
    3640:	e9 f4       	brne	.+58     	; 0x367c <main+0x42c>
    3642:	ee 0f       	add	r30, r30
    3644:	ff 1f       	adc	r31, r31
    3646:	ee 51       	subi	r30, 0x1E	; 30
    3648:	fb 4f       	sbci	r31, 0xFB	; 251
    364a:	a4 ea       	ldi	r26, 0xA4	; 164
    364c:	b5 e0       	ldi	r27, 0x05	; 5
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	12 96       	adiw	r26, 0x02	; 2
	{
		unsigned char j=MOBD_START_DATA;
		unsigned int  s=MODB_START_REG;
		unsigned int  e=MODB_QUANT_REG;

		for(unsigned int i=0; i<e; i++)
    3654:	82 17       	cp	r24, r18
    3656:	93 07       	cpc	r25, r19
    3658:	61 f0       	breq	.+24     	; 0x3672 <main+0x422>
		{
			modb_message[j++] =modbusRegisters[i+s] >>8;		//старший байт данных
    365a:	40 81       	ld	r20, Z
    365c:	51 81       	ldd	r21, Z+1	; 0x01
    365e:	32 96       	adiw	r30, 0x02	; 2
    3660:	11 96       	adiw	r26, 0x01	; 1
    3662:	5c 93       	st	X, r21
    3664:	11 97       	sbiw	r26, 0x01	; 1
			modb_message[j++] =modbusRegisters[i+s] & 0x00FF;	//младший
    3666:	12 96       	adiw	r26, 0x02	; 2
    3668:	4c 93       	st	X, r20
    366a:	12 97       	sbiw	r26, 0x02	; 2
	{
		unsigned char j=MOBD_START_DATA;
		unsigned int  s=MODB_START_REG;
		unsigned int  e=MODB_QUANT_REG;

		for(unsigned int i=0; i<e; i++)
    366c:	2f 5f       	subi	r18, 0xFF	; 255
    366e:	3f 4f       	sbci	r19, 0xFF	; 255
    3670:	f0 cf       	rjmp	.-32     	; 0x3652 <main+0x402>
    3672:	88 0f       	add	r24, r24
		{
			modb_message[j++] =modbusRegisters[i+s] >>8;		//старший байт данных
			modb_message[j++] =modbusRegisters[i+s] & 0x00FF;	//младший
		}
		MOBD_BYTE_COUNT = j-MOBD_START_DATA;				//счетчик байт в сообщении
    3674:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <modb_message+0x2>
		return MOBD_BYTE_COUNT+3;
    3678:	8d 5f       	subi	r24, 0xFD	; 253
    367a:	07 c0       	rjmp	.+14     	; 0x368a <main+0x43a>
	return 0;
}

static unsigned char modbErr(unsigned char errCode)
{
	MODB_FUNC |= 0x80;			//установили флаг ошибки
    367c:	20 68       	ori	r18, 0x80	; 128
    367e:	20 93 a5 05 	sts	0x05A5, r18	; 0x8005a5 <modb_message+0x1>
	MOBD_ERROR_CODE = errCode; 	//код ошибки
    3682:	30 92 a6 05 	sts	0x05A6, r3	; 0x8005a6 <modb_message+0x2>
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
				if(ERROR==MODB)ERROR=0;
				if((a=modbDecoder()) >0)putModbMsg(a);
				PORTA |= 1<<5;	//зажигаем СД
    3686:	dd 9a       	sbi	0x1b, 5	; 27
			}
		}


	}
    3688:	04 ce       	rjmp	.-1016   	; 0x3292 <main+0x42>
			if(a<1)ERROR=MODB;
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
				if(ERROR==MODB)ERROR=0;
				if((a=modbDecoder()) >0)putModbMsg(a);
    368a:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <putModbMsg>
    368e:	fb cf       	rjmp	.-10     	; 0x3686 <main+0x436>

00003690 <__vector_7>:
	clrBit(PORTA,BEEP);
}

//таймер 1ms
ISR(TIMER1_COMPA_vect)
{
    3690:	1f 92       	push	r1
    3692:	0f 92       	push	r0
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	0f 92       	push	r0
    3698:	11 24       	eor	r1, r1
    369a:	8f 93       	push	r24
    369c:	9f 93       	push	r25
    369e:	af 93       	push	r26
    36a0:	bf 93       	push	r27
	if(CAN_timeout)CAN_timeout--;
    36a2:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <CAN_timeout>
    36a6:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <CAN_timeout+0x1>
    36aa:	89 2b       	or	r24, r25
    36ac:	49 f0       	breq	.+18     	; 0x36c0 <__vector_7+0x30>
    36ae:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <CAN_timeout>
    36b2:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <CAN_timeout+0x1>
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <CAN_timeout+0x1>
    36bc:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <CAN_timeout>
	if(SPI_timeout)SPI_timeout--;
    36c0:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <SPI_timeout>
    36c4:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <SPI_timeout+0x1>
    36c8:	89 2b       	or	r24, r25
    36ca:	49 f0       	breq	.+18     	; 0x36de <__vector_7+0x4e>
    36cc:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <SPI_timeout>
    36d0:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <SPI_timeout+0x1>
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <SPI_timeout+0x1>
    36da:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <SPI_timeout>
	if(menuExit)menuExit--;
    36de:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <menuExit>
    36e2:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <menuExit+0x1>
    36e6:	89 2b       	or	r24, r25
    36e8:	49 f0       	breq	.+18     	; 0x36fc <__vector_7+0x6c>
    36ea:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <menuExit>
    36ee:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <menuExit+0x1>
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <menuExit+0x1>
    36f8:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <menuExit>
	if(pingTime)pingTime--;
    36fc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <pingTime>
    3700:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <pingTime+0x1>
    3704:	89 2b       	or	r24, r25
    3706:	49 f0       	breq	.+18     	; 0x371a <__vector_7+0x8a>
    3708:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <pingTime>
    370c:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <pingTime+0x1>
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <pingTime+0x1>
    3716:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <pingTime>

	if(MODB_timeout)MODB_timeout--;
    371a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <MODB_timeout>
    371e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <MODB_timeout+0x1>
    3722:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <MODB_timeout+0x2>
    3726:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <MODB_timeout+0x3>
    372a:	89 2b       	or	r24, r25
    372c:	8a 2b       	or	r24, r26
    372e:	8b 2b       	or	r24, r27
    3730:	99 f0       	breq	.+38     	; 0x3758 <__vector_7+0xc8>
    3732:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <MODB_timeout>
    3736:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <MODB_timeout+0x1>
    373a:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <MODB_timeout+0x2>
    373e:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <MODB_timeout+0x3>
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	a1 09       	sbc	r26, r1
    3746:	b1 09       	sbc	r27, r1
    3748:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <MODB_timeout>
    374c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <MODB_timeout+0x1>
    3750:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <MODB_timeout+0x2>
    3754:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <MODB_timeout+0x3>

}
    3758:	bf 91       	pop	r27
    375a:	af 91       	pop	r26
    375c:	9f 91       	pop	r25
    375e:	8f 91       	pop	r24
    3760:	0f 90       	pop	r0
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	0f 90       	pop	r0
    3766:	1f 90       	pop	r1
    3768:	18 95       	reti

0000376a <__vector_13>:

//чтение данный UART
ISR(USART_RXC_vect)
{
    376a:	1f 92       	push	r1
    376c:	0f 92       	push	r0
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	0f 92       	push	r0
    3772:	11 24       	eor	r1, r1
    3774:	8f 93       	push	r24
    3776:	9f 93       	push	r25
    3778:	ef 93       	push	r30
    377a:	ff 93       	push	r31
//отправить сообщение из модбас буфера. На входе RTU сообщение, передаем его длину
extern void putModbMsg(unsigned char lenght);
//прием символа и помещение в приемный буфер. Вставляется,например в прерывание
inline void read_raw_data(void)
{
	char status=UCSRA,data=UDR;
    377c:	8b b1       	in	r24, 0x0b	; 11
    377e:	9c b1       	in	r25, 0x0c	; 12

	if ((status & (1<<FE | 1<<PE | 1<<DOR))!=0) {MODB_ERR=MODBHW;return;}
    3780:	8c 71       	andi	r24, 0x1C	; 28
    3782:	11 f0       	breq	.+4      	; 0x3788 <__vector_13+0x1e>
    3784:	83 e0       	ldi	r24, 0x03	; 3
    3786:	19 c0       	rjmp	.+50     	; 0x37ba <__vector_13+0x50>
	rx_buffer[wr_index]=data;
    3788:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <wr_index>
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	e4 58       	subi	r30, 0x84	; 132
    3790:	fa 4f       	sbci	r31, 0xFA	; 250
    3792:	90 83       	st	Z, r25
	if (++wr_index == MODB_MESSSIZE) wr_index=0;
    3794:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <wr_index>
    3798:	8f 5f       	subi	r24, 0xFF	; 255
    379a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <wr_index>
    379e:	88 32       	cpi	r24, 0x28	; 40
    37a0:	11 f4       	brne	.+4      	; 0x37a6 <__vector_13+0x3c>
    37a2:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <wr_index>
	if (++rx_counter == MODB_MESSSIZE) {rx_counter=0;MODB_ERR=MODBBUFOVF;return;}
    37a6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_counter>
    37aa:	8f 5f       	subi	r24, 0xFF	; 255
    37ac:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_counter>
    37b0:	88 32       	cpi	r24, 0x28	; 40
    37b2:	29 f4       	brne	.+10     	; 0x37be <__vector_13+0x54>
    37b4:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_counter>
    37b8:	82 e0       	ldi	r24, 0x02	; 2
    37ba:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <MODB_ERR>
	read_raw_data();
}
    37be:	ff 91       	pop	r31
    37c0:	ef 91       	pop	r30
    37c2:	9f 91       	pop	r25
    37c4:	8f 91       	pop	r24
    37c6:	0f 90       	pop	r0
    37c8:	0f be       	out	0x3f, r0	; 63
    37ca:	0f 90       	pop	r0
    37cc:	1f 90       	pop	r1
    37ce:	18 95       	reti

000037d0 <modb_putchar>:
}

//отсылка символа по УАРТу
static void modb_putchar(char c)
{
	while((UCSRA&(1<<UDRE))==0);
    37d0:	5d 9b       	sbis	0x0b, 5	; 11
    37d2:	fe cf       	rjmp	.-4      	; 0x37d0 <modb_putchar>
	UDR=c;
    37d4:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<TXC))==0);	//ждем окончания передачи
    37d6:	5e 9b       	sbis	0x0b, 6	; 11
    37d8:	fe cf       	rjmp	.-4      	; 0x37d6 <modb_putchar+0x6>
	UCSRA |= 1<<TXC;			//сброс флага окончания передачи
    37da:	5e 9a       	sbi	0x0b, 6	; 11
    37dc:	08 95       	ret

000037de <CRC.constprop.0>:
  while(lenght--) {lrc+=*data++;}
  return ((unsigned char) (-(signed char) lrc));
}

//вычисление CRC
static unsigned int CRC(volatile unsigned char *data, unsigned char lenght)
    37de:	28 2f       	mov	r18, r24
{
  unsigned int crc=0xFFFF;
    37e0:	8f ef       	ldi	r24, 0xFF	; 255
    37e2:	9f ef       	ldi	r25, 0xFF	; 255
    37e4:	e4 ea       	ldi	r30, 0xA4	; 164
    37e6:	f5 e0       	ldi	r31, 0x05	; 5

  while(lenght--)
    37e8:	21 50       	subi	r18, 0x01	; 1
    37ea:	b0 f0       	brcs	.+44     	; 0x3818 <CRC.constprop.0+0x3a>
  {
    crc ^= *data++;
    37ec:	bf 01       	movw	r22, r30
    37ee:	6f 5f       	subi	r22, 0xFF	; 255
    37f0:	7f 4f       	sbci	r23, 0xFF	; 255
    37f2:	30 81       	ld	r19, Z
    37f4:	83 27       	eor	r24, r19
    37f6:	38 e0       	ldi	r19, 0x08	; 8
    37f8:	ac 01       	movw	r20, r24
    37fa:	56 95       	lsr	r21
    37fc:	47 95       	ror	r20
    for (unsigned char i = 0; i < 8; ++i)
    {
	if (crc & 1) crc = (crc >> 1) ^ 0xA001;
    37fe:	80 ff       	sbrs	r24, 0
    3800:	06 c0       	rjmp	.+12     	; 0x380e <CRC.constprop.0+0x30>
    3802:	ca 01       	movw	r24, r20
    3804:	e1 e0       	ldi	r30, 0x01	; 1
    3806:	8e 27       	eor	r24, r30
    3808:	e0 ea       	ldi	r30, 0xA0	; 160
    380a:	9e 27       	eor	r25, r30
    380c:	01 c0       	rjmp	.+2      	; 0x3810 <CRC.constprop.0+0x32>
	else crc = (crc >> 1);
    380e:	ca 01       	movw	r24, r20
    3810:	31 50       	subi	r19, 0x01	; 1
  unsigned int crc=0xFFFF;

  while(lenght--)
  {
    crc ^= *data++;
    for (unsigned char i = 0; i < 8; ++i)
    3812:	91 f7       	brne	.-28     	; 0x37f8 <CRC.constprop.0+0x1a>
{
  unsigned int crc=0xFFFF;

  while(lenght--)
  {
    crc ^= *data++;
    3814:	fb 01       	movw	r30, r22
    3816:	e8 cf       	rjmp	.-48     	; 0x37e8 <CRC.constprop.0+0xa>
	else crc = (crc >> 1);
    }
  }

  return crc;
}
    3818:	08 95       	ret

0000381a <MODB_init>:
static void modb_putchar(char);


//Инициализация.Выглядит примерно так:  MODB_init(RTU,EVEN,9600);
void MODB_init(unsigned char type,unsigned char parity,unsigned long int speed)
{
    381a:	0f 93       	push	r16
    381c:	1f 93       	push	r17
    381e:	cf 93       	push	r28
    3820:	df 93       	push	r29
    3822:	18 2f       	mov	r17, r24
    3824:	c6 2f       	mov	r28, r22
  unsigned char stop=(parity ==NONE)?(2):(1);	//1 стоп бит если есть паритет; 2 бита если нет паритета
    3826:	66 23       	and	r22, r22
    3828:	11 f0       	breq	.+4      	; 0x382e <MODB_init+0x14>
    382a:	01 e0       	ldi	r16, 0x01	; 1
    382c:	01 c0       	rjmp	.+2      	; 0x3830 <MODB_init+0x16>
    382e:	02 e0       	ldi	r16, 0x02	; 2
  unsigned char size=(type ==ASCII)?(7):(8);	//если ASCII-7 бит данных MSB, если RTU-8 бит данных MSB
    3830:	11 30       	cpi	r17, 0x01	; 1
    3832:	11 f0       	breq	.+4      	; 0x3838 <MODB_init+0x1e>
    3834:	d8 e0       	ldi	r29, 0x08	; 8
    3836:	01 c0       	rjmp	.+2      	; 0x383a <MODB_init+0x20>
    3838:	d7 e0       	ldi	r29, 0x07	; 7
  unsigned int baud=0x7F & (unsigned int)((F_CPU/(16*speed))-1);
    383a:	84 e0       	ldi	r24, 0x04	; 4
    383c:	22 0f       	add	r18, r18
    383e:	33 1f       	adc	r19, r19
    3840:	44 1f       	adc	r20, r20
    3842:	55 1f       	adc	r21, r21
    3844:	8a 95       	dec	r24
    3846:	d1 f7       	brne	.-12     	; 0x383c <MODB_init+0x22>
    3848:	60 e0       	ldi	r22, 0x00	; 0
    384a:	74 e2       	ldi	r23, 0x24	; 36
    384c:	84 ef       	ldi	r24, 0xF4	; 244
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <__udivmodsi4>
    3854:	21 50       	subi	r18, 0x01	; 1
    3856:	31 09       	sbc	r19, r1
    3858:	2f 77       	andi	r18, 0x7F	; 127
    385a:	33 27       	eor	r19, r19


  size-=5;
    385c:	d5 50       	subi	r29, 0x05	; 5
  TXENDDR |= 1<<TXENPIN;
    385e:	8e 9a       	sbi	0x11, 6	; 17
  TXDISABLE;
    3860:	96 98       	cbi	0x12, 6	; 18

  modb_type=type;
    3862:	10 93 53 01 	sts	0x0153, r17	; 0x800153 <modb_type>
  //длительность передачи одного бита == кол-во бит-в-символе(ASCII==10, RTU==11)/скорость
  //таймаут д.б. RTU>=3.5 символа (>38,5 бит), ASCII <=1000ms;
  //RTU = с запасом 40 бит=> 40/speed ==пауза, сек *1000 ==ms
//  val_timeout=(type ==ASCII)?(1000000):(40000000/speed);
  val_timeout=(type ==ASCII)?(1000):(2);	//при скоростях больше 19200 таймаут можно принять 2мс
    3866:	11 30       	cpi	r17, 0x01	; 1
    3868:	29 f0       	breq	.+10     	; 0x3874 <MODB_init+0x5a>
    386a:	82 e0       	ldi	r24, 0x02	; 2
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	a0 e0       	ldi	r26, 0x00	; 0
    3870:	b0 e0       	ldi	r27, 0x00	; 0
    3872:	04 c0       	rjmp	.+8      	; 0x387c <MODB_init+0x62>
    3874:	88 ee       	ldi	r24, 0xE8	; 232
    3876:	93 e0       	ldi	r25, 0x03	; 3
    3878:	a0 e0       	ldi	r26, 0x00	; 0
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <val_timeout>
    3880:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <val_timeout+0x1>
    3884:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <val_timeout+0x2>
    3888:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <val_timeout+0x3>

  //нога ТХ
  //When the USART Transmitter is enabled, this pin is configured as an output regardless of the value of DDD1.
  PORTD |= (1<<PORTD1);//PORTD.1=1 выход с "1"
    388c:	91 9a       	sbi	0x12, 1	; 18
  DDRD |= (1<<DDD1);  //DDRD.1=1 выход
    388e:	89 9a       	sbi	0x11, 1	; 17

  //нога RX
  PORTD |= (1<<PORTD0);//PORTD.1=1 вход с притяжкой
    3890:	90 9a       	sbi	0x12, 0	; 18
  DDRD &= ~(1<<DDD0);  //DDD.1=0 вход
    3892:	88 98       	cbi	0x11, 0	; 17

  UCSRA=0x00;
    3894:	1b b8       	out	0x0b, r1	; 11
  //(7)вкл.прер.по приему, (6)откл.прер.по передаче, (5)откл.прер.по опустошению UDR, (4)вкл.передатчик и (3)приемник, (2)9бит откл.
  UCSRB=0b10011000;
    3896:	88 e9       	ldi	r24, 0x98	; 152
    3898:	8a b9       	out	0x0a, r24	; 10
  //(7)?, (6)асинхронный режим, (5:4)четность(none), (3)1стоп, (2:1)8бит, (0)=0
  //	UCSRC=0b10000110;

  UCSRC=(1<<7) | parity | ((stop==2)?(1):(0) << 3) | (size<<1);
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	02 30       	cpi	r16, 0x02	; 2
    389e:	09 f0       	breq	.+2      	; 0x38a2 <MODB_init+0x88>
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	c0 68       	ori	r28, 0x80	; 128
    38a4:	8c 2b       	or	r24, r28
    38a6:	cd 2f       	mov	r28, r29
    38a8:	cc 0f       	add	r28, r28
    38aa:	c8 2b       	or	r28, r24
    38ac:	c0 bd       	out	0x20, r28	; 32
//	//(7)?, (6)асинхронный режим, (5:4)четность(EVEN), (3)1стоп, (2:1)8бит, (0)=0
//	UCSRC=0b10100110;
  UBRRH=baud << 8;
    38ae:	10 bc       	out	0x20, r1	; 32
  UBRRL=baud & 0x00FF;
    38b0:	29 b9       	out	0x09, r18	; 9
//	//9600 bps
//	UBRRH=0x00;
//	UBRRL=0x67;

}
    38b2:	df 91       	pop	r29
    38b4:	cf 91       	pop	r28
    38b6:	1f 91       	pop	r17
    38b8:	0f 91       	pop	r16
    38ba:	08 95       	ret

000038bc <putModbMsg>:

//отправить сообщение из модбас буфера. На входе RTU сообщение, передаем его длину
void putModbMsg(unsigned char lenght)
{
    38bc:	ef 92       	push	r14
    38be:	ff 92       	push	r15
    38c0:	0f 93       	push	r16
    38c2:	1f 93       	push	r17
    38c4:	cf 93       	push	r28
    38c6:	df 93       	push	r29
    38c8:	c8 2f       	mov	r28, r24
  switch(modb_type)
    38ca:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <modb_type>
    38ce:	88 23       	and	r24, r24
    38d0:	41 f0       	breq	.+16     	; 0x38e2 <putModbMsg+0x26>
    38d2:	81 30       	cpi	r24, 0x01	; 1
    38d4:	09 f0       	breq	.+2      	; 0x38d8 <putModbMsg+0x1c>
    38d6:	8e c0       	rjmp	.+284    	; 0x39f4 <putModbMsg+0x138>
    38d8:	9c 2f       	mov	r25, r28
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	e4 ea       	ldi	r30, 0xA4	; 164
    38de:	f5 e0       	ldi	r31, 0x05	; 5
    38e0:	35 c0       	rjmp	.+106    	; 0x394c <putModbMsg+0x90>
  {
  case(RTU):
    {
    unsigned int crc=CRC(modb_message,lenght);
    38e2:	8c 2f       	mov	r24, r28
    38e4:	0e 94 ef 1b 	call	0x37de	; 0x37de <CRC.constprop.0>
    38e8:	f8 2e       	mov	r15, r24
    38ea:	d9 2f       	mov	r29, r25
    unsigned char index=0;

    TXENABLE;
    38ec:	96 9a       	sbi	0x12, 6	; 18
    38ee:	04 ea       	ldi	r16, 0xA4	; 164
    38f0:	15 e0       	ldi	r17, 0x05	; 5
    while(lenght--) modb_putchar(modb_message[index++]);
    38f2:	cc 23       	and	r28, r28
    38f4:	39 f0       	breq	.+14     	; 0x3904 <putModbMsg+0x48>
    38f6:	f8 01       	movw	r30, r16
    38f8:	81 91       	ld	r24, Z+
    38fa:	8f 01       	movw	r16, r30
    38fc:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <modb_putchar>
    3900:	c1 50       	subi	r28, 0x01	; 1
    3902:	f7 cf       	rjmp	.-18     	; 0x38f2 <putModbMsg+0x36>
    modb_putchar(crc & 0x00FF);	//младшим байтом вперед
    3904:	8f 2d       	mov	r24, r15
    3906:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <modb_putchar>
    modb_putchar(crc>>8);
    390a:	8d 2f       	mov	r24, r29
    390c:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <modb_putchar>
    TXDISABLE;
    3910:	96 98       	cbi	0x12, 6	; 18
    MODB_timeout=val_timeout;
    3912:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <val_timeout>
    3916:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <val_timeout+0x1>
    391a:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <val_timeout+0x2>
    391e:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <val_timeout+0x3>
    3922:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <MODB_timeout>
    3926:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <MODB_timeout+0x1>
    392a:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <MODB_timeout+0x2>
    392e:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <MODB_timeout+0x3>
    while(MODB_timeout);
    3932:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <MODB_timeout>
    3936:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <MODB_timeout+0x1>
    393a:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <MODB_timeout+0x2>
    393e:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <MODB_timeout+0x3>
    3942:	89 2b       	or	r24, r25
    3944:	8a 2b       	or	r24, r26
    3946:	8b 2b       	or	r24, r27
    3948:	a1 f7       	brne	.-24     	; 0x3932 <putModbMsg+0x76>
    394a:	54 c0       	rjmp	.+168    	; 0x39f4 <putModbMsg+0x138>
//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;

  while(lenght--) {lrc+=*data++;}
    394c:	91 50       	subi	r25, 0x01	; 1
    394e:	20 f0       	brcs	.+8      	; 0x3958 <putModbMsg+0x9c>
    3950:	20 81       	ld	r18, Z
    3952:	82 0f       	add	r24, r18
    3954:	31 96       	adiw	r30, 0x01	; 1
    3956:	fa cf       	rjmp	.-12     	; 0x394c <putModbMsg+0x90>
  return ((unsigned char) (-(signed char) lrc));
    3958:	d8 2f       	mov	r29, r24
    395a:	d1 95       	neg	r29
  case(ASCII):
    {
    unsigned char lrc=LRC(modb_message,lenght);
    unsigned char index=0;

    TXENABLE;
    395c:	96 9a       	sbi	0x12, 6	; 18
    395e:	ff ef       	ldi	r31, 0xFF	; 255
    3960:	29 ef       	ldi	r18, 0xF9	; 249
    3962:	80 e0       	ldi	r24, 0x00	; 0
    3964:	f1 50       	subi	r31, 0x01	; 1
    3966:	20 40       	sbci	r18, 0x00	; 0
    3968:	80 40       	sbci	r24, 0x00	; 0
    396a:	e1 f7       	brne	.-8      	; 0x3964 <putModbMsg+0xa8>
    396c:	00 c0       	rjmp	.+0      	; 0x396e <putModbMsg+0xb2>
    396e:	00 00       	nop
    _delay_ms(20);
    modb_putchar(':');
    3970:	8a e3       	ldi	r24, 0x3A	; 58
    3972:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <modb_putchar>
    3976:	04 ea       	ldi	r16, 0xA4	; 164
    3978:	15 e0       	ldi	r17, 0x05	; 5

    while(lenght--)
    397a:	cc 23       	and	r28, r28
    397c:	f1 f0       	breq	.+60     	; 0x39ba <putModbMsg+0xfe>
    397e:	78 01       	movw	r14, r16
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
    3980:	f8 01       	movw	r30, r16
    3982:	80 81       	ld	r24, Z
    3984:	82 95       	swap	r24
    3986:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    3988:	90 e3       	ldi	r25, 0x30	; 48
    398a:	98 0f       	add	r25, r24
  if(num>57)return num+7;
    398c:	9a 33       	cpi	r25, 0x3A	; 58
    398e:	10 f0       	brcs	.+4      	; 0x3994 <putModbMsg+0xd8>
    3990:	89 5c       	subi	r24, 0xC9	; 201
    3992:	01 c0       	rjmp	.+2      	; 0x3996 <putModbMsg+0xda>
    3994:	89 2f       	mov	r24, r25
    _delay_ms(20);
    modb_putchar(':');

    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
    3996:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <modb_putchar>
    399a:	0f 5f       	subi	r16, 0xFF	; 255
    399c:	1f 4f       	sbci	r17, 0xFF	; 255
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
    399e:	f7 01       	movw	r30, r14
    39a0:	80 81       	ld	r24, Z
    39a2:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    39a4:	90 e3       	ldi	r25, 0x30	; 48
    39a6:	98 0f       	add	r25, r24
  if(num>57)return num+7;
    39a8:	9a 33       	cpi	r25, 0x3A	; 58
    39aa:	10 f0       	brcs	.+4      	; 0x39b0 <putModbMsg+0xf4>
    39ac:	89 5c       	subi	r24, 0xC9	; 201
    39ae:	01 c0       	rjmp	.+2      	; 0x39b2 <putModbMsg+0xf6>
    39b0:	89 2f       	mov	r24, r25
    modb_putchar(':');

    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
    39b2:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <modb_putchar>
    39b6:	c1 50       	subi	r28, 0x01	; 1
    39b8:	e0 cf       	rjmp	.-64     	; 0x397a <putModbMsg+0xbe>
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    39ba:	9d 2f       	mov	r25, r29
    39bc:	92 95       	swap	r25
    39be:	9f 70       	andi	r25, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    39c0:	80 e3       	ldi	r24, 0x30	; 48
    39c2:	89 0f       	add	r24, r25
  if(num>57)return num+7;
    39c4:	8a 33       	cpi	r24, 0x3A	; 58
    39c6:	10 f0       	brcs	.+4      	; 0x39cc <putModbMsg+0x110>
    39c8:	87 e3       	ldi	r24, 0x37	; 55
    39ca:	89 0f       	add	r24, r25
    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    39cc:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <modb_putchar>
    modb_putchar( dig_to_char(lrc& 0x0F) );
    39d0:	8d 2f       	mov	r24, r29
    39d2:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    39d4:	d0 e3       	ldi	r29, 0x30	; 48
    39d6:	d8 0f       	add	r29, r24
  if(num>57)return num+7;
    39d8:	da 33       	cpi	r29, 0x3A	; 58
    39da:	10 f0       	brcs	.+4      	; 0x39e0 <putModbMsg+0x124>
    39dc:	89 5c       	subi	r24, 0xC9	; 201
    39de:	01 c0       	rjmp	.+2      	; 0x39e2 <putModbMsg+0x126>
    39e0:	8d 2f       	mov	r24, r29
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    modb_putchar( dig_to_char(lrc& 0x0F) );
    39e2:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <modb_putchar>
    modb_putchar(0x0D);
    39e6:	8d e0       	ldi	r24, 0x0D	; 13
    39e8:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <modb_putchar>
    modb_putchar(0x0A);
    39ec:	8a e0       	ldi	r24, 0x0A	; 10
    39ee:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <modb_putchar>
    TXDISABLE;
    39f2:	96 98       	cbi	0x12, 6	; 18
    }
   break;
  }
}
    39f4:	df 91       	pop	r29
    39f6:	cf 91       	pop	r28
    39f8:	1f 91       	pop	r17
    39fa:	0f 91       	pop	r16
    39fc:	ff 90       	pop	r15
    39fe:	ef 90       	pop	r14
    3a00:	08 95       	ret

00003a02 <getModbMsg>:

//получить сообщение из приемного буфера УАРТа. В итоге-в буфере RTU сообщение,вернули длину полученного сообщения или -1 (ошибка)
signed char getModbMsg(void)
{
    3a02:	8f 92       	push	r8
    3a04:	9f 92       	push	r9
    3a06:	af 92       	push	r10
    3a08:	bf 92       	push	r11
    3a0a:	cf 92       	push	r12
    3a0c:	df 92       	push	r13
    3a0e:	ef 92       	push	r14
    3a10:	ff 92       	push	r15
    3a12:	0f 93       	push	r16
    3a14:	1f 93       	push	r17
    3a16:	cf 93       	push	r28
	unsigned char flag_tout=0,index=0,pass=0;

	while(1)																		//пока не дочитаем до конца сообщения или до ошибки крутимся тут
	{
		MODB_timeout=val_timeout;
    3a18:	c0 90 4f 01 	lds	r12, 0x014F	; 0x80014f <val_timeout>
    3a1c:	d0 90 50 01 	lds	r13, 0x0150	; 0x800150 <val_timeout+0x1>
    3a20:	e0 90 51 01 	lds	r14, 0x0151	; 0x800151 <val_timeout+0x2>
    3a24:	f0 90 52 01 	lds	r15, 0x0152	; 0x800152 <val_timeout+0x3>
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    3a28:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <modb_type>
    3a2c:	90 91 cc 05 	lds	r25, 0x05CC	; 0x8005cc <rd_index>
}

//получить сообщение из приемного буфера УАРТа. В итоге-в буфере RTU сообщение,вернули длину полученного сообщения или -1 (ошибка)
signed char getModbMsg(void)
{
	unsigned char flag_tout=0,index=0,pass=0;
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	80 e0       	ldi	r24, 0x00	; 0

	while(1)																		//пока не дочитаем до конца сообщения или до ошибки крутимся тут
	{
		MODB_timeout=val_timeout;
    3a34:	c0 92 56 01 	sts	0x0156, r12	; 0x800156 <MODB_timeout>
    3a38:	d0 92 57 01 	sts	0x0157, r13	; 0x800157 <MODB_timeout+0x1>
    3a3c:	e0 92 58 01 	sts	0x0158, r14	; 0x800158 <MODB_timeout+0x2>
    3a40:	f0 92 59 01 	sts	0x0159, r15	; 0x800159 <MODB_timeout+0x3>
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут
    3a44:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <rx_counter>
    3a48:	31 11       	cpse	r19, r1
    3a4a:	0d c0       	rjmp	.+26     	; 0x3a66 <getModbMsg+0x64>
    3a4c:	80 90 56 01 	lds	r8, 0x0156	; 0x800156 <MODB_timeout>
    3a50:	90 90 57 01 	lds	r9, 0x0157	; 0x800157 <MODB_timeout+0x1>
    3a54:	a0 90 58 01 	lds	r10, 0x0158	; 0x800158 <MODB_timeout+0x2>
    3a58:	b0 90 59 01 	lds	r11, 0x0159	; 0x800159 <MODB_timeout+0x3>
    3a5c:	89 28       	or	r8, r9
    3a5e:	8a 28       	or	r8, r10
    3a60:	8b 28       	or	r8, r11
    3a62:	81 f7       	brne	.-32     	; 0x3a44 <getModbMsg+0x42>
    3a64:	34 c0       	rjmp	.+104    	; 0x3ace <getModbMsg+0xcc>
    3a66:	e9 2f       	mov	r30, r25
    3a68:	f0 e0       	ldi	r31, 0x00	; 0
    3a6a:	9f 5f       	subi	r25, 0xFF	; 255

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    3a6c:	61 11       	cpse	r22, r1
    3a6e:	0a c0       	rjmp	.+20     	; 0x3a84 <getModbMsg+0x82>
			{
				unsigned int crc= modb_message[index-1] <<8 | modb_message[index-2];//полученная CRC
				if(crc !=CRC(modb_message,index-2))	{MODB_ERR=MODBXRC;return -1;}	//сравниваем с фактической
				return index-2;														//длина сообщения минус 2 символа CRC
			}
			modb_message[index++]=rx_buffer[rd_index];								//если не таймаут принимаем след. символ
    3a70:	e4 58       	subi	r30, 0x84	; 132
    3a72:	fa 4f       	sbci	r31, 0xFA	; 250
    3a74:	30 81       	ld	r19, Z
    3a76:	e8 2f       	mov	r30, r24
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	ec 55       	subi	r30, 0x5C	; 92
    3a7c:	fa 4f       	sbci	r31, 0xFA	; 250
    3a7e:	30 83       	st	Z, r19
    3a80:	8f 5f       	subi	r24, 0xFF	; 255
    3a82:	1a c0       	rjmp	.+52     	; 0x3ab8 <getModbMsg+0xb6>

//////////////////////////////////если работаем в режиме ASCII
		else
		{
			if(flag_tout) {MODB_ERR=MODBTOUT;return -1;}							//таймаут в случае ASCII это ошибка
			switch(rx_buffer[rd_index])
    3a84:	e4 58       	subi	r30, 0x84	; 132
    3a86:	fa 4f       	sbci	r31, 0xFA	; 250
    3a88:	30 81       	ld	r19, Z
    3a8a:	3d 30       	cpi	r19, 0x0D	; 13
    3a8c:	09 f4       	brne	.+2      	; 0x3a90 <getModbMsg+0x8e>
    3a8e:	3c c0       	rjmp	.+120    	; 0x3b08 <getModbMsg+0x106>
    3a90:	3a 33       	cpi	r19, 0x3A	; 58
    3a92:	91 f0       	breq	.+36     	; 0x3ab8 <getModbMsg+0xb6>
    3a94:	48 2f       	mov	r20, r24
    3a96:	50 e0       	ldi	r21, 0x00	; 0
					return index-1;													// а возвращем длину без учета ЛРЦ
				}
				break;
				default:															//сборка ASCII-to-RTU
				{
					if(pass==0)														//первый проход- в буфер сообщения пишем первую тетраду
    3a98:	21 11       	cpse	r18, r1
    3a9a:	58 c0       	rjmp	.+176    	; 0x3b4c <getModbMsg+0x14a>
					{
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
    3a9c:	20 81       	ld	r18, Z
}

//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
    3a9e:	30 ed       	ldi	r19, 0xD0	; 208
    3aa0:	32 0f       	add	r19, r18
  if(sym>41) return sym-39;	/* a .. f */
    3aa2:	3a 32       	cpi	r19, 0x2A	; 42
    3aa4:	08 f4       	brcc	.+2      	; 0x3aa8 <getModbMsg+0xa6>
    3aa6:	4c c0       	rjmp	.+152    	; 0x3b40 <getModbMsg+0x13e>
    3aa8:	27 55       	subi	r18, 0x57	; 87
				break;
				default:															//сборка ASCII-to-RTU
				{
					if(pass==0)														//первый проход- в буфер сообщения пишем первую тетраду
					{
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
    3aaa:	fa 01       	movw	r30, r20
    3aac:	ec 55       	subi	r30, 0x5C	; 92
    3aae:	fa 4f       	sbci	r31, 0xFA	; 250
    3ab0:	22 95       	swap	r18
    3ab2:	20 7f       	andi	r18, 0xF0	; 240
    3ab4:	20 83       	st	Z, r18
						pass=1;
    3ab6:	21 e0       	ldi	r18, 0x01	; 1
				}
				break;
			}
		}

		if (++rd_index == MODB_MESSSIZE) rd_index=0;
    3ab8:	98 32       	cpi	r25, 0x28	; 40
    3aba:	09 f4       	brne	.+2      	; 0x3abe <getModbMsg+0xbc>
    3abc:	90 e0       	ldi	r25, 0x00	; 0
		asm("cli");
    3abe:	f8 94       	cli
		--rx_counter;
    3ac0:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <rx_counter>
    3ac4:	31 50       	subi	r19, 0x01	; 1
    3ac6:	30 93 54 01 	sts	0x0154, r19	; 0x800154 <rx_counter>
		asm("sei");
    3aca:	78 94       	sei
	}
    3acc:	b3 cf       	rjmp	.-154    	; 0x3a34 <getModbMsg+0x32>
	{
		MODB_timeout=val_timeout;
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    3ace:	61 11       	cpse	r22, r1
    3ad0:	53 c0       	rjmp	.+166    	; 0x3b78 <getModbMsg+0x176>
    3ad2:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <rd_index>
		{
			if(flag_tout)															//таймаут в случае RTU -это конец сообщения.Проверяем CRC
			{
				unsigned int crc= modb_message[index-1] <<8 | modb_message[index-2];//полученная CRC
    3ad6:	28 2f       	mov	r18, r24
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	2c 55       	subi	r18, 0x5C	; 92
    3adc:	3a 4f       	sbci	r19, 0xFA	; 250
    3ade:	f9 01       	movw	r30, r18
    3ae0:	31 97       	sbiw	r30, 0x01	; 1
    3ae2:	00 81       	ld	r16, Z
    3ae4:	10 e0       	ldi	r17, 0x00	; 0
    3ae6:	10 2f       	mov	r17, r16
    3ae8:	00 27       	eor	r16, r16
    3aea:	31 97       	sbiw	r30, 0x01	; 1
    3aec:	90 81       	ld	r25, Z
    3aee:	09 2b       	or	r16, r25
				if(crc !=CRC(modb_message,index-2))	{MODB_ERR=MODBXRC;return -1;}	//сравниваем с фактической
    3af0:	ce ef       	ldi	r28, 0xFE	; 254
    3af2:	c8 0f       	add	r28, r24
    3af4:	8c 2f       	mov	r24, r28
    3af6:	0e 94 ef 1b 	call	0x37de	; 0x37de <CRC.constprop.0>
    3afa:	08 17       	cp	r16, r24
    3afc:	19 07       	cpc	r17, r25
    3afe:	11 f4       	brne	.+4      	; 0x3b04 <getModbMsg+0x102>
				return index-2;														//длина сообщения минус 2 символа CRC
    3b00:	8c 2f       	mov	r24, r28
    3b02:	40 c0       	rjmp	.+128    	; 0x3b84 <getModbMsg+0x182>
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
					if(LRC(modb_message,index) !=0){MODB_ERR=MODBXRC;return -1;}	//для проверки ЛРЦ посылаем сообщение без ':' но с ЛРЦ
    3b04:	85 e0       	ldi	r24, 0x05	; 5
    3b06:	3b c0       	rjmp	.+118    	; 0x3b7e <getModbMsg+0x17c>
					;
				}
				break;
				case(0x0D):															//конец сообщения. Проверяем LRC и вываливаемся
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
    3b08:	98 32       	cpi	r25, 0x28	; 40
    3b0a:	19 f0       	breq	.+6      	; 0x3b12 <getModbMsg+0x110>
    3b0c:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <rd_index>
    3b10:	02 c0       	rjmp	.+4      	; 0x3b16 <getModbMsg+0x114>
    3b12:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <rd_index>
					asm("cli");
    3b16:	f8 94       	cli
					--rx_counter;
    3b18:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <rx_counter>
    3b1c:	91 50       	subi	r25, 0x01	; 1
    3b1e:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <rx_counter>
					asm("sei");
    3b22:	78 94       	sei
    3b24:	28 2f       	mov	r18, r24
}

//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;
    3b26:	90 e0       	ldi	r25, 0x00	; 0
				case(0x0D):															//конец сообщения. Проверяем LRC и вываливаемся
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
    3b28:	e4 ea       	ldi	r30, 0xA4	; 164
    3b2a:	f5 e0       	ldi	r31, 0x05	; 5
//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;

  while(lenght--) {lrc+=*data++;}
    3b2c:	21 50       	subi	r18, 0x01	; 1
    3b2e:	20 f0       	brcs	.+8      	; 0x3b38 <getModbMsg+0x136>
    3b30:	30 81       	ld	r19, Z
    3b32:	93 0f       	add	r25, r19
    3b34:	31 96       	adiw	r30, 0x01	; 1
    3b36:	fa cf       	rjmp	.-12     	; 0x3b2c <getModbMsg+0x12a>
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
					if(LRC(modb_message,index) !=0){MODB_ERR=MODBXRC;return -1;}	//для проверки ЛРЦ посылаем сообщение без ':' но с ЛРЦ
    3b38:	91 11       	cpse	r25, r1
    3b3a:	e4 cf       	rjmp	.-56     	; 0x3b04 <getModbMsg+0x102>
					return index-1;													// а возвращем длину без учета ЛРЦ
    3b3c:	81 50       	subi	r24, 0x01	; 1
    3b3e:	22 c0       	rjmp	.+68     	; 0x3b84 <getModbMsg+0x182>
//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
  if(sym>41) return sym-39;	/* a .. f */
  if(sym>9) return sym-7;   	/* A .. F */
    3b40:	3a 30       	cpi	r19, 0x0A	; 10
    3b42:	10 f0       	brcs	.+4      	; 0x3b48 <getModbMsg+0x146>
    3b44:	27 53       	subi	r18, 0x37	; 55
    3b46:	b1 cf       	rjmp	.-158    	; 0x3aaa <getModbMsg+0xa8>
    3b48:	23 2f       	mov	r18, r19
    3b4a:	af cf       	rjmp	.-162    	; 0x3aaa <getModbMsg+0xa8>
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
						pass=1;
					}
					else															//второй проход- в буфер сообщения пишем вторую тетраду
					{
						modb_message[index++] |= char_to_dig(rx_buffer[rd_index]) & 0x0F;
    3b4c:	20 81       	ld	r18, Z
}

//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
    3b4e:	30 ed       	ldi	r19, 0xD0	; 208
    3b50:	32 0f       	add	r19, r18
  if(sym>41) return sym-39;	/* a .. f */
    3b52:	3a 32       	cpi	r19, 0x2A	; 42
    3b54:	10 f0       	brcs	.+4      	; 0x3b5a <getModbMsg+0x158>
    3b56:	27 55       	subi	r18, 0x57	; 87
    3b58:	05 c0       	rjmp	.+10     	; 0x3b64 <getModbMsg+0x162>
  if(sym>9) return sym-7;   	/* A .. F */
    3b5a:	3a 30       	cpi	r19, 0x0A	; 10
    3b5c:	10 f0       	brcs	.+4      	; 0x3b62 <getModbMsg+0x160>
    3b5e:	27 53       	subi	r18, 0x37	; 55
    3b60:	01 c0       	rjmp	.+2      	; 0x3b64 <getModbMsg+0x162>
    3b62:	23 2f       	mov	r18, r19
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
						pass=1;
					}
					else															//второй проход- в буфер сообщения пишем вторую тетраду
					{
						modb_message[index++] |= char_to_dig(rx_buffer[rd_index]) & 0x0F;
    3b64:	fa 01       	movw	r30, r20
    3b66:	ec 55       	subi	r30, 0x5C	; 92
    3b68:	fa 4f       	sbci	r31, 0xFA	; 250
    3b6a:	2f 70       	andi	r18, 0x0F	; 15
    3b6c:	30 81       	ld	r19, Z
    3b6e:	23 2b       	or	r18, r19
    3b70:	20 83       	st	Z, r18
    3b72:	8f 5f       	subi	r24, 0xFF	; 255
						pass=0;
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	a0 cf       	rjmp	.-192    	; 0x3ab8 <getModbMsg+0xb6>
    3b78:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <rd_index>
		}

//////////////////////////////////если работаем в режиме ASCII
		else
		{
			if(flag_tout) {MODB_ERR=MODBTOUT;return -1;}							//таймаут в случае ASCII это ошибка
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <MODB_ERR>
    3b82:	8f ef       	ldi	r24, 0xFF	; 255
		asm("cli");
		--rx_counter;
		asm("sei");
	}
	return -1;	//что то ваще пошло не так
}
    3b84:	cf 91       	pop	r28
    3b86:	1f 91       	pop	r17
    3b88:	0f 91       	pop	r16
    3b8a:	ff 90       	pop	r15
    3b8c:	ef 90       	pop	r14
    3b8e:	df 90       	pop	r13
    3b90:	cf 90       	pop	r12
    3b92:	bf 90       	pop	r11
    3b94:	af 90       	pop	r10
    3b96:	9f 90       	pop	r9
    3b98:	8f 90       	pop	r8
    3b9a:	08 95       	ret

00003b9c <__udivmodqi4>:
    3b9c:	99 1b       	sub	r25, r25
    3b9e:	79 e0       	ldi	r23, 0x09	; 9
    3ba0:	04 c0       	rjmp	.+8      	; 0x3baa <__udivmodqi4_ep>

00003ba2 <__udivmodqi4_loop>:
    3ba2:	99 1f       	adc	r25, r25
    3ba4:	96 17       	cp	r25, r22
    3ba6:	08 f0       	brcs	.+2      	; 0x3baa <__udivmodqi4_ep>
    3ba8:	96 1b       	sub	r25, r22

00003baa <__udivmodqi4_ep>:
    3baa:	88 1f       	adc	r24, r24
    3bac:	7a 95       	dec	r23
    3bae:	c9 f7       	brne	.-14     	; 0x3ba2 <__udivmodqi4_loop>
    3bb0:	80 95       	com	r24
    3bb2:	08 95       	ret

00003bb4 <__divmodhi4>:
    3bb4:	97 fb       	bst	r25, 7
    3bb6:	07 2e       	mov	r0, r23
    3bb8:	16 f4       	brtc	.+4      	; 0x3bbe <__divmodhi4+0xa>
    3bba:	00 94       	com	r0
    3bbc:	07 d0       	rcall	.+14     	; 0x3bcc <__divmodhi4_neg1>
    3bbe:	77 fd       	sbrc	r23, 7
    3bc0:	09 d0       	rcall	.+18     	; 0x3bd4 <__divmodhi4_neg2>
    3bc2:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__udivmodhi4>
    3bc6:	07 fc       	sbrc	r0, 7
    3bc8:	05 d0       	rcall	.+10     	; 0x3bd4 <__divmodhi4_neg2>
    3bca:	3e f4       	brtc	.+14     	; 0x3bda <__divmodhi4_exit>

00003bcc <__divmodhi4_neg1>:
    3bcc:	90 95       	com	r25
    3bce:	81 95       	neg	r24
    3bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd2:	08 95       	ret

00003bd4 <__divmodhi4_neg2>:
    3bd4:	70 95       	com	r23
    3bd6:	61 95       	neg	r22
    3bd8:	7f 4f       	sbci	r23, 0xFF	; 255

00003bda <__divmodhi4_exit>:
    3bda:	08 95       	ret

00003bdc <__udivmodsi4>:
    3bdc:	a1 e2       	ldi	r26, 0x21	; 33
    3bde:	1a 2e       	mov	r1, r26
    3be0:	aa 1b       	sub	r26, r26
    3be2:	bb 1b       	sub	r27, r27
    3be4:	fd 01       	movw	r30, r26
    3be6:	0d c0       	rjmp	.+26     	; 0x3c02 <__udivmodsi4_ep>

00003be8 <__udivmodsi4_loop>:
    3be8:	aa 1f       	adc	r26, r26
    3bea:	bb 1f       	adc	r27, r27
    3bec:	ee 1f       	adc	r30, r30
    3bee:	ff 1f       	adc	r31, r31
    3bf0:	a2 17       	cp	r26, r18
    3bf2:	b3 07       	cpc	r27, r19
    3bf4:	e4 07       	cpc	r30, r20
    3bf6:	f5 07       	cpc	r31, r21
    3bf8:	20 f0       	brcs	.+8      	; 0x3c02 <__udivmodsi4_ep>
    3bfa:	a2 1b       	sub	r26, r18
    3bfc:	b3 0b       	sbc	r27, r19
    3bfe:	e4 0b       	sbc	r30, r20
    3c00:	f5 0b       	sbc	r31, r21

00003c02 <__udivmodsi4_ep>:
    3c02:	66 1f       	adc	r22, r22
    3c04:	77 1f       	adc	r23, r23
    3c06:	88 1f       	adc	r24, r24
    3c08:	99 1f       	adc	r25, r25
    3c0a:	1a 94       	dec	r1
    3c0c:	69 f7       	brne	.-38     	; 0x3be8 <__udivmodsi4_loop>
    3c0e:	60 95       	com	r22
    3c10:	70 95       	com	r23
    3c12:	80 95       	com	r24
    3c14:	90 95       	com	r25
    3c16:	9b 01       	movw	r18, r22
    3c18:	ac 01       	movw	r20, r24
    3c1a:	bd 01       	movw	r22, r26
    3c1c:	cf 01       	movw	r24, r30
    3c1e:	08 95       	ret

00003c20 <__udivmodhi4>:
    3c20:	aa 1b       	sub	r26, r26
    3c22:	bb 1b       	sub	r27, r27
    3c24:	51 e1       	ldi	r21, 0x11	; 17
    3c26:	07 c0       	rjmp	.+14     	; 0x3c36 <__udivmodhi4_ep>

00003c28 <__udivmodhi4_loop>:
    3c28:	aa 1f       	adc	r26, r26
    3c2a:	bb 1f       	adc	r27, r27
    3c2c:	a6 17       	cp	r26, r22
    3c2e:	b7 07       	cpc	r27, r23
    3c30:	10 f0       	brcs	.+4      	; 0x3c36 <__udivmodhi4_ep>
    3c32:	a6 1b       	sub	r26, r22
    3c34:	b7 0b       	sbc	r27, r23

00003c36 <__udivmodhi4_ep>:
    3c36:	88 1f       	adc	r24, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	5a 95       	dec	r21
    3c3c:	a9 f7       	brne	.-22     	; 0x3c28 <__udivmodhi4_loop>
    3c3e:	80 95       	com	r24
    3c40:	90 95       	com	r25
    3c42:	bc 01       	movw	r22, r24
    3c44:	cd 01       	movw	r24, r26
    3c46:	08 95       	ret

00003c48 <strcat_P>:
    3c48:	fb 01       	movw	r30, r22
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	0d 90       	ld	r0, X+
    3c4e:	00 20       	and	r0, r0
    3c50:	e9 f7       	brne	.-6      	; 0x3c4c <strcat_P+0x4>
    3c52:	11 97       	sbiw	r26, 0x01	; 1
    3c54:	05 90       	lpm	r0, Z+
    3c56:	0d 92       	st	X+, r0
    3c58:	00 20       	and	r0, r0
    3c5a:	e1 f7       	brne	.-8      	; 0x3c54 <strcat_P+0xc>
    3c5c:	08 95       	ret

00003c5e <strcpy_P>:
    3c5e:	fb 01       	movw	r30, r22
    3c60:	dc 01       	movw	r26, r24
    3c62:	05 90       	lpm	r0, Z+
    3c64:	0d 92       	st	X+, r0
    3c66:	00 20       	and	r0, r0
    3c68:	e1 f7       	brne	.-8      	; 0x3c62 <strcpy_P+0x4>
    3c6a:	08 95       	ret

00003c6c <__strlen_P>:
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	05 90       	lpm	r0, Z+
    3c70:	00 20       	and	r0, r0
    3c72:	e9 f7       	brne	.-6      	; 0x3c6e <__strlen_P+0x2>
    3c74:	80 95       	com	r24
    3c76:	90 95       	com	r25
    3c78:	8e 0f       	add	r24, r30
    3c7a:	9f 1f       	adc	r25, r31
    3c7c:	08 95       	ret

00003c7e <strcat>:
    3c7e:	fb 01       	movw	r30, r22
    3c80:	dc 01       	movw	r26, r24
    3c82:	0d 90       	ld	r0, X+
    3c84:	00 20       	and	r0, r0
    3c86:	e9 f7       	brne	.-6      	; 0x3c82 <strcat+0x4>
    3c88:	11 97       	sbiw	r26, 0x01	; 1
    3c8a:	01 90       	ld	r0, Z+
    3c8c:	0d 92       	st	X+, r0
    3c8e:	00 20       	and	r0, r0
    3c90:	e1 f7       	brne	.-8      	; 0x3c8a <strcat+0xc>
    3c92:	08 95       	ret

00003c94 <__itoa_ncheck>:
    3c94:	bb 27       	eor	r27, r27
    3c96:	4a 30       	cpi	r20, 0x0A	; 10
    3c98:	31 f4       	brne	.+12     	; 0x3ca6 <__itoa_ncheck+0x12>
    3c9a:	99 23       	and	r25, r25
    3c9c:	22 f4       	brpl	.+8      	; 0x3ca6 <__itoa_ncheck+0x12>
    3c9e:	bd e2       	ldi	r27, 0x2D	; 45
    3ca0:	90 95       	com	r25
    3ca2:	81 95       	neg	r24
    3ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca6:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__utoa_common>

00003caa <__ltoa_ncheck>:
    3caa:	bb 27       	eor	r27, r27
    3cac:	2a 30       	cpi	r18, 0x0A	; 10
    3cae:	51 f4       	brne	.+20     	; 0x3cc4 <__ltoa_ncheck+0x1a>
    3cb0:	99 23       	and	r25, r25
    3cb2:	42 f4       	brpl	.+16     	; 0x3cc4 <__ltoa_ncheck+0x1a>
    3cb4:	bd e2       	ldi	r27, 0x2D	; 45
    3cb6:	90 95       	com	r25
    3cb8:	80 95       	com	r24
    3cba:	70 95       	com	r23
    3cbc:	61 95       	neg	r22
    3cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc0:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc4:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__ultoa_common>

00003cc8 <__ultoa_ncheck>:
    3cc8:	bb 27       	eor	r27, r27

00003cca <__ultoa_common>:
    3cca:	fa 01       	movw	r30, r20
    3ccc:	a6 2f       	mov	r26, r22
    3cce:	62 17       	cp	r22, r18
    3cd0:	71 05       	cpc	r23, r1
    3cd2:	81 05       	cpc	r24, r1
    3cd4:	91 05       	cpc	r25, r1
    3cd6:	33 0b       	sbc	r19, r19
    3cd8:	30 fb       	bst	r19, 0
    3cda:	66 f0       	brts	.+24     	; 0x3cf4 <__ultoa_common+0x2a>
    3cdc:	aa 27       	eor	r26, r26
    3cde:	66 0f       	add	r22, r22
    3ce0:	77 1f       	adc	r23, r23
    3ce2:	88 1f       	adc	r24, r24
    3ce4:	99 1f       	adc	r25, r25
    3ce6:	aa 1f       	adc	r26, r26
    3ce8:	a2 17       	cp	r26, r18
    3cea:	10 f0       	brcs	.+4      	; 0x3cf0 <__ultoa_common+0x26>
    3cec:	a2 1b       	sub	r26, r18
    3cee:	63 95       	inc	r22
    3cf0:	38 50       	subi	r19, 0x08	; 8
    3cf2:	a9 f7       	brne	.-22     	; 0x3cde <__ultoa_common+0x14>
    3cf4:	a0 5d       	subi	r26, 0xD0	; 208
    3cf6:	aa 33       	cpi	r26, 0x3A	; 58
    3cf8:	08 f0       	brcs	.+2      	; 0x3cfc <__ultoa_common+0x32>
    3cfa:	a9 5d       	subi	r26, 0xD9	; 217
    3cfc:	a1 93       	st	Z+, r26
    3cfe:	36 f7       	brtc	.-52     	; 0x3ccc <__ultoa_common+0x2>
    3d00:	b1 11       	cpse	r27, r1
    3d02:	b1 93       	st	Z+, r27
    3d04:	10 82       	st	Z, r1
    3d06:	ca 01       	movw	r24, r20
    3d08:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <strrev>

00003d0c <__utoa_ncheck>:
    3d0c:	bb 27       	eor	r27, r27

00003d0e <__utoa_common>:
    3d0e:	fb 01       	movw	r30, r22
    3d10:	55 27       	eor	r21, r21
    3d12:	aa 27       	eor	r26, r26
    3d14:	88 0f       	add	r24, r24
    3d16:	99 1f       	adc	r25, r25
    3d18:	aa 1f       	adc	r26, r26
    3d1a:	a4 17       	cp	r26, r20
    3d1c:	10 f0       	brcs	.+4      	; 0x3d22 <__utoa_common+0x14>
    3d1e:	a4 1b       	sub	r26, r20
    3d20:	83 95       	inc	r24
    3d22:	50 51       	subi	r21, 0x10	; 16
    3d24:	b9 f7       	brne	.-18     	; 0x3d14 <__utoa_common+0x6>
    3d26:	a0 5d       	subi	r26, 0xD0	; 208
    3d28:	aa 33       	cpi	r26, 0x3A	; 58
    3d2a:	08 f0       	brcs	.+2      	; 0x3d2e <__utoa_common+0x20>
    3d2c:	a9 5d       	subi	r26, 0xD9	; 217
    3d2e:	a1 93       	st	Z+, r26
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	79 f7       	brne	.-34     	; 0x3d12 <__utoa_common+0x4>
    3d34:	b1 11       	cpse	r27, r1
    3d36:	b1 93       	st	Z+, r27
    3d38:	11 92       	st	Z+, r1
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <strrev>

00003d40 <sprintf>:
    3d40:	ae e0       	ldi	r26, 0x0E	; 14
    3d42:	b0 e0       	ldi	r27, 0x00	; 0
    3d44:	e6 ea       	ldi	r30, 0xA6	; 166
    3d46:	fe e1       	ldi	r31, 0x1E	; 30
    3d48:	0c 94 af 21 	jmp	0x435e	; 0x435e <__prologue_saves__+0x1c>
    3d4c:	0d 89       	ldd	r16, Y+21	; 0x15
    3d4e:	1e 89       	ldd	r17, Y+22	; 0x16
    3d50:	86 e0       	ldi	r24, 0x06	; 6
    3d52:	8c 83       	std	Y+4, r24	; 0x04
    3d54:	1a 83       	std	Y+2, r17	; 0x02
    3d56:	09 83       	std	Y+1, r16	; 0x01
    3d58:	8f ef       	ldi	r24, 0xFF	; 255
    3d5a:	9f e7       	ldi	r25, 0x7F	; 127
    3d5c:	9e 83       	std	Y+6, r25	; 0x06
    3d5e:	8d 83       	std	Y+5, r24	; 0x05
    3d60:	ae 01       	movw	r20, r28
    3d62:	47 5e       	subi	r20, 0xE7	; 231
    3d64:	5f 4f       	sbci	r21, 0xFF	; 255
    3d66:	6f 89       	ldd	r22, Y+23	; 0x17
    3d68:	78 8d       	ldd	r23, Y+24	; 0x18
    3d6a:	ce 01       	movw	r24, r28
    3d6c:	01 96       	adiw	r24, 0x01	; 1
    3d6e:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <vfprintf>
    3d72:	ef 81       	ldd	r30, Y+7	; 0x07
    3d74:	f8 85       	ldd	r31, Y+8	; 0x08
    3d76:	e0 0f       	add	r30, r16
    3d78:	f1 1f       	adc	r31, r17
    3d7a:	10 82       	st	Z, r1
    3d7c:	2e 96       	adiw	r28, 0x0e	; 14
    3d7e:	e4 e0       	ldi	r30, 0x04	; 4
    3d80:	0c 94 cb 21 	jmp	0x4396	; 0x4396 <__epilogue_restores__+0x1c>

00003d84 <vfprintf>:
    3d84:	ab e0       	ldi	r26, 0x0B	; 11
    3d86:	b0 e0       	ldi	r27, 0x00	; 0
    3d88:	e8 ec       	ldi	r30, 0xC8	; 200
    3d8a:	fe e1       	ldi	r31, 0x1E	; 30
    3d8c:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <__prologue_saves__>
    3d90:	6c 01       	movw	r12, r24
    3d92:	7b 01       	movw	r14, r22
    3d94:	8a 01       	movw	r16, r20
    3d96:	fc 01       	movw	r30, r24
    3d98:	17 82       	std	Z+7, r1	; 0x07
    3d9a:	16 82       	std	Z+6, r1	; 0x06
    3d9c:	83 81       	ldd	r24, Z+3	; 0x03
    3d9e:	81 ff       	sbrs	r24, 1
    3da0:	cc c1       	rjmp	.+920    	; 0x413a <vfprintf+0x3b6>
    3da2:	ce 01       	movw	r24, r28
    3da4:	01 96       	adiw	r24, 0x01	; 1
    3da6:	3c 01       	movw	r6, r24
    3da8:	f6 01       	movw	r30, r12
    3daa:	93 81       	ldd	r25, Z+3	; 0x03
    3dac:	f7 01       	movw	r30, r14
    3dae:	93 fd       	sbrc	r25, 3
    3db0:	85 91       	lpm	r24, Z+
    3db2:	93 ff       	sbrs	r25, 3
    3db4:	81 91       	ld	r24, Z+
    3db6:	7f 01       	movw	r14, r30
    3db8:	88 23       	and	r24, r24
    3dba:	09 f4       	brne	.+2      	; 0x3dbe <vfprintf+0x3a>
    3dbc:	ba c1       	rjmp	.+884    	; 0x4132 <vfprintf+0x3ae>
    3dbe:	85 32       	cpi	r24, 0x25	; 37
    3dc0:	39 f4       	brne	.+14     	; 0x3dd0 <vfprintf+0x4c>
    3dc2:	93 fd       	sbrc	r25, 3
    3dc4:	85 91       	lpm	r24, Z+
    3dc6:	93 ff       	sbrs	r25, 3
    3dc8:	81 91       	ld	r24, Z+
    3dca:	7f 01       	movw	r14, r30
    3dcc:	85 32       	cpi	r24, 0x25	; 37
    3dce:	29 f4       	brne	.+10     	; 0x3dda <vfprintf+0x56>
    3dd0:	b6 01       	movw	r22, r12
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	0e 94 c9 20 	call	0x4192	; 0x4192 <fputc>
    3dd8:	e7 cf       	rjmp	.-50     	; 0x3da8 <vfprintf+0x24>
    3dda:	91 2c       	mov	r9, r1
    3ddc:	21 2c       	mov	r2, r1
    3dde:	31 2c       	mov	r3, r1
    3de0:	ff e1       	ldi	r31, 0x1F	; 31
    3de2:	f3 15       	cp	r31, r3
    3de4:	d8 f0       	brcs	.+54     	; 0x3e1c <vfprintf+0x98>
    3de6:	8b 32       	cpi	r24, 0x2B	; 43
    3de8:	79 f0       	breq	.+30     	; 0x3e08 <vfprintf+0x84>
    3dea:	38 f4       	brcc	.+14     	; 0x3dfa <vfprintf+0x76>
    3dec:	80 32       	cpi	r24, 0x20	; 32
    3dee:	79 f0       	breq	.+30     	; 0x3e0e <vfprintf+0x8a>
    3df0:	83 32       	cpi	r24, 0x23	; 35
    3df2:	a1 f4       	brne	.+40     	; 0x3e1c <vfprintf+0x98>
    3df4:	23 2d       	mov	r18, r3
    3df6:	20 61       	ori	r18, 0x10	; 16
    3df8:	1d c0       	rjmp	.+58     	; 0x3e34 <vfprintf+0xb0>
    3dfa:	8d 32       	cpi	r24, 0x2D	; 45
    3dfc:	61 f0       	breq	.+24     	; 0x3e16 <vfprintf+0x92>
    3dfe:	80 33       	cpi	r24, 0x30	; 48
    3e00:	69 f4       	brne	.+26     	; 0x3e1c <vfprintf+0x98>
    3e02:	23 2d       	mov	r18, r3
    3e04:	21 60       	ori	r18, 0x01	; 1
    3e06:	16 c0       	rjmp	.+44     	; 0x3e34 <vfprintf+0xb0>
    3e08:	83 2d       	mov	r24, r3
    3e0a:	82 60       	ori	r24, 0x02	; 2
    3e0c:	38 2e       	mov	r3, r24
    3e0e:	e3 2d       	mov	r30, r3
    3e10:	e4 60       	ori	r30, 0x04	; 4
    3e12:	3e 2e       	mov	r3, r30
    3e14:	2a c0       	rjmp	.+84     	; 0x3e6a <vfprintf+0xe6>
    3e16:	f3 2d       	mov	r31, r3
    3e18:	f8 60       	ori	r31, 0x08	; 8
    3e1a:	1d c0       	rjmp	.+58     	; 0x3e56 <vfprintf+0xd2>
    3e1c:	37 fc       	sbrc	r3, 7
    3e1e:	2d c0       	rjmp	.+90     	; 0x3e7a <vfprintf+0xf6>
    3e20:	20 ed       	ldi	r18, 0xD0	; 208
    3e22:	28 0f       	add	r18, r24
    3e24:	2a 30       	cpi	r18, 0x0A	; 10
    3e26:	40 f0       	brcs	.+16     	; 0x3e38 <vfprintf+0xb4>
    3e28:	8e 32       	cpi	r24, 0x2E	; 46
    3e2a:	b9 f4       	brne	.+46     	; 0x3e5a <vfprintf+0xd6>
    3e2c:	36 fc       	sbrc	r3, 6
    3e2e:	81 c1       	rjmp	.+770    	; 0x4132 <vfprintf+0x3ae>
    3e30:	23 2d       	mov	r18, r3
    3e32:	20 64       	ori	r18, 0x40	; 64
    3e34:	32 2e       	mov	r3, r18
    3e36:	19 c0       	rjmp	.+50     	; 0x3e6a <vfprintf+0xe6>
    3e38:	36 fe       	sbrs	r3, 6
    3e3a:	06 c0       	rjmp	.+12     	; 0x3e48 <vfprintf+0xc4>
    3e3c:	8a e0       	ldi	r24, 0x0A	; 10
    3e3e:	98 9e       	mul	r9, r24
    3e40:	20 0d       	add	r18, r0
    3e42:	11 24       	eor	r1, r1
    3e44:	92 2e       	mov	r9, r18
    3e46:	11 c0       	rjmp	.+34     	; 0x3e6a <vfprintf+0xe6>
    3e48:	ea e0       	ldi	r30, 0x0A	; 10
    3e4a:	2e 9e       	mul	r2, r30
    3e4c:	20 0d       	add	r18, r0
    3e4e:	11 24       	eor	r1, r1
    3e50:	22 2e       	mov	r2, r18
    3e52:	f3 2d       	mov	r31, r3
    3e54:	f0 62       	ori	r31, 0x20	; 32
    3e56:	3f 2e       	mov	r3, r31
    3e58:	08 c0       	rjmp	.+16     	; 0x3e6a <vfprintf+0xe6>
    3e5a:	8c 36       	cpi	r24, 0x6C	; 108
    3e5c:	21 f4       	brne	.+8      	; 0x3e66 <vfprintf+0xe2>
    3e5e:	83 2d       	mov	r24, r3
    3e60:	80 68       	ori	r24, 0x80	; 128
    3e62:	38 2e       	mov	r3, r24
    3e64:	02 c0       	rjmp	.+4      	; 0x3e6a <vfprintf+0xe6>
    3e66:	88 36       	cpi	r24, 0x68	; 104
    3e68:	41 f4       	brne	.+16     	; 0x3e7a <vfprintf+0xf6>
    3e6a:	f7 01       	movw	r30, r14
    3e6c:	93 fd       	sbrc	r25, 3
    3e6e:	85 91       	lpm	r24, Z+
    3e70:	93 ff       	sbrs	r25, 3
    3e72:	81 91       	ld	r24, Z+
    3e74:	7f 01       	movw	r14, r30
    3e76:	81 11       	cpse	r24, r1
    3e78:	b3 cf       	rjmp	.-154    	; 0x3de0 <vfprintf+0x5c>
    3e7a:	98 2f       	mov	r25, r24
    3e7c:	9f 7d       	andi	r25, 0xDF	; 223
    3e7e:	95 54       	subi	r25, 0x45	; 69
    3e80:	93 30       	cpi	r25, 0x03	; 3
    3e82:	28 f4       	brcc	.+10     	; 0x3e8e <vfprintf+0x10a>
    3e84:	0c 5f       	subi	r16, 0xFC	; 252
    3e86:	1f 4f       	sbci	r17, 0xFF	; 255
    3e88:	9f e3       	ldi	r25, 0x3F	; 63
    3e8a:	99 83       	std	Y+1, r25	; 0x01
    3e8c:	0d c0       	rjmp	.+26     	; 0x3ea8 <vfprintf+0x124>
    3e8e:	83 36       	cpi	r24, 0x63	; 99
    3e90:	31 f0       	breq	.+12     	; 0x3e9e <vfprintf+0x11a>
    3e92:	83 37       	cpi	r24, 0x73	; 115
    3e94:	71 f0       	breq	.+28     	; 0x3eb2 <vfprintf+0x12e>
    3e96:	83 35       	cpi	r24, 0x53	; 83
    3e98:	09 f0       	breq	.+2      	; 0x3e9c <vfprintf+0x118>
    3e9a:	59 c0       	rjmp	.+178    	; 0x3f4e <vfprintf+0x1ca>
    3e9c:	21 c0       	rjmp	.+66     	; 0x3ee0 <vfprintf+0x15c>
    3e9e:	f8 01       	movw	r30, r16
    3ea0:	80 81       	ld	r24, Z
    3ea2:	89 83       	std	Y+1, r24	; 0x01
    3ea4:	0e 5f       	subi	r16, 0xFE	; 254
    3ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea8:	88 24       	eor	r8, r8
    3eaa:	83 94       	inc	r8
    3eac:	91 2c       	mov	r9, r1
    3eae:	53 01       	movw	r10, r6
    3eb0:	13 c0       	rjmp	.+38     	; 0x3ed8 <vfprintf+0x154>
    3eb2:	28 01       	movw	r4, r16
    3eb4:	f2 e0       	ldi	r31, 0x02	; 2
    3eb6:	4f 0e       	add	r4, r31
    3eb8:	51 1c       	adc	r5, r1
    3eba:	f8 01       	movw	r30, r16
    3ebc:	a0 80       	ld	r10, Z
    3ebe:	b1 80       	ldd	r11, Z+1	; 0x01
    3ec0:	36 fe       	sbrs	r3, 6
    3ec2:	03 c0       	rjmp	.+6      	; 0x3eca <vfprintf+0x146>
    3ec4:	69 2d       	mov	r22, r9
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
    3ec8:	02 c0       	rjmp	.+4      	; 0x3ece <vfprintf+0x14a>
    3eca:	6f ef       	ldi	r22, 0xFF	; 255
    3ecc:	7f ef       	ldi	r23, 0xFF	; 255
    3ece:	c5 01       	movw	r24, r10
    3ed0:	0e 94 ae 20 	call	0x415c	; 0x415c <strnlen>
    3ed4:	4c 01       	movw	r8, r24
    3ed6:	82 01       	movw	r16, r4
    3ed8:	f3 2d       	mov	r31, r3
    3eda:	ff 77       	andi	r31, 0x7F	; 127
    3edc:	3f 2e       	mov	r3, r31
    3ede:	16 c0       	rjmp	.+44     	; 0x3f0c <vfprintf+0x188>
    3ee0:	28 01       	movw	r4, r16
    3ee2:	22 e0       	ldi	r18, 0x02	; 2
    3ee4:	42 0e       	add	r4, r18
    3ee6:	51 1c       	adc	r5, r1
    3ee8:	f8 01       	movw	r30, r16
    3eea:	a0 80       	ld	r10, Z
    3eec:	b1 80       	ldd	r11, Z+1	; 0x01
    3eee:	36 fe       	sbrs	r3, 6
    3ef0:	03 c0       	rjmp	.+6      	; 0x3ef8 <vfprintf+0x174>
    3ef2:	69 2d       	mov	r22, r9
    3ef4:	70 e0       	ldi	r23, 0x00	; 0
    3ef6:	02 c0       	rjmp	.+4      	; 0x3efc <vfprintf+0x178>
    3ef8:	6f ef       	ldi	r22, 0xFF	; 255
    3efa:	7f ef       	ldi	r23, 0xFF	; 255
    3efc:	c5 01       	movw	r24, r10
    3efe:	0e 94 a3 20 	call	0x4146	; 0x4146 <strnlen_P>
    3f02:	4c 01       	movw	r8, r24
    3f04:	f3 2d       	mov	r31, r3
    3f06:	f0 68       	ori	r31, 0x80	; 128
    3f08:	3f 2e       	mov	r3, r31
    3f0a:	82 01       	movw	r16, r4
    3f0c:	33 fc       	sbrc	r3, 3
    3f0e:	1b c0       	rjmp	.+54     	; 0x3f46 <vfprintf+0x1c2>
    3f10:	82 2d       	mov	r24, r2
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	88 16       	cp	r8, r24
    3f16:	99 06       	cpc	r9, r25
    3f18:	b0 f4       	brcc	.+44     	; 0x3f46 <vfprintf+0x1c2>
    3f1a:	b6 01       	movw	r22, r12
    3f1c:	80 e2       	ldi	r24, 0x20	; 32
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	0e 94 c9 20 	call	0x4192	; 0x4192 <fputc>
    3f24:	2a 94       	dec	r2
    3f26:	f4 cf       	rjmp	.-24     	; 0x3f10 <vfprintf+0x18c>
    3f28:	f5 01       	movw	r30, r10
    3f2a:	37 fc       	sbrc	r3, 7
    3f2c:	85 91       	lpm	r24, Z+
    3f2e:	37 fe       	sbrs	r3, 7
    3f30:	81 91       	ld	r24, Z+
    3f32:	5f 01       	movw	r10, r30
    3f34:	b6 01       	movw	r22, r12
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	0e 94 c9 20 	call	0x4192	; 0x4192 <fputc>
    3f3c:	21 10       	cpse	r2, r1
    3f3e:	2a 94       	dec	r2
    3f40:	21 e0       	ldi	r18, 0x01	; 1
    3f42:	82 1a       	sub	r8, r18
    3f44:	91 08       	sbc	r9, r1
    3f46:	81 14       	cp	r8, r1
    3f48:	91 04       	cpc	r9, r1
    3f4a:	71 f7       	brne	.-36     	; 0x3f28 <vfprintf+0x1a4>
    3f4c:	e8 c0       	rjmp	.+464    	; 0x411e <vfprintf+0x39a>
    3f4e:	84 36       	cpi	r24, 0x64	; 100
    3f50:	11 f0       	breq	.+4      	; 0x3f56 <vfprintf+0x1d2>
    3f52:	89 36       	cpi	r24, 0x69	; 105
    3f54:	41 f5       	brne	.+80     	; 0x3fa6 <vfprintf+0x222>
    3f56:	f8 01       	movw	r30, r16
    3f58:	37 fe       	sbrs	r3, 7
    3f5a:	07 c0       	rjmp	.+14     	; 0x3f6a <vfprintf+0x1e6>
    3f5c:	60 81       	ld	r22, Z
    3f5e:	71 81       	ldd	r23, Z+1	; 0x01
    3f60:	82 81       	ldd	r24, Z+2	; 0x02
    3f62:	93 81       	ldd	r25, Z+3	; 0x03
    3f64:	0c 5f       	subi	r16, 0xFC	; 252
    3f66:	1f 4f       	sbci	r17, 0xFF	; 255
    3f68:	08 c0       	rjmp	.+16     	; 0x3f7a <vfprintf+0x1f6>
    3f6a:	60 81       	ld	r22, Z
    3f6c:	71 81       	ldd	r23, Z+1	; 0x01
    3f6e:	07 2e       	mov	r0, r23
    3f70:	00 0c       	add	r0, r0
    3f72:	88 0b       	sbc	r24, r24
    3f74:	99 0b       	sbc	r25, r25
    3f76:	0e 5f       	subi	r16, 0xFE	; 254
    3f78:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7a:	f3 2d       	mov	r31, r3
    3f7c:	ff 76       	andi	r31, 0x6F	; 111
    3f7e:	3f 2e       	mov	r3, r31
    3f80:	97 ff       	sbrs	r25, 7
    3f82:	09 c0       	rjmp	.+18     	; 0x3f96 <vfprintf+0x212>
    3f84:	90 95       	com	r25
    3f86:	80 95       	com	r24
    3f88:	70 95       	com	r23
    3f8a:	61 95       	neg	r22
    3f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f90:	9f 4f       	sbci	r25, 0xFF	; 255
    3f92:	f0 68       	ori	r31, 0x80	; 128
    3f94:	3f 2e       	mov	r3, r31
    3f96:	2a e0       	ldi	r18, 0x0A	; 10
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	a3 01       	movw	r20, r6
    3f9c:	0e 94 05 21 	call	0x420a	; 0x420a <__ultoa_invert>
    3fa0:	88 2e       	mov	r8, r24
    3fa2:	86 18       	sub	r8, r6
    3fa4:	45 c0       	rjmp	.+138    	; 0x4030 <vfprintf+0x2ac>
    3fa6:	85 37       	cpi	r24, 0x75	; 117
    3fa8:	31 f4       	brne	.+12     	; 0x3fb6 <vfprintf+0x232>
    3faa:	23 2d       	mov	r18, r3
    3fac:	2f 7e       	andi	r18, 0xEF	; 239
    3fae:	b2 2e       	mov	r11, r18
    3fb0:	2a e0       	ldi	r18, 0x0A	; 10
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	25 c0       	rjmp	.+74     	; 0x4000 <vfprintf+0x27c>
    3fb6:	93 2d       	mov	r25, r3
    3fb8:	99 7f       	andi	r25, 0xF9	; 249
    3fba:	b9 2e       	mov	r11, r25
    3fbc:	8f 36       	cpi	r24, 0x6F	; 111
    3fbe:	c1 f0       	breq	.+48     	; 0x3ff0 <vfprintf+0x26c>
    3fc0:	18 f4       	brcc	.+6      	; 0x3fc8 <vfprintf+0x244>
    3fc2:	88 35       	cpi	r24, 0x58	; 88
    3fc4:	79 f0       	breq	.+30     	; 0x3fe4 <vfprintf+0x260>
    3fc6:	b5 c0       	rjmp	.+362    	; 0x4132 <vfprintf+0x3ae>
    3fc8:	80 37       	cpi	r24, 0x70	; 112
    3fca:	19 f0       	breq	.+6      	; 0x3fd2 <vfprintf+0x24e>
    3fcc:	88 37       	cpi	r24, 0x78	; 120
    3fce:	21 f0       	breq	.+8      	; 0x3fd8 <vfprintf+0x254>
    3fd0:	b0 c0       	rjmp	.+352    	; 0x4132 <vfprintf+0x3ae>
    3fd2:	e9 2f       	mov	r30, r25
    3fd4:	e0 61       	ori	r30, 0x10	; 16
    3fd6:	be 2e       	mov	r11, r30
    3fd8:	b4 fe       	sbrs	r11, 4
    3fda:	0d c0       	rjmp	.+26     	; 0x3ff6 <vfprintf+0x272>
    3fdc:	fb 2d       	mov	r31, r11
    3fde:	f4 60       	ori	r31, 0x04	; 4
    3fe0:	bf 2e       	mov	r11, r31
    3fe2:	09 c0       	rjmp	.+18     	; 0x3ff6 <vfprintf+0x272>
    3fe4:	34 fe       	sbrs	r3, 4
    3fe6:	0a c0       	rjmp	.+20     	; 0x3ffc <vfprintf+0x278>
    3fe8:	29 2f       	mov	r18, r25
    3fea:	26 60       	ori	r18, 0x06	; 6
    3fec:	b2 2e       	mov	r11, r18
    3fee:	06 c0       	rjmp	.+12     	; 0x3ffc <vfprintf+0x278>
    3ff0:	28 e0       	ldi	r18, 0x08	; 8
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	05 c0       	rjmp	.+10     	; 0x4000 <vfprintf+0x27c>
    3ff6:	20 e1       	ldi	r18, 0x10	; 16
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	02 c0       	rjmp	.+4      	; 0x4000 <vfprintf+0x27c>
    3ffc:	20 e1       	ldi	r18, 0x10	; 16
    3ffe:	32 e0       	ldi	r19, 0x02	; 2
    4000:	f8 01       	movw	r30, r16
    4002:	b7 fe       	sbrs	r11, 7
    4004:	07 c0       	rjmp	.+14     	; 0x4014 <vfprintf+0x290>
    4006:	60 81       	ld	r22, Z
    4008:	71 81       	ldd	r23, Z+1	; 0x01
    400a:	82 81       	ldd	r24, Z+2	; 0x02
    400c:	93 81       	ldd	r25, Z+3	; 0x03
    400e:	0c 5f       	subi	r16, 0xFC	; 252
    4010:	1f 4f       	sbci	r17, 0xFF	; 255
    4012:	06 c0       	rjmp	.+12     	; 0x4020 <vfprintf+0x29c>
    4014:	60 81       	ld	r22, Z
    4016:	71 81       	ldd	r23, Z+1	; 0x01
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	0e 5f       	subi	r16, 0xFE	; 254
    401e:	1f 4f       	sbci	r17, 0xFF	; 255
    4020:	a3 01       	movw	r20, r6
    4022:	0e 94 05 21 	call	0x420a	; 0x420a <__ultoa_invert>
    4026:	88 2e       	mov	r8, r24
    4028:	86 18       	sub	r8, r6
    402a:	fb 2d       	mov	r31, r11
    402c:	ff 77       	andi	r31, 0x7F	; 127
    402e:	3f 2e       	mov	r3, r31
    4030:	36 fe       	sbrs	r3, 6
    4032:	0d c0       	rjmp	.+26     	; 0x404e <vfprintf+0x2ca>
    4034:	23 2d       	mov	r18, r3
    4036:	2e 7f       	andi	r18, 0xFE	; 254
    4038:	a2 2e       	mov	r10, r18
    403a:	89 14       	cp	r8, r9
    403c:	58 f4       	brcc	.+22     	; 0x4054 <vfprintf+0x2d0>
    403e:	34 fe       	sbrs	r3, 4
    4040:	0b c0       	rjmp	.+22     	; 0x4058 <vfprintf+0x2d4>
    4042:	32 fc       	sbrc	r3, 2
    4044:	09 c0       	rjmp	.+18     	; 0x4058 <vfprintf+0x2d4>
    4046:	83 2d       	mov	r24, r3
    4048:	8e 7e       	andi	r24, 0xEE	; 238
    404a:	a8 2e       	mov	r10, r24
    404c:	05 c0       	rjmp	.+10     	; 0x4058 <vfprintf+0x2d4>
    404e:	b8 2c       	mov	r11, r8
    4050:	a3 2c       	mov	r10, r3
    4052:	03 c0       	rjmp	.+6      	; 0x405a <vfprintf+0x2d6>
    4054:	b8 2c       	mov	r11, r8
    4056:	01 c0       	rjmp	.+2      	; 0x405a <vfprintf+0x2d6>
    4058:	b9 2c       	mov	r11, r9
    405a:	a4 fe       	sbrs	r10, 4
    405c:	0f c0       	rjmp	.+30     	; 0x407c <vfprintf+0x2f8>
    405e:	fe 01       	movw	r30, r28
    4060:	e8 0d       	add	r30, r8
    4062:	f1 1d       	adc	r31, r1
    4064:	80 81       	ld	r24, Z
    4066:	80 33       	cpi	r24, 0x30	; 48
    4068:	21 f4       	brne	.+8      	; 0x4072 <vfprintf+0x2ee>
    406a:	9a 2d       	mov	r25, r10
    406c:	99 7e       	andi	r25, 0xE9	; 233
    406e:	a9 2e       	mov	r10, r25
    4070:	09 c0       	rjmp	.+18     	; 0x4084 <vfprintf+0x300>
    4072:	a2 fe       	sbrs	r10, 2
    4074:	06 c0       	rjmp	.+12     	; 0x4082 <vfprintf+0x2fe>
    4076:	b3 94       	inc	r11
    4078:	b3 94       	inc	r11
    407a:	04 c0       	rjmp	.+8      	; 0x4084 <vfprintf+0x300>
    407c:	8a 2d       	mov	r24, r10
    407e:	86 78       	andi	r24, 0x86	; 134
    4080:	09 f0       	breq	.+2      	; 0x4084 <vfprintf+0x300>
    4082:	b3 94       	inc	r11
    4084:	a3 fc       	sbrc	r10, 3
    4086:	11 c0       	rjmp	.+34     	; 0x40aa <vfprintf+0x326>
    4088:	a0 fe       	sbrs	r10, 0
    408a:	06 c0       	rjmp	.+12     	; 0x4098 <vfprintf+0x314>
    408c:	b2 14       	cp	r11, r2
    408e:	88 f4       	brcc	.+34     	; 0x40b2 <vfprintf+0x32e>
    4090:	28 0c       	add	r2, r8
    4092:	92 2c       	mov	r9, r2
    4094:	9b 18       	sub	r9, r11
    4096:	0e c0       	rjmp	.+28     	; 0x40b4 <vfprintf+0x330>
    4098:	b2 14       	cp	r11, r2
    409a:	60 f4       	brcc	.+24     	; 0x40b4 <vfprintf+0x330>
    409c:	b6 01       	movw	r22, r12
    409e:	80 e2       	ldi	r24, 0x20	; 32
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	0e 94 c9 20 	call	0x4192	; 0x4192 <fputc>
    40a6:	b3 94       	inc	r11
    40a8:	f7 cf       	rjmp	.-18     	; 0x4098 <vfprintf+0x314>
    40aa:	b2 14       	cp	r11, r2
    40ac:	18 f4       	brcc	.+6      	; 0x40b4 <vfprintf+0x330>
    40ae:	2b 18       	sub	r2, r11
    40b0:	02 c0       	rjmp	.+4      	; 0x40b6 <vfprintf+0x332>
    40b2:	98 2c       	mov	r9, r8
    40b4:	21 2c       	mov	r2, r1
    40b6:	a4 fe       	sbrs	r10, 4
    40b8:	10 c0       	rjmp	.+32     	; 0x40da <vfprintf+0x356>
    40ba:	b6 01       	movw	r22, r12
    40bc:	80 e3       	ldi	r24, 0x30	; 48
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0e 94 c9 20 	call	0x4192	; 0x4192 <fputc>
    40c4:	a2 fe       	sbrs	r10, 2
    40c6:	17 c0       	rjmp	.+46     	; 0x40f6 <vfprintf+0x372>
    40c8:	a1 fc       	sbrc	r10, 1
    40ca:	03 c0       	rjmp	.+6      	; 0x40d2 <vfprintf+0x34e>
    40cc:	88 e7       	ldi	r24, 0x78	; 120
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	02 c0       	rjmp	.+4      	; 0x40d6 <vfprintf+0x352>
    40d2:	88 e5       	ldi	r24, 0x58	; 88
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	b6 01       	movw	r22, r12
    40d8:	0c c0       	rjmp	.+24     	; 0x40f2 <vfprintf+0x36e>
    40da:	8a 2d       	mov	r24, r10
    40dc:	86 78       	andi	r24, 0x86	; 134
    40de:	59 f0       	breq	.+22     	; 0x40f6 <vfprintf+0x372>
    40e0:	a1 fe       	sbrs	r10, 1
    40e2:	02 c0       	rjmp	.+4      	; 0x40e8 <vfprintf+0x364>
    40e4:	8b e2       	ldi	r24, 0x2B	; 43
    40e6:	01 c0       	rjmp	.+2      	; 0x40ea <vfprintf+0x366>
    40e8:	80 e2       	ldi	r24, 0x20	; 32
    40ea:	a7 fc       	sbrc	r10, 7
    40ec:	8d e2       	ldi	r24, 0x2D	; 45
    40ee:	b6 01       	movw	r22, r12
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	0e 94 c9 20 	call	0x4192	; 0x4192 <fputc>
    40f6:	89 14       	cp	r8, r9
    40f8:	38 f4       	brcc	.+14     	; 0x4108 <vfprintf+0x384>
    40fa:	b6 01       	movw	r22, r12
    40fc:	80 e3       	ldi	r24, 0x30	; 48
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	0e 94 c9 20 	call	0x4192	; 0x4192 <fputc>
    4104:	9a 94       	dec	r9
    4106:	f7 cf       	rjmp	.-18     	; 0x40f6 <vfprintf+0x372>
    4108:	8a 94       	dec	r8
    410a:	f3 01       	movw	r30, r6
    410c:	e8 0d       	add	r30, r8
    410e:	f1 1d       	adc	r31, r1
    4110:	80 81       	ld	r24, Z
    4112:	b6 01       	movw	r22, r12
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	0e 94 c9 20 	call	0x4192	; 0x4192 <fputc>
    411a:	81 10       	cpse	r8, r1
    411c:	f5 cf       	rjmp	.-22     	; 0x4108 <vfprintf+0x384>
    411e:	22 20       	and	r2, r2
    4120:	09 f4       	brne	.+2      	; 0x4124 <vfprintf+0x3a0>
    4122:	42 ce       	rjmp	.-892    	; 0x3da8 <vfprintf+0x24>
    4124:	b6 01       	movw	r22, r12
    4126:	80 e2       	ldi	r24, 0x20	; 32
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	0e 94 c9 20 	call	0x4192	; 0x4192 <fputc>
    412e:	2a 94       	dec	r2
    4130:	f6 cf       	rjmp	.-20     	; 0x411e <vfprintf+0x39a>
    4132:	f6 01       	movw	r30, r12
    4134:	86 81       	ldd	r24, Z+6	; 0x06
    4136:	97 81       	ldd	r25, Z+7	; 0x07
    4138:	02 c0       	rjmp	.+4      	; 0x413e <vfprintf+0x3ba>
    413a:	8f ef       	ldi	r24, 0xFF	; 255
    413c:	9f ef       	ldi	r25, 0xFF	; 255
    413e:	2b 96       	adiw	r28, 0x0b	; 11
    4140:	e2 e1       	ldi	r30, 0x12	; 18
    4142:	0c 94 bd 21 	jmp	0x437a	; 0x437a <__epilogue_restores__>

00004146 <strnlen_P>:
    4146:	fc 01       	movw	r30, r24
    4148:	05 90       	lpm	r0, Z+
    414a:	61 50       	subi	r22, 0x01	; 1
    414c:	70 40       	sbci	r23, 0x00	; 0
    414e:	01 10       	cpse	r0, r1
    4150:	d8 f7       	brcc	.-10     	; 0x4148 <strnlen_P+0x2>
    4152:	80 95       	com	r24
    4154:	90 95       	com	r25
    4156:	8e 0f       	add	r24, r30
    4158:	9f 1f       	adc	r25, r31
    415a:	08 95       	ret

0000415c <strnlen>:
    415c:	fc 01       	movw	r30, r24
    415e:	61 50       	subi	r22, 0x01	; 1
    4160:	70 40       	sbci	r23, 0x00	; 0
    4162:	01 90       	ld	r0, Z+
    4164:	01 10       	cpse	r0, r1
    4166:	d8 f7       	brcc	.-10     	; 0x415e <strnlen+0x2>
    4168:	80 95       	com	r24
    416a:	90 95       	com	r25
    416c:	8e 0f       	add	r24, r30
    416e:	9f 1f       	adc	r25, r31
    4170:	08 95       	ret

00004172 <strrev>:
    4172:	dc 01       	movw	r26, r24
    4174:	fc 01       	movw	r30, r24
    4176:	67 2f       	mov	r22, r23
    4178:	71 91       	ld	r23, Z+
    417a:	77 23       	and	r23, r23
    417c:	e1 f7       	brne	.-8      	; 0x4176 <strrev+0x4>
    417e:	32 97       	sbiw	r30, 0x02	; 2
    4180:	04 c0       	rjmp	.+8      	; 0x418a <strrev+0x18>
    4182:	7c 91       	ld	r23, X
    4184:	6d 93       	st	X+, r22
    4186:	70 83       	st	Z, r23
    4188:	62 91       	ld	r22, -Z
    418a:	ae 17       	cp	r26, r30
    418c:	bf 07       	cpc	r27, r31
    418e:	c8 f3       	brcs	.-14     	; 0x4182 <strrev+0x10>
    4190:	08 95       	ret

00004192 <fputc>:
    4192:	0f 93       	push	r16
    4194:	1f 93       	push	r17
    4196:	cf 93       	push	r28
    4198:	df 93       	push	r29
    419a:	fb 01       	movw	r30, r22
    419c:	23 81       	ldd	r18, Z+3	; 0x03
    419e:	21 fd       	sbrc	r18, 1
    41a0:	03 c0       	rjmp	.+6      	; 0x41a8 <fputc+0x16>
    41a2:	8f ef       	ldi	r24, 0xFF	; 255
    41a4:	9f ef       	ldi	r25, 0xFF	; 255
    41a6:	2c c0       	rjmp	.+88     	; 0x4200 <fputc+0x6e>
    41a8:	22 ff       	sbrs	r18, 2
    41aa:	16 c0       	rjmp	.+44     	; 0x41d8 <fputc+0x46>
    41ac:	46 81       	ldd	r20, Z+6	; 0x06
    41ae:	57 81       	ldd	r21, Z+7	; 0x07
    41b0:	24 81       	ldd	r18, Z+4	; 0x04
    41b2:	35 81       	ldd	r19, Z+5	; 0x05
    41b4:	42 17       	cp	r20, r18
    41b6:	53 07       	cpc	r21, r19
    41b8:	44 f4       	brge	.+16     	; 0x41ca <fputc+0x38>
    41ba:	a0 81       	ld	r26, Z
    41bc:	b1 81       	ldd	r27, Z+1	; 0x01
    41be:	9d 01       	movw	r18, r26
    41c0:	2f 5f       	subi	r18, 0xFF	; 255
    41c2:	3f 4f       	sbci	r19, 0xFF	; 255
    41c4:	31 83       	std	Z+1, r19	; 0x01
    41c6:	20 83       	st	Z, r18
    41c8:	8c 93       	st	X, r24
    41ca:	26 81       	ldd	r18, Z+6	; 0x06
    41cc:	37 81       	ldd	r19, Z+7	; 0x07
    41ce:	2f 5f       	subi	r18, 0xFF	; 255
    41d0:	3f 4f       	sbci	r19, 0xFF	; 255
    41d2:	37 83       	std	Z+7, r19	; 0x07
    41d4:	26 83       	std	Z+6, r18	; 0x06
    41d6:	14 c0       	rjmp	.+40     	; 0x4200 <fputc+0x6e>
    41d8:	8b 01       	movw	r16, r22
    41da:	ec 01       	movw	r28, r24
    41dc:	fb 01       	movw	r30, r22
    41de:	00 84       	ldd	r0, Z+8	; 0x08
    41e0:	f1 85       	ldd	r31, Z+9	; 0x09
    41e2:	e0 2d       	mov	r30, r0
    41e4:	09 95       	icall
    41e6:	89 2b       	or	r24, r25
    41e8:	e1 f6       	brne	.-72     	; 0x41a2 <fputc+0x10>
    41ea:	d8 01       	movw	r26, r16
    41ec:	16 96       	adiw	r26, 0x06	; 6
    41ee:	8d 91       	ld	r24, X+
    41f0:	9c 91       	ld	r25, X
    41f2:	17 97       	sbiw	r26, 0x07	; 7
    41f4:	01 96       	adiw	r24, 0x01	; 1
    41f6:	17 96       	adiw	r26, 0x07	; 7
    41f8:	9c 93       	st	X, r25
    41fa:	8e 93       	st	-X, r24
    41fc:	16 97       	sbiw	r26, 0x06	; 6
    41fe:	ce 01       	movw	r24, r28
    4200:	df 91       	pop	r29
    4202:	cf 91       	pop	r28
    4204:	1f 91       	pop	r17
    4206:	0f 91       	pop	r16
    4208:	08 95       	ret

0000420a <__ultoa_invert>:
    420a:	fa 01       	movw	r30, r20
    420c:	aa 27       	eor	r26, r26
    420e:	28 30       	cpi	r18, 0x08	; 8
    4210:	51 f1       	breq	.+84     	; 0x4266 <__ultoa_invert+0x5c>
    4212:	20 31       	cpi	r18, 0x10	; 16
    4214:	81 f1       	breq	.+96     	; 0x4276 <__ultoa_invert+0x6c>
    4216:	e8 94       	clt
    4218:	6f 93       	push	r22
    421a:	6e 7f       	andi	r22, 0xFE	; 254
    421c:	6e 5f       	subi	r22, 0xFE	; 254
    421e:	7f 4f       	sbci	r23, 0xFF	; 255
    4220:	8f 4f       	sbci	r24, 0xFF	; 255
    4222:	9f 4f       	sbci	r25, 0xFF	; 255
    4224:	af 4f       	sbci	r26, 0xFF	; 255
    4226:	b1 e0       	ldi	r27, 0x01	; 1
    4228:	3e d0       	rcall	.+124    	; 0x42a6 <__ultoa_invert+0x9c>
    422a:	b4 e0       	ldi	r27, 0x04	; 4
    422c:	3c d0       	rcall	.+120    	; 0x42a6 <__ultoa_invert+0x9c>
    422e:	67 0f       	add	r22, r23
    4230:	78 1f       	adc	r23, r24
    4232:	89 1f       	adc	r24, r25
    4234:	9a 1f       	adc	r25, r26
    4236:	a1 1d       	adc	r26, r1
    4238:	68 0f       	add	r22, r24
    423a:	79 1f       	adc	r23, r25
    423c:	8a 1f       	adc	r24, r26
    423e:	91 1d       	adc	r25, r1
    4240:	a1 1d       	adc	r26, r1
    4242:	6a 0f       	add	r22, r26
    4244:	71 1d       	adc	r23, r1
    4246:	81 1d       	adc	r24, r1
    4248:	91 1d       	adc	r25, r1
    424a:	a1 1d       	adc	r26, r1
    424c:	20 d0       	rcall	.+64     	; 0x428e <__ultoa_invert+0x84>
    424e:	09 f4       	brne	.+2      	; 0x4252 <__ultoa_invert+0x48>
    4250:	68 94       	set
    4252:	3f 91       	pop	r19
    4254:	2a e0       	ldi	r18, 0x0A	; 10
    4256:	26 9f       	mul	r18, r22
    4258:	11 24       	eor	r1, r1
    425a:	30 19       	sub	r19, r0
    425c:	30 5d       	subi	r19, 0xD0	; 208
    425e:	31 93       	st	Z+, r19
    4260:	de f6       	brtc	.-74     	; 0x4218 <__ultoa_invert+0xe>
    4262:	cf 01       	movw	r24, r30
    4264:	08 95       	ret
    4266:	46 2f       	mov	r20, r22
    4268:	47 70       	andi	r20, 0x07	; 7
    426a:	40 5d       	subi	r20, 0xD0	; 208
    426c:	41 93       	st	Z+, r20
    426e:	b3 e0       	ldi	r27, 0x03	; 3
    4270:	0f d0       	rcall	.+30     	; 0x4290 <__ultoa_invert+0x86>
    4272:	c9 f7       	brne	.-14     	; 0x4266 <__ultoa_invert+0x5c>
    4274:	f6 cf       	rjmp	.-20     	; 0x4262 <__ultoa_invert+0x58>
    4276:	46 2f       	mov	r20, r22
    4278:	4f 70       	andi	r20, 0x0F	; 15
    427a:	40 5d       	subi	r20, 0xD0	; 208
    427c:	4a 33       	cpi	r20, 0x3A	; 58
    427e:	18 f0       	brcs	.+6      	; 0x4286 <__ultoa_invert+0x7c>
    4280:	49 5d       	subi	r20, 0xD9	; 217
    4282:	31 fd       	sbrc	r19, 1
    4284:	40 52       	subi	r20, 0x20	; 32
    4286:	41 93       	st	Z+, r20
    4288:	02 d0       	rcall	.+4      	; 0x428e <__ultoa_invert+0x84>
    428a:	a9 f7       	brne	.-22     	; 0x4276 <__ultoa_invert+0x6c>
    428c:	ea cf       	rjmp	.-44     	; 0x4262 <__ultoa_invert+0x58>
    428e:	b4 e0       	ldi	r27, 0x04	; 4
    4290:	a6 95       	lsr	r26
    4292:	97 95       	ror	r25
    4294:	87 95       	ror	r24
    4296:	77 95       	ror	r23
    4298:	67 95       	ror	r22
    429a:	ba 95       	dec	r27
    429c:	c9 f7       	brne	.-14     	; 0x4290 <__ultoa_invert+0x86>
    429e:	00 97       	sbiw	r24, 0x00	; 0
    42a0:	61 05       	cpc	r22, r1
    42a2:	71 05       	cpc	r23, r1
    42a4:	08 95       	ret
    42a6:	9b 01       	movw	r18, r22
    42a8:	ac 01       	movw	r20, r24
    42aa:	0a 2e       	mov	r0, r26
    42ac:	06 94       	lsr	r0
    42ae:	57 95       	ror	r21
    42b0:	47 95       	ror	r20
    42b2:	37 95       	ror	r19
    42b4:	27 95       	ror	r18
    42b6:	ba 95       	dec	r27
    42b8:	c9 f7       	brne	.-14     	; 0x42ac <__ultoa_invert+0xa2>
    42ba:	62 0f       	add	r22, r18
    42bc:	73 1f       	adc	r23, r19
    42be:	84 1f       	adc	r24, r20
    42c0:	95 1f       	adc	r25, r21
    42c2:	a0 1d       	adc	r26, r0
    42c4:	08 95       	ret

000042c6 <eeprom_read_byte>:
    42c6:	e1 99       	sbic	0x1c, 1	; 28
    42c8:	fe cf       	rjmp	.-4      	; 0x42c6 <eeprom_read_byte>
    42ca:	9f bb       	out	0x1f, r25	; 31
    42cc:	8e bb       	out	0x1e, r24	; 30
    42ce:	e0 9a       	sbi	0x1c, 0	; 28
    42d0:	99 27       	eor	r25, r25
    42d2:	8d b3       	in	r24, 0x1d	; 29
    42d4:	08 95       	ret

000042d6 <eeprom_read_dword>:
    42d6:	a6 e1       	ldi	r26, 0x16	; 22
    42d8:	b0 e0       	ldi	r27, 0x00	; 0
    42da:	44 e0       	ldi	r20, 0x04	; 4
    42dc:	50 e0       	ldi	r21, 0x00	; 0
    42de:	0c 94 93 21 	jmp	0x4326	; 0x4326 <eeprom_read_blraw>

000042e2 <eeprom_read_word>:
    42e2:	a8 e1       	ldi	r26, 0x18	; 24
    42e4:	b0 e0       	ldi	r27, 0x00	; 0
    42e6:	42 e0       	ldi	r20, 0x02	; 2
    42e8:	50 e0       	ldi	r21, 0x00	; 0
    42ea:	0c 94 93 21 	jmp	0x4326	; 0x4326 <eeprom_read_blraw>

000042ee <eeprom_write_byte>:
    42ee:	26 2f       	mov	r18, r22

000042f0 <eeprom_write_r18>:
    42f0:	e1 99       	sbic	0x1c, 1	; 28
    42f2:	fe cf       	rjmp	.-4      	; 0x42f0 <eeprom_write_r18>
    42f4:	9f bb       	out	0x1f, r25	; 31
    42f6:	8e bb       	out	0x1e, r24	; 30
    42f8:	2d bb       	out	0x1d, r18	; 29
    42fa:	0f b6       	in	r0, 0x3f	; 63
    42fc:	f8 94       	cli
    42fe:	e2 9a       	sbi	0x1c, 2	; 28
    4300:	e1 9a       	sbi	0x1c, 1	; 28
    4302:	0f be       	out	0x3f, r0	; 63
    4304:	01 96       	adiw	r24, 0x01	; 1
    4306:	08 95       	ret

00004308 <eeprom_write_dword>:
    4308:	24 2f       	mov	r18, r20
    430a:	0e 94 78 21 	call	0x42f0	; 0x42f0 <eeprom_write_r18>
    430e:	25 2f       	mov	r18, r21
    4310:	0e 94 78 21 	call	0x42f0	; 0x42f0 <eeprom_write_r18>
    4314:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <eeprom_write_word>

00004318 <eeprom_write_word>:
    4318:	0e 94 77 21 	call	0x42ee	; 0x42ee <eeprom_write_byte>
    431c:	27 2f       	mov	r18, r23
    431e:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <eeprom_write_r18>

00004322 <eeprom_read_block>:
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22

00004326 <eeprom_read_blraw>:
    4326:	fc 01       	movw	r30, r24
    4328:	e1 99       	sbic	0x1c, 1	; 28
    432a:	fe cf       	rjmp	.-4      	; 0x4328 <eeprom_read_blraw+0x2>
    432c:	06 c0       	rjmp	.+12     	; 0x433a <eeprom_read_blraw+0x14>
    432e:	ff bb       	out	0x1f, r31	; 31
    4330:	ee bb       	out	0x1e, r30	; 30
    4332:	e0 9a       	sbi	0x1c, 0	; 28
    4334:	31 96       	adiw	r30, 0x01	; 1
    4336:	0d b2       	in	r0, 0x1d	; 29
    4338:	0d 92       	st	X+, r0
    433a:	41 50       	subi	r20, 0x01	; 1
    433c:	50 40       	sbci	r21, 0x00	; 0
    433e:	b8 f7       	brcc	.-18     	; 0x432e <eeprom_read_blraw+0x8>
    4340:	08 95       	ret

00004342 <__prologue_saves__>:
    4342:	2f 92       	push	r2
    4344:	3f 92       	push	r3
    4346:	4f 92       	push	r4
    4348:	5f 92       	push	r5
    434a:	6f 92       	push	r6
    434c:	7f 92       	push	r7
    434e:	8f 92       	push	r8
    4350:	9f 92       	push	r9
    4352:	af 92       	push	r10
    4354:	bf 92       	push	r11
    4356:	cf 92       	push	r12
    4358:	df 92       	push	r13
    435a:	ef 92       	push	r14
    435c:	ff 92       	push	r15
    435e:	0f 93       	push	r16
    4360:	1f 93       	push	r17
    4362:	cf 93       	push	r28
    4364:	df 93       	push	r29
    4366:	cd b7       	in	r28, 0x3d	; 61
    4368:	de b7       	in	r29, 0x3e	; 62
    436a:	ca 1b       	sub	r28, r26
    436c:	db 0b       	sbc	r29, r27
    436e:	0f b6       	in	r0, 0x3f	; 63
    4370:	f8 94       	cli
    4372:	de bf       	out	0x3e, r29	; 62
    4374:	0f be       	out	0x3f, r0	; 63
    4376:	cd bf       	out	0x3d, r28	; 61
    4378:	09 94       	ijmp

0000437a <__epilogue_restores__>:
    437a:	2a 88       	ldd	r2, Y+18	; 0x12
    437c:	39 88       	ldd	r3, Y+17	; 0x11
    437e:	48 88       	ldd	r4, Y+16	; 0x10
    4380:	5f 84       	ldd	r5, Y+15	; 0x0f
    4382:	6e 84       	ldd	r6, Y+14	; 0x0e
    4384:	7d 84       	ldd	r7, Y+13	; 0x0d
    4386:	8c 84       	ldd	r8, Y+12	; 0x0c
    4388:	9b 84       	ldd	r9, Y+11	; 0x0b
    438a:	aa 84       	ldd	r10, Y+10	; 0x0a
    438c:	b9 84       	ldd	r11, Y+9	; 0x09
    438e:	c8 84       	ldd	r12, Y+8	; 0x08
    4390:	df 80       	ldd	r13, Y+7	; 0x07
    4392:	ee 80       	ldd	r14, Y+6	; 0x06
    4394:	fd 80       	ldd	r15, Y+5	; 0x05
    4396:	0c 81       	ldd	r16, Y+4	; 0x04
    4398:	1b 81       	ldd	r17, Y+3	; 0x03
    439a:	aa 81       	ldd	r26, Y+2	; 0x02
    439c:	b9 81       	ldd	r27, Y+1	; 0x01
    439e:	ce 0f       	add	r28, r30
    43a0:	d1 1d       	adc	r29, r1
    43a2:	0f b6       	in	r0, 0x3f	; 63
    43a4:	f8 94       	cli
    43a6:	de bf       	out	0x3e, r29	; 62
    43a8:	0f be       	out	0x3f, r0	; 63
    43aa:	cd bf       	out	0x3d, r28	; 61
    43ac:	ed 01       	movw	r28, r26
    43ae:	08 95       	ret

000043b0 <_exit>:
    43b0:	f8 94       	cli

000043b2 <__stop_program>:
    43b2:	ff cf       	rjmp	.-2      	; 0x43b2 <__stop_program>
