
BKI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f5c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  00003f5c  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000487  00800146  00800146  000040f6  2**0
                  ALLOC
  3 .eeprom       000000cf  00810000  00810000  000040f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00006114  00000000  00000000  000041c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000029da  00000000  00000000  0000a2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000005c  00000000  00000000  0000ccb6  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000cd14  2**2
                  CONTENTS, READONLY
  8 .debug_info   000004e6  00000000  00000000  0000cd50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004a3  00000000  00000000  0000d236  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0000d6d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000196  00000000  00000000  0000d6f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__ctors_end>
       4:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__vector_1>
       8:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
       c:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      10:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      14:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      18:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      1c:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__vector_7>
      20:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      24:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      28:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      2c:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      30:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      34:	0c 94 89 19 	jmp	0x3312	; 0x3312 <__vector_13>
      38:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      3c:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      40:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      44:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      48:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      4c:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>
      50:	0c 94 4c 01 	jmp	0x298	; 0x298 <__bad_interrupt>

00000054 <NEDOSTUPNO>:
      54:	ed e5 e4 ee f1 f2 f3 ef ed ee 00                    ...........

0000005f <NOVOE_ZNACHENIE>:
      5f:	cd ce c2 ce c5 20 c7 cd c0 d7 c5 cd c8 c5 00        ..... .........

0000006e <PAROL>:
      6e:	cf c0 d0 ce cb dc 00                                .......

00000075 <MS>:
      75:	ec f1 00                                            ...

00000078 <OTKL_MTZ>:
      78:	ee f2 ea eb 2e cc d2 c7 3a 00                       ........:.

00000082 <VKL_MTZ>:
      82:	e2 ea eb 2e cc d2 c7 3a 00                          .......:.

0000008b <PUSTO>:
      8b:	3c ef f3 f1 f2 ee 3e 00                             <.....>.

00000093 <OBNARUZHENO>:
      93:	ee e1 ed e0 f0 f3 e6 e5 ed ee 20 c1 c4 c7 3a 00     .......... ...:.

000000a3 <SBROSIT>:
      a3:	d1 e1 f0 ee f1 e8 f2 fc 3f 20 e4 e0 2d 22 c2 c2     ........? ..-"..
      b3:	ce c4 22 00                                         ..".

000000b7 <NET>:
      b7:	ed e5 f2 00                                         ....

000000bb <NET_SVYAZI>:
      bb:	ed e5 f2 20 f1 e2 ff e7 e8 00                       ... ......

000000c5 <OSHIBKA>:
      c5:	ee f8 e8 e1 ea e0 00                                .......

000000cc <NET_GOTOVNOSTI>:
      cc:	cd c5 d2 20 c3 ce d2 ce c2 cd ce d1 d2 c8 00        ... ...........

000000db <VREMYA_UROV>:
      db:	c2 d0 c5 cc df 20 d3 d0 ce c2 00                    ..... .....

000000e6 <VREMYA_MTZ>:
      e6:	c2 d0 c5 cc df 20 cc d2 c7 00                       ..... ....

000000f0 <ADRES>:
      f0:	c0 c4 d0 c5 d1 00                                   ......

000000f6 <PO_ODNOMU>:
      f6:	cf ce 20 ce c4 cd ce cc d3 00                       .. .......

00000100 <DLYA_VSEH>:
     100:	c4 cb df 20 c2 d1 c5 d5 00                          ... .....

00000109 <C_NONE>:
     109:	4e 4f 4e 45 00                                      NONE.

0000010e <C_EVEN>:
     10e:	45 56 45 4e 00                                      EVEN.

00000113 <C_ODD>:
     113:	4f 44 44 00                                         ODD.

00000117 <CHETNOST>:
     117:	d7 c5 d2 cd ce d1 d2 dc 00                          .........

00000120 <SKOROST>:
     120:	d1 ca ce d0 ce d1 d2 dc 00                          .........

00000129 <ASCII_M>:
     129:	41 53 43 49 49 00                                   ASCII.

0000012f <RTU_M>:
     12f:	52 54 55 00                                         RTU.

00000133 <REZHIM>:
     133:	d0 c5 c6 c8 cc 00                                   ......

00000139 <SVYAZ>:
     139:	d1 c2 df c7 dc 20 52 53 34 38 35 00                 ..... RS485.

00000145 <PROGRAMMIROVANIE>:
     145:	cf d0 ce c3 d0 c0 cc cc c8 d0 ce c2 c0 cd c8 c5     ................
	...

00000156 <SCANIROVANIE>:
     156:	d1 ca c0 cd c8 d0 ce c2 c0 cd c8 c5 00              .............

00000163 <DATAVREMYA>:
     163:	c4 c0 d2 c0 2f c2 d0 c5 cc df 00                    ..../......

0000016e <RELE>:
     16e:	d0 c5 cb c5 00                                      .....

00000173 <DVX>:
     173:	c4 c2 d5 00                                         ....

00000177 <VOD>:
     177:	c2 ce c4 00                                         ....

0000017b <BDZ>:
     17b:	c1 c4 c7 00                                         ....

0000017f <NASTROYKA>:
     17f:	cd c0 d1 d2 d0 ce c9 ca c0 00                       ..........

00000189 <ARHIV>:
     189:	c0 d0 d5 c8 c2 00                                   ......

0000018f <NA_SVYAZI>:
     18f:	cd c0 20 d1 c2 df c7 c8 00                          .. ......

00000198 <MENU>:
     198:	cc c5 cd de 00                                      .....

0000019d <NEISPRAVNOST>:
     19d:	cd c5 c8 d1 cf d0 c0 c2 cd ce d1 d2 dc 00           ..............

000001ab <AVARIYA>:
     1ab:	c0 c2 c0 d0 c8 df 00                                .......

000001b2 <RABOTA>:
     1b2:	d0 c0 c1 ce d2 c0 31 00                             ......1.

000001ba <DVX3>:
     1ba:	c4 c2 d5 33 00                                      ...3.

000001bf <DVX2>:
     1bf:	c4 c2 d5 32 00                                      ...2.

000001c4 <DVX1>:
     1c4:	c4 c2 d5 31 00                                      ...1.

000001c9 <VOD4>:
     1c9:	c2 ce c4 34 00                                      ...4.

000001ce <VOD3>:
     1ce:	c2 ce c4 33 00                                      ...3.

000001d3 <VOD2>:
     1d3:	c2 ce c4 32 00                                      ...2.

000001d8 <VOD1>:
     1d8:	c2 ce c4 31 00                                      ...1.

000001dd <LOGIKA>:
     1dd:	cb ce c3 c8 ca c0 20 d0 c0 c1 ce d2 db 00           ...... .......

000001eb <OSHIBKA_ADDR>:
     1eb:	ce d8 c8 c1 ca c0 20 e0 e4 f0 e5 f1 20 e7 e0 ed     ...... ..... ...
     1fb:	ff f2 00                                            ...

000001fe <STAROE_ZNACHENIE>:
     1fe:	d1 d2 c0 d0 ce c5 20 c7 cd c0 d7 c5 cd c8 c5 00     ...... .........

0000020e <NUMM>:
     20e:	cd ce cc c5 d0 20 c1 c4 c7 00                       ..... ....

00000218 <NOVOE>:
     218:	cd ce c2 ce c5 00                                   ......

0000021e <lcd_codepage>:
     21e:	41 a0 42 a1 e0 45 a3 a4 a5 a6 4b a7 4d 48 4f a8     A.B..E....K.MHO.
     22e:	50 43 54 a9 aa 58 e1 ab ac e2 ad ae 62 af b0 b1     PCT..X......b...
     23e:	61 b2 b3 b4 e3 65 b6 b7 b8 b9 ba bb bc bd 6f be     a....e........o.
     24e:	70 63 bf 79 e4 78 e5 c0 c1 e6 c2 c3 c4 c5 c6 c7     pc.y.x..........

0000025e <__ctors_end>:
     25e:	11 24       	eor	r1, r1
     260:	1f be       	out	0x3f, r1	; 63
     262:	cf e5       	ldi	r28, 0x5F	; 95
     264:	d8 e0       	ldi	r29, 0x08	; 8
     266:	de bf       	out	0x3e, r29	; 62
     268:	cd bf       	out	0x3d, r28	; 61

0000026a <__do_copy_data>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	a0 e6       	ldi	r26, 0x60	; 96
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	ec e5       	ldi	r30, 0x5C	; 92
     272:	ff e3       	ldi	r31, 0x3F	; 63
     274:	02 c0       	rjmp	.+4      	; 0x27a <__do_copy_data+0x10>
     276:	05 90       	lpm	r0, Z+
     278:	0d 92       	st	X+, r0
     27a:	a6 34       	cpi	r26, 0x46	; 70
     27c:	b1 07       	cpc	r27, r17
     27e:	d9 f7       	brne	.-10     	; 0x276 <__do_copy_data+0xc>

00000280 <__do_clear_bss>:
     280:	25 e0       	ldi	r18, 0x05	; 5
     282:	a6 e4       	ldi	r26, 0x46	; 70
     284:	b1 e0       	ldi	r27, 0x01	; 1
     286:	01 c0       	rjmp	.+2      	; 0x28a <.do_clear_bss_start>

00000288 <.do_clear_bss_loop>:
     288:	1d 92       	st	X+, r1

0000028a <.do_clear_bss_start>:
     28a:	ad 3c       	cpi	r26, 0xCD	; 205
     28c:	b2 07       	cpc	r27, r18
     28e:	e1 f7       	brne	.-8      	; 0x288 <.do_clear_bss_loop>
     290:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <main>
     294:	0c 94 ac 1f 	jmp	0x3f58	; 0x3f58 <_exit>

00000298 <__bad_interrupt>:
     298:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000029c <checkTOUT>:
	return 	checkTOUT(addr);
}

static inline signed char checkTOUT(unsigned char addr)
{
	CAN_timeout=CAN_TOUT;
     29c:	28 ee       	ldi	r18, 0xE8	; 232
     29e:	33 e0       	ldi	r19, 0x03	; 3
     2a0:	30 93 dd 04 	sts	0x04DD, r19	; 0x8004dd <CAN_timeout+0x1>
     2a4:	20 93 dc 04 	sts	0x04DC, r18	; 0x8004dc <CAN_timeout>
	while(chkBit(inSysBDZ[addr].flags,INL)==0 && (CAN_timeout !=0));	//ждем ответа
     2a8:	29 e0       	ldi	r18, 0x09	; 9
     2aa:	82 9f       	mul	r24, r18
     2ac:	c0 01       	movw	r24, r0
     2ae:	11 24       	eor	r1, r1
     2b0:	fc 01       	movw	r30, r24
     2b2:	e7 59       	subi	r30, 0x97	; 151
     2b4:	fe 4f       	sbci	r31, 0xFE	; 254
     2b6:	80 81       	ld	r24, Z
     2b8:	82 fd       	sbrc	r24, 2
     2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <checkTOUT+0x2c>
     2bc:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <CAN_timeout>
     2c0:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <CAN_timeout+0x1>
     2c4:	89 2b       	or	r24, r25
     2c6:	b9 f7       	brne	.-18     	; 0x2b6 <checkTOUT+0x1a>
	return (CAN_timeout ==0 || CAN_ERR !=0)?(-1):(1);					//дождались таймаута или ошибки CAN вернули -1
     2c8:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <CAN_timeout>
     2cc:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <CAN_timeout+0x1>
     2d0:	89 2b       	or	r24, r25
     2d2:	31 f0       	breq	.+12     	; 0x2e0 <checkTOUT+0x44>
     2d4:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CAN_ERR>
     2d8:	81 11       	cpse	r24, r1
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <checkTOUT+0x44>
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	08 95       	ret
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
}
     2e2:	08 95       	ret

000002e4 <LCD_strob>:
}


static inline void LCD_strob(void)
{
	LCP |= 1<<LCD_E;
     2e4:	ac 9a       	sbi	0x15, 4	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e6:	8f e9       	ldi	r24, 0x9F	; 159
     2e8:	9f e0       	ldi	r25, 0x0F	; 15
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_strob+0x6>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_strob+0xc>
     2f0:	00 00       	nop
	_delay_ms(1);
	LCP &= ~(1<<LCD_E);
     2f2:	ac 98       	cbi	0x15, 4	; 21
     2f4:	8f e9       	ldi	r24, 0x9F	; 159
     2f6:	9f e0       	ldi	r25, 0x0F	; 15
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD_strob+0x14>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD_strob+0x1a>
     2fe:	00 00       	nop
     300:	08 95       	ret

00000302 <TWI_init>:
#define MR_DATA_NACK 0x58	//данные пришли, ACK не отправлен

void TWI_init(void)
{
//скорость 100 kHz
TWBR=72;
     302:	88 e4       	ldi	r24, 0x48	; 72
     304:	80 b9       	out	0x00, r24	; 0
//TWEA разрешение бита подтверждения,TWEN разрешение работы TWI модуля,
TWCR |= (1<<TWEA | 1<<TWEN);
     306:	86 b7       	in	r24, 0x36	; 54
     308:	84 64       	ori	r24, 0x44	; 68
     30a:	86 bf       	out	0x36, r24	; 54
TWSR &=~(1<<TWPS0) | (1<<TWPS1);
     30c:	08 98       	cbi	0x01, 0	; 1
     30e:	08 95       	ret

00000310 <twi_write>:
}

unsigned char twi_write(unsigned char addr,unsigned char *data,unsigned char len)
{
TWI_timeout=T_TOUT;
     310:	28 ee       	ldi	r18, 0xE8	; 232
     312:	33 e0       	ldi	r19, 0x03	; 3
     314:	30 93 7b 05 	sts	0x057B, r19	; 0x80057b <TWI_timeout+0x1>
     318:	20 93 7a 05 	sts	0x057A, r18	; 0x80057a <TWI_timeout>

//TWI_ERR=0;

TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);										//Send START condition
     31c:	94 ea       	ldi	r25, 0xA4	; 164
     31e:	96 bf       	out	0x36, r25	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//флаг TWINT говорит о том,что текущее задание выполнено
     320:	06 b6       	in	r0, 0x36	; 54
     322:	07 fc       	sbrc	r0, 7
     324:	08 c0       	rjmp	.+16     	; 0x336 <twi_write+0x26>
     326:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <TWI_timeout>
     32a:	30 91 7b 05 	lds	r19, 0x057B	; 0x80057b <TWI_timeout+0x1>
     32e:	23 2b       	or	r18, r19
     330:	b9 f7       	brne	.-18     	; 0x320 <twi_write+0x10>
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	2d c0       	rjmp	.+90     	; 0x390 <twi_write+0x80>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел
     336:	91 b1       	in	r25, 0x01	; 1
     338:	98 7f       	andi	r25, 0xF8	; 248
     33a:	98 30       	cpi	r25, 0x08	; 8
     33c:	11 f0       	breq	.+4      	; 0x342 <twi_write+0x32>
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	27 c0       	rjmp	.+78     	; 0x390 <twi_write+0x80>



TWDR = addr & 0xFE;													//грузим адпес и флаг записи (SLA+W)
     342:	8e 7f       	andi	r24, 0xFE	; 254
     344:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
     346:	84 e8       	ldi	r24, 0x84	; 132
     348:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
     34a:	06 b6       	in	r0, 0x36	; 54
     34c:	07 fc       	sbrc	r0, 7
     34e:	07 c0       	rjmp	.+14     	; 0x35e <twi_write+0x4e>
     350:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <TWI_timeout>
     354:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <TWI_timeout+0x1>
     358:	89 2b       	or	r24, r25
     35a:	b9 f7       	brne	.-18     	; 0x34a <twi_write+0x3a>
     35c:	ea cf       	rjmp	.-44     	; 0x332 <twi_write+0x22>
if ((TWSR & 0xF8) != MT_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     35e:	81 b1       	in	r24, 0x01	; 1
     360:	88 7f       	andi	r24, 0xF8	; 248
     362:	88 31       	cpi	r24, 0x18	; 24
     364:	21 f4       	brne	.+8      	; 0x36e <twi_write+0x5e>
     366:	96 2f       	mov	r25, r22
     368:	fb 01       	movw	r30, r22


for(unsigned char i=0;i<len;i++)											//данные пошли
{
	TWDR = *(data+i);
	TWCR = (1<<TWINT) | (1<<TWEN);
     36a:	24 e8       	ldi	r18, 0x84	; 132
     36c:	02 c0       	rjmp	.+4      	; 0x372 <twi_write+0x62>


TWDR = addr & 0xFE;													//грузим адпес и флаг записи (SLA+W)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MT_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     36e:	83 e0       	ldi	r24, 0x03	; 3
     370:	0f c0       	rjmp	.+30     	; 0x390 <twi_write+0x80>



for(unsigned char i=0;i<len;i++)											//данные пошли
     372:	8e 2f       	mov	r24, r30
     374:	89 1b       	sub	r24, r25
     376:	84 17       	cp	r24, r20
     378:	a8 f4       	brcc	.+42     	; 0x3a4 <twi_write+0x94>
{
	TWDR = *(data+i);
     37a:	81 91       	ld	r24, Z+
     37c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     37e:	26 bf       	out	0x36, r18	; 54
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}
     380:	06 b6       	in	r0, 0x36	; 54
     382:	07 fe       	sbrs	r0, 7
     384:	08 c0       	rjmp	.+16     	; 0x396 <twi_write+0x86>
	if ((TWSR & 0xF8) != MT_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}
     386:	81 b1       	in	r24, 0x01	; 1
     388:	88 7f       	andi	r24, 0xF8	; 248
     38a:	88 32       	cpi	r24, 0x28	; 40
     38c:	91 f3       	breq	.-28     	; 0x372 <twi_write+0x62>
     38e:	84 e0       	ldi	r24, 0x04	; 4
     390:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <TWI_ERR>
     394:	07 c0       	rjmp	.+14     	; 0x3a4 <twi_write+0x94>

for(unsigned char i=0;i<len;i++)											//данные пошли
{
	TWDR = *(data+i);
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}
     396:	60 91 7a 05 	lds	r22, 0x057A	; 0x80057a <TWI_timeout>
     39a:	70 91 7b 05 	lds	r23, 0x057B	; 0x80057b <TWI_timeout+0x1>
     39e:	67 2b       	or	r22, r23
     3a0:	79 f7       	brne	.-34     	; 0x380 <twi_write+0x70>
     3a2:	c7 cf       	rjmp	.-114    	; 0x332 <twi_write+0x22>


ERROR:


TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);										//Transmit STOP condition
     3a4:	84 e9       	ldi	r24, 0x94	; 148
     3a6:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a8:	8f e8       	ldi	r24, 0x8F	; 143
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <twi_write+0x9c>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <twi_write+0xa2>
     3b2:	00 00       	nop
_delay_us(100);	//ждем прохождения стопа
#ifdef DEBUG
if(TWI_ERR)uart_puts("writeErr");
#endif
return TWI_ERR;	//возвращаем код ошибки
}
     3b4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <TWI_ERR>
     3b8:	08 95       	ret

000003ba <twi_read>:

unsigned char twi_read(unsigned char addr,unsigned char *data,unsigned char len)
{
     3ba:	98 2f       	mov	r25, r24
unsigned char i=0;

TWI_timeout=T_TOUT;
     3bc:	28 ee       	ldi	r18, 0xE8	; 232
     3be:	33 e0       	ldi	r19, 0x03	; 3
     3c0:	30 93 7b 05 	sts	0x057B, r19	; 0x80057b <TWI_timeout+0x1>
     3c4:	20 93 7a 05 	sts	0x057A, r18	; 0x80057a <TWI_timeout>

TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);										//Send START condition
     3c8:	84 ea       	ldi	r24, 0xA4	; 164
     3ca:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//флаг TWINT говорит о том,что текущее задание выполнено
     3cc:	06 b6       	in	r0, 0x36	; 54
     3ce:	07 fc       	sbrc	r0, 7
     3d0:	08 c0       	rjmp	.+16     	; 0x3e2 <twi_read+0x28>
     3d2:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <TWI_timeout>
     3d6:	30 91 7b 05 	lds	r19, 0x057B	; 0x80057b <TWI_timeout+0x1>
     3da:	23 2b       	or	r18, r19
     3dc:	b9 f7       	brne	.-18     	; 0x3cc <twi_read+0x12>
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	34 c0       	rjmp	.+104    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел
     3e2:	81 b1       	in	r24, 0x01	; 1
     3e4:	88 7f       	andi	r24, 0xF8	; 248
     3e6:	88 30       	cpi	r24, 0x08	; 8
     3e8:	11 f0       	breq	.+4      	; 0x3ee <twi_read+0x34>
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	2e c0       	rjmp	.+92     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>

TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
     3ee:	91 60       	ori	r25, 0x01	; 1
     3f0:	93 b9       	out	0x03, r25	; 3
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
     3f2:	84 e8       	ldi	r24, 0x84	; 132
     3f4:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
     3f6:	06 b6       	in	r0, 0x36	; 54
     3f8:	07 fc       	sbrc	r0, 7
     3fa:	07 c0       	rjmp	.+14     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     3fc:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <TWI_timeout>
     400:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <TWI_timeout+0x1>
     404:	89 2b       	or	r24, r25
     406:	b9 f7       	brne	.-18     	; 0x3f6 <twi_read+0x3c>
     408:	ea cf       	rjmp	.-44     	; 0x3de <twi_read+0x24>
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     40a:	91 b1       	in	r25, 0x01	; 1
     40c:	98 7f       	andi	r25, 0xF8	; 248
     40e:	90 34       	cpi	r25, 0x40	; 64
     410:	31 f4       	brne	.+12     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     412:	20 e0       	ldi	r18, 0x00	; 0

for(i=0;i<len-1;i++)												//данные пошли
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	41 50       	subi	r20, 0x01	; 1
     418:	51 09       	sbc	r21, r1
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
     41a:	e4 ec       	ldi	r30, 0xC4	; 196
     41c:	08 c0       	rjmp	.+16     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел

TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     41e:	83 e0       	ldi	r24, 0x03	; 3
     420:	14 c0       	rjmp	.+40     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
for(i=0;i<len-1;i++)												//данные пошли
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
	*(data+i)=TWDR;
     422:	33 b1       	in	r19, 0x03	; 3
     424:	db 01       	movw	r26, r22
     426:	a8 0f       	add	r26, r24
     428:	b9 1f       	adc	r27, r25
     42a:	3c 93       	st	X, r19
TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел

for(i=0;i<len-1;i++)												//данные пошли
     42c:	2f 5f       	subi	r18, 0xFF	; 255
     42e:	82 2f       	mov	r24, r18
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	84 17       	cp	r24, r20
     434:	95 07       	cpc	r25, r21
     436:	9c f4       	brge	.+38     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
     438:	e6 bf       	out	0x36, r30	; 54
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
     43a:	06 b6       	in	r0, 0x36	; 54
     43c:	07 fe       	sbrs	r0, 7
     43e:	08 c0       	rjmp	.+16     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
     440:	31 b1       	in	r19, 0x01	; 1
     442:	38 7f       	andi	r19, 0xF8	; 248
     444:	30 35       	cpi	r19, 0x50	; 80
     446:	69 f3       	breq	.-38     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <TWI_ERR>
     44e:	1c c0       	rjmp	.+56     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел

for(i=0;i<len-1;i++)												//данные пошли
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
     450:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <TWI_timeout>
     454:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <TWI_timeout+0x1>
     458:	ab 2b       	or	r26, r27
     45a:	79 f7       	brne	.-34     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     45c:	c0 cf       	rjmp	.-128    	; 0x3de <twi_read+0x24>
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
	*(data+i)=TWDR;
}
TWCR = (1<<TWINT) | (1<<TWEN);													//запускаем прием последнего байта без подтверждения
     45e:	24 e8       	ldi	r18, 0x84	; 132
     460:	26 bf       	out	0x36, r18	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}		//ждем пока прилетит
     462:	06 b6       	in	r0, 0x36	; 54
     464:	07 fc       	sbrc	r0, 7
     466:	07 c0       	rjmp	.+14     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     468:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <TWI_timeout>
     46c:	30 91 7b 05 	lds	r19, 0x057B	; 0x80057b <TWI_timeout+0x1>
     470:	23 2b       	or	r18, r19
     472:	b9 f7       	brne	.-18     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     474:	b4 cf       	rjmp	.-152    	; 0x3de <twi_read+0x24>
if ((TWSR & 0xF8) != MR_DATA_NACK){TWI_ERR=TWIDATA;goto ERROR;}					//данные не прошли
     476:	21 b1       	in	r18, 0x01	; 1
     478:	28 7f       	andi	r18, 0xF8	; 248
     47a:	28 35       	cpi	r18, 0x58	; 88
     47c:	29 f7       	brne	.-54     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
*(data+i)=TWDR;
     47e:	23 b1       	in	r18, 0x03	; 3
     480:	fb 01       	movw	r30, r22
     482:	e8 0f       	add	r30, r24
     484:	f9 1f       	adc	r31, r25
     486:	20 83       	st	Z, r18

ERROR:
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWEA);											//Transmit STOP condition
     488:	84 ed       	ldi	r24, 0xD4	; 212
     48a:	86 bf       	out	0x36, r24	; 54
     48c:	8f e8       	ldi	r24, 0x8F	; 143
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     494:	00 c0       	rjmp	.+0      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     496:	00 00       	nop
#ifdef DEBUG
if(TWI_ERR){uart_puts("readErr");}
#endif

return TWI_ERR;	//возвращаем код ошибки
}
     498:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <TWI_ERR>
     49c:	08 95       	ret

0000049e <rtc_set>:
signed char rtc_check(void);
static inline unsigned char bcd2dec(unsigned char n);
static inline unsigned char dec2bcd(unsigned char n);

signed char rtc_set(struct RTC *rtc)
{
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	2a 97       	sbiw	r28, 0x0a	; 10
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	fc 01       	movw	r30, r24
	unsigned char data[10];

	data[0]=0;									//начальный регистр
     4b4:	19 82       	std	Y+1, r1	; 0x01
	data[1]=(dec2bcd(rtc->seconds) & ~(1<<CH));	//секунды с запуском тактового
     4b6:	85 81       	ldd	r24, Z+5	; 0x05
     4b8:	2a e0       	ldi	r18, 0x0A	; 10
     4ba:	62 2f       	mov	r22, r18
     4bc:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__udivmodqi4>
     4c0:	39 2f       	mov	r19, r25
     4c2:	40 e1       	ldi	r20, 0x10	; 16
     4c4:	84 9f       	mul	r24, r20
     4c6:	c0 01       	movw	r24, r0
     4c8:	11 24       	eor	r1, r1
     4ca:	83 2b       	or	r24, r19
     4cc:	8f 77       	andi	r24, 0x7F	; 127
     4ce:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=dec2bcd(rtc->minutes);
     4d0:	84 81       	ldd	r24, Z+4	; 0x04
     4d2:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__udivmodqi4>
     4d6:	39 2f       	mov	r19, r25
     4d8:	40 e1       	ldi	r20, 0x10	; 16
     4da:	84 9f       	mul	r24, r20
     4dc:	c0 01       	movw	r24, r0
     4de:	11 24       	eor	r1, r1
     4e0:	83 2b       	or	r24, r19
     4e2:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=dec2bcd(rtc->hours);
     4e4:	83 81       	ldd	r24, Z+3	; 0x03
     4e6:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__udivmodqi4>
     4ea:	39 2f       	mov	r19, r25
     4ec:	40 e1       	ldi	r20, 0x10	; 16
     4ee:	84 9f       	mul	r24, r20
     4f0:	c0 01       	movw	r24, r0
     4f2:	11 24       	eor	r1, r1
     4f4:	83 2b       	or	r24, r19
     4f6:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=0;									//день недели
     4f8:	1d 82       	std	Y+5, r1	; 0x05
	data[5]=dec2bcd(rtc->day);
     4fa:	82 81       	ldd	r24, Z+2	; 0x02
     4fc:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__udivmodqi4>
     500:	39 2f       	mov	r19, r25
     502:	40 e1       	ldi	r20, 0x10	; 16
     504:	84 9f       	mul	r24, r20
     506:	c0 01       	movw	r24, r0
     508:	11 24       	eor	r1, r1
     50a:	83 2b       	or	r24, r19
     50c:	8e 83       	std	Y+6, r24	; 0x06
	data[6]=dec2bcd(rtc->month);
     50e:	81 81       	ldd	r24, Z+1	; 0x01
     510:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__udivmodqi4>
     514:	39 2f       	mov	r19, r25
     516:	40 e1       	ldi	r20, 0x10	; 16
     518:	84 9f       	mul	r24, r20
     51a:	c0 01       	movw	r24, r0
     51c:	11 24       	eor	r1, r1
     51e:	83 2b       	or	r24, r19
     520:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=dec2bcd(rtc->year);
     522:	80 81       	ld	r24, Z
     524:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__udivmodqi4>
     528:	29 2f       	mov	r18, r25
     52a:	30 e1       	ldi	r19, 0x10	; 16
     52c:	83 9f       	mul	r24, r19
     52e:	c0 01       	movw	r24, r0
     530:	11 24       	eor	r1, r1
     532:	82 2b       	or	r24, r18
     534:	88 87       	std	Y+8, r24	; 0x08
	data[8]=0;									//управляющий регистр
     536:	19 86       	std	Y+9, r1	; 0x09
	data[9]=STRT;								//первый регистр ОЗУ(часы работают)
     538:	8a ea       	ldi	r24, 0xAA	; 170
     53a:	8a 87       	std	Y+10, r24	; 0x0a
	if(twi_write(DS1307ADDR,data,10) !=0) return -1;//посыл
     53c:	4a e0       	ldi	r20, 0x0A	; 10
     53e:	be 01       	movw	r22, r28
     540:	6f 5f       	subi	r22, 0xFF	; 255
     542:	7f 4f       	sbci	r23, 0xFF	; 255
     544:	80 ed       	ldi	r24, 0xD0	; 208
     546:	0e 94 88 01 	call	0x310	; 0x310 <twi_write>
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	81 11       	cpse	r24, r1
     54e:	01 c0       	rjmp	.+2      	; 0x552 <rtc_set+0xb4>
     550:	90 e0       	ldi	r25, 0x00	; 0

	return 0;
}
     552:	89 2f       	mov	r24, r25
     554:	81 95       	neg	r24
     556:	2a 96       	adiw	r28, 0x0a	; 10
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <rtc_get>:

signed char rtc_get(struct RTC *rtc)
{
     568:	ef 92       	push	r14
     56a:	ff 92       	push	r15
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	28 97       	sbiw	r28, 0x08	; 8
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	de bf       	out	0x3e, r29	; 62
     580:	0f be       	out	0x3f, r0	; 63
     582:	cd bf       	out	0x3d, r28	; 61
     584:	8c 01       	movw	r16, r24
	unsigned char data[7]={0},startreg=0;
     586:	ce 01       	movw	r24, r28
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	7c 01       	movw	r14, r24
     58c:	87 e0       	ldi	r24, 0x07	; 7
     58e:	f7 01       	movw	r30, r14
     590:	11 92       	st	Z+, r1
     592:	8a 95       	dec	r24
     594:	e9 f7       	brne	.-6      	; 0x590 <rtc_get+0x28>
     596:	18 86       	std	Y+8, r1	; 0x08

	twi_write(DS1307ADDR,&startreg,1);							//посыл начальнОго регистра
     598:	41 e0       	ldi	r20, 0x01	; 1
     59a:	be 01       	movw	r22, r28
     59c:	68 5f       	subi	r22, 0xF8	; 248
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	80 ed       	ldi	r24, 0xD0	; 208
     5a2:	0e 94 88 01 	call	0x310	; 0x310 <twi_write>
	if(twi_read(DS1307ADDR,data,7) !=0)return -1;	//читаем
     5a6:	47 e0       	ldi	r20, 0x07	; 7
     5a8:	b7 01       	movw	r22, r14
     5aa:	80 ed       	ldi	r24, 0xD0	; 208
     5ac:	0e 94 dd 01 	call	0x3ba	; 0x3ba <twi_read>
     5b0:	81 11       	cpse	r24, r1
     5b2:	44 c0       	rjmp	.+136    	; 0x63c <rtc_get+0xd4>

	rtc->seconds=bcd2dec(data[0]);
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	98 2f       	mov	r25, r24
     5b8:	92 95       	swap	r25
     5ba:	9f 70       	andi	r25, 0x0F	; 15
     5bc:	8f 70       	andi	r24, 0x0F	; 15
     5be:	fa e0       	ldi	r31, 0x0A	; 10
     5c0:	9f 9f       	mul	r25, r31
     5c2:	80 0d       	add	r24, r0
     5c4:	11 24       	eor	r1, r1
     5c6:	f8 01       	movw	r30, r16
     5c8:	85 83       	std	Z+5, r24	; 0x05
	rtc->minutes=bcd2dec(data[1]);
     5ca:	8a 81       	ldd	r24, Y+2	; 0x02
     5cc:	98 2f       	mov	r25, r24
     5ce:	92 95       	swap	r25
     5d0:	9f 70       	andi	r25, 0x0F	; 15
     5d2:	8f 70       	andi	r24, 0x0F	; 15
     5d4:	fa e0       	ldi	r31, 0x0A	; 10
     5d6:	9f 9f       	mul	r25, r31
     5d8:	80 0d       	add	r24, r0
     5da:	11 24       	eor	r1, r1
     5dc:	f8 01       	movw	r30, r16
     5de:	84 83       	std	Z+4, r24	; 0x04
	rtc->hours  =bcd2dec(data[2]);
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	98 2f       	mov	r25, r24
     5e4:	92 95       	swap	r25
     5e6:	9f 70       	andi	r25, 0x0F	; 15
     5e8:	8f 70       	andi	r24, 0x0F	; 15
     5ea:	fa e0       	ldi	r31, 0x0A	; 10
     5ec:	9f 9f       	mul	r25, r31
     5ee:	80 0d       	add	r24, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	f8 01       	movw	r30, r16
     5f4:	83 83       	std	Z+3, r24	; 0x03
	rtc->day    =bcd2dec(data[4]);			//дни недели пропускаем
     5f6:	8d 81       	ldd	r24, Y+5	; 0x05
     5f8:	98 2f       	mov	r25, r24
     5fa:	92 95       	swap	r25
     5fc:	9f 70       	andi	r25, 0x0F	; 15
     5fe:	8f 70       	andi	r24, 0x0F	; 15
     600:	fa e0       	ldi	r31, 0x0A	; 10
     602:	9f 9f       	mul	r25, r31
     604:	80 0d       	add	r24, r0
     606:	11 24       	eor	r1, r1
     608:	f8 01       	movw	r30, r16
     60a:	82 83       	std	Z+2, r24	; 0x02
	rtc->month  =bcd2dec(data[5]);
     60c:	8e 81       	ldd	r24, Y+6	; 0x06
     60e:	98 2f       	mov	r25, r24
     610:	92 95       	swap	r25
     612:	9f 70       	andi	r25, 0x0F	; 15
     614:	8f 70       	andi	r24, 0x0F	; 15
     616:	fa e0       	ldi	r31, 0x0A	; 10
     618:	9f 9f       	mul	r25, r31
     61a:	80 0d       	add	r24, r0
     61c:	11 24       	eor	r1, r1
     61e:	f8 01       	movw	r30, r16
     620:	81 83       	std	Z+1, r24	; 0x01
	rtc->year   =bcd2dec(data[6]);	//год без десятков
     622:	8f 81       	ldd	r24, Y+7	; 0x07
     624:	98 2f       	mov	r25, r24
     626:	92 95       	swap	r25
     628:	9f 70       	andi	r25, 0x0F	; 15
     62a:	8f 70       	andi	r24, 0x0F	; 15
     62c:	fa e0       	ldi	r31, 0x0A	; 10
     62e:	9f 9f       	mul	r25, r31
     630:	80 0d       	add	r24, r0
     632:	11 24       	eor	r1, r1
     634:	f8 01       	movw	r30, r16
     636:	80 83       	st	Z, r24

	return 0;
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	01 c0       	rjmp	.+2      	; 0x63e <rtc_get+0xd6>
signed char rtc_get(struct RTC *rtc)
{
	unsigned char data[7]={0},startreg=0;

	twi_write(DS1307ADDR,&startreg,1);							//посыл начальнОго регистра
	if(twi_read(DS1307ADDR,data,7) !=0)return -1;	//читаем
     63c:	8f ef       	ldi	r24, 0xFF	; 255
	rtc->day    =bcd2dec(data[4]);			//дни недели пропускаем
	rtc->month  =bcd2dec(data[5]);
	rtc->year   =bcd2dec(data[6]);	//год без десятков

	return 0;
}
     63e:	28 96       	adiw	r28, 0x08	; 8
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	08 95       	ret

00000658 <rtc_check>:

signed char rtc_check(void)
{
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	00 d0       	rcall	.+0      	; 0x65e <rtc_check+0x6>
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
	unsigned char result=0,startreg=8;
     662:	1a 82       	std	Y+2, r1	; 0x02
     664:	88 e0       	ldi	r24, 0x08	; 8
     666:	89 83       	std	Y+1, r24	; 0x01

	twi_write(DS1307ADDR,&startreg,1);								//посыл начальнОго регистра
     668:	41 e0       	ldi	r20, 0x01	; 1
     66a:	be 01       	movw	r22, r28
     66c:	6f 5f       	subi	r22, 0xFF	; 255
     66e:	7f 4f       	sbci	r23, 0xFF	; 255
     670:	80 ed       	ldi	r24, 0xD0	; 208
     672:	0e 94 88 01 	call	0x310	; 0x310 <twi_write>
	if(twi_read(DS1307ADDR,&result,1) !=0)return -1;	//читаем
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	be 01       	movw	r22, r28
     67a:	6e 5f       	subi	r22, 0xFE	; 254
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	80 ed       	ldi	r24, 0xD0	; 208
     680:	0e 94 dd 01 	call	0x3ba	; 0x3ba <twi_read>
     684:	81 11       	cpse	r24, r1
     686:	07 c0       	rjmp	.+14     	; 0x696 <rtc_check+0x3e>

	if(result==STRT) return 0;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	9a 81       	ldd	r25, Y+2	; 0x02
     68c:	9a 3a       	cpi	r25, 0xAA	; 170
     68e:	09 f4       	brne	.+2      	; 0x692 <rtc_check+0x3a>
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	81 95       	neg	r24
     694:	01 c0       	rjmp	.+2      	; 0x698 <rtc_check+0x40>
signed char rtc_check(void)
{
	unsigned char result=0,startreg=8;

	twi_write(DS1307ADDR,&startreg,1);								//посыл начальнОго регистра
	if(twi_read(DS1307ADDR,&result,1) !=0)return -1;	//читаем
     696:	8f ef       	ldi	r24, 0xFF	; 255

	if(result==STRT) return 0;
	return -1;
}
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <LCD_sendCmd>:
	_delay_ms(1);
}

void LCD_sendCmd(unsigned char cmd)	//Sends Command to LCD
{
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	c8 2f       	mov	r28, r24
	//старшие полбайта команды
	LDP |= ((cmd>>7 & 0x01)<<LCD_DB7) | ((cmd>>6 & 0x01)<<LCD_DB6) | ((cmd>>5 & 0x01)<<LCD_DB5) | ((cmd>>4 & 0x01)<<LCD_DB4);
     6b2:	88 b3       	in	r24, 0x18	; 24
     6b4:	c6 fb       	bst	r28, 6
     6b6:	66 27       	eor	r22, r22
     6b8:	60 f9       	bld	r22, 0
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	66 0f       	add	r22, r22
     6be:	77 1f       	adc	r23, r23
     6c0:	9c 2f       	mov	r25, r28
     6c2:	99 1f       	adc	r25, r25
     6c4:	99 27       	eor	r25, r25
     6c6:	99 1f       	adc	r25, r25
     6c8:	89 2b       	or	r24, r25
     6ca:	68 2b       	or	r22, r24
     6cc:	c5 fb       	bst	r28, 5
     6ce:	44 27       	eor	r20, r20
     6d0:	40 f9       	bld	r20, 0
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	44 0f       	add	r20, r20
     6d6:	55 1f       	adc	r21, r21
     6d8:	44 0f       	add	r20, r20
     6da:	55 1f       	adc	r21, r21
     6dc:	46 2b       	or	r20, r22
     6de:	c4 fb       	bst	r28, 4
     6e0:	22 27       	eor	r18, r18
     6e2:	20 f9       	bld	r18, 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	53 e0       	ldi	r21, 0x03	; 3
     6e8:	22 0f       	add	r18, r18
     6ea:	33 1f       	adc	r19, r19
     6ec:	5a 95       	dec	r21
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <LCD_sendCmd+0x46>
     6f0:	24 2b       	or	r18, r20
     6f2:	28 bb       	out	0x18, r18	; 24
	LCD_strob();
     6f4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_strob>
	//младшие полбайта команды
	CLRLDP;
     6f8:	88 b3       	in	r24, 0x18	; 24
     6fa:	80 7f       	andi	r24, 0xF0	; 240
     6fc:	88 bb       	out	0x18, r24	; 24
	LDP = ((cmd>>3 & 0x01)<<LCD_DB7) | ((cmd>>2 & 0x01)<<LCD_DB6) | ((cmd>>1 & 0x01)<<LCD_DB5) | ((cmd>>0 & 0x01)<<LCD_DB4);
     6fe:	c3 fb       	bst	r28, 3
     700:	88 27       	eor	r24, r24
     702:	80 f9       	bld	r24, 0
     704:	c0 fb       	bst	r28, 0
     706:	cc 24       	eor	r12, r12
     708:	c0 f8       	bld	r12, 0
     70a:	d1 2c       	mov	r13, r1
     70c:	63 e0       	ldi	r22, 0x03	; 3
     70e:	cc 0c       	add	r12, r12
     710:	dd 1c       	adc	r13, r13
     712:	6a 95       	dec	r22
     714:	e1 f7       	brne	.-8      	; 0x70e <LCD_sendCmd+0x6c>
     716:	c8 2a       	or	r12, r24
     718:	c2 fb       	bst	r28, 2
     71a:	ee 24       	eor	r14, r14
     71c:	e0 f8       	bld	r14, 0
     71e:	f1 2c       	mov	r15, r1
     720:	ee 0c       	add	r14, r14
     722:	ff 1c       	adc	r15, r15
     724:	ec 28       	or	r14, r12
     726:	c1 fb       	bst	r28, 1
     728:	00 27       	eor	r16, r16
     72a:	00 f9       	bld	r16, 0
     72c:	10 e0       	ldi	r17, 0x00	; 0
     72e:	00 0f       	add	r16, r16
     730:	11 1f       	adc	r17, r17
     732:	00 0f       	add	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	0e 29       	or	r16, r14
     738:	08 bb       	out	0x18, r16	; 24
	LCD_strob();
     73a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_strob>
	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины
     73e:	85 b3       	in	r24, 0x15	; 21
     740:	83 7e       	andi	r24, 0xE3	; 227
     742:	85 bb       	out	0x15, r24	; 21
     744:	88 b3       	in	r24, 0x18	; 24
     746:	80 7f       	andi	r24, 0xF0	; 240
     748:	88 bb       	out	0x18, r24	; 24
}
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	cf 90       	pop	r12
     758:	08 95       	ret

0000075a <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     75a:	2f ef       	ldi	r18, 0xFF	; 255
     75c:	89 ef       	ldi	r24, 0xF9	; 249
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	21 50       	subi	r18, 0x01	; 1
     762:	80 40       	sbci	r24, 0x00	; 0
     764:	90 40       	sbci	r25, 0x00	; 0
     766:	e1 f7       	brne	.-8      	; 0x760 <LCD_init+0x6>
     768:	00 c0       	rjmp	.+0      	; 0x76a <LCD_init+0x10>
     76a:	00 00       	nop

void LCD_init(void)//Initializes LCD
{
	//инициализация портов
	_delay_ms(20);								//Wait for more than 15 ms after VCC rises to 4.5 V
	CLRLDP; 								//пины порта данных =0
     76c:	88 b3       	in	r24, 0x18	; 24
     76e:	80 7f       	andi	r24, 0xF0	; 240
     770:	88 bb       	out	0x18, r24	; 24
	LDDR |= (1<<LCD_DB7) | (1<<LCD_DB6) | (1<<LCD_DB5) | (1<<LCD_DB4);	//пины порта данных =выходы
     772:	87 b3       	in	r24, 0x17	; 23
     774:	8f 60       	ori	r24, 0x0F	; 15
     776:	87 bb       	out	0x17, r24	; 23
	CLRLCP;									//пины порта управляющих сигналов =0
     778:	85 b3       	in	r24, 0x15	; 21
     77a:	83 7e       	andi	r24, 0xE3	; 227
     77c:	85 bb       	out	0x15, r24	; 21
	LCDR |= (1<<LCD_E) | (1<<LCD_RW) | (1<<LCD_RS);				//пины порта управляющих сигналов =выходы
     77e:	84 b3       	in	r24, 0x14	; 20
     780:	8c 61       	ori	r24, 0x1C	; 28
     782:	84 bb       	out	0x14, r24	; 20

//	LDP |= convert(0b00110000);		//1
//	CLRLDP;								//обнулили пины DB
	LDP |= (1<<LCD_DB4) | (1<<LCD_DB5);	//step1
     784:	88 b3       	in	r24, 0x18	; 24
     786:	8c 60       	ori	r24, 0x0C	; 12
     788:	88 bb       	out	0x18, r24	; 24
	LCD_strob();
     78a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_strob>
     78e:	8f e1       	ldi	r24, 0x1F	; 31
     790:	9e e4       	ldi	r25, 0x4E	; 78
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <LCD_init+0x38>
     796:	00 c0       	rjmp	.+0      	; 0x798 <LCD_init+0x3e>
     798:	00 00       	nop
	_delay_ms(5);						//Wait for more than 4.1 m
	LCD_strob();						//step2
     79a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_strob>
     79e:	8f e1       	ldi	r24, 0x1F	; 31
     7a0:	9e e4       	ldi	r25, 0x4E	; 78
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <LCD_init+0x48>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <LCD_init+0x4e>
     7a8:	00 00       	nop
	_delay_ms(5);
	LCD_strob();						//step3
     7aa:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_strob>
	LDP &= ~(1<<LCD_DB4);				//step4 обнулили DB4
     7ae:	c3 98       	cbi	0x18, 3	; 24
	LCD_strob();
     7b0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_strob>
     7b4:	8f e3       	ldi	r24, 0x3F	; 63
     7b6:	9f e1       	ldi	r25, 0x1F	; 31
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <LCD_init+0x5e>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <LCD_init+0x64>
     7be:	00 00       	nop
	_delay_ms(2);
	LCD_sendCmd(0b00101000);	//4х разрядный режим(4);страница знакогенератора(1)
     7c0:	88 e2       	ldi	r24, 0x28	; 40
     7c2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_sendCmd>
   	LCD_sendCmd(0b00001000);	//дисплей откл(2);курсор выкл(1);мигание курсора выкл(0)
     7c6:	88 e0       	ldi	r24, 0x08	; 8
     7c8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_sendCmd>
   	LCD_sendCmd(0b00000001);	//очистка дисплея
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_sendCmd>
   	LCD_sendCmd(0b00000110);	//сдвиг курсора вправо(1)
     7d2:	86 e0       	ldi	r24, 0x06	; 6
     7d4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_sendCmd>

   	CLRLDP; CLRLCP;
     7d8:	88 b3       	in	r24, 0x18	; 24
     7da:	80 7f       	andi	r24, 0xF0	; 240
     7dc:	88 bb       	out	0x18, r24	; 24
     7de:	85 b3       	in	r24, 0x15	; 21
     7e0:	83 7e       	andi	r24, 0xE3	; 227
     7e2:	85 bb       	out	0x15, r24	; 21
     7e4:	08 95       	ret

000007e6 <LCD_cursorOn>:
}

void LCD_cursorOn(void) //displays LCD cursor
{
	LCD_sendCmd(0x0E);
     7e6:	8e e0       	ldi	r24, 0x0E	; 14
     7e8:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <LCD_sendCmd>

000007ec <LCD_cursorBlink>:
}

void LCD_cursorBlink(void)	//displays LCD blinking cursor
{
	LCD_sendCmd(0x0F);
     7ec:	8f e0       	ldi	r24, 0x0F	; 15
     7ee:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <LCD_sendCmd>

000007f2 <LCD_visible>:
	LCD_sendCmd(0x0C);
}

void LCD_visible(void)		//Shows LCD
{
	LCD_sendCmd(0x0C);
     7f2:	8c e0       	ldi	r24, 0x0C	; 12
     7f4:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <LCD_sendCmd>

000007f8 <LCD_cursorOff>:
     7f8:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <LCD_visible>

000007fc <LCD_clr>:
}

void LCD_clr(void)				//Clears LCD
{
	LCD_sendCmd(0x01);x=0;y=0;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_sendCmd>
     802:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <x>
     806:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <y>
     80a:	8f e1       	ldi	r24, 0x1F	; 31
     80c:	9e e4       	ldi	r25, 0x4E	; 78
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     812:	00 c0       	rjmp	.+0      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     814:	00 00       	nop
     816:	08 95       	ret

00000818 <LCD_gotoXY>:
	_delay_ms(5);
}

void LCD_gotoXY(char cx, char cy)	//Cursor to X Y position
{
	x=cx;y=cy;
     818:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <x>
     81c:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <y>
	// remap lines into proper order
	switch(y)
     820:	61 30       	cpi	r22, 0x01	; 1
     822:	39 f0       	breq	.+14     	; 0x832 <LCD_gotoXY+0x1a>
     824:	48 f0       	brcs	.+18     	; 0x838 <LCD_gotoXY+0x20>
     826:	62 30       	cpi	r22, 0x02	; 2
     828:	31 f0       	breq	.+12     	; 0x836 <LCD_gotoXY+0x1e>
     82a:	63 30       	cpi	r22, 0x03	; 3
     82c:	29 f4       	brne	.+10     	; 0x838 <LCD_gotoXY+0x20>
	{
	case 0: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
	case 1: LCD_sendCmd(0x80 | (LCD_LINE1_DDRAMADDR+x)); break;
	case 2: LCD_sendCmd(0x80 | (LCD_LINE2_DDRAMADDR+x)); break;
	case 3: LCD_sendCmd(0x80 | (LCD_LINE3_DDRAMADDR+x)); break;
     82e:	8c 5a       	subi	r24, 0xAC	; 172
     830:	03 c0       	rjmp	.+6      	; 0x838 <LCD_gotoXY+0x20>
	x=cx;y=cy;
	// remap lines into proper order
	switch(y)
	{
	case 0: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
	case 1: LCD_sendCmd(0x80 | (LCD_LINE1_DDRAMADDR+x)); break;
     832:	80 5c       	subi	r24, 0xC0	; 192
     834:	01 c0       	rjmp	.+2      	; 0x838 <LCD_gotoXY+0x20>
	case 2: LCD_sendCmd(0x80 | (LCD_LINE2_DDRAMADDR+x)); break;
     836:	8c 5e       	subi	r24, 0xEC	; 236
	case 3: LCD_sendCmd(0x80 | (LCD_LINE3_DDRAMADDR+x)); break;
	default: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
     838:	80 68       	ori	r24, 0x80	; 128
     83a:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <LCD_sendCmd>

0000083e <LCD_putchar>:
	}

}

void LCD_putchar(char ch)
{
     83e:	cf 92       	push	r12
     840:	df 92       	push	r13
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	c8 2f       	mov	r28, r24
	if ( ch >= 0xC0 ) ch = (char)pgm_read_byte(&lcd_codepage[ch - 0xC0]); //преобразование СР1251 в коды LCD
     850:	80 3c       	cpi	r24, 0xC0	; 192
     852:	28 f0       	brcs	.+10     	; 0x85e <LCD_putchar+0x20>
     854:	d0 e0       	ldi	r29, 0x00	; 0
     856:	fe 01       	movw	r30, r28
     858:	e2 5a       	subi	r30, 0xA2	; 162
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	c4 91       	lpm	r28, Z

	//4 bit part
	LCP |= 1<<LCD_RS; 	//установили RS
     85e:	aa 9a       	sbi	0x15, 2	; 21

	//старшие полбайта символа
	LDP |= ((ch>>7 & 0x01)<<LCD_DB7) | ((ch>>6 & 0x01)<<LCD_DB6) | ((ch>>5 & 0x01)<<LCD_DB5) | ((ch>>4 & 0x01)<<LCD_DB4);
     860:	88 b3       	in	r24, 0x18	; 24
     862:	c6 fb       	bst	r28, 6
     864:	66 27       	eor	r22, r22
     866:	60 f9       	bld	r22, 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	66 0f       	add	r22, r22
     86c:	77 1f       	adc	r23, r23
     86e:	9c 2f       	mov	r25, r28
     870:	99 1f       	adc	r25, r25
     872:	99 27       	eor	r25, r25
     874:	99 1f       	adc	r25, r25
     876:	89 2b       	or	r24, r25
     878:	68 2b       	or	r22, r24
     87a:	c5 fb       	bst	r28, 5
     87c:	44 27       	eor	r20, r20
     87e:	40 f9       	bld	r20, 0
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	44 0f       	add	r20, r20
     884:	55 1f       	adc	r21, r21
     886:	44 0f       	add	r20, r20
     888:	55 1f       	adc	r21, r21
     88a:	46 2b       	or	r20, r22
     88c:	c4 fb       	bst	r28, 4
     88e:	22 27       	eor	r18, r18
     890:	20 f9       	bld	r18, 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	53 e0       	ldi	r21, 0x03	; 3
     896:	22 0f       	add	r18, r18
     898:	33 1f       	adc	r19, r19
     89a:	5a 95       	dec	r21
     89c:	e1 f7       	brne	.-8      	; 0x896 <__stack+0x37>
     89e:	24 2b       	or	r18, r20
     8a0:	28 bb       	out	0x18, r18	; 24
	LCD_strob();
     8a2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_strob>

	//младшие полбайта символа
	CLRLDP;
     8a6:	88 b3       	in	r24, 0x18	; 24
     8a8:	80 7f       	andi	r24, 0xF0	; 240
     8aa:	88 bb       	out	0x18, r24	; 24
	LDP |= ((ch>>3 & 0x01)<<LCD_DB7) | ((ch>>2 & 0x01)<<LCD_DB6) | ((ch>>1 & 0x01)<<LCD_DB5) | ((ch>>0 & 0x01)<<LCD_DB4);
     8ac:	88 b3       	in	r24, 0x18	; 24
     8ae:	c3 fb       	bst	r28, 3
     8b0:	99 27       	eor	r25, r25
     8b2:	90 f9       	bld	r25, 0
     8b4:	89 2b       	or	r24, r25
     8b6:	c0 fb       	bst	r28, 0
     8b8:	cc 24       	eor	r12, r12
     8ba:	c0 f8       	bld	r12, 0
     8bc:	d1 2c       	mov	r13, r1
     8be:	63 e0       	ldi	r22, 0x03	; 3
     8c0:	cc 0c       	add	r12, r12
     8c2:	dd 1c       	adc	r13, r13
     8c4:	6a 95       	dec	r22
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <__stack+0x61>
     8c8:	c8 2a       	or	r12, r24
     8ca:	c2 fb       	bst	r28, 2
     8cc:	ee 24       	eor	r14, r14
     8ce:	e0 f8       	bld	r14, 0
     8d0:	f1 2c       	mov	r15, r1
     8d2:	ee 0c       	add	r14, r14
     8d4:	ff 1c       	adc	r15, r15
     8d6:	ec 28       	or	r14, r12
     8d8:	c1 fb       	bst	r28, 1
     8da:	00 27       	eor	r16, r16
     8dc:	00 f9       	bld	r16, 0
     8de:	10 e0       	ldi	r17, 0x00	; 0
     8e0:	00 0f       	add	r16, r16
     8e2:	11 1f       	adc	r17, r17
     8e4:	00 0f       	add	r16, r16
     8e6:	11 1f       	adc	r17, r17
     8e8:	0e 29       	or	r16, r14
     8ea:	08 bb       	out	0x18, r16	; 24
	LCD_strob();
     8ec:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_strob>

	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины
     8f0:	85 b3       	in	r24, 0x15	; 21
     8f2:	83 7e       	andi	r24, 0xE3	; 227
     8f4:	85 bb       	out	0x15, r24	; 21
     8f6:	88 b3       	in	r24, 0x18	; 24
     8f8:	80 7f       	andi	r24, 0xF0	; 240
     8fa:	88 bb       	out	0x18, r24	; 24

	if(++x >= LCD_MAXX)
     8fc:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <x>
     900:	8f 5f       	subi	r24, 0xFF	; 255
     902:	84 31       	cpi	r24, 0x14	; 20
     904:	58 f4       	brcc	.+22     	; 0x91c <__stack+0xbd>
     906:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <x>
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
		}
	}
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	df 90       	pop	r13
     918:	cf 90       	pop	r12
     91a:	08 95       	ret

	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины

	if(++x >= LCD_MAXX)
	{
		x=0;y++;
     91c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <x>
     920:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <y>
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <y>
		switch (y)
     92a:	81 30       	cpi	r24, 0x01	; 1
     92c:	39 f0       	breq	.+14     	; 0x93c <__stack+0xdd>
     92e:	50 f0       	brcs	.+20     	; 0x944 <__stack+0xe5>
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	31 f0       	breq	.+12     	; 0x940 <__stack+0xe1>
     934:	83 30       	cpi	r24, 0x03	; 3
     936:	31 f4       	brne	.+12     	; 0x944 <__stack+0xe5>
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
     938:	84 ed       	ldi	r24, 0xD4	; 212
     93a:	05 c0       	rjmp	.+10     	; 0x946 <__stack+0xe7>
	{
		x=0;y++;
		switch (y)
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
     93c:	80 ec       	ldi	r24, 0xC0	; 192
     93e:	03 c0       	rjmp	.+6      	; 0x946 <__stack+0xe7>
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
     940:	84 e9       	ldi	r24, 0x94	; 148
     942:	01 c0       	rjmp	.+2      	; 0x946 <__stack+0xe7>
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
     944:	80 e8       	ldi	r24, 0x80	; 128
		}
	}
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
     956:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <LCD_sendCmd>

0000095a <LCD_puts>:
		}
	}
}

void LCD_puts(char* data, char nBytes)	//Outputs string to LCD с автоматической перекодировкой с СР1251
{
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	d6 2f       	mov	r29, r22
     964:	8c 01       	movw	r16, r24
	// print data
	for(unsigned char i=0; i<nBytes; i++)
     966:	c0 e0       	ldi	r28, 0x00	; 0
     968:	cd 17       	cp	r28, r29
     96a:	81 f0       	breq	.+32     	; 0x98c <LCD_puts+0x32>
	{
		if(data[i]==0)								//если дошли до конца строки
     96c:	f8 01       	movw	r30, r16
     96e:	81 91       	ld	r24, Z+
     970:	8f 01       	movw	r16, r30
     972:	81 11       	cpse	r24, r1
     974:	07 c0       	rjmp	.+14     	; 0x984 <LCD_puts+0x2a>
		{
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
     976:	80 e2       	ldi	r24, 0x20	; 32
     978:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_putchar>
     97c:	cf 5f       	subi	r28, 0xFF	; 255
     97e:	cd 17       	cp	r28, r29
     980:	d0 f3       	brcs	.-12     	; 0x976 <LCD_puts+0x1c>
     982:	04 c0       	rjmp	.+8      	; 0x98c <LCD_puts+0x32>
			return;
		}
		else LCD_putchar(data[i]);
     984:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_putchar>
}

void LCD_puts(char* data, char nBytes)	//Outputs string to LCD с автоматической перекодировкой с СР1251
{
	// print data
	for(unsigned char i=0; i<nBytes; i++)
     988:	cf 5f       	subi	r28, 0xFF	; 255
     98a:	ee cf       	rjmp	.-36     	; 0x968 <LCD_puts+0xe>
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
			return;
		}
		else LCD_putchar(data[i]);
	}
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <printOut>:
		}
	naviMenu(LVL_in);
	return;
}
static inline unsigned char printOut(unsigned char numm)
{
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	2a 97       	sbiw	r28, 0x0a	; 10
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	18 2f       	mov	r17, r24
	//int *addr=&adress;
	char n[10];
	LCD_clr();
     9ae:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LCD_clr>
	LCD_gotoXY(0,0);
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
	itoa(inSysBDZ[*&adress].data[numm],n,2);
     9ba:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <adress>
     9be:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <adress+0x1>
     9c2:	29 e0       	ldi	r18, 0x09	; 9
     9c4:	28 9f       	mul	r18, r24
     9c6:	f0 01       	movw	r30, r0
     9c8:	29 9f       	mul	r18, r25
     9ca:	f0 0d       	add	r31, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	ef 59       	subi	r30, 0x9F	; 159
     9d0:	fe 4f       	sbci	r31, 0xFE	; 254
     9d2:	e1 0f       	add	r30, r17
     9d4:	f1 1d       	adc	r31, r1
     9d6:	80 81       	ld	r24, Z
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9d8:	42 e0       	ldi	r20, 0x02	; 2
     9da:	be 01       	movw	r22, r28
     9dc:	6f 5f       	subi	r22, 0xFF	; 255
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
	LCD_puts(n, 10);
     9e6:	6a e0       	ldi	r22, 0x0A	; 10
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
	LCD_gotoXY(0,2);
     9f0:	62 e0       	ldi	r22, 0x02	; 2
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
     9f8:	4a e0       	ldi	r20, 0x0A	; 10
     9fa:	be 01       	movw	r22, r28
     9fc:	6f 5f       	subi	r22, 0xFF	; 255
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
     a00:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <adress>
     a04:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <adress+0x1>
     a08:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
	itoa(*&adress,n,10);
	LCD_puts(n, 10);
     a0c:	6a e0       	ldi	r22, 0x0A	; 10
     a0e:	ce 01       	movw	r24, r28
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
     a16:	2f ef       	ldi	r18, 0xFF	; 255
     a18:	83 e2       	ldi	r24, 0x23	; 35
     a1a:	94 ef       	ldi	r25, 0xF4	; 244
     a1c:	21 50       	subi	r18, 0x01	; 1
     a1e:	80 40       	sbci	r24, 0x00	; 0
     a20:	90 40       	sbci	r25, 0x00	; 0
     a22:	e1 f7       	brne	.-8      	; 0xa1c <printOut+0x86>
     a24:	00 c0       	rjmp	.+0      	; 0xa26 <printOut+0x90>
     a26:	00 00       	nop
		break;
		case NOKEY:asm("jmp 0");	//автовыход
		break;
		}
	}*/
}
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	2a 96       	adiw	r28, 0x0a	; 10
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	08 95       	ret

00000a3e <dvx3>:
{
	printOut(6);
}
static void dvx3(void)
{
	printOut(7);
     a3e:	87 e0       	ldi	r24, 0x07	; 7
     a40:	0c 94 cb 04 	jmp	0x996	; 0x996 <printOut>

00000a44 <dvx2>:
{
	printOut(5);
}
static void dvx2(void)
{
	printOut(6);
     a44:	86 e0       	ldi	r24, 0x06	; 6
     a46:	0c 94 cb 04 	jmp	0x996	; 0x996 <printOut>

00000a4a <dvx1>:
{
	printOut(4);
}
static void dvx1(void)
{
	printOut(5);
     a4a:	85 e0       	ldi	r24, 0x05	; 5
     a4c:	0c 94 cb 04 	jmp	0x996	; 0x996 <printOut>

00000a50 <vod4>:
{
	printOut(3);
}
static void vod4(void)
{
	printOut(4);
     a50:	84 e0       	ldi	r24, 0x04	; 4
     a52:	0c 94 cb 04 	jmp	0x996	; 0x996 <printOut>

00000a56 <vod3>:
{
	printOut(2);
}
static void vod3(void)
{
	printOut(3);
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	0c 94 cb 04 	jmp	0x996	; 0x996 <printOut>

00000a5c <vod2>:
{
	printOut(1);
}
static void vod2(void)
{
	printOut(2);
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	0c 94 cb 04 	jmp	0x996	; 0x996 <printOut>

00000a62 <vod1>:
	{NULL,NULL}	//затычка
};

static void vod1(void)
{
	printOut(1);
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	0c 94 cb 04 	jmp	0x996	; 0x996 <printOut>

00000a68 <printIOStr>:
	LCD_gotoXY(x,y);
	LCD_puts(buffer,20);
}

static inline void printIOStr(volatile unsigned char *data)
{
     a68:	cf 92       	push	r12
     a6a:	df 92       	push	r13
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	6b 97       	sbiw	r28, 0x1b	; 27
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	7c 01       	movw	r14, r24
	char buffer[20];
	char tmpStr[7];
	unsigned char i;

	//строка 2 "ВОД:  ДВХ:"
	LCD_gotoXY(0,2);
     a8a:	62 e0       	ldi	r22, 0x02	; 2
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
	strcpy_P(buffer,VOD);strcat(buffer,":");										//ВОД:
     a92:	67 e7       	ldi	r22, 0x77	; 119
     a94:	71 e0       	ldi	r23, 0x01	; 1
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	0e 94 03 1c 	call	0x3806	; 0x3806 <strcpy_P>
     a9e:	66 ef       	ldi	r22, 0xF6	; 246
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	ce 01       	movw	r24, r28
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	0e 94 13 1c 	call	0x3826	; 0x3826 <strcat>
	if((*data & 0x0F) ==0) strcat_P(buffer,NET);									//"нет"
     aaa:	f7 01       	movw	r30, r14
     aac:	80 81       	ld	r24, Z
     aae:	8f 70       	andi	r24, 0x0F	; 15
     ab0:	39 f4       	brne	.+14     	; 0xac0 <printIOStr+0x58>
     ab2:	67 eb       	ldi	r22, 0xB7	; 183
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	ce 01       	movw	r24, r28
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <strcat_P>
     abe:	2d c0       	rjmp	.+90     	; 0xb1a <printIOStr+0xb2>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
	else for(i=0;i<4;i++) if( chkBit(*data,i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//или номера
     ac4:	cc 24       	eor	r12, r12
     ac6:	c3 94       	inc	r12
     ac8:	d1 2c       	mov	r13, r1
     aca:	f7 01       	movw	r30, r14
     acc:	30 81       	ld	r19, Z
     ace:	a6 01       	movw	r20, r12
     ad0:	08 2e       	mov	r0, r24
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <printIOStr+0x70>
     ad4:	44 0f       	add	r20, r20
     ad6:	55 1f       	adc	r21, r21
     ad8:	0a 94       	dec	r0
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <printIOStr+0x6c>
     adc:	23 2f       	mov	r18, r19
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	24 23       	and	r18, r20
     ae2:	35 23       	and	r19, r21
     ae4:	08 2e       	mov	r0, r24
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <printIOStr+0x84>
     ae8:	35 95       	asr	r19
     aea:	27 95       	ror	r18
     aec:	0a 94       	dec	r0
     aee:	e2 f7       	brpl	.-8      	; 0xae8 <printIOStr+0x80>
     af0:	8c 01       	movw	r16, r24
     af2:	0f 5f       	subi	r16, 0xFF	; 255
     af4:	1f 4f       	sbci	r17, 0xFF	; 255
     af6:	23 2b       	or	r18, r19
     af8:	61 f0       	breq	.+24     	; 0xb12 <printIOStr+0xaa>
     afa:	4a e0       	ldi	r20, 0x0A	; 10
     afc:	be 01       	movw	r22, r28
     afe:	6b 5e       	subi	r22, 0xEB	; 235
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	c8 01       	movw	r24, r16
     b04:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
     b08:	bc 01       	movw	r22, r24
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	0e 94 13 1c 	call	0x3826	; 0x3826 <strcat>
     b12:	c8 01       	movw	r24, r16
     b14:	04 30       	cpi	r16, 0x04	; 4
     b16:	11 05       	cpc	r17, r1
     b18:	c1 f6       	brne	.-80     	; 0xaca <printIOStr+0x62>
	LCD_puts(buffer,20);
     b1a:	64 e1       	ldi	r22, 0x14	; 20
     b1c:	ce 01       	movw	r24, r28
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
	LCD_gotoXY(9,2);
     b24:	62 e0       	ldi	r22, 0x02	; 2
     b26:	89 e0       	ldi	r24, 0x09	; 9
     b28:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
	strcpy_P(buffer,DVX);strcat(buffer,":");	//ДВХ:
     b2c:	63 e7       	ldi	r22, 0x73	; 115
     b2e:	71 e0       	ldi	r23, 0x01	; 1
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	0e 94 03 1c 	call	0x3806	; 0x3806 <strcpy_P>
     b38:	66 ef       	ldi	r22, 0xF6	; 246
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	ce 01       	movw	r24, r28
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	0e 94 13 1c 	call	0x3826	; 0x3826 <strcat>
	if((*data & 0xF0) ==0) strcat_P(buffer,NET);	//"нет"
     b44:	f7 01       	movw	r30, r14
     b46:	80 81       	ld	r24, Z
     b48:	80 7f       	andi	r24, 0xF0	; 240
     b4a:	39 f4       	brne	.+14     	; 0xb5a <printIOStr+0xf2>
     b4c:	67 eb       	ldi	r22, 0xB7	; 183
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <strcat_P>
     b58:	2b c0       	rjmp	.+86     	; 0xbb0 <printIOStr+0x148>
     b5a:	04 e0       	ldi	r16, 0x04	; 4
     b5c:	10 e0       	ldi	r17, 0x00	; 0
	else for(i=4;i<8;i++) if( chkBit(*data,i) ) strcat(buffer,itoa(i-4+1,tmpStr,10));	//рисуем номера неисправных
     b5e:	cc 24       	eor	r12, r12
     b60:	c3 94       	inc	r12
     b62:	d1 2c       	mov	r13, r1
     b64:	f7 01       	movw	r30, r14
     b66:	80 81       	ld	r24, Z
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	96 01       	movw	r18, r12
     b6c:	00 2e       	mov	r0, r16
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <printIOStr+0x10c>
     b70:	22 0f       	add	r18, r18
     b72:	33 1f       	adc	r19, r19
     b74:	0a 94       	dec	r0
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <printIOStr+0x108>
     b78:	82 23       	and	r24, r18
     b7a:	93 23       	and	r25, r19
     b7c:	00 2e       	mov	r0, r16
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <printIOStr+0x11c>
     b80:	95 95       	asr	r25
     b82:	87 95       	ror	r24
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <printIOStr+0x118>
     b88:	89 2b       	or	r24, r25
     b8a:	69 f0       	breq	.+26     	; 0xba6 <printIOStr+0x13e>
     b8c:	4a e0       	ldi	r20, 0x0A	; 10
     b8e:	be 01       	movw	r22, r28
     b90:	6b 5e       	subi	r22, 0xEB	; 235
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
     b94:	c8 01       	movw	r24, r16
     b96:	03 97       	sbiw	r24, 0x03	; 3
     b98:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
     b9c:	bc 01       	movw	r22, r24
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	0e 94 13 1c 	call	0x3826	; 0x3826 <strcat>
     ba6:	0f 5f       	subi	r16, 0xFF	; 255
     ba8:	1f 4f       	sbci	r17, 0xFF	; 255
     baa:	08 30       	cpi	r16, 0x08	; 8
     bac:	11 05       	cpc	r17, r1
     bae:	d1 f6       	brne	.-76     	; 0xb64 <printIOStr+0xfc>
	LCD_puts(buffer,20);
     bb0:	64 e1       	ldi	r22, 0x14	; 20
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
}
     bba:	6b 96       	adiw	r28, 0x1b	; 27
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	cf 90       	pop	r12
     bd6:	08 95       	ret

00000bd8 <printMTZStr>:

static inline void printMTZStr(unsigned int MTZon,unsigned int MTZoff)
{
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	6b 97       	sbiw	r28, 0x1b	; 27
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	7c 01       	movw	r14, r24
     bf6:	8b 01       	movw	r16, r22
	char buffer[20];
	char tmpStr[7];
	//строка 2 "вкл.МТЗ"
	LCD_gotoXY(0,2);
     bf8:	62 e0       	ldi	r22, 0x02	; 2
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
	strcpy_P(buffer,VKL_MTZ);
     c00:	62 e8       	ldi	r22, 0x82	; 130
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	ce 01       	movw	r24, r28
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	0e 94 03 1c 	call	0x3806	; 0x3806 <strcpy_P>
	if(MTZon==0xFFFF)strcat_P(buffer,NET);
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	e8 16       	cp	r14, r24
     c10:	f8 06       	cpc	r15, r24
     c12:	19 f4       	brne	.+6      	; 0xc1a <printMTZStr+0x42>
     c14:	67 eb       	ldi	r22, 0xB7	; 183
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	0e c0       	rjmp	.+28     	; 0xc36 <printMTZStr+0x5e>
     c1a:	4a e0       	ldi	r20, 0x0A	; 10
     c1c:	be 01       	movw	r22, r28
     c1e:	6b 5e       	subi	r22, 0xEB	; 235
     c20:	7f 4f       	sbci	r23, 0xFF	; 255
     c22:	c7 01       	movw	r24, r14
     c24:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
	else {strcat(buffer,itoa(MTZon,tmpStr,10));strcat_P(buffer,MS);}
     c28:	bc 01       	movw	r22, r24
     c2a:	ce 01       	movw	r24, r28
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	0e 94 13 1c 	call	0x3826	; 0x3826 <strcat>
     c32:	65 e7       	ldi	r22, 0x75	; 117
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	ce 01       	movw	r24, r28
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <strcat_P>
	LCD_puts(buffer,20);
     c3e:	64 e1       	ldi	r22, 0x14	; 20
     c40:	ce 01       	movw	r24, r28
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>

	//строка 3 "откл.МТЗ"
	LCD_gotoXY(0,3);
     c48:	63 e0       	ldi	r22, 0x03	; 3
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
	strcpy_P(buffer,OTKL_MTZ);
     c50:	68 e7       	ldi	r22, 0x78	; 120
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	ce 01       	movw	r24, r28
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	0e 94 03 1c 	call	0x3806	; 0x3806 <strcpy_P>
	if(MTZoff==0xFFFF)strcat_P(buffer,NET);
     c5c:	0f 3f       	cpi	r16, 0xFF	; 255
     c5e:	8f ef       	ldi	r24, 0xFF	; 255
     c60:	18 07       	cpc	r17, r24
     c62:	19 f4       	brne	.+6      	; 0xc6a <printMTZStr+0x92>
     c64:	67 eb       	ldi	r22, 0xB7	; 183
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	0e c0       	rjmp	.+28     	; 0xc86 <printMTZStr+0xae>
     c6a:	4a e0       	ldi	r20, 0x0A	; 10
     c6c:	be 01       	movw	r22, r28
     c6e:	6b 5e       	subi	r22, 0xEB	; 235
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	c8 01       	movw	r24, r16
     c74:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
	else{strcat(buffer,itoa(MTZoff,tmpStr,10));strcat_P(buffer,MS);}
     c78:	bc 01       	movw	r22, r24
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	0e 94 13 1c 	call	0x3826	; 0x3826 <strcat>
     c82:	65 e7       	ldi	r22, 0x75	; 117
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	ce 01       	movw	r24, r28
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <strcat_P>
	LCD_puts(buffer,20);
     c8e:	64 e1       	ldi	r22, 0x14	; 20
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>

}
     c98:	6b 96       	adiw	r28, 0x1b	; 27
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	08 95       	ret

00000cb2 <printTimeStr.constprop.2>:
		}
	}
	return 0;
}

static inline void printTimeStr(volatile unsigned char *data, unsigned char x,unsigned char y)
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	64 97       	sbiw	r28, 0x14	; 20
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	fc 01       	movw	r30, r24
{
	char buffer[20];

	sprintf(buffer,"%02u.%02u.%02u  %02u:%02u:%02u",*data,*(data+1),*(data+2),*(data+3),*(data+4),*(data+5));
     ccc:	55 81       	ldd	r21, Z+5	; 0x05
     cce:	44 81       	ldd	r20, Z+4	; 0x04
     cd0:	33 81       	ldd	r19, Z+3	; 0x03
     cd2:	22 81       	ldd	r18, Z+2	; 0x02
     cd4:	91 81       	ldd	r25, Z+1	; 0x01
     cd6:	80 81       	ld	r24, Z
     cd8:	1f 92       	push	r1
     cda:	5f 93       	push	r21
     cdc:	1f 92       	push	r1
     cde:	4f 93       	push	r20
     ce0:	1f 92       	push	r1
     ce2:	3f 93       	push	r19
     ce4:	1f 92       	push	r1
     ce6:	2f 93       	push	r18
     ce8:	1f 92       	push	r1
     cea:	9f 93       	push	r25
     cec:	1f 92       	push	r1
     cee:	8f 93       	push	r24
     cf0:	88 ef       	ldi	r24, 0xF8	; 248
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	8e 01       	movw	r16, r28
     cfa:	0f 5f       	subi	r16, 0xFF	; 255
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	1f 93       	push	r17
     d00:	0f 93       	push	r16
     d02:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <sprintf>
	LCD_gotoXY(x,y);
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
	LCD_puts(buffer,20);
     d0e:	64 e1       	ldi	r22, 0x14	; 20
     d10:	c8 01       	movw	r24, r16
     d12:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
}
     d20:	64 96       	adiw	r28, 0x14	; 20
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	08 95       	ret

00000d36 <LCD_puts_P>:

void LCD_puts_P(const char *FlashLoc, char nBytes)
{
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	d6 2f       	mov	r29, r22

	for(unsigned char i=0; i<nBytes; i++)
     d40:	c0 e0       	ldi	r28, 0x00	; 0
     d42:	cd 17       	cp	r28, r29
     d44:	a9 f0       	breq	.+42     	; 0xd70 <LCD_puts_P+0x3a>
	{
		if(pgm_read_byte(&FlashLoc[i])==0)			//если дошли до конца строки
     d46:	fc 01       	movw	r30, r24
     d48:	24 91       	lpm	r18, Z
     d4a:	8c 01       	movw	r16, r24
     d4c:	0f 5f       	subi	r16, 0xFF	; 255
     d4e:	1f 4f       	sbci	r17, 0xFF	; 255
     d50:	21 11       	cpse	r18, r1
     d52:	07 c0       	rjmp	.+14     	; 0xd62 <LCD_puts_P+0x2c>
		{
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
     d54:	80 e2       	ldi	r24, 0x20	; 32
     d56:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_putchar>
     d5a:	cf 5f       	subi	r28, 0xFF	; 255
     d5c:	cd 17       	cp	r28, r29
     d5e:	d0 f3       	brcs	.-12     	; 0xd54 <LCD_puts_P+0x1e>
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <LCD_puts_P+0x3a>
			return;
		}
		else LCD_putchar(pgm_read_byte(&FlashLoc[i]));
     d62:	fc 01       	movw	r30, r24
     d64:	84 91       	lpm	r24, Z
     d66:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_putchar>
}

void LCD_puts_P(const char *FlashLoc, char nBytes)
{

	for(unsigned char i=0; i<nBytes; i++)
     d6a:	cf 5f       	subi	r28, 0xFF	; 255
     d6c:	c8 01       	movw	r24, r16
     d6e:	e9 cf       	rjmp	.-46     	; 0xd42 <LCD_puts_P+0xc>
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
			return;
		}
		else LCD_putchar(pgm_read_byte(&FlashLoc[i]));
	}
}
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	08 95       	ret

00000d7a <printTOUT>:
	return tmpKey;
}

static inline void printTOUT(void)
{
	LCD_gotoXY(0,2);LCD_puts_P(NET_SVYAZI,20);
     d7a:	62 e0       	ldi	r22, 0x02	; 2
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
     d82:	64 e1       	ldi	r22, 0x14	; 20
     d84:	8b eb       	ldi	r24, 0xBB	; 187
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <LCD_puts_P>

00000d8c <printMenuHeader>:
static void dvx3(void)
{
	printOut(7);
}
static inline void printMenuHeader(PGM_P name)
{
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	ec 01       	movw	r28, r24
	//прорисовываем заголовок "NAME:"
	LCD_clr();
     d92:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LCD_clr>
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
     d96:	ce 01       	movw	r24, r28
     d98:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__strlen_P>
	LCD_puts_P(name,strlen_P(name));
     d9c:	68 2f       	mov	r22, r24
     d9e:	ce 01       	movw	r24, r28
     da0:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
	LCD_putchar(0x3A);
     da4:	8a e3       	ldi	r24, 0x3A	; 58
}
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
static inline void printMenuHeader(PGM_P name)
{
	//прорисовываем заголовок "NAME:"
	LCD_clr();
	LCD_puts_P(name,strlen_P(name));
	LCD_putchar(0x3A);
     daa:	0c 94 1f 04 	jmp	0x83e	; 0x83e <LCD_putchar>

00000dae <SPI_init>:
#define DD_MOSI DDB5
#define DD_SCK  DDB7
#define DD_CS DDB4

/* Set MOSI and SCK and CS output, all others input */
DDRB |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     dae:	87 b3       	in	r24, 0x17	; 23
     db0:	80 6b       	ori	r24, 0xB0	; 176
     db2:	87 bb       	out	0x17, r24	; 23
//все выходы pullup
PORTB |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     db4:	88 b3       	in	r24, 0x18	; 24
     db6:	80 6b       	ori	r24, 0xB0	; 176
     db8:	88 bb       	out	0x18, r24	; 24
/* Enable SPI, Master, set clock rate fck/64 (250kHz) SCK в покое=hi, выборка по зад. фронту CPHA=1*/
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<CPOL)|(1<<CPHA);//
     dba:	8e e5       	ldi	r24, 0x5E	; 94
     dbc:	8d b9       	out	0x0d, r24	; 13
     dbe:	08 95       	ret

00000dc0 <SPI_transmit>:

unsigned char SPI_transmit(char cData)
{

/* Start transmission */
SPDR = cData;
     dc0:	8f b9       	out	0x0f, r24	; 15
SPI_timeout=S_TOUT;
     dc2:	88 ee       	ldi	r24, 0xE8	; 232
     dc4:	93 e0       	ldi	r25, 0x03	; 3
     dc6:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <SPI_timeout+0x1>
     dca:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <SPI_timeout>

/* Wait for transmission complete */
#warning НЕКОРРЕКТНАЯ ОТРАБОТКА ОШИБКИ (spi.h)

while(!(SPSR & (1<<SPIF))) if(SPI_timeout==0){CAN_ERR=SPI;return -1;}
     dce:	77 99       	sbic	0x0e, 7	; 14
     dd0:	0b c0       	rjmp	.+22     	; 0xde8 <SPI_transmit+0x28>
     dd2:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <SPI_timeout>
     dd6:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <SPI_timeout+0x1>
     dda:	89 2b       	or	r24, r25
     ddc:	c1 f7       	brne	.-16     	; 0xdce <SPI_transmit+0xe>
     dde:	86 e0       	ldi	r24, 0x06	; 6
     de0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	08 95       	ret

return SPDR;
     de8:	8f b1       	in	r24, 0x0f	; 15
}
     dea:	08 95       	ret

00000dec <CAN_getStatus>:
}

static unsigned char CAN_getStatus(void)
{
unsigned char data;
clrBit(CSPINPORT,CSPIN);
     dec:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0xA0);
     dee:	80 ea       	ldi	r24, 0xA0	; 160
     df0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
//SPI_transmit(0x00);
data=SPI_transmit(0x00);
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     dfa:	c4 9a       	sbi	0x18, 4	; 24
return data;
}
     dfc:	08 95       	ret

00000dfe <CAN_read>:
	setBit(CSPINPORT,CSPIN);
}
}

static unsigned char CAN_read(unsigned char numOfReg)
{
     dfe:	cf 93       	push	r28
     e00:	c8 2f       	mov	r28, r24
unsigned char data;

clrBit(CSPINPORT,CSPIN);
     e02:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x03);  //команда чтения
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(numOfReg);
     e0a:	8c 2f       	mov	r24, r28
     e0c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
data=SPI_transmit(0x00);
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     e16:	c4 9a       	sbi	0x18, 4	; 24
return data;
}
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <CAN_bitModify>:
SPI_transmit(data);
setBit(CSPINPORT,CSPIN);
}

static void CAN_bitModify(unsigned char numOfReg, unsigned char MASK, unsigned char DATA)
{
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	18 2f       	mov	r17, r24
     e24:	d6 2f       	mov	r29, r22
     e26:	c4 2f       	mov	r28, r20
clrBit(CSPINPORT,CSPIN);
     e28:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x05);//Команда модификации
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(numOfReg);
     e30:	81 2f       	mov	r24, r17
     e32:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(MASK);
     e36:	8d 2f       	mov	r24, r29
     e38:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(DATA);
     e3c:	8c 2f       	mov	r24, r28
     e3e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     e42:	c4 9a       	sbi	0x18, 4	; 24
}
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	08 95       	ret

00000e4c <CAN_write>:
setBit(CSPINPORT,CSPIN);
return data;
}

static void CAN_write(unsigned char numOfReg, unsigned char data)
{
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	d8 2f       	mov	r29, r24
     e52:	c6 2f       	mov	r28, r22
clrBit(CSPINPORT,CSPIN);
     e54:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);  //команда записи
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(numOfReg);
     e5c:	8d 2f       	mov	r24, r29
     e5e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(data);
     e62:	8c 2f       	mov	r24, r28
     e64:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     e68:	c4 9a       	sbi	0x18, 4	; 24
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <CANgetPosition>:

signed char CANgetPosition(void)
{
	signed char index;

	CAN_timeout=CAN_TOUT;
     e70:	88 ee       	ldi	r24, 0xE8	; 232
     e72:	93 e0       	ldi	r25, 0x03	; 3
     e74:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <CAN_timeout+0x1>
     e78:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <CAN_timeout>
	while(CANRXcounter==0)
     e7c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <CANRXcounter>
     e80:	81 11       	cpse	r24, r1
     e82:	0b c0       	rjmp	.+22     	; 0xe9a <CANgetPosition+0x2a>
	{
		if(CAN_timeout==0) {CAN_ERR=CANTOUT;return -1;};
     e84:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <CAN_timeout>
     e88:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <CAN_timeout+0x1>
     e8c:	89 2b       	or	r24, r25
     e8e:	b1 f7       	brne	.-20     	; 0xe7c <CANgetPosition+0xc>
     e90:	82 e0       	ldi	r24, 0x02	; 2
     e92:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	08 95       	ret
	}
	asm ("cli");
     e9a:	f8 94       	cli
	CANRXcounter--;
     e9c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <CANRXcounter>
     ea0:	81 50       	subi	r24, 0x01	; 1
     ea2:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <CANRXcounter>
	asm ("sei");
     ea6:	78 94       	sei
	index=CANRDindex;
     ea8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <CANRDindex>
	if(++CANRDindex == CAN_RX_BUFFER_SIZE)CANRDindex=0;
     eac:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <CANRDindex>
     eb0:	9f 5f       	subi	r25, 0xFF	; 255
     eb2:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <CANRDindex>
     eb6:	9a 30       	cpi	r25, 0x0A	; 10
     eb8:	11 f4       	brne	.+4      	; 0xebe <CANgetPosition+0x4e>
     eba:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <CANRDindex>
	return index;
}
     ebe:	08 95       	ret

00000ec0 <CAN_gets>:
	if(CAN_ERR)return -1;
	return 1;
}
//получить строку
char *CAN_gets(char *str,unsigned char length)
{
     ec0:	9f 92       	push	r9
     ec2:	af 92       	push	r10
     ec4:	bf 92       	push	r11
     ec6:	cf 92       	push	r12
     ec8:	df 92       	push	r13
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	d8 2f       	mov	r29, r24
     ed8:	c9 2f       	mov	r28, r25
     eda:	b6 2e       	mov	r11, r22
	unsigned char i=CANgetPosition(),j;
     edc:	0e 94 38 07 	call	0xe70	; 0xe70 <CANgetPosition>
	unsigned long int ID=CANRXbuf[i].ID;
     ee0:	9d e0       	ldi	r25, 0x0D	; 13
     ee2:	89 9f       	mul	r24, r25
     ee4:	f0 01       	movw	r30, r0
     ee6:	11 24       	eor	r1, r1
     ee8:	ea 50       	subi	r30, 0x0A	; 10
     eea:	fb 4f       	sbci	r31, 0xFB	; 251
     eec:	c0 80       	ld	r12, Z
     eee:	d1 80       	ldd	r13, Z+1	; 0x01
     ef0:	e2 80       	ldd	r14, Z+2	; 0x02
     ef2:	f3 80       	ldd	r15, Z+3	; 0x03
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
     ef4:	0d 2f       	mov	r16, r29
     ef6:	1c 2f       	mov	r17, r28
	{
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
     ef8:	9d e0       	ldi	r25, 0x0D	; 13
     efa:	a9 2e       	mov	r10, r25
     efc:	2d e0       	ldi	r18, 0x0D	; 13
     efe:	92 2e       	mov	r9, r18
	unsigned char i=CANgetPosition(),j;
	unsigned long int ID=CANRXbuf[i].ID;
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
     f00:	b1 10       	cpse	r11, r1
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <CAN_gets+0x4a>
			str+=CANRXbuf[i].dataLength;
			i=CANgetPosition();
			if(CAN_ERR) return NULL;
			if(CANRXbuf[i].ID != ID){CAN_ERR=CANID;return NULL;}//LCDsendChar('e')
		}
		else return tmp;
     f04:	8d 2f       	mov	r24, r29
     f06:	9c 2f       	mov	r25, r28
     f08:	41 c0       	rjmp	.+130    	; 0xf8c <CAN_gets+0xcc>
     f0a:	40 e0       	ldi	r20, 0x00	; 0
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
	{
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
     f0c:	a8 9e       	mul	r10, r24
     f0e:	f0 01       	movw	r30, r0
     f10:	11 24       	eor	r1, r1
     f12:	ea 50       	subi	r30, 0x0A	; 10
     f14:	fb 4f       	sbci	r31, 0xFB	; 251
     f16:	bf 01       	movw	r22, r30
     f18:	6c 5f       	subi	r22, 0xFC	; 252
     f1a:	7f 4f       	sbci	r23, 0xFF	; 255
     f1c:	db 01       	movw	r26, r22
     f1e:	8c 91       	ld	r24, X
     f20:	24 2f       	mov	r18, r20
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	48 17       	cp	r20, r24
     f26:	60 f4       	brcc	.+24     	; 0xf40 <CAN_gets+0x80>
     f28:	cf 01       	movw	r24, r30
     f2a:	82 0f       	add	r24, r18
     f2c:	93 1f       	adc	r25, r19
     f2e:	dc 01       	movw	r26, r24
     f30:	15 96       	adiw	r26, 0x05	; 5
     f32:	8c 91       	ld	r24, X
     f34:	20 0f       	add	r18, r16
     f36:	31 1f       	adc	r19, r17
     f38:	d9 01       	movw	r26, r18
     f3a:	8c 93       	st	X, r24
     f3c:	4f 5f       	subi	r20, 0xFF	; 255
     f3e:	ee cf       	rjmp	.-36     	; 0xf1c <CAN_gets+0x5c>
		if(str[j-1] !=0)	//последний принятый символ не \0
     f40:	20 0f       	add	r18, r16
     f42:	31 1f       	adc	r19, r17
     f44:	d9 01       	movw	r26, r18
     f46:	11 97       	sbiw	r26, 0x01	; 1
     f48:	8c 91       	ld	r24, X
     f4a:	88 23       	and	r24, r24
     f4c:	d9 f2       	breq	.-74     	; 0xf04 <CAN_gets+0x44>
		{
			str+=CANRXbuf[i].dataLength;
     f4e:	84 81       	ldd	r24, Z+4	; 0x04
     f50:	08 0f       	add	r16, r24
     f52:	11 1d       	adc	r17, r1
			i=CANgetPosition();
     f54:	0e 94 38 07 	call	0xe70	; 0xe70 <CANgetPosition>
			if(CAN_ERR) return NULL;
     f58:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <CAN_ERR>
     f5c:	91 11       	cpse	r25, r1
     f5e:	14 c0       	rjmp	.+40     	; 0xf88 <CAN_gets+0xc8>
			if(CANRXbuf[i].ID != ID){CAN_ERR=CANID;return NULL;}//LCDsendChar('e')
     f60:	98 9e       	mul	r9, r24
     f62:	f0 01       	movw	r30, r0
     f64:	11 24       	eor	r1, r1
     f66:	ea 50       	subi	r30, 0x0A	; 10
     f68:	fb 4f       	sbci	r31, 0xFB	; 251
     f6a:	40 81       	ld	r20, Z
     f6c:	51 81       	ldd	r21, Z+1	; 0x01
     f6e:	62 81       	ldd	r22, Z+2	; 0x02
     f70:	73 81       	ldd	r23, Z+3	; 0x03
     f72:	ba 94       	dec	r11
     f74:	c4 16       	cp	r12, r20
     f76:	d5 06       	cpc	r13, r21
     f78:	e6 06       	cpc	r14, r22
     f7a:	f7 06       	cpc	r15, r23
     f7c:	09 f2       	breq	.-126    	; 0xf00 <CAN_gets+0x40>
     f7e:	83 e0       	ldi	r24, 0x03	; 3
     f80:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <CAN_gets+0xcc>
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
		if(str[j-1] !=0)	//последний принятый символ не \0
		{
			str+=CANRXbuf[i].dataLength;
			i=CANgetPosition();
			if(CAN_ERR) return NULL;
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
		}
		else return tmp;
	}
	if(length==0){CAN_ERR=CANSTROVF;return NULL;}
	return tmp;
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	bf 90       	pop	r11
     f9e:	af 90       	pop	r10
     fa0:	9f 90       	pop	r9
     fa2:	08 95       	ret

00000fa4 <CAN_loadTXbuf>:
	CAN_ERR=0;
}


signed char CAN_loadTXbuf(unsigned long int ID, unsigned char dataLenght, unsigned char *data, unsigned char CAN_TX_MSG_SETTING)
{//ID==EID<28:11> SID<10:0>
     fa4:	af 92       	push	r10
     fa6:	bf 92       	push	r11
     fa8:	cf 92       	push	r12
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	6b 01       	movw	r12, r22
     fba:	7c 01       	movw	r14, r24
     fbc:	14 2f       	mov	r17, r20
     fbe:	59 01       	movw	r10, r18
#define EIDFLG  CAN_TX_MSG_SETTING & 0x08 //флаг расширенного идентификатора

unsigned char i,j;
unsigned char SIDL = 0;
unsigned char status=CAN_getStatus();
     fc0:	0e 94 f6 06 	call	0xdec	; 0xdec <CAN_getStatus>


//SID<2:0> == ID & 0x00000007
//EID<17:16> == (ID >> 27) & 0x00000003
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);
     fc4:	dc 2d       	mov	r29, r12
     fc6:	d2 95       	swap	r29
     fc8:	dd 0f       	add	r29, r29
     fca:	d0 7e       	andi	r29, 0xE0	; 224
     fcc:	90 2f       	mov	r25, r16
     fce:	98 70       	andi	r25, 0x08	; 8
     fd0:	d9 2b       	or	r29, r25
     fd2:	b7 01       	movw	r22, r14
     fd4:	a6 01       	movw	r20, r12
     fd6:	eb e1       	ldi	r30, 0x1B	; 27
     fd8:	76 95       	lsr	r23
     fda:	67 95       	ror	r22
     fdc:	57 95       	ror	r21
     fde:	47 95       	ror	r20
     fe0:	ea 95       	dec	r30
     fe2:	d1 f7       	brne	.-12     	; 0xfd8 <CAN_loadTXbuf+0x34>
     fe4:	43 70       	andi	r20, 0x03	; 3
     fe6:	d4 2b       	or	r29, r20


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
  {
  if( chkBit(status,(i*2)) )continue; //если установлен флаг TXREQ -значить буфер занят
     fe8:	86 ff       	sbrs	r24, 6
     fea:	0b c0       	rjmp	.+22     	; 0x1002 <CAN_loadTXbuf+0x5e>
     fec:	84 ff       	sbrs	r24, 4
     fee:	0b c0       	rjmp	.+22     	; 0x1006 <CAN_loadTXbuf+0x62>
     ff0:	82 fd       	sbrc	r24, 2
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <CAN_loadTXbuf+0x54>
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
     ff4:	c1 e0       	ldi	r28, 0x01	; 1
     ff6:	08 c0       	rjmp	.+16     	; 0x1008 <CAN_loadTXbuf+0x64>
  {
  if( chkBit(status,(i*2)) )continue; //если установлен флаг TXREQ -значить буфер занят
  else break;
  }

if(i==0) {CAN_ERR=CANBUFOVF;return -1;} //всё занято
     ff8:	85 e0       	ldi	r24, 0x05	; 5
     ffa:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	58 c0       	rjmp	.+176    	; 0x10b2 <CAN_loadTXbuf+0x10e>
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
    1002:	c3 e0       	ldi	r28, 0x03	; 3
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <CAN_loadTXbuf+0x64>
    1006:	c2 e0       	ldi	r28, 0x02	; 2
  }

if(i==0) {CAN_ERR=CANBUFOVF;return -1;} //всё занято
//в результате i-это номер свободного буфера с более высоким приоритетом

asm("cli");
    1008:	f8 94       	cli
clrBit(CSPINPORT,CSPIN);
    100a:	c4 98       	cbi	0x18, 4	; 24
//запись регистров командой write
SPI_transmit(0x02);                   	//Команда записи
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(i*0x10+0x20);             	//начало записи(TXBnCTRL)-регистр конфигурации
    1012:	8c 2f       	mov	r24, r28
    1014:	82 95       	swap	r24
    1016:	80 7f       	andi	r24, 0xF0	; 240
    1018:	80 5e       	subi	r24, 0xE0	; 224
    101a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(CAN_TX_MSG_SETTING & 0x03);//приоритет сообщения
    101e:	80 2f       	mov	r24, r16
    1020:	83 70       	andi	r24, 0x03	; 3
    1022:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
//запись ID
SPI_transmit((ID >> 3)  & 0x000000FF); 	//SIDH
    1026:	d7 01       	movw	r26, r14
    1028:	c6 01       	movw	r24, r12
    102a:	23 e0       	ldi	r18, 0x03	; 3
    102c:	b6 95       	lsr	r27
    102e:	a7 95       	ror	r26
    1030:	97 95       	ror	r25
    1032:	87 95       	ror	r24
    1034:	2a 95       	dec	r18
    1036:	d1 f7       	brne	.-12     	; 0x102c <CAN_loadTXbuf+0x88>
    1038:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(SIDL);
    103c:	8d 2f       	mov	r24, r29
    103e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
if(1/*EIDFLG*/)	//EID пишем палюбому(запись по регистрам идет подряд)
{
	SPI_transmit((ID >> 19) & 0x000000FF);	//EID
    1042:	d7 01       	movw	r26, r14
    1044:	c6 01       	movw	r24, r12
    1046:	33 e1       	ldi	r19, 0x13	; 19
    1048:	b6 95       	lsr	r27
    104a:	a7 95       	ror	r26
    104c:	97 95       	ror	r25
    104e:	87 95       	ror	r24
    1050:	3a 95       	dec	r19
    1052:	d1 f7       	brne	.-12     	; 0x1048 <CAN_loadTXbuf+0xa4>
    1054:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
	SPI_transmit((ID >> 11) & 0x000000FF);
    1058:	d7 01       	movw	r26, r14
    105a:	c6 01       	movw	r24, r12
    105c:	4b e0       	ldi	r20, 0x0B	; 11
    105e:	b6 95       	lsr	r27
    1060:	a7 95       	ror	r26
    1062:	97 95       	ror	r25
    1064:	87 95       	ror	r24
    1066:	4a 95       	dec	r20
    1068:	d1 f7       	brne	.-12     	; 0x105e <CAN_loadTXbuf+0xba>
    106a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
}

//запись количества байт в сообщении
SPI_transmit(dataLenght);
    106e:	81 2f       	mov	r24, r17
    1070:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
    1074:	75 01       	movw	r14, r10
//запись данных(не более 8 байт)
for(j=0;(j<dataLenght) && j<8;j++) SPI_transmit(*(data+j));
    1076:	d0 e0       	ldi	r29, 0x00	; 0
    1078:	d1 17       	cp	r29, r17
    107a:	49 f0       	breq	.+18     	; 0x108e <CAN_loadTXbuf+0xea>
    107c:	d8 30       	cpi	r29, 0x08	; 8
    107e:	39 f0       	breq	.+14     	; 0x108e <CAN_loadTXbuf+0xea>
    1080:	f7 01       	movw	r30, r14
    1082:	81 91       	ld	r24, Z+
    1084:	7f 01       	movw	r14, r30
    1086:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
    108a:	df 5f       	subi	r29, 0xFF	; 255
    108c:	f5 cf       	rjmp	.-22     	; 0x1078 <CAN_loadTXbuf+0xd4>
setBit(CSPINPORT,CSPIN);
    108e:	c4 9a       	sbi	0x18, 4	; 24

//автоматический запрос на передачу
if(CAN_TX_MSG_SETTING & 0x04) CAN_RTS(i-1);
    1090:	02 ff       	sbrs	r16, 2
    1092:	0d c0       	rjmp	.+26     	; 0x10ae <CAN_loadTXbuf+0x10a>

static void CAN_RTS(unsigned char numOfBuf) //request to send
{
if(numOfBuf < 3)
{
	clrBit(CSPINPORT,CSPIN);
    1094:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(0x80 | (1<<numOfBuf));
    1096:	2f ef       	ldi	r18, 0xFF	; 255
    1098:	2c 0f       	add	r18, r28
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <CAN_loadTXbuf+0xfe>
    10a0:	88 0f       	add	r24, r24
    10a2:	2a 95       	dec	r18
    10a4:	ea f7       	brpl	.-6      	; 0x10a0 <CAN_loadTXbuf+0xfc>
    10a6:	80 68       	ori	r24, 0x80	; 128
    10a8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
	setBit(CSPINPORT,CSPIN);
    10ac:	c4 9a       	sbi	0x18, 4	; 24
for(j=0;(j<dataLenght) && j<8;j++) SPI_transmit(*(data+j));
setBit(CSPINPORT,CSPIN);

//автоматический запрос на передачу
if(CAN_TX_MSG_SETTING & 0x04) CAN_RTS(i-1);
asm("sei");
    10ae:	78 94       	sei
return i; //если все ОК возвращаем номер буфера
    10b0:	8c 2f       	mov	r24, r28
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	df 90       	pop	r13
    10c0:	cf 90       	pop	r12
    10c2:	bf 90       	pop	r11
    10c4:	af 90       	pop	r10
    10c6:	08 95       	ret

000010c8 <CAN_puts>:
	return 1;
}

//отсыл строки
signed char CAN_puts(char *str, unsigned char length, unsigned long int ID)	//посылаем строку с /0 на конце
{
    10c8:	8f 92       	push	r8
    10ca:	9f 92       	push	r9
    10cc:	af 92       	push	r10
    10ce:	bf 92       	push	r11
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	7c 01       	movw	r14, r24
    10de:	c6 2f       	mov	r28, r22
    10e0:	49 01       	movw	r8, r18
    10e2:	5a 01       	movw	r10, r20
	for(unsigned char i=0;i<length/8;i++)
    10e4:	16 2f       	mov	r17, r22
    10e6:	16 95       	lsr	r17
    10e8:	16 95       	lsr	r17
    10ea:	16 95       	lsr	r17
    10ec:	d0 e0       	ldi	r29, 0x00	; 0
    10ee:	d1 17       	cp	r29, r17
    10f0:	91 f0       	breq	.+36     	; 0x1116 <CAN_puts+0x4e>
	{
		CAN_loadTXbuf(ID,8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME );//LCDsendChar+'0'& CAN_TX_NO_RTS
    10f2:	0f ef       	ldi	r16, 0xFF	; 255
    10f4:	97 01       	movw	r18, r14
    10f6:	48 e0       	ldi	r20, 0x08	; 8
    10f8:	c5 01       	movw	r24, r10
    10fa:	b4 01       	movw	r22, r8
    10fc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CAN_loadTXbuf>
		if(CAN_ERR)return -1;
    1100:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CAN_ERR>
    1104:	88 23       	and	r24, r24
    1106:	11 f0       	breq	.+4      	; 0x110c <CAN_puts+0x44>
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <CAN_puts+0x6a>
		str+=8;
    110c:	88 e0       	ldi	r24, 0x08	; 8
    110e:	e8 0e       	add	r14, r24
    1110:	f1 1c       	adc	r15, r1
}

//отсыл строки
signed char CAN_puts(char *str, unsigned char length, unsigned long int ID)	//посылаем строку с /0 на конце
{
	for(unsigned char i=0;i<length/8;i++)
    1112:	df 5f       	subi	r29, 0xFF	; 255
    1114:	ec cf       	rjmp	.-40     	; 0x10ee <CAN_puts+0x26>
	{
		CAN_loadTXbuf(ID,8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME );//LCDsendChar+'0'& CAN_TX_NO_RTS
		if(CAN_ERR)return -1;
		str+=8;
	}
	if(length%8)CAN_loadTXbuf(ID,length%8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME);
    1116:	4c 2f       	mov	r20, r28
    1118:	47 70       	andi	r20, 0x07	; 7
    111a:	31 f0       	breq	.+12     	; 0x1128 <CAN_puts+0x60>
    111c:	0f ef       	ldi	r16, 0xFF	; 255
    111e:	97 01       	movw	r18, r14
    1120:	c5 01       	movw	r24, r10
    1122:	b4 01       	movw	r22, r8
    1124:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CAN_loadTXbuf>
	if(CAN_ERR)return -1;
    1128:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CAN_ERR>
    112c:	81 11       	cpse	r24, r1
    112e:	ec cf       	rjmp	.-40     	; 0x1108 <CAN_puts+0x40>
	return 1;
    1130:	81 e0       	ldi	r24, 0x01	; 1
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	bf 90       	pop	r11
    1140:	af 90       	pop	r10
    1142:	9f 90       	pop	r9
    1144:	8f 90       	pop	r8
    1146:	08 95       	ret

00001148 <CAN_readRXbuf>:
asm("sei");
return i; //если все ОК возвращаем номер буфера
}

volatile unsigned char *CAN_readRXbuf(volatile unsigned long int *ID, volatile unsigned char *data, volatile unsigned char *dataLen, unsigned char *CAN_RX_MSG_FLAGS)
{
    1148:	2f 92       	push	r2
    114a:	3f 92       	push	r3
    114c:	4f 92       	push	r4
    114e:	5f 92       	push	r5
    1150:	6f 92       	push	r6
    1152:	7f 92       	push	r7
    1154:	8f 92       	push	r8
    1156:	9f 92       	push	r9
    1158:	af 92       	push	r10
    115a:	bf 92       	push	r11
    115c:	cf 92       	push	r12
    115e:	df 92       	push	r13
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	00 d0       	rcall	.+0      	; 0x116e <CAN_readRXbuf+0x26>
    116e:	00 d0       	rcall	.+0      	; 0x1170 <CAN_readRXbuf+0x28>
    1170:	1f 92       	push	r1
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	1c 01       	movw	r2, r24
    1178:	8b 01       	movw	r16, r22
    117a:	5d 83       	std	Y+5, r21	; 0x05
    117c:	4c 83       	std	Y+4, r20	; 0x04
    117e:	79 01       	movw	r14, r18
#define EID ( EID0 | EID8<<8 | (SIDL&0x03)<<16 )

//поиск заполненного буфера
for(i=0;i<2;i++)
  {
  if( CAN_getStatus() & (1<<i)  ) break;
    1180:	0e 94 f6 06 	call	0xdec	; 0xdec <CAN_getStatus>
    1184:	80 fd       	sbrc	r24, 0
    1186:	07 c0       	rjmp	.+14     	; 0x1196 <CAN_readRXbuf+0x4e>
    1188:	0e 94 f6 06 	call	0xdec	; 0xdec <CAN_getStatus>
    118c:	81 fd       	sbrc	r24, 1
    118e:	05 c0       	rjmp	.+10     	; 0x119a <CAN_readRXbuf+0x52>
  }
// i-содержит номер буфера
if(i==2)return 0;//если все буферы пусты возвращаем 0
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	91 c0       	rjmp	.+290    	; 0x12b8 <CAN_readRXbuf+0x170>

#define SID ( SIDL>>5 | SIDH<<3 )
#define EID ( EID0 | EID8<<8 | (SIDL&0x03)<<16 )

//поиск заполненного буфера
for(i=0;i<2;i++)
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	01 c0       	rjmp	.+2      	; 0x119c <CAN_readRXbuf+0x54>
    119a:	81 e0       	ldi	r24, 0x01	; 1
  if( CAN_getStatus() & (1<<i)  ) break;
  }
// i-содержит номер буфера
if(i==2)return 0;//если все буферы пусты возвращаем 0

clrBit(CSPINPORT,CSPIN);
    119c:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit( 0x90 | (i<<2) );// команда чтения с SIDH
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	80 69       	ori	r24, 0x90	; 144
    11aa:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SIDH = SPI_transmit(0x00);
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
    11b4:	88 2e       	mov	r8, r24
    11b6:	91 2c       	mov	r9, r1
    11b8:	a1 2c       	mov	r10, r1
    11ba:	b1 2c       	mov	r11, r1
SIDL = SPI_transmit(0x00);
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	48 2e       	mov	r4, r24
    11c6:	51 2c       	mov	r5, r1
    11c8:	61 2c       	mov	r6, r1
    11ca:	71 2c       	mov	r7, r1

EID8 = SPI_transmit(0x00);
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
    11d2:	8a 83       	std	Y+2, r24	; 0x02
EID0 = SPI_transmit(0x00);
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
    11da:	8b 83       	std	Y+3, r24	; 0x03
*dataLen = SPI_transmit(0x00);
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
    11e2:	ec 81       	ldd	r30, Y+4	; 0x04
    11e4:	fd 81       	ldd	r31, Y+5	; 0x05
    11e6:	80 83       	st	Z, r24
    11e8:	1d 82       	std	Y+5, r1	; 0x05
    11ea:	1c 82       	std	Y+4, r1	; 0x04
    11ec:	cc 80       	ldd	r12, Y+4	; 0x04
    11ee:	dd 80       	ldd	r13, Y+5	; 0x05
    11f0:	c0 0e       	add	r12, r16
    11f2:	d1 1e       	adc	r13, r17

for(i=0;i<8;i++) *(data+i) = SPI_transmit(0x00);
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
    11fa:	f6 01       	movw	r30, r12
    11fc:	80 83       	st	Z, r24
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	9d 81       	ldd	r25, Y+5	; 0x05
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	9d 83       	std	Y+5, r25	; 0x05
    1206:	8c 83       	std	Y+4, r24	; 0x04
    1208:	08 97       	sbiw	r24, 0x08	; 8
    120a:	81 f7       	brne	.-32     	; 0x11ec <CAN_readRXbuf+0xa4>
setBit(CSPINPORT,CSPIN);
    120c:	c4 9a       	sbi	0x18, 4	; 24

if((SIDL & 0x08) ==0) EID8=EID0=0;	//если идентификатор не расширенный обнуляем EID
    120e:	99 81       	ldd	r25, Y+1	; 0x01
    1210:	93 ff       	sbrs	r25, 3
    1212:	0b c0       	rjmp	.+22     	; 0x122a <CAN_readRXbuf+0xe2>
clrBit(CSPINPORT,CSPIN);
SPI_transmit( 0x90 | (i<<2) );// команда чтения с SIDH
SIDH = SPI_transmit(0x00);
SIDL = SPI_transmit(0x00);

EID8 = SPI_transmit(0x00);
    1214:	ea 81       	ldd	r30, Y+2	; 0x02
    1216:	4e 2f       	mov	r20, r30
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
EID0 = SPI_transmit(0x00);
    121e:	fb 81       	ldd	r31, Y+3	; 0x03
    1220:	8f 2f       	mov	r24, r31
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a0 e0       	ldi	r26, 0x00	; 0
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	06 c0       	rjmp	.+12     	; 0x1236 <CAN_readRXbuf+0xee>
*dataLen = SPI_transmit(0x00);

for(i=0;i<8;i++) *(data+i) = SPI_transmit(0x00);
setBit(CSPINPORT,CSPIN);

if((SIDL & 0x08) ==0) EID8=EID0=0;	//если идентификатор не расширенный обнуляем EID
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	dc 01       	movw	r26, r24
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	ba 01       	movw	r22, r20

*ID=0;
    1236:	f1 01       	movw	r30, r2
    1238:	10 82       	st	Z, r1
    123a:	11 82       	std	Z+1, r1	; 0x01
    123c:	12 82       	std	Z+2, r1	; 0x02
    123e:	13 82       	std	Z+3, r1	; 0x03
*ID= EID<<11 | SID;
    1240:	29 81       	ldd	r18, Y+1	; 0x01
    1242:	23 70       	andi	r18, 0x03	; 3
    1244:	a2 2b       	or	r26, r18
    1246:	76 2f       	mov	r23, r22
    1248:	65 2f       	mov	r22, r21
    124a:	54 2f       	mov	r21, r20
    124c:	44 27       	eor	r20, r20
    124e:	48 2b       	or	r20, r24
    1250:	59 2b       	or	r21, r25
    1252:	6a 2b       	or	r22, r26
    1254:	7b 2b       	or	r23, r27
    1256:	ab e0       	ldi	r26, 0x0B	; 11
    1258:	44 0f       	add	r20, r20
    125a:	55 1f       	adc	r21, r21
    125c:	66 1f       	adc	r22, r22
    125e:	77 1f       	adc	r23, r23
    1260:	aa 95       	dec	r26
    1262:	d1 f7       	brne	.-12     	; 0x1258 <CAN_readRXbuf+0x110>
    1264:	b5 e0       	ldi	r27, 0x05	; 5
    1266:	76 94       	lsr	r7
    1268:	67 94       	ror	r6
    126a:	57 94       	ror	r5
    126c:	47 94       	ror	r4
    126e:	ba 95       	dec	r27
    1270:	d1 f7       	brne	.-12     	; 0x1266 <CAN_readRXbuf+0x11e>
    1272:	83 e0       	ldi	r24, 0x03	; 3
    1274:	88 0c       	add	r8, r8
    1276:	99 1c       	adc	r9, r9
    1278:	aa 1c       	adc	r10, r10
    127a:	bb 1c       	adc	r11, r11
    127c:	8a 95       	dec	r24
    127e:	d1 f7       	brne	.-12     	; 0x1274 <CAN_readRXbuf+0x12c>
    1280:	84 28       	or	r8, r4
    1282:	95 28       	or	r9, r5
    1284:	a6 28       	or	r10, r6
    1286:	b7 28       	or	r11, r7
    1288:	48 29       	or	r20, r8
    128a:	59 29       	or	r21, r9
    128c:	6a 29       	or	r22, r10
    128e:	7b 29       	or	r23, r11
    1290:	40 83       	st	Z, r20
    1292:	51 83       	std	Z+1, r21	; 0x01
    1294:	62 83       	std	Z+2, r22	; 0x02
    1296:	73 83       	std	Z+3, r23	; 0x03

*CAN_RX_MSG_FLAGS=0;
    1298:	f7 01       	movw	r30, r14
    129a:	10 82       	st	Z, r1
*CAN_RX_MSG_FLAGS|=CAN_read(0x2D) & CAN_RX_OVF; //ошибка переполнения
    129c:	8d e2       	ldi	r24, 0x2D	; 45
    129e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <CAN_read>
    12a2:	80 7c       	andi	r24, 0xC0	; 192
    12a4:	f7 01       	movw	r30, r14
    12a6:	90 81       	ld	r25, Z
    12a8:	89 2b       	or	r24, r25
    12aa:	80 83       	st	Z, r24

if(*CAN_RX_MSG_FLAGS & CAN_RX_OVF );//PORTC |= 1<<3;

CAN_bitModify(0x2D,0xC0,0x00);            //сброс флага переполнения
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	60 ec       	ldi	r22, 0xC0	; 192
    12b0:	8d e2       	ldi	r24, 0x2D	; 45
    12b2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <CAN_bitModify>
return data;
    12b6:	c8 01       	movw	r24, r16
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	bf 90       	pop	r11
    12d4:	af 90       	pop	r10
    12d6:	9f 90       	pop	r9
    12d8:	8f 90       	pop	r8
    12da:	7f 90       	pop	r7
    12dc:	6f 90       	pop	r6
    12de:	5f 90       	pop	r5
    12e0:	4f 90       	pop	r4
    12e2:	3f 90       	pop	r3
    12e4:	2f 90       	pop	r2
    12e6:	08 95       	ret

000012e8 <CAN_readMessage>:



//чтение сообщения из "железного" буфера в программный
signed char CAN_readMessage(void)
{
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	1f 92       	push	r1
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
	unsigned char msg_flags=0;
    12f2:	19 82       	std	Y+1, r1	; 0x01

	CAN_readRXbuf(&CANRXbuf[CANRWindex].ID, CANRXbuf[CANRWindex].data, &CANRXbuf[CANRWindex].dataLength, &msg_flags);
    12f4:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <CANRWindex>
    12f8:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <CANRWindex>
    12fc:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <CANRWindex>
    1300:	8d e0       	ldi	r24, 0x0D	; 13
    1302:	84 9f       	mul	r24, r20
    1304:	a0 01       	movw	r20, r0
    1306:	11 24       	eor	r1, r1
    1308:	46 50       	subi	r20, 0x06	; 6
    130a:	5b 4f       	sbci	r21, 0xFB	; 251
    130c:	86 9f       	mul	r24, r22
    130e:	b0 01       	movw	r22, r0
    1310:	11 24       	eor	r1, r1
    1312:	65 50       	subi	r22, 0x05	; 5
    1314:	7b 4f       	sbci	r23, 0xFB	; 251
    1316:	89 9f       	mul	r24, r25
    1318:	c0 01       	movw	r24, r0
    131a:	11 24       	eor	r1, r1
    131c:	9e 01       	movw	r18, r28
    131e:	2f 5f       	subi	r18, 0xFF	; 255
    1320:	3f 4f       	sbci	r19, 0xFF	; 255
    1322:	8a 50       	subi	r24, 0x0A	; 10
    1324:	9b 4f       	sbci	r25, 0xFB	; 251
    1326:	0e 94 a4 08 	call	0x1148	; 0x1148 <CAN_readRXbuf>

	if(++CANRWindex==CAN_RX_BUFFER_SIZE)   CANRWindex=0;
    132a:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <CANRWindex>
    132e:	8f 5f       	subi	r24, 0xFF	; 255
    1330:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <CANRWindex>
    1334:	8a 30       	cpi	r24, 0x0A	; 10
    1336:	11 f4       	brne	.+4      	; 0x133c <CAN_readMessage+0x54>
    1338:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <CANRWindex>
	if((++CANRXcounter==CAN_RX_BUFFER_SIZE)) {CANRXcounter=0;CAN_ERR=CANBUFOVF;return -1;}	//переполнение программного буфера
    133c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <CANRXcounter>
    1340:	8f 5f       	subi	r24, 0xFF	; 255
    1342:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <CANRXcounter>
    1346:	8a 30       	cpi	r24, 0x0A	; 10
    1348:	19 f4       	brne	.+6      	; 0x1350 <CAN_readMessage+0x68>
    134a:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <CANRXcounter>
    134e:	03 c0       	rjmp	.+6      	; 0x1356 <CAN_readMessage+0x6e>
	if(msg_flags & CAN_RX_OVF){CAN_ERR=CANBUFOVF;return -1;}								//переполнение аппаратног буфера
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	80 7c       	andi	r24, 0xC0	; 192
    1354:	29 f0       	breq	.+10     	; 0x1360 <CAN_readMessage+0x78>
    1356:	85 e0       	ldi	r24, 0x05	; 5
    1358:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <CAN_readMessage+0x7a>
	return 1;
    1360:	81 e0       	ldi	r24, 0x01	; 1
}
    1362:	0f 90       	pop	r0
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	08 95       	ret

0000136a <CAN_setMask>:
CAN_bitModify(0x2D,0xC0,0x00);            //сброс флага переполнения
return data;
}

void CAN_setMask(unsigned char addrOfMask,unsigned long int MASK)
{//MASK==EID<28:11> SID<10:0>
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	d8 2f       	mov	r29, r24
    1378:	6a 01       	movw	r12, r20
    137a:	7b 01       	movw	r14, r22
unsigned char RXM_SIDL = ((MASK & 0x00000007) << 5) | ((MASK >> 27) & 0x00000003);
    137c:	db 01       	movw	r26, r22
    137e:	ca 01       	movw	r24, r20
    1380:	2b e1       	ldi	r18, 0x1B	; 27
    1382:	b6 95       	lsr	r27
    1384:	a7 95       	ror	r26
    1386:	97 95       	ror	r25
    1388:	87 95       	ror	r24
    138a:	2a 95       	dec	r18
    138c:	d1 f7       	brne	.-12     	; 0x1382 <CAN_setMask+0x18>
    138e:	c8 2f       	mov	r28, r24
    1390:	c3 70       	andi	r28, 0x03	; 3
    1392:	84 2f       	mov	r24, r20
    1394:	82 95       	swap	r24
    1396:	88 0f       	add	r24, r24
    1398:	80 7e       	andi	r24, 0xE0	; 224
    139a:	c8 2b       	or	r28, r24
//unsigned char i=0;

//if(addrOfMask>0x24)return;

clrBit(CSPINPORT,CSPIN);
    139c:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);        //команда записи
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(addrOfMask);   //начальная ячейка
    13a4:	8d 2f       	mov	r24, r29
    13a6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit((MASK >> 3)  & 0x000000FF);
    13aa:	d7 01       	movw	r26, r14
    13ac:	c6 01       	movw	r24, r12
    13ae:	33 e0       	ldi	r19, 0x03	; 3
    13b0:	b6 95       	lsr	r27
    13b2:	a7 95       	ror	r26
    13b4:	97 95       	ror	r25
    13b6:	87 95       	ror	r24
    13b8:	3a 95       	dec	r19
    13ba:	d1 f7       	brne	.-12     	; 0x13b0 <CAN_setMask+0x46>
    13bc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(RXM_SIDL);
    13c0:	8c 2f       	mov	r24, r28
    13c2:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit((MASK >> 19) & 0x000000FF);
    13c6:	d7 01       	movw	r26, r14
    13c8:	c6 01       	movw	r24, r12
    13ca:	43 e1       	ldi	r20, 0x13	; 19
    13cc:	b6 95       	lsr	r27
    13ce:	a7 95       	ror	r26
    13d0:	97 95       	ror	r25
    13d2:	87 95       	ror	r24
    13d4:	4a 95       	dec	r20
    13d6:	d1 f7       	brne	.-12     	; 0x13cc <CAN_setMask+0x62>
    13d8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit((MASK >> 11) & 0x000000FF);
    13dc:	d7 01       	movw	r26, r14
    13de:	c6 01       	movw	r24, r12
    13e0:	5b e0       	ldi	r21, 0x0B	; 11
    13e2:	b6 95       	lsr	r27
    13e4:	a7 95       	ror	r26
    13e6:	97 95       	ror	r25
    13e8:	87 95       	ror	r24
    13ea:	5a 95       	dec	r21
    13ec:	d1 f7       	brne	.-12     	; 0x13e2 <CAN_setMask+0x78>
    13ee:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    13f2:	c4 9a       	sbi	0x18, 4	; 24
}
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	df 90       	pop	r13
    13fe:	cf 90       	pop	r12
    1400:	08 95       	ret

00001402 <CAN_setFilter>:

void CAN_setFilter(unsigned char addrOfFilter, unsigned long int FILTER, unsigned char CAN_TYPE_FRAME)
{//FILTER==EID<28:11> SID<10:0>
    1402:	cf 92       	push	r12
    1404:	df 92       	push	r13
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	d8 2f       	mov	r29, r24
    1410:	6a 01       	movw	r12, r20
    1412:	7b 01       	movw	r14, r22
unsigned char RXF_SIDL = ((FILTER & 0x00000007) << 5) | ((FILTER >> 27) & 0x00000003) | (CAN_TYPE_FRAME & 0x08);
    1414:	c4 2f       	mov	r28, r20
    1416:	c2 95       	swap	r28
    1418:	cc 0f       	add	r28, r28
    141a:	c0 7e       	andi	r28, 0xE0	; 224
    141c:	28 70       	andi	r18, 0x08	; 8
    141e:	c2 2b       	or	r28, r18
    1420:	8b e1       	ldi	r24, 0x1B	; 27
    1422:	76 95       	lsr	r23
    1424:	67 95       	ror	r22
    1426:	57 95       	ror	r21
    1428:	47 95       	ror	r20
    142a:	8a 95       	dec	r24
    142c:	d1 f7       	brne	.-12     	; 0x1422 <CAN_setFilter+0x20>
    142e:	43 70       	andi	r20, 0x03	; 3
    1430:	c4 2b       	or	r28, r20
//unsigned char i=0;

//if(addrOfFilter>0x18)return;

clrBit(CSPINPORT,CSPIN);
    1432:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);        //команда записи
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(addrOfFilter); //начальная ячейка
    143a:	8d 2f       	mov	r24, r29
    143c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit((FILTER >> 3)  & 0x000000FF);  //RXF_SIDH
    1440:	d7 01       	movw	r26, r14
    1442:	c6 01       	movw	r24, r12
    1444:	23 e0       	ldi	r18, 0x03	; 3
    1446:	b6 95       	lsr	r27
    1448:	a7 95       	ror	r26
    144a:	97 95       	ror	r25
    144c:	87 95       	ror	r24
    144e:	2a 95       	dec	r18
    1450:	d1 f7       	brne	.-12     	; 0x1446 <CAN_setFilter+0x44>
    1452:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit(RXF_SIDL);
    1456:	8c 2f       	mov	r24, r28
    1458:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit((FILTER >> 19) & 0x000000FF);  //RXF_EID8
    145c:	d7 01       	movw	r26, r14
    145e:	c6 01       	movw	r24, r12
    1460:	33 e1       	ldi	r19, 0x13	; 19
    1462:	b6 95       	lsr	r27
    1464:	a7 95       	ror	r26
    1466:	97 95       	ror	r25
    1468:	87 95       	ror	r24
    146a:	3a 95       	dec	r19
    146c:	d1 f7       	brne	.-12     	; 0x1462 <CAN_setFilter+0x60>
    146e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
SPI_transmit((FILTER >> 11) & 0x000000FF);  //RXF_EID0
    1472:	d7 01       	movw	r26, r14
    1474:	c6 01       	movw	r24, r12
    1476:	4b e0       	ldi	r20, 0x0B	; 11
    1478:	b6 95       	lsr	r27
    147a:	a7 95       	ror	r26
    147c:	97 95       	ror	r25
    147e:	87 95       	ror	r24
    1480:	4a 95       	dec	r20
    1482:	d1 f7       	brne	.-12     	; 0x1478 <CAN_setFilter+0x76>
    1484:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    1488:	c4 9a       	sbi	0x18, 4	; 24
}
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	df 90       	pop	r13
    1494:	cf 90       	pop	r12
    1496:	08 95       	ret

00001498 <interrupt_init>:


void interrupt_init(void)
{
	//���� ��� ���������� �� CAN
	DDRD &= ~(1<<DDD2);	//PORTD.2 ����
    1498:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= 1<<DDD2;	//pull up
    149a:	92 9a       	sbi	0x12, 2	; 18

	MCUCR &= 0xFC;	//���������� �� ������� ������
    149c:	85 b7       	in	r24, 0x35	; 53
    149e:	8c 7f       	andi	r24, 0xFC	; 252
    14a0:	85 bf       	out	0x35, r24	; 53
	GICR |= 0x40;	//INT0 ���
    14a2:	8b b7       	in	r24, 0x3b	; 59
    14a4:	80 64       	ori	r24, 0x40	; 64
    14a6:	8b bf       	out	0x3b, r24	; 59
    14a8:	08 95       	ret

000014aa <timers_init>:
	// Input Capture on Falling Edge
	// Timer 1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=0x00;
    14aa:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x0A; 	// Clock value: 2000 kHz
    14ac:	8a e0       	ldi	r24, 0x0A	; 10
    14ae:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
    14b0:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
    14b2:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
    14b4:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
    14b6:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x07;	//���������� 1 ��
    14b8:	87 e0       	ldi	r24, 0x07	; 7
    14ba:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0xD0;
    14bc:	80 ed       	ldi	r24, 0xD0	; 208
    14be:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;	//
    14c0:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
    14c2:	18 bc       	out	0x28, r1	; 40

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK |= 1<<OCIE1A;// | 1<<OCIE1B;
    14c4:	89 b7       	in	r24, 0x39	; 57
    14c6:	80 61       	ori	r24, 0x10	; 16
    14c8:	89 bf       	out	0x39, r24	; 57
    14ca:	08 95       	ret

000014cc <CAN_init>:
}

signed char CAN_init(unsigned char mode)
  {
    14cc:	cf 93       	push	r28
    14ce:	c8 2f       	mov	r28, r24
  signed char result;

  SPI_init();
    14d0:	0e 94 d7 06 	call	0xdae	; 0xdae <SPI_init>
  //��������� ����������
  //DDRB &= ~(1<<2);	//PORTB.2 ����
  //PORTB |= 1<<2;		//pull up
  //GICR=0x00;	//���������� �� ������� ������

  CSPINDDR |= 1<<CSPIN; 	//��� CS �����
    14d4:	bc 9a       	sbi	0x17, 4	; 23
  CSPINPORT |= 1<<CSPIN;	// Hi-level
    14d6:	c4 9a       	sbi	0x18, 4	; 24

static void CAN_reset(void)
{
clrBit(CSPINPORT,CSPIN);
    14d8:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0xC0);
    14da:	80 ec       	ldi	r24, 0xC0	; 192
    14dc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    14e0:	c4 9a       	sbi	0x18, 4	; 24

  CAN_reset();

  //��������� �������� (125 kib/s)
    CAN_bitModify(CNF2,0x80,0x80); //���������� ���������� ���������������� PHSEG2 (BTLMODE==1)
    14e2:	40 e8       	ldi	r20, 0x80	; 128
    14e4:	60 e8       	ldi	r22, 0x80	; 128
    14e6:	89 e2       	ldi	r24, 0x29	; 41
    14e8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <CAN_bitModify>
    CAN_write(CNF1,0x05);// SJW==1Tq, BRP==6;
    14ec:	65 e0       	ldi	r22, 0x05	; 5
    14ee:	8a e2       	ldi	r24, 0x2A	; 42
    14f0:	0e 94 26 07 	call	0xe4c	; 0xe4c <CAN_write>
    CAN_write(CNF2,0x89);// BTLMODE==1,SAM==0,PRSEG2==2Tq,PHSEG1==2Tq ;
    14f4:	69 e8       	ldi	r22, 0x89	; 137
    14f6:	89 e2       	ldi	r24, 0x29	; 41
    14f8:	0e 94 26 07 	call	0xe4c	; 0xe4c <CAN_write>
    CAN_write(CNF3,0x02);// PHSEG2==3Tq ;
    14fc:	62 e0       	ldi	r22, 0x02	; 2
    14fe:	88 e2       	ldi	r24, 0x28	; 40
    1500:	0e 94 26 07 	call	0xe4c	; 0xe4c <CAN_write>
  //��������� ������� 5 ��� SID
  CAN_bitModify(RXB1CTRL,0b01100111,0b00100101);
  #endif

  //��������� ���������� �� ������ ����� �������
  CAN_bitModify(CANINTE,0x03,0x03);
    1504:	43 e0       	ldi	r20, 0x03	; 3
    1506:	63 e0       	ldi	r22, 0x03	; 3
    1508:	8b e2       	ldi	r24, 0x2B	; 43
    150a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <CAN_bitModify>
return (CAN_read(CANSTAT) & 0xE0);
}

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0
    150e:	4c 2f       	mov	r20, r28
    1510:	6f ef       	ldi	r22, 0xFF	; 255
    1512:	8f e0       	ldi	r24, 0x0F	; 15
    1514:	0e 94 0e 07 	call	0xe1c	; 0xe1c <CAN_bitModify>
return data;
}

static unsigned char CAN_getOpMode(void)
{
return (CAN_read(CANSTAT) & 0xE0);
    1518:	8e e0       	ldi	r24, 0x0E	; 14
    151a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <CAN_read>

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0

if( (CAN_getOpMode() )!=CAN_MODE ) return -1;
    151e:	80 7e       	andi	r24, 0xE0	; 224
    1520:	c8 13       	cpse	r28, r24
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <CAN_init+0x5c>
else return 1;//
    1524:	c1 e0       	ldi	r28, 0x01	; 1
    1526:	01 c0       	rjmp	.+2      	; 0x152a <CAN_init+0x5e>

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0

if( (CAN_getOpMode() )!=CAN_MODE ) return -1;
    1528:	cf ef       	ldi	r28, 0xFF	; 255
//  will not occur and the new message will be moved into
//  RXB1, regardless of the acceptance criteria of RXB1.


  //set rollover-mode
  CAN_bitModify(RXB0CTRL,0x04,0x04);
    152a:	44 e0       	ldi	r20, 0x04	; 4
    152c:	64 e0       	ldi	r22, 0x04	; 4
    152e:	80 e6       	ldi	r24, 0x60	; 96
    1530:	0e 94 0e 07 	call	0xe1c	; 0xe1c <CAN_bitModify>

  //set one-shot-mode
  //CAN_bitModify(CANCTRL,0x08,0x08);

  return result;
  }
    1534:	8c 2f       	mov	r24, r28
    1536:	cf 91       	pop	r28
    1538:	08 95       	ret

0000153a <bki_init>:

void bki_init(void)
{
    153a:	cf 92       	push	r12
    153c:	df 92       	push	r13
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	cf 93       	push	r28
	asm("cli");
    1544:	f8 94       	cli
	//������������� ����������
	DDRC &= ~((1<<7) | (1<<6) | (1<<5));//�����
    1546:	84 b3       	in	r24, 0x14	; 20
    1548:	8f 71       	andi	r24, 0x1F	; 31
    154a:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<7) | (1<<6) | (1<<5);	//Pull Up
    154c:	85 b3       	in	r24, 0x15	; 21
    154e:	80 6e       	ori	r24, 0xE0	; 224
    1550:	85 bb       	out	0x15, r24	; 21
	DDRD &= ~((1<<5) | (1<<4) | (1<<3));//�����
    1552:	81 b3       	in	r24, 0x11	; 17
    1554:	87 7c       	andi	r24, 0xC7	; 199
    1556:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<5) | (1<<4) | (1<<3);	//Pull Up
    1558:	82 b3       	in	r24, 0x12	; 18
    155a:	88 63       	ori	r24, 0x38	; 56
    155c:	82 bb       	out	0x12, r24	; 18
	DDRA |= (1<<BEEP);					//�������
    155e:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1<<BEEP);
    1560:	dc 98       	cbi	0x1b, 4	; 27
	DDRA |= 1<<5;						//��� ����������
    1562:	d5 9a       	sbi	0x1a, 5	; 26
	PORTA |= 1<<5;
    1564:	dd 9a       	sbi	0x1b, 5	; 27
	DDRA |= (1<<OUT1) | (1<<OUT2) | (1<<OUT3) | (1<<OUT4);	//����
    1566:	8a b3       	in	r24, 0x1a	; 26
    1568:	8f 60       	ori	r24, 0x0F	; 15
    156a:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<OUT1) | (1<<OUT2) | (1<<OUT3) | (1<<OUT4);	//��������
    156c:	8b b3       	in	r24, 0x1b	; 27
    156e:	8f 60       	ori	r24, 0x0F	; 15
    1570:	8b bb       	out	0x1b, r24	; 27

	//������������� LCD
	LCD_init();
    1572:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_init>
	LCD_visible();
    1576:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <LCD_visible>
	LCD_clr();
    157a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LCD_clr>

	//����
	TWI_init();
    157e:	0e 94 81 01 	call	0x302	; 0x302 <TWI_init>
	rtc_get(&rtc);
    1582:	80 ef       	ldi	r24, 0xF0	; 240
    1584:	94 e0       	ldi	r25, 0x04	; 4
    1586:	0e 94 b4 02 	call	0x568	; 0x568 <rtc_get>
	if(rtc_check()<0){ERROR=RTC;/*return;*/}
    158a:	0e 94 2c 03 	call	0x658	; 0x658 <rtc_check>
    158e:	87 ff       	sbrs	r24, 7
    1590:	03 c0       	rjmp	.+6      	; 0x1598 <bki_init+0x5e>
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>

	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <eeprom_read_dword>
    15a0:	6b 01       	movw	r12, r22
    15a2:	7c 01       	movw	r14, r24
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    15ac:	c8 2f       	mov	r28, r24
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    15b6:	a7 01       	movw	r20, r14
    15b8:	96 01       	movw	r18, r12
    15ba:	6c 2f       	mov	r22, r28
    15bc:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <MODB_init>

UCSRB |= 1<<RXCIE;	//���������� UARTRX
    15c0:	57 9a       	sbi	0x0a, 7	; 10

	interrupt_init();
    15c2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <interrupt_init>
	timers_init();
    15c6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <timers_init>
	asm("sei");
    15ca:	78 94       	sei
    15cc:	2f ef       	ldi	r18, 0xFF	; 255
    15ce:	89 e6       	ldi	r24, 0x69	; 105
    15d0:	98 e1       	ldi	r25, 0x18	; 24
    15d2:	21 50       	subi	r18, 0x01	; 1
    15d4:	80 40       	sbci	r24, 0x00	; 0
    15d6:	90 40       	sbci	r25, 0x00	; 0
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <bki_init+0x98>
    15da:	00 c0       	rjmp	.+0      	; 0x15dc <bki_init+0xa2>
    15dc:	00 00       	nop

	_delay_ms(500);
	if(CAN_init(CAN_MODE_NORMAL)<1){ERROR=CAN;return;}
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <CAN_init>
    15e4:	18 16       	cp	r1, r24
    15e6:	1c f0       	brlt	.+6      	; 0x15ee <bki_init+0xb4>
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>

//	_
//_delay_ms(500);


}
    15ee:	cf 91       	pop	r28
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	08 95       	ret

000015fa <ping>:
static inline signed char checkTOUT(unsigned char addr);
signed char aks_for_logic(unsigned char addr);


void ping(void)
{
    15fa:	0f 93       	push	r16
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	27 97       	sbiw	r28, 0x07	; 7
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char data[7];

	for(unsigned char i=1;i<MAXQDEV;i++) inSysBDZ[i].flags=1<<FLT;	//перед посылкой команды обнуляем все флаги.Установленный флаг INL будет говорить о том,что ответ принят
    1614:	39 e0       	ldi	r19, 0x09	; 9
    1616:	22 e0       	ldi	r18, 0x02	; 2
    1618:	38 9f       	mul	r19, r24
    161a:	f0 01       	movw	r30, r0
    161c:	39 9f       	mul	r19, r25
    161e:	f0 0d       	add	r31, r0
    1620:	11 24       	eor	r1, r1
    1622:	ef 59       	subi	r30, 0x9F	; 159
    1624:	fe 4f       	sbci	r31, 0xFE	; 254
    1626:	20 87       	std	Z+8, r18	; 0x08
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	83 36       	cpi	r24, 0x63	; 99
    162c:	91 05       	cpc	r25, r1
    162e:	a1 f7       	brne	.-24     	; 0x1618 <ping+0x1e>
	data[0]=PING;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	89 83       	std	Y+1, r24	; 0x01
	//синхронизация времени для БДЗ
	data[1]=rtc.day;
    1634:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <rtc+0x2>
    1638:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=rtc.month;
    163a:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <rtc+0x1>
    163e:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=rtc.year;
    1640:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <rtc>
    1644:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=rtc.hours;
    1646:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <rtc+0x3>
    164a:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=rtc.minutes;
    164c:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <rtc+0x4>
    1650:	8e 83       	std	Y+6, r24	; 0x06
	data[6]=rtc.seconds;
    1652:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <rtc+0x5>
    1656:	8f 83       	std	Y+7, r24	; 0x07

	CAN_loadTXbuf(0,7,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    1658:	07 ef       	ldi	r16, 0xF7	; 247
    165a:	9e 01       	movw	r18, r28
    165c:	2f 5f       	subi	r18, 0xFF	; 255
    165e:	3f 4f       	sbci	r19, 0xFF	; 255
    1660:	47 e0       	ldi	r20, 0x07	; 7
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	cb 01       	movw	r24, r22
    1668:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CAN_loadTXbuf>
}
    166c:	27 96       	adiw	r28, 0x07	; 7
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	0f 91       	pop	r16
    167e:	08 95       	ret

00001680 <scansys>:


}

static void scansys(void)
{
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	00 d0       	rcall	.+0      	; 0x168e <scansys+0xe>
    168e:	00 d0       	rcall	.+0      	; 0x1690 <scansys+0x10>
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
	unsigned char i,j=0;
	char tmpStr[4];

	sys_state |= 1<<SCAN;
    1694:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    1698:	80 61       	ori	r24, 0x10	; 16
    169a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <sys_state>
    169e:	01 e0       	ldi	r16, 0x01	; 1
    16a0:	10 e0       	ldi	r17, 0x00	; 0
	for(i=1;i<MAXQDEV;i++) {eeprom_write_byte(&inSysBDZaddr[i],0);inSysBDZ[i].data[7]=0;}
    16a2:	99 e0       	ldi	r25, 0x09	; 9
    16a4:	f9 2e       	mov	r15, r25
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	c8 01       	movw	r24, r16
    16aa:	87 5f       	subi	r24, 0xF7	; 247
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <eeprom_write_byte>
    16b2:	f0 9e       	mul	r15, r16
    16b4:	f0 01       	movw	r30, r0
    16b6:	f1 9e       	mul	r15, r17
    16b8:	f0 0d       	add	r31, r0
    16ba:	11 24       	eor	r1, r1
    16bc:	ef 59       	subi	r30, 0x9F	; 159
    16be:	fe 4f       	sbci	r31, 0xFE	; 254
    16c0:	17 82       	std	Z+7, r1	; 0x07
    16c2:	0f 5f       	subi	r16, 0xFF	; 255
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	03 36       	cpi	r16, 0x63	; 99
    16c8:	11 05       	cpc	r17, r1
    16ca:	69 f7       	brne	.-38     	; 0x16a6 <scansys+0x26>
	while(!eeprom_is_ready());
    16cc:	e1 99       	sbic	0x1c, 1	; 28
    16ce:	fe cf       	rjmp	.-4      	; 0x16cc <scansys+0x4c>
	ping();
    16d0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ping>
    16d4:	2f ef       	ldi	r18, 0xFF	; 255
    16d6:	81 ee       	ldi	r24, 0xE1	; 225
    16d8:	94 e0       	ldi	r25, 0x04	; 4
    16da:	21 50       	subi	r18, 0x01	; 1
    16dc:	80 40       	sbci	r24, 0x00	; 0
    16de:	90 40       	sbci	r25, 0x00	; 0
    16e0:	e1 f7       	brne	.-8      	; 0x16da <scansys+0x5a>
    16e2:	00 c0       	rjmp	.+0      	; 0x16e4 <scansys+0x64>
    16e4:	00 00       	nop
	_delay_ms(100);
	LCD_clr();
    16e6:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LCD_clr>
	LCD_puts_P(SCANIROVANIE,12);
    16ea:	6c e0       	ldi	r22, 0x0C	; 12
    16ec:	86 e5       	ldi	r24, 0x56	; 86
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
    16f4:	18 e0       	ldi	r17, 0x08	; 8
	for(i=0;i<8;i++){LCD_putchar(0x2E);_delay_ms(500);}
    16f6:	8e e2       	ldi	r24, 0x2E	; 46
    16f8:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_putchar>
    16fc:	2f ef       	ldi	r18, 0xFF	; 255
    16fe:	89 e6       	ldi	r24, 0x69	; 105
    1700:	98 e1       	ldi	r25, 0x18	; 24
    1702:	21 50       	subi	r18, 0x01	; 1
    1704:	80 40       	sbci	r24, 0x00	; 0
    1706:	90 40       	sbci	r25, 0x00	; 0
    1708:	e1 f7       	brne	.-8      	; 0x1702 <scansys+0x82>
    170a:	00 c0       	rjmp	.+0      	; 0x170c <scansys+0x8c>
    170c:	00 00       	nop
    170e:	11 50       	subi	r17, 0x01	; 1
    1710:	91 f7       	brne	.-28     	; 0x16f6 <scansys+0x76>

	sys_state =0;
    1712:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sys_state>
    1716:	01 e0       	ldi	r16, 0x01	; 1
    1718:	10 e0       	ldi	r17, 0x00	; 0

}

static void scansys(void)
{
	unsigned char i,j=0;
    171a:	f1 2c       	mov	r15, r1
	LCD_clr();
	LCD_puts_P(SCANIROVANIE,12);
	for(i=0;i<8;i++){LCD_putchar(0x2E);_delay_ms(500);}

	sys_state =0;
	for(i=1;i<MAXQDEV;i++) if(inSysBDZ[i].data[7] == i) {writeID(i);j++;}
    171c:	89 e0       	ldi	r24, 0x09	; 9
    171e:	e8 2e       	mov	r14, r24
    1720:	e0 9e       	mul	r14, r16
    1722:	f0 01       	movw	r30, r0
    1724:	e1 9e       	mul	r14, r17
    1726:	f0 0d       	add	r31, r0
    1728:	11 24       	eor	r1, r1
    172a:	ef 59       	subi	r30, 0x9F	; 159
    172c:	fe 4f       	sbci	r31, 0xFE	; 254
    172e:	67 81       	ldd	r22, Z+7	; 0x07
    1730:	60 13       	cpse	r22, r16
    1732:	06 c0       	rjmp	.+12     	; 0x1740 <scansys+0xc0>
    1734:	c8 01       	movw	r24, r16
    1736:	87 5f       	subi	r24, 0xF7	; 247
    1738:	9f 4f       	sbci	r25, 0xFF	; 255
    173a:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <eeprom_write_byte>
    173e:	f3 94       	inc	r15
    1740:	0f 5f       	subi	r16, 0xFF	; 255
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	03 36       	cpi	r16, 0x63	; 99
    1746:	11 05       	cpc	r17, r1
    1748:	59 f7       	brne	.-42     	; 0x1720 <scansys+0xa0>


	LCD_gotoXY(0,2);
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
	LCD_puts_P(OBNARUZHENO,16);
    1752:	60 e1       	ldi	r22, 0x10	; 16
    1754:	83 e9       	ldi	r24, 0x93	; 147
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
    175c:	4a e0       	ldi	r20, 0x0A	; 10
    175e:	be 01       	movw	r22, r28
    1760:	6f 5f       	subi	r22, 0xFF	; 255
    1762:	7f 4f       	sbci	r23, 0xFF	; 255
    1764:	8f 2d       	mov	r24, r15
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
	LCD_puts(itoa(j,tmpStr,10),3);
    176c:	63 e0       	ldi	r22, 0x03	; 3
    176e:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
	ping();
    1772:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ping>
    1776:	2f ef       	ldi	r18, 0xFF	; 255
    1778:	87 ea       	ldi	r24, 0xA7	; 167
    177a:	91 e6       	ldi	r25, 0x61	; 97
    177c:	21 50       	subi	r18, 0x01	; 1
    177e:	80 40       	sbci	r24, 0x00	; 0
    1780:	90 40       	sbci	r25, 0x00	; 0
    1782:	e1 f7       	brne	.-8      	; 0x177c <scansys+0xfc>
    1784:	00 c0       	rjmp	.+0      	; 0x1786 <scansys+0x106>
    1786:	00 00       	nop
	_delay_ms(2000);
	menuExit=EXITMENU;
    1788:	80 e3       	ldi	r24, 0x30	; 48
    178a:	95 e7       	ldi	r25, 0x75	; 117
    178c:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <menuExit+0x1>
    1790:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <menuExit>
	ERROR=0;
    1794:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <ERROR>

	return ;
}
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	08 95       	ret

000017ae <send_read_arch>:

signed char send_read_arch(unsigned char part,unsigned char addr,unsigned char index)
{
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <send_read_arch+0xa>
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	16 2f       	mov	r17, r22
	unsigned char data[2]={(part==1)?(RD_ARCH_1):(RD_ARCH_2)};
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	11 f0       	breq	.+4      	; 0x17c6 <send_read_arch+0x18>
    17c2:	85 e0       	ldi	r24, 0x05	; 5
    17c4:	01 c0       	rjmp	.+2      	; 0x17c8 <send_read_arch+0x1a>
    17c6:	84 e0       	ldi	r24, 0x04	; 4
    17c8:	89 83       	std	Y+1, r24	; 0x01

	inSysBDZ[addr].flags=1<<FLT;	//перед посылкой команды обнуляем все флаги.Установленный флаг INL будет говорить о том,что ответ принят
    17ca:	89 e0       	ldi	r24, 0x09	; 9
    17cc:	18 9f       	mul	r17, r24
    17ce:	f0 01       	movw	r30, r0
    17d0:	11 24       	eor	r1, r1
    17d2:	ef 59       	subi	r30, 0x9F	; 159
    17d4:	fe 4f       	sbci	r31, 0xFE	; 254
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	80 87       	std	Z+8, r24	; 0x08
	data[1]=index;
    17da:	4a 83       	std	Y+2, r20	; 0x02

	CAN_loadTXbuf((unsigned long int)addr,2,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    17dc:	61 2f       	mov	r22, r17
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	07 ef       	ldi	r16, 0xF7	; 247
    17e6:	9e 01       	movw	r18, r28
    17e8:	2f 5f       	subi	r18, 0xFF	; 255
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	42 e0       	ldi	r20, 0x02	; 2
    17ee:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CAN_loadTXbuf>
	return 	checkTOUT(addr);
    17f2:	81 2f       	mov	r24, r17
    17f4:	0e 94 4e 01 	call	0x29c	; 0x29c <checkTOUT>
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	08 95       	ret

00001806 <send_prog>:

signed char send_prog(unsigned char addr,volatile unsigned char *param)
{
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	00 d0       	rcall	.+0      	; 0x1810 <send_prog+0xa>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <send_prog+0xc>
    1812:	00 d0       	rcall	.+0      	; 0x1814 <send_prog+0xe>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	18 2f       	mov	r17, r24
	unsigned char data[6]={PROG};
    181a:	86 e0       	ldi	r24, 0x06	; 6
    181c:	9e 01       	movw	r18, r28
    181e:	2f 5f       	subi	r18, 0xFF	; 255
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	f9 01       	movw	r30, r18
    1824:	98 2f       	mov	r25, r24
    1826:	11 92       	st	Z+, r1
    1828:	9a 95       	dec	r25
    182a:	e9 f7       	brne	.-6      	; 0x1826 <send_prog+0x20>
    182c:	89 83       	std	Y+1, r24	; 0x01

	if(param != NULL) for(unsigned char i=0;i<6;i++)  data[i]=*(param+i);
    182e:	61 15       	cp	r22, r1
    1830:	71 05       	cpc	r23, r1
    1832:	61 f4       	brne	.+24     	; 0x184c <send_prog+0x46>
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    1834:	89 e0       	ldi	r24, 0x09	; 9
    1836:	18 9f       	mul	r17, r24
    1838:	f0 01       	movw	r30, r0
    183a:	11 24       	eor	r1, r1
    183c:	ef 59       	subi	r30, 0x9F	; 159
    183e:	fe 4f       	sbci	r31, 0xFE	; 254
    1840:	82 e0       	ldi	r24, 0x02	; 2
    1842:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,(param != NULL)?(6):(1),data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    1844:	67 2b       	or	r22, r23
    1846:	79 f4       	brne	.+30     	; 0x1866 <send_prog+0x60>
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	0e c0       	rjmp	.+28     	; 0x1868 <send_prog+0x62>
    184c:	f9 01       	movw	r30, r18

signed char send_prog(unsigned char addr,volatile unsigned char *param)
{
	unsigned char data[6]={PROG};

	if(param != NULL) for(unsigned char i=0;i<6;i++)  data[i]=*(param+i);
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	db 01       	movw	r26, r22
    1854:	a8 0f       	add	r26, r24
    1856:	b9 1f       	adc	r27, r25
    1858:	4c 91       	ld	r20, X
    185a:	41 93       	st	Z+, r20
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	86 30       	cpi	r24, 0x06	; 6
    1860:	91 05       	cpc	r25, r1
    1862:	b9 f7       	brne	.-18     	; 0x1852 <send_prog+0x4c>
    1864:	e7 cf       	rjmp	.-50     	; 0x1834 <send_prog+0x2e>
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
	CAN_loadTXbuf((unsigned long int)addr,(param != NULL)?(6):(1),data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    1866:	46 e0       	ldi	r20, 0x06	; 6
    1868:	81 2f       	mov	r24, r17
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 e0       	ldi	r26, 0x00	; 0
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	07 ef       	ldi	r16, 0xF7	; 247
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CAN_loadTXbuf>

	//если программируем широковещательно то ответа не будет
	return (addr==0)?(1):(checkTOUT(addr));
    187a:	11 23       	and	r17, r17
    187c:	21 f0       	breq	.+8      	; 0x1886 <send_prog+0x80>
    187e:	81 2f       	mov	r24, r17
    1880:	0e 94 4e 01 	call	0x29c	; 0x29c <checkTOUT>
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <send_prog+0x82>
    1886:	81 e0       	ldi	r24, 0x01	; 1
}
    1888:	26 96       	adiw	r28, 0x06	; 6
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	08 95       	ret

0000189e <aks_for_logic>:

signed char aks_for_logic(unsigned char addr)
{
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <aks_for_logic+0xa>
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <aks_for_logic+0xc>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <aks_for_logic+0xe>
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	18 2f       	mov	r17, r24
	unsigned char data[6]={PROG};
    18b2:	86 e0       	ldi	r24, 0x06	; 6
    18b4:	9e 01       	movw	r18, r28
    18b6:	2f 5f       	subi	r18, 0xFF	; 255
    18b8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ba:	f9 01       	movw	r30, r18
    18bc:	98 2f       	mov	r25, r24
    18be:	11 92       	st	Z+, r1
    18c0:	9a 95       	dec	r25
    18c2:	e9 f7       	brne	.-6      	; 0x18be <aks_for_logic+0x20>
    18c4:	89 83       	std	Y+1, r24	; 0x01

	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    18c6:	89 e0       	ldi	r24, 0x09	; 9
    18c8:	18 9f       	mul	r17, r24
    18ca:	f0 01       	movw	r30, r0
    18cc:	11 24       	eor	r1, r1
    18ce:	ef 59       	subi	r30, 0x9F	; 159
    18d0:	fe 4f       	sbci	r31, 0xFE	; 254
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,2,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    18d6:	61 2f       	mov	r22, r17
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	07 ef       	ldi	r16, 0xF7	; 247
    18e0:	42 e0       	ldi	r20, 0x02	; 2
    18e2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CAN_loadTXbuf>

	//если программируем широковещательно то ответа не будет
	return (addr==0)?(1):(checkTOUT(addr));
    18e6:	11 23       	and	r17, r17
    18e8:	21 f0       	breq	.+8      	; 0x18f2 <aks_for_logic+0x54>
    18ea:	81 2f       	mov	r24, r17
    18ec:	0e 94 4e 01 	call	0x29c	; 0x29c <checkTOUT>
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <aks_for_logic+0x56>
    18f2:	81 e0       	ldi	r24, 0x01	; 1
}
    18f4:	26 96       	adiw	r28, 0x06	; 6
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	08 95       	ret

0000190a <send_cmd>:

signed char send_cmd(unsigned char addr,unsigned char cmd)
{
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	1f 92       	push	r1
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	18 2f       	mov	r17, r24
    191a:	69 83       	std	Y+1, r22	; 0x01
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    191c:	89 e0       	ldi	r24, 0x09	; 9
    191e:	18 9f       	mul	r17, r24
    1920:	f0 01       	movw	r30, r0
    1922:	11 24       	eor	r1, r1
    1924:	ef 59       	subi	r30, 0x9F	; 159
    1926:	fe 4f       	sbci	r31, 0xFE	; 254
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,1,&cmd,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    192c:	61 2f       	mov	r22, r17
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	07 ef       	ldi	r16, 0xF7	; 247
    1936:	9e 01       	movw	r18, r28
    1938:	2f 5f       	subi	r18, 0xFF	; 255
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CAN_loadTXbuf>

	if(cmd==RESET) return 1;	//не требует ответа
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	82 30       	cpi	r24, 0x02	; 2
    1946:	21 f0       	breq	.+8      	; 0x1950 <send_cmd+0x46>
	return 	checkTOUT(addr);
    1948:	81 2f       	mov	r24, r17
    194a:	0e 94 4e 01 	call	0x29c	; 0x29c <checkTOUT>
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <send_cmd+0x48>
{
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
	CAN_loadTXbuf((unsigned long int)addr,1,&cmd,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);

	if(cmd==RESET) return 1;	//не требует ответа
    1950:	81 e0       	ldi	r24, 0x01	; 1
	return 	checkTOUT(addr);
}
    1952:	0f 90       	pop	r0
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <__vector_1>:
}


//чтение принятого сообщения из буфера MCP2515 (CAN)
ISR(INT0_vect)
{
    195e:	1f 92       	push	r1
    1960:	0f 92       	push	r0
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	0f 92       	push	r0
    1966:	11 24       	eor	r1, r1
    1968:	8f 92       	push	r8
    196a:	9f 92       	push	r9
    196c:	af 92       	push	r10
    196e:	bf 92       	push	r11
    1970:	cf 92       	push	r12
    1972:	df 92       	push	r13
    1974:	ef 92       	push	r14
    1976:	ff 92       	push	r15
    1978:	2f 93       	push	r18
    197a:	3f 93       	push	r19
    197c:	4f 93       	push	r20
    197e:	5f 93       	push	r21
    1980:	6f 93       	push	r22
    1982:	7f 93       	push	r23
    1984:	8f 93       	push	r24
    1986:	9f 93       	push	r25
    1988:	af 93       	push	r26
    198a:	bf 93       	push	r27
    198c:	ef 93       	push	r30
    198e:	ff 93       	push	r31
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	2e 97       	sbiw	r28, 0x0e	; 14
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	cd bf       	out	0x3d, r28	; 61
		unsigned char dataLength;
		unsigned char data[8];
		unsigned char msg_flags;
	}tmpBuf;

	CAN_readRXbuf(&tmpBuf.ID, tmpBuf.data, &tmpBuf.dataLength, &tmpBuf.msg_flags);
    199e:	9e 01       	movw	r18, r28
    19a0:	22 5f       	subi	r18, 0xF2	; 242
    19a2:	3f 4f       	sbci	r19, 0xFF	; 255
    19a4:	ae 01       	movw	r20, r28
    19a6:	4b 5f       	subi	r20, 0xFB	; 251
    19a8:	5f 4f       	sbci	r21, 0xFF	; 255
    19aa:	be 01       	movw	r22, r28
    19ac:	6a 5f       	subi	r22, 0xFA	; 250
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	ce 01       	movw	r24, r28
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	0e 94 a4 08 	call	0x1148	; 0x1148 <CAN_readRXbuf>
	if(chkBit(sys_state,SCAN)) inSysBDZ[BDZ_ID].data[7]=BDZ_ID;								//если производится сканирование сохраняем откликнувшиеся ID в inSysBDZ[BDZ_ID].data[7]
    19b8:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    19bc:	89 80       	ldd	r8, Y+1	; 0x01
    19be:	9a 80       	ldd	r9, Y+2	; 0x02
    19c0:	ab 80       	ldd	r10, Y+3	; 0x03
    19c2:	bc 80       	ldd	r11, Y+4	; 0x04
    19c4:	84 ff       	sbrs	r24, 4
    19c6:	11 c0       	rjmp	.+34     	; 0x19ea <__vector_1+0x8c>
    19c8:	d5 01       	movw	r26, r10
    19ca:	c4 01       	movw	r24, r8
    19cc:	8f 77       	andi	r24, 0x7F	; 127
    19ce:	99 27       	eor	r25, r25
    19d0:	aa 27       	eor	r26, r26
    19d2:	bb 27       	eor	r27, r27
    19d4:	29 e0       	ldi	r18, 0x09	; 9
    19d6:	28 9f       	mul	r18, r24
    19d8:	f0 01       	movw	r30, r0
    19da:	29 9f       	mul	r18, r25
    19dc:	f0 0d       	add	r31, r0
    19de:	11 24       	eor	r1, r1
    19e0:	ef 59       	subi	r30, 0x9F	; 159
    19e2:	fe 4f       	sbci	r31, 0xFE	; 254
    19e4:	88 2d       	mov	r24, r8
    19e6:	8f 77       	andi	r24, 0x7F	; 127
    19e8:	87 83       	std	Z+7, r24	; 0x07

	if(readID(BDZ_ID) != BDZ_ID) {ERROR=ID;return;}											//проверка валидности (если ID не зарегистрирован)
    19ea:	75 01       	movw	r14, r10
    19ec:	64 01       	movw	r12, r8
    19ee:	e8 94       	clt
    19f0:	c7 f8       	bld	r12, 7
    19f2:	dd 24       	eor	r13, r13
    19f4:	ee 24       	eor	r14, r14
    19f6:	ff 24       	eor	r15, r15
    19f8:	c6 01       	movw	r24, r12
    19fa:	87 5f       	subi	r24, 0xF7	; 247
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a0 e0       	ldi	r26, 0x00	; 0
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	c8 16       	cp	r12, r24
    1a0a:	d9 06       	cpc	r13, r25
    1a0c:	ea 06       	cpc	r14, r26
    1a0e:	fb 06       	cpc	r15, r27
    1a10:	21 f0       	breq	.+8      	; 0x1a1a <__vector_1+0xbc>
    1a12:	84 e0       	ldi	r24, 0x04	; 4
    1a14:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>
    1a18:	40 c0       	rjmp	.+128    	; 0x1a9a <__vector_1+0x13c>

	setBit(inSysBDZ[BDZ_ID].flags,INL);														//ставим флаг инлайн
    1a1a:	89 e0       	ldi	r24, 0x09	; 9
    1a1c:	8c 9d       	mul	r24, r12
    1a1e:	f0 01       	movw	r30, r0
    1a20:	8d 9d       	mul	r24, r13
    1a22:	f0 0d       	add	r31, r0
    1a24:	11 24       	eor	r1, r1
    1a26:	ef 59       	subi	r30, 0x9F	; 159
    1a28:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2a:	80 85       	ldd	r24, Z+8	; 0x08
    1a2c:	84 60       	ori	r24, 0x04	; 4
    1a2e:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,10)==1) setBit(inSysBDZ[BDZ_ID].flags,CONF);
    1a30:	92 fe       	sbrs	r9, 2
    1a32:	03 c0       	rjmp	.+6      	; 0x1a3a <__vector_1+0xdc>
    1a34:	80 85       	ldd	r24, Z+8	; 0x08
    1a36:	80 62       	ori	r24, 0x20	; 32
    1a38:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,9) ==0) setBit(inSysBDZ[BDZ_ID].flags,ALM);							//если есть авариz ставим флаг в БДЗ
    1a3a:	91 fc       	sbrc	r9, 1
    1a3c:	0b c0       	rjmp	.+22     	; 0x1a54 <__vector_1+0xf6>
    1a3e:	89 e0       	ldi	r24, 0x09	; 9
    1a40:	8c 9d       	mul	r24, r12
    1a42:	f0 01       	movw	r30, r0
    1a44:	8d 9d       	mul	r24, r13
    1a46:	f0 0d       	add	r31, r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	ef 59       	subi	r30, 0x9F	; 159
    1a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4e:	80 85       	ldd	r24, Z+8	; 0x08
    1a50:	81 60       	ori	r24, 0x01	; 1
    1a52:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,8) ==1) clrBit(inSysBDZ[BDZ_ID].flags,FLT);							//если нету неисправности обнуляем флаг в БДЗ
    1a54:	90 fe       	sbrs	r9, 0
    1a56:	0b c0       	rjmp	.+22     	; 0x1a6e <__vector_1+0x110>
    1a58:	89 e0       	ldi	r24, 0x09	; 9
    1a5a:	8c 9d       	mul	r24, r12
    1a5c:	f0 01       	movw	r30, r0
    1a5e:	8d 9d       	mul	r24, r13
    1a60:	f0 0d       	add	r31, r0
    1a62:	11 24       	eor	r1, r1
    1a64:	ef 59       	subi	r30, 0x9F	; 159
    1a66:	fe 4f       	sbci	r31, 0xFE	; 254
    1a68:	80 85       	ldd	r24, Z+8	; 0x08
    1a6a:	8d 7f       	andi	r24, 0xFD	; 253
    1a6c:	80 87       	std	Z+8, r24	; 0x08
	//inSysBDZ[BDZ_ID].data[0] = tmpBuf.ID>>8;
	for(unsigned char i=0;i<tmpBuf.dataLength;i++)inSysBDZ[BDZ_ID].data[i] = tmpBuf.data[i];//копируем данные
    1a6e:	4d 81       	ldd	r20, Y+5	; 0x05
    1a70:	fe 01       	movw	r30, r28
    1a72:	36 96       	adiw	r30, 0x06	; 6
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	59 e0       	ldi	r21, 0x09	; 9
    1a7a:	5c 9d       	mul	r21, r12
    1a7c:	90 01       	movw	r18, r0
    1a7e:	5d 9d       	mul	r21, r13
    1a80:	30 0d       	add	r19, r0
    1a82:	11 24       	eor	r1, r1
    1a84:	2f 59       	subi	r18, 0x9F	; 159
    1a86:	3e 4f       	sbci	r19, 0xFE	; 254
    1a88:	84 17       	cp	r24, r20
    1a8a:	38 f4       	brcc	.+14     	; 0x1a9a <__vector_1+0x13c>
    1a8c:	51 91       	ld	r21, Z+
    1a8e:	d9 01       	movw	r26, r18
    1a90:	a8 0f       	add	r26, r24
    1a92:	b9 1f       	adc	r27, r25
    1a94:	5c 93       	st	X, r21
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	f7 cf       	rjmp	.-18     	; 0x1a88 <__vector_1+0x12a>
}
    1a9a:	2e 96       	adiw	r28, 0x0e	; 14
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	ff 91       	pop	r31
    1aac:	ef 91       	pop	r30
    1aae:	bf 91       	pop	r27
    1ab0:	af 91       	pop	r26
    1ab2:	9f 91       	pop	r25
    1ab4:	8f 91       	pop	r24
    1ab6:	7f 91       	pop	r23
    1ab8:	6f 91       	pop	r22
    1aba:	5f 91       	pop	r21
    1abc:	4f 91       	pop	r20
    1abe:	3f 91       	pop	r19
    1ac0:	2f 91       	pop	r18
    1ac2:	ff 90       	pop	r15
    1ac4:	ef 90       	pop	r14
    1ac6:	df 90       	pop	r13
    1ac8:	cf 90       	pop	r12
    1aca:	bf 90       	pop	r11
    1acc:	af 90       	pop	r10
    1ace:	9f 90       	pop	r9
    1ad0:	8f 90       	pop	r8
    1ad2:	0f 90       	pop	r0
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	0f 90       	pop	r0
    1ad8:	1f 90       	pop	r1
    1ada:	18 95       	reti

00001adc <scanID>:
//	while(1);
	return 3;					//длина сообщения об ошибке фиксирована
}

unsigned char scanID(unsigned char i)
{
    1adc:	1f 93       	push	r17
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	18 2f       	mov	r17, r24
    1ae4:	cc e6       	ldi	r28, 0x6C	; 108
    1ae6:	d0 e0       	ldi	r29, 0x00	; 0
	for(unsigned char n=0;n<MAXQDEV;n++)
		if(readIDnew(n)==i) return 0;
    1ae8:	ce 01       	movw	r24, r28
    1aea:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    1aee:	81 17       	cp	r24, r17
    1af0:	39 f0       	breq	.+14     	; 0x1b00 <scanID+0x24>
    1af2:	21 96       	adiw	r28, 0x01	; 1
	return 3;					//длина сообщения об ошибке фиксирована
}

unsigned char scanID(unsigned char i)
{
	for(unsigned char n=0;n<MAXQDEV;n++)
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	cf 3c       	cpi	r28, 0xCF	; 207
    1af8:	d8 07       	cpc	r29, r24
    1afa:	b1 f7       	brne	.-20     	; 0x1ae8 <scanID+0xc>
		if(readIDnew(n)==i) return 0;
	return 1;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <scanID+0x26>
}

unsigned char scanID(unsigned char i)
{
	for(unsigned char n=0;n<MAXQDEV;n++)
		if(readIDnew(n)==i) return 0;
    1b00:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
}
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	1f 91       	pop	r17
    1b08:	08 95       	ret

00001b0a <scanKBD>:

unsigned char scanKBD(void)
{
	unsigned char kbd = (((PIND&0x38)>>1) | (PINC&0xE0)) & 0xFC;
    1b0a:	20 b3       	in	r18, 0x10	; 16
    1b0c:	83 b3       	in	r24, 0x13	; 19
    1b0e:	28 73       	andi	r18, 0x38	; 56
    1b10:	26 95       	lsr	r18
    1b12:	80 7e       	andi	r24, 0xE0	; 224
    1b14:	28 2b       	or	r18, r24
	static unsigned char prevkbd;

	if((kbd)==0xFC){prevkbd=0xFC; return NOKEY;}	//клавиша не нажата,вернули FF
    1b16:	2c 3f       	cpi	r18, 0xFC	; 252
    1b18:	19 f4       	brne	.+6      	; 0x1b20 <scanKBD+0x16>
    1b1a:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <__data_end>
    1b1e:	32 c0       	rjmp	.+100    	; 0x1b84 <scanKBD+0x7a>
//	beep(10);					//пикалка + антидребезг

	if(prevkbd != kbd)
    1b20:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
    1b24:	28 17       	cp	r18, r24
    1b26:	71 f0       	breq	.+28     	; 0x1b44 <scanKBD+0x3a>
	return NOKEY;						//кнопка не нашлась.типа помеха.
}

static inline void beep(unsigned int lenght)
{
	setBit(PORTA,BEEP);					//пикалка + антидребезг
    1b28:	dc 9a       	sbi	0x1b, 4	; 27
    1b2a:	8a e0       	ldi	r24, 0x0A	; 10
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	ef e9       	ldi	r30, 0x9F	; 159
    1b30:	ff e0       	ldi	r31, 0x0F	; 15
    1b32:	31 97       	sbiw	r30, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <scanKBD+0x28>
    1b36:	00 c0       	rjmp	.+0      	; 0x1b38 <scanKBD+0x2e>
    1b38:	00 00       	nop
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
	for(unsigned int i=0;i<lenght;i++)_delay_ms(1);
    1b3c:	c1 f7       	brne	.-16     	; 0x1b2e <scanKBD+0x24>
	clrBit(PORTA,BEEP);
    1b3e:	dc 98       	cbi	0x1b, 4	; 27
//	beep(10);					//пикалка + антидребезг

	if(prevkbd != kbd)
	{
		beep(10);					//пикалка + антидребезг
		prevkbd = kbd;
    1b40:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <__data_end>
	}

	menuExit=EXITMENU;						//взводим таймер автовыхода
    1b44:	80 e3       	ldi	r24, 0x30	; 48
    1b46:	95 e7       	ldi	r25, 0x75	; 117
    1b48:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <menuExit+0x1>
    1b4c:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <menuExit>
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	90 e0       	ldi	r25, 0x00	; 0
	for(char i=2;i<8;i++)
	{
		if(chkBit(kbd,i) ==0)return i;	//найдена нажатая кнопка.вернули код кнопки
    1b54:	61 e0       	ldi	r22, 0x01	; 1
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	ab 01       	movw	r20, r22
    1b5c:	08 2e       	mov	r0, r24
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <scanKBD+0x5a>
    1b60:	44 0f       	add	r20, r20
    1b62:	55 1f       	adc	r21, r21
    1b64:	0a 94       	dec	r0
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <scanKBD+0x56>
    1b68:	42 23       	and	r20, r18
    1b6a:	53 23       	and	r21, r19
    1b6c:	08 2e       	mov	r0, r24
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <scanKBD+0x6a>
    1b70:	55 95       	asr	r21
    1b72:	47 95       	ror	r20
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <scanKBD+0x66>
    1b78:	45 2b       	or	r20, r21
    1b7a:	29 f0       	breq	.+10     	; 0x1b86 <scanKBD+0x7c>
    1b7c:	01 96       	adiw	r24, 0x01	; 1
		beep(10);					//пикалка + антидребезг
		prevkbd = kbd;
	}

	menuExit=EXITMENU;						//взводим таймер автовыхода
	for(char i=2;i<8;i++)
    1b7e:	88 30       	cpi	r24, 0x08	; 8
    1b80:	91 05       	cpc	r25, r1
    1b82:	59 f7       	brne	.-42     	; 0x1b5a <scanKBD+0x50>
	{
		if(chkBit(kbd,i) ==0)return i;	//найдена нажатая кнопка.вернули код кнопки
	}
	return NOKEY;						//кнопка не нашлась.типа помеха.
    1b84:	8f ef       	ldi	r24, 0xFF	; 255
}
    1b86:	08 95       	ret

00001b88 <whileKey>:
	LCD_puts(buffer,20);

}

static inline unsigned char whileKey(void)
{
    1b88:	cf 93       	push	r28
	unsigned char tmpKey;

	while((tmpKey=scanKBD())==NOKEY) if(menuExit==0)return NOKEY;	//ждем нажатия кнопки или автовыхода
    1b8a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <scanKBD>
    1b8e:	c8 2f       	mov	r28, r24
    1b90:	8f 3f       	cpi	r24, 0xFF	; 255
    1b92:	41 f4       	brne	.+16     	; 0x1ba4 <whileKey+0x1c>
    1b94:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <menuExit>
    1b98:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <menuExit+0x1>
    1b9c:	89 2b       	or	r24, r25
    1b9e:	a9 f7       	brne	.-22     	; 0x1b8a <whileKey+0x2>
    1ba0:	8f ef       	ldi	r24, 0xFF	; 255
    1ba2:	05 c0       	rjmp	.+10     	; 0x1bae <whileKey+0x26>
	while(scanKBD()!=NOKEY);										//...отпускания кнопки
    1ba4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <scanKBD>
    1ba8:	8f 3f       	cpi	r24, 0xFF	; 255
    1baa:	e1 f7       	brne	.-8      	; 0x1ba4 <whileKey+0x1c>

static inline unsigned char whileKey(void)
{
	unsigned char tmpKey;

	while((tmpKey=scanKBD())==NOKEY) if(menuExit==0)return NOKEY;	//ждем нажатия кнопки или автовыхода
    1bac:	8c 2f       	mov	r24, r28
	while(scanKBD()!=NOKEY);										//...отпускания кнопки

	return tmpKey;
}
    1bae:	cf 91       	pop	r28
    1bb0:	08 95       	ret

00001bb2 <numm>:

	return 0;
}

static unsigned char numm(void)
{
    1bb2:	cf 92       	push	r12
    1bb4:	df 92       	push	r13
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	1f 93       	push	r17
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <numm+0x10>
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
	unsigned char i=0;
	printMenuHeader(NUMM);	//прорисовываем заголовок
    1bc6:	8e e0       	ldi	r24, 0x0E	; 14
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	0e 94 c6 06 	call	0xd8c	; 0xd8c <printMenuHeader>
	return 0;
}

static unsigned char numm(void)
{
	unsigned char i=0;
    1bce:	10 e0       	ldi	r17, 0x00	; 0
	printMenuHeader(NUMM);	//прорисовываем заголовок
	while (1)
	{
		char str[2];
		LCD_gotoXY(0,2);
		sprintf(str,"%02d",i);
    1bd0:	87 e1       	ldi	r24, 0x17	; 23
    1bd2:	e8 2e       	mov	r14, r24
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	f8 2e       	mov	r15, r24
    1bd8:	ce 01       	movw	r24, r28
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	6c 01       	movw	r12, r24
	unsigned char i=0;
	printMenuHeader(NUMM);	//прорисовываем заголовок
	while (1)
	{
		char str[2];
		LCD_gotoXY(0,2);
    1bde:	62 e0       	ldi	r22, 0x02	; 2
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		sprintf(str,"%02d",i);
    1be6:	1f 92       	push	r1
    1be8:	1f 93       	push	r17
    1bea:	ff 92       	push	r15
    1bec:	ef 92       	push	r14
    1bee:	df 92       	push	r13
    1bf0:	cf 92       	push	r12
    1bf2:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <sprintf>
		LCD_puts(str,4);
    1bf6:	64 e0       	ldi	r22, 0x04	; 4
    1bf8:	c6 01       	movw	r24, r12
    1bfa:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1bfe:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	85 30       	cpi	r24, 0x05	; 5
    1c10:	c9 f0       	breq	.+50     	; 0x1c44 <numm+0x92>
    1c12:	68 f4       	brcc	.+26     	; 0x1c2e <numm+0x7c>
    1c14:	82 30       	cpi	r24, 0x02	; 2
    1c16:	19 f7       	brne	.-58     	; 0x1bde <numm+0x2c>
		break;
		case NOKEY:asm("jmp 0");
		break;
		}
	}
}
    1c18:	81 2f       	mov	r24, r17
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	ff 90       	pop	r15
    1c26:	ef 90       	pop	r14
    1c28:	df 90       	pop	r13
    1c2a:	cf 90       	pop	r12
    1c2c:	08 95       	ret
		char str[2];
		LCD_gotoXY(0,2);
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1c2e:	86 30       	cpi	r24, 0x06	; 6
    1c30:	29 f0       	breq	.+10     	; 0x1c3c <numm+0x8a>
    1c32:	8f 3f       	cpi	r24, 0xFF	; 255
    1c34:	a1 f6       	brne	.-88     	; 0x1bde <numm+0x2c>
		break;
		case UP:if(i==99) i=0; else i++;
		break;
		case ENT:return i;	//выход по ENT (отсылка новых параметров)
		break;
		case NOKEY:asm("jmp 0");
    1c36:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    1c3a:	d1 cf       	rjmp	.-94     	; 0x1bde <numm+0x2c>
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(i==0) i=99; else i--;
    1c3c:	11 23       	and	r17, r17
    1c3e:	31 f0       	breq	.+12     	; 0x1c4c <numm+0x9a>
    1c40:	11 50       	subi	r17, 0x01	; 1
    1c42:	cd cf       	rjmp	.-102    	; 0x1bde <numm+0x2c>
		break;
		case UP:if(i==99) i=0; else i++;
    1c44:	13 36       	cpi	r17, 0x63	; 99
    1c46:	21 f0       	breq	.+8      	; 0x1c50 <numm+0x9e>
    1c48:	1f 5f       	subi	r17, 0xFF	; 255
    1c4a:	c9 cf       	rjmp	.-110    	; 0x1bde <numm+0x2c>
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(i==0) i=99; else i--;
    1c4c:	13 e6       	ldi	r17, 0x63	; 99
    1c4e:	c7 cf       	rjmp	.-114    	; 0x1bde <numm+0x2c>
		break;
		case UP:if(i==99) i=0; else i++;
    1c50:	10 e0       	ldi	r17, 0x00	; 0
		case ENT:return i;	//выход по ENT (отсылка новых параметров)
		break;
		case NOKEY:asm("jmp 0");
		break;
		}
	}
    1c52:	c5 cf       	rjmp	.-118    	; 0x1bde <numm+0x2c>

00001c54 <change_param>:
		}
	}
}

static void change_param(unsigned char nParam)
{
    1c54:	4f 92       	push	r4
    1c56:	5f 92       	push	r5
    1c58:	6f 92       	push	r6
    1c5a:	7f 92       	push	r7
    1c5c:	8f 92       	push	r8
    1c5e:	9f 92       	push	r9
    1c60:	af 92       	push	r10
    1c62:	bf 92       	push	r11
    1c64:	cf 92       	push	r12
    1c66:	df 92       	push	r13
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <change_param+0x22>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <change_param+0x24>
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <change_param+0x26>
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	48 2e       	mov	r4, r24
    1c80:	01 e0       	ldi	r16, 0x01	; 1
    1c82:	10 e0       	ldi	r17, 0x00	; 0
	signed char numBDZ=0;	//кол-во инлайновых БДЗ;
    1c84:	f1 2c       	mov	r15, r1
	unsigned char addr=0,step;
	signed int param=0,max,staroe=0;

	//scansys();
	//считаем кол-во БДЗ инлайн
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) {numBDZ++;/*addr=readID(i);*/}
    1c86:	49 e0       	ldi	r20, 0x09	; 9
    1c88:	e4 2e       	mov	r14, r20
    1c8a:	c8 01       	movw	r24, r16
    1c8c:	87 5f       	subi	r24, 0xF7	; 247
    1c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c90:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    1c94:	80 13       	cpse	r24, r16
    1c96:	0a c0       	rjmp	.+20     	; 0x1cac <change_param+0x58>
    1c98:	e0 9e       	mul	r14, r16
    1c9a:	f0 01       	movw	r30, r0
    1c9c:	e1 9e       	mul	r14, r17
    1c9e:	f0 0d       	add	r31, r0
    1ca0:	11 24       	eor	r1, r1
    1ca2:	ef 59       	subi	r30, 0x9F	; 159
    1ca4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca6:	80 85       	ldd	r24, Z+8	; 0x08
    1ca8:	82 fd       	sbrc	r24, 2
    1caa:	f3 94       	inc	r15
    1cac:	0f 5f       	subi	r16, 0xFF	; 255
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	03 36       	cpi	r16, 0x63	; 99
    1cb2:	11 05       	cpc	r17, r1
    1cb4:	51 f7       	brne	.-44     	; 0x1c8a <change_param+0x36>

	if (numBDZ>1) addr=numm();//адрес БДЗ в котором будем менять, если addr=0 значит запрос широковещательный
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	2f 15       	cp	r18, r15
    1cba:	24 f5       	brge	.+72     	; 0x1d04 <change_param+0xb0>
    1cbc:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <numm>
    1cc0:	58 2e       	mov	r5, r24

	if(nParam==0 && addr==0) {printUNAVALIABLE();_delay_ms(2000);return;} //нельзя менять адрес во всех БДЗ разом
    1cc2:	41 10       	cpse	r4, r1
    1cc4:	0a c0       	rjmp	.+20     	; 0x1cda <change_param+0x86>
    1cc6:	81 11       	cpse	r24, r1
    1cc8:	0a c0       	rjmp	.+20     	; 0x1cde <change_param+0x8a>
	LCD_gotoXY(0,2);LCD_puts_P(NET_SVYAZI,20);
}

static inline void printUNAVALIABLE(void)
{
	LCD_gotoXY(0,2);LCD_puts_P(NEDOSTUPNO,20);
    1cca:	62 e0       	ldi	r22, 0x02	; 2
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
    1cd2:	64 e1       	ldi	r22, 0x14	; 20
    1cd4:	84 e5       	ldi	r24, 0x54	; 84
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0c c1       	rjmp	.+536    	; 0x1ef2 <change_param+0x29e>
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) {numBDZ++;/*addr=readID(i);*/}

	if (numBDZ>1) addr=numm();//адрес БДЗ в котором будем менять, если addr=0 значит запрос широковещательный

	if(nParam==0 && addr==0) {printUNAVALIABLE();_delay_ms(2000);return;} //нельзя менять адрес во всех БДЗ разом
	if (addr!=0) //если запрос не широковещательный, то считываем показания БДЗ под № "addr"
    1cda:	88 23       	and	r24, r24
    1cdc:	a9 f0       	breq	.+42     	; 0x1d08 <change_param+0xb4>
	{
		if((send_prog(addr,NULL) <0)||(inSysBDZ[addr].data[0] !=PROG))	{printTOUT();_delay_ms(2000);return;}
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	85 2d       	mov	r24, r5
    1ce4:	0e 94 03 0c 	call	0x1806	; 0x1806 <send_prog>
    1ce8:	87 fd       	sbrc	r24, 7
    1cea:	09 c0       	rjmp	.+18     	; 0x1cfe <change_param+0xaa>
    1cec:	29 e0       	ldi	r18, 0x09	; 9
    1cee:	52 9e       	mul	r5, r18
    1cf0:	f0 01       	movw	r30, r0
    1cf2:	11 24       	eor	r1, r1
    1cf4:	ef 59       	subi	r30, 0x9F	; 159
    1cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf8:	80 81       	ld	r24, Z
    1cfa:	86 30       	cpi	r24, 0x06	; 6
    1cfc:	31 f0       	breq	.+12     	; 0x1d0a <change_param+0xb6>
    1cfe:	0e 94 bd 06 	call	0xd7a	; 0xd7a <printTOUT>
    1d02:	f9 c0       	rjmp	.+498    	; 0x1ef6 <change_param+0x2a2>
	//считаем кол-во БДЗ инлайн
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) {numBDZ++;/*addr=readID(i);*/}

	if (numBDZ>1) addr=numm();//адрес БДЗ в котором будем менять, если addr=0 значит запрос широковещательный

	if(nParam==0 && addr==0) {printUNAVALIABLE();_delay_ms(2000);return;} //нельзя менять адрес во всех БДЗ разом
    1d04:	44 20       	and	r4, r4
    1d06:	09 f3       	breq	.-62     	; 0x1cca <change_param+0x76>
	}
}

static void change_param(unsigned char nParam)
{
	signed char numBDZ=0;	//кол-во инлайновых БДЗ;
    1d08:	51 2c       	mov	r5, r1
	if (addr!=0) //если запрос не широковещательный, то считываем показания БДЗ под № "addr"
	{
		if((send_prog(addr,NULL) <0)||(inSysBDZ[addr].data[0] !=PROG))	{printTOUT();_delay_ms(2000);return;}
	}

	switch(nParam)
    1d0a:	e1 e0       	ldi	r30, 0x01	; 1
    1d0c:	4e 16       	cp	r4, r30
    1d0e:	01 f1       	breq	.+64     	; 0x1d50 <change_param+0xfc>
    1d10:	4e 16       	cp	r4, r30
    1d12:	88 f0       	brcs	.+34     	; 0x1d36 <change_param+0xe2>
    1d14:	f2 e0       	ldi	r31, 0x02	; 2
    1d16:	4f 12       	cpse	r4, r31
    1d18:	10 c1       	rjmp	.+544    	; 0x1f3a <change_param+0x2e6>
	}
	break;
	//время УРОВ:если на связи 1 БДЗ пишем его время УРОВ, если больше то 0мс
	case 2:
	{
		staroe=(signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5];
    1d1a:	89 e0       	ldi	r24, 0x09	; 9
    1d1c:	58 9e       	mul	r5, r24
    1d1e:	f0 01       	movw	r30, r0
    1d20:	11 24       	eor	r1, r1
    1d22:	ef 59       	subi	r30, 0x9F	; 159
    1d24:	fe 4f       	sbci	r31, 0xFE	; 254
    1d26:	84 81       	ldd	r24, Z+4	; 0x04
    1d28:	e5 80       	ldd	r14, Z+5	; 0x05
    1d2a:	f1 2c       	mov	r15, r1
    1d2c:	f8 2a       	or	r15, r24
		//param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5]):(0);
		inSysBDZ[addr].data[2]=inSysBDZ[addr].data[3]=-1;	//в неизменяемый параметр пишем -1
    1d2e:	8f ef       	ldi	r24, 0xFF	; 255
    1d30:	83 83       	std	Z+3, r24	; 0x03
    1d32:	82 83       	std	Z+2, r24	; 0x02
    1d34:	1a c0       	rjmp	.+52     	; 0x1d6a <change_param+0x116>
	}

	switch(nParam)
	{
	//изменение адреса
	case 0:{staroe=inSysBDZ[addr].data[1];max=99;step=1;}
    1d36:	29 e0       	ldi	r18, 0x09	; 9
    1d38:	52 9e       	mul	r5, r18
    1d3a:	f0 01       	movw	r30, r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	ef 59       	subi	r30, 0x9F	; 159
    1d40:	fe 4f       	sbci	r31, 0xFE	; 254
    1d42:	e1 80       	ldd	r14, Z+1	; 0x01
    1d44:	f1 2c       	mov	r15, r1
    1d46:	33 e6       	ldi	r19, 0x63	; 99
    1d48:	83 2e       	mov	r8, r19
    1d4a:	91 2c       	mov	r9, r1
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
	break;
    1d4e:	12 c0       	rjmp	.+36     	; 0x1d74 <change_param+0x120>
	//время МТЗ:если на связи 1 БДЗ пишем его время МТЗ, если больше то 0мс
	case 1:
	{
		staroe=(signed int)inSysBDZ[addr].data[2]<<8 | inSysBDZ[addr].data[3];
    1d50:	39 e0       	ldi	r19, 0x09	; 9
    1d52:	53 9e       	mul	r5, r19
    1d54:	f0 01       	movw	r30, r0
    1d56:	11 24       	eor	r1, r1
    1d58:	ef 59       	subi	r30, 0x9F	; 159
    1d5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5c:	82 81       	ldd	r24, Z+2	; 0x02
    1d5e:	e3 80       	ldd	r14, Z+3	; 0x03
    1d60:	f1 2c       	mov	r15, r1
    1d62:	f8 2a       	or	r15, r24
		//param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[2]<<8 | inSysBDZ[addr].data[3]):(0);
		inSysBDZ[addr].data[4]=inSysBDZ[addr].data[5]=-1;	//в неизменяемый параметр пишем -1
    1d64:	8f ef       	ldi	r24, 0xFF	; 255
    1d66:	85 83       	std	Z+5, r24	; 0x05
    1d68:	84 83       	std	Z+4, r24	; 0x04
	case 2:
	{
		staroe=(signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5];
		//param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5]):(0);
		inSysBDZ[addr].data[2]=inSysBDZ[addr].data[3]=-1;	//в неизменяемый параметр пишем -1
		max=30000;
    1d6a:	20 e3       	ldi	r18, 0x30	; 48
    1d6c:	82 2e       	mov	r8, r18
    1d6e:	25 e7       	ldi	r18, 0x75	; 117
    1d70:	92 2e       	mov	r9, r18
		step=10;
    1d72:	8a e0       	ldi	r24, 0x0A	; 10
    1d74:	00 e0       	ldi	r16, 0x00	; 0
    1d76:	10 e0       	ldi	r17, 0x00	; 0
    1d78:	fe 01       	movw	r30, r28
    1d7a:	31 96       	adiw	r30, 0x01	; 1
    1d7c:	6f 01       	movw	r12, r30
		if(addr!=0)
		{
			LCD_gotoXY(0,0);
			LCD_puts_P(STAROE_ZNACHENIE,16);
			LCD_putchar(0x3A);
			sprintf(str,"%d",staroe);
    1d7e:	9c e1       	ldi	r25, 0x1C	; 28
    1d80:	69 2e       	mov	r6, r25
    1d82:	91 e0       	ldi	r25, 0x01	; 1
    1d84:	79 2e       	mov	r7, r25
		if(nParam!=0)LCD_puts_P(MS,2);
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(param>(nParam==0)?(1):(0))param-=step;
		break;
		case UP:if(param<max)param+=step;
    1d86:	a8 2e       	mov	r10, r24
    1d88:	b1 2c       	mov	r11, r1
	}

	while(1)
	{
		char str[6];
		LCD_clr();
    1d8a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LCD_clr>
		if(addr!=0)
    1d8e:	55 20       	and	r5, r5
    1d90:	81 f1       	breq	.+96     	; 0x1df2 <change_param+0x19e>
		{
			LCD_gotoXY(0,0);
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
			LCD_puts_P(STAROE_ZNACHENIE,16);
    1d9a:	60 e1       	ldi	r22, 0x10	; 16
    1d9c:	8e ef       	ldi	r24, 0xFE	; 254
    1d9e:	91 e0       	ldi	r25, 0x01	; 1
    1da0:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
			LCD_putchar(0x3A);
    1da4:	8a e3       	ldi	r24, 0x3A	; 58
    1da6:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_putchar>
			sprintf(str,"%d",staroe);
    1daa:	ff 92       	push	r15
    1dac:	ef 92       	push	r14
    1dae:	7f 92       	push	r7
    1db0:	6f 92       	push	r6
    1db2:	df 92       	push	r13
    1db4:	cf 92       	push	r12
    1db6:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <sprintf>
			LCD_gotoXY(0,1);
    1dba:	61 e0       	ldi	r22, 0x01	; 1
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
			LCD_puts(str,strlen(str));
    1dc2:	f6 01       	movw	r30, r12
    1dc4:	01 90       	ld	r0, Z+
    1dc6:	00 20       	and	r0, r0
    1dc8:	e9 f7       	brne	.-6      	; 0x1dc4 <change_param+0x170>
    1dca:	31 97       	sbiw	r30, 0x01	; 1
    1dcc:	bf 01       	movw	r22, r30
    1dce:	6c 19       	sub	r22, r12
    1dd0:	7d 09       	sbc	r23, r13
    1dd2:	c6 01       	movw	r24, r12
    1dd4:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
			if(nParam!=0)LCD_puts_P(MS,2);
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	44 20       	and	r4, r4
    1de6:	29 f0       	breq	.+10     	; 0x1df2 <change_param+0x19e>
    1de8:	62 e0       	ldi	r22, 0x02	; 2
    1dea:	85 e7       	ldi	r24, 0x75	; 117
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
		}

		LCD_gotoXY(0,2);
    1df2:	62 e0       	ldi	r22, 0x02	; 2
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		LCD_puts_P(NOVOE_ZNACHENIE,strlen_P(NOVOE_ZNACHENIE));
    1dfa:	6e e0       	ldi	r22, 0x0E	; 14
    1dfc:	8f e5       	ldi	r24, 0x5F	; 95
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
		LCD_putchar(0x3A);
    1e04:	8a e3       	ldi	r24, 0x3A	; 58
    1e06:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_putchar>
		sprintf(str,"%d",param);
    1e0a:	1f 93       	push	r17
    1e0c:	0f 93       	push	r16
    1e0e:	7f 92       	push	r7
    1e10:	6f 92       	push	r6
    1e12:	df 92       	push	r13
    1e14:	cf 92       	push	r12
    1e16:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <sprintf>
		LCD_gotoXY(0,3);
    1e1a:	63 e0       	ldi	r22, 0x03	; 3
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		LCD_puts(str,strlen(str));
    1e22:	f6 01       	movw	r30, r12
    1e24:	01 90       	ld	r0, Z+
    1e26:	00 20       	and	r0, r0
    1e28:	e9 f7       	brne	.-6      	; 0x1e24 <change_param+0x1d0>
    1e2a:	31 97       	sbiw	r30, 0x01	; 1
    1e2c:	bf 01       	movw	r22, r30
    1e2e:	6c 19       	sub	r22, r12
    1e30:	7d 09       	sbc	r23, r13
    1e32:	c6 01       	movw	r24, r12
    1e34:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
		if(nParam!=0)LCD_puts_P(MS,2);
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	44 20       	and	r4, r4
    1e46:	29 f0       	breq	.+10     	; 0x1e52 <change_param+0x1fe>
    1e48:	62 e0       	ldi	r22, 0x02	; 2
    1e4a:	85 e7       	ldi	r24, 0x75	; 117
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1e52:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    1e56:	85 30       	cpi	r24, 0x05	; 5
    1e58:	e1 f0       	breq	.+56     	; 0x1e92 <change_param+0x23e>
    1e5a:	30 f4       	brcc	.+12     	; 0x1e68 <change_param+0x214>
    1e5c:	82 30       	cpi	r24, 0x02	; 2
    1e5e:	01 f1       	breq	.+64     	; 0x1ea0 <change_param+0x24c>
    1e60:	83 30       	cpi	r24, 0x03	; 3
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <change_param+0x212>
    1e64:	6a c0       	rjmp	.+212    	; 0x1f3a <change_param+0x2e6>
    1e66:	91 cf       	rjmp	.-222    	; 0x1d8a <change_param+0x136>
    1e68:	86 30       	cpi	r24, 0x06	; 6
    1e6a:	31 f0       	breq	.+12     	; 0x1e78 <change_param+0x224>
    1e6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <change_param+0x21e>
    1e70:	8c cf       	rjmp	.-232    	; 0x1d8a <change_param+0x136>
		break;
		case ENT:goto SEND;	//выход по ENT (отсылка новых параметров)
		break;
		case ESC:return;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");
    1e72:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
		}
	}
    1e76:	89 cf       	rjmp	.-238    	; 0x1d8a <change_param+0x136>
		LCD_gotoXY(0,3);
		LCD_puts(str,strlen(str));
		if(nParam!=0)LCD_puts_P(MS,2);
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(param>(nParam==0)?(1):(0))param-=step;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	44 20       	and	r4, r4
    1e7e:	11 f0       	breq	.+4      	; 0x1e84 <change_param+0x230>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	80 17       	cp	r24, r16
    1e86:	91 07       	cpc	r25, r17
    1e88:	0c f0       	brlt	.+2      	; 0x1e8c <change_param+0x238>
    1e8a:	7f cf       	rjmp	.-258    	; 0x1d8a <change_param+0x136>
    1e8c:	0a 19       	sub	r16, r10
    1e8e:	1b 09       	sbc	r17, r11
    1e90:	7c cf       	rjmp	.-264    	; 0x1d8a <change_param+0x136>
		break;
		case UP:if(param<max)param+=step;
    1e92:	08 15       	cp	r16, r8
    1e94:	19 05       	cpc	r17, r9
    1e96:	0c f0       	brlt	.+2      	; 0x1e9a <change_param+0x246>
    1e98:	78 cf       	rjmp	.-272    	; 0x1d8a <change_param+0x136>
    1e9a:	0a 0d       	add	r16, r10
    1e9c:	1b 1d       	adc	r17, r11
    1e9e:	75 cf       	rjmp	.-278    	; 0x1d8a <change_param+0x136>
	}
SEND:
	//отсылка новых параметров
	//if(eeprom_read_byte(&inSysBDZaddr[addr])!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}

	inSysBDZ[addr].data[0]=PROG;
    1ea0:	c5 2c       	mov	r12, r5
    1ea2:	d1 2c       	mov	r13, r1
    1ea4:	f9 e0       	ldi	r31, 0x09	; 9
    1ea6:	5f 9e       	mul	r5, r31
    1ea8:	c0 01       	movw	r24, r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	9c 01       	movw	r18, r24
    1eae:	2f 59       	subi	r18, 0x9F	; 159
    1eb0:	3e 4f       	sbci	r19, 0xFE	; 254
    1eb2:	79 01       	movw	r14, r18
    1eb4:	86 e0       	ldi	r24, 0x06	; 6
    1eb6:	f9 01       	movw	r30, r18
    1eb8:	80 83       	st	Z, r24
	switch(nParam)
    1eba:	f1 e0       	ldi	r31, 0x01	; 1
    1ebc:	4f 16       	cp	r4, r31
    1ebe:	41 f1       	breq	.+80     	; 0x1f10 <change_param+0x2bc>
    1ec0:	4f 16       	cp	r4, r31
    1ec2:	38 f0       	brcs	.+14     	; 0x1ed2 <change_param+0x27e>
    1ec4:	22 e0       	ldi	r18, 0x02	; 2
    1ec6:	42 12       	cpse	r4, r18
    1ec8:	38 c0       	rjmp	.+112    	; 0x1f3a <change_param+0x2e6>
	case 0:	if(readID(param)!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}
			inSysBDZ[addr].data[1]=param;
	break;
	case 1:{inSysBDZ[addr].data[2]=param >>8; inSysBDZ[addr].data[3]=param & 0x00FF;}
	break;
	case 2:{inSysBDZ[addr].data[4]=param >>8; inSysBDZ[addr].data[5]=param & 0x00FF;}
    1eca:	f7 01       	movw	r30, r14
    1ecc:	14 83       	std	Z+4, r17	; 0x04
    1ece:	05 83       	std	Z+5, r16	; 0x05
	break;
    1ed0:	22 c0       	rjmp	.+68     	; 0x1f16 <change_param+0x2c2>
	//if(eeprom_read_byte(&inSysBDZaddr[addr])!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}

	inSysBDZ[addr].data[0]=PROG;
	switch(nParam)
	{
	case 0:	if(readID(param)!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	87 5f       	subi	r24, 0xF7	; 247
    1ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed8:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    1edc:	88 23       	and	r24, r24
    1ede:	a9 f0       	breq	.+42     	; 0x1f0a <change_param+0x2b6>
    1ee0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LCD_clr>
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
    1eec:	64 e1       	ldi	r22, 0x14	; 20
    1eee:	8b ee       	ldi	r24, 0xEB	; 235
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
    1ef6:	3f ef       	ldi	r19, 0xFF	; 255
    1ef8:	87 ea       	ldi	r24, 0xA7	; 167
    1efa:	91 e6       	ldi	r25, 0x61	; 97
    1efc:	31 50       	subi	r19, 0x01	; 1
    1efe:	80 40       	sbci	r24, 0x00	; 0
    1f00:	90 40       	sbci	r25, 0x00	; 0
    1f02:	e1 f7       	brne	.-8      	; 0x1efc <change_param+0x2a8>
    1f04:	00 c0       	rjmp	.+0      	; 0x1f06 <change_param+0x2b2>
    1f06:	00 00       	nop
    1f08:	18 c0       	rjmp	.+48     	; 0x1f3a <change_param+0x2e6>
			inSysBDZ[addr].data[1]=param;
    1f0a:	f7 01       	movw	r30, r14
    1f0c:	01 83       	std	Z+1, r16	; 0x01
	break;
    1f0e:	03 c0       	rjmp	.+6      	; 0x1f16 <change_param+0x2c2>
	case 1:{inSysBDZ[addr].data[2]=param >>8; inSysBDZ[addr].data[3]=param & 0x00FF;}
    1f10:	f9 01       	movw	r30, r18
    1f12:	12 83       	std	Z+2, r17	; 0x02
    1f14:	03 83       	std	Z+3, r16	; 0x03
	break;
	case 2:{inSysBDZ[addr].data[4]=param >>8; inSysBDZ[addr].data[5]=param & 0x00FF;}
	break;
	default:return;
	}
	if((send_prog(addr,inSysBDZ[addr].data)<0) && (param!=0)){printTOUT();_delay_ms(2000);return;}
    1f16:	89 e0       	ldi	r24, 0x09	; 9
    1f18:	8c 9d       	mul	r24, r12
    1f1a:	b0 01       	movw	r22, r0
    1f1c:	8d 9d       	mul	r24, r13
    1f1e:	70 0d       	add	r23, r0
    1f20:	11 24       	eor	r1, r1
    1f22:	6f 59       	subi	r22, 0x9F	; 159
    1f24:	7e 4f       	sbci	r23, 0xFE	; 254
    1f26:	85 2d       	mov	r24, r5
    1f28:	0e 94 03 0c 	call	0x1806	; 0x1806 <send_prog>
    1f2c:	87 ff       	sbrs	r24, 7
    1f2e:	03 c0       	rjmp	.+6      	; 0x1f36 <change_param+0x2e2>
    1f30:	01 2b       	or	r16, r17
    1f32:	09 f0       	breq	.+2      	; 0x1f36 <change_param+0x2e2>
    1f34:	e4 ce       	rjmp	.-568    	; 0x1cfe <change_param+0xaa>
	scansys();
    1f36:	0e 94 40 0b 	call	0x1680	; 0x1680 <scansys>

	return;
}
    1f3a:	26 96       	adiw	r28, 0x06	; 6
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	1f 91       	pop	r17
    1f4c:	0f 91       	pop	r16
    1f4e:	ff 90       	pop	r15
    1f50:	ef 90       	pop	r14
    1f52:	df 90       	pop	r13
    1f54:	cf 90       	pop	r12
    1f56:	bf 90       	pop	r11
    1f58:	af 90       	pop	r10
    1f5a:	9f 90       	pop	r9
    1f5c:	8f 90       	pop	r8
    1f5e:	7f 90       	pop	r7
    1f60:	6f 90       	pop	r6
    1f62:	5f 90       	pop	r5
    1f64:	4f 90       	pop	r4
    1f66:	08 95       	ret

00001f68 <vremya_urov>:
	change_param(1);
}

static void vremya_urov(void)
{
	change_param(2);
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <change_param>

00001f6e <vremya_mtz>:
	naviMenu(LVL_prog);
}

static void vremya_mtz(void)
{
	change_param(1);
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <change_param>

00001f74 <adres>:
	change_param(2);
}

static void adres(void)
{
	change_param(0);
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <change_param>

00001f7a <datavremya>:
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}

static void datavremya(void)
{
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	a6 97       	sbiw	r28, 0x26	; 38
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
	char buffer[20],max[]={31,12,99,23,59,59},min;
    1f9a:	86 e0       	ldi	r24, 0x06	; 6
    1f9c:	e4 ee       	ldi	r30, 0xE4	; 228
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	de 01       	movw	r26, r28
    1fa2:	91 96       	adiw	r26, 0x21	; 33
    1fa4:	01 90       	ld	r0, Z+
    1fa6:	0d 92       	st	X+, r0
    1fa8:	8a 95       	dec	r24
    1faa:	e1 f7       	brne	.-8      	; 0x1fa4 <datavremya+0x2a>
	unsigned char cursorPos=0;
	unsigned char *ptr[] = {&rtc.day,&rtc.month,&rtc.year,&rtc.hours,&rtc.minutes,&rtc.seconds};
    1fac:	8c e0       	ldi	r24, 0x0C	; 12
    1fae:	ea ee       	ldi	r30, 0xEA	; 234
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	de 01       	movw	r26, r28
    1fb4:	55 96       	adiw	r26, 0x15	; 21
    1fb6:	01 90       	ld	r0, Z+
    1fb8:	0d 92       	st	X+, r0
    1fba:	8a 95       	dec	r24
    1fbc:	e1 f7       	brne	.-8      	; 0x1fb6 <datavremya+0x3c>

	printMenuHeader(DATAVREMYA);
    1fbe:	83 e6       	ldi	r24, 0x63	; 99
    1fc0:	91 e0       	ldi	r25, 0x01	; 1
    1fc2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <printMenuHeader>

	if(rtc_get(&rtc) < 0) {ERROR=RTC;/*return -1;*/}
    1fc6:	80 ef       	ldi	r24, 0xF0	; 240
    1fc8:	94 e0       	ldi	r25, 0x04	; 4
    1fca:	0e 94 b4 02 	call	0x568	; 0x568 <rtc_get>
    1fce:	87 ff       	sbrs	r24, 7
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <datavremya+0x5e>
    1fd2:	82 e0       	ldi	r24, 0x02	; 2
    1fd4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}

static void datavremya(void)
{
    1fd8:	10 e0       	ldi	r17, 0x00	; 0
	if(rtc_get(&rtc) < 0) {ERROR=RTC;/*return -1;*/}


	while(1)
	{
		sprintf(buffer," %02u.%02u.%02u %02u:%02u:%02u",*ptr[0],*ptr[1],*ptr[2],*ptr[3],*ptr[4],*ptr[5]);
    1fda:	5f e1       	ldi	r21, 0x1F	; 31
    1fdc:	c5 2e       	mov	r12, r21
    1fde:	51 e0       	ldi	r21, 0x01	; 1
    1fe0:	d5 2e       	mov	r13, r21
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	7c 01       	movw	r14, r24
    1fe8:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <rtc+0x5>
    1fec:	1f 92       	push	r1
    1fee:	8f 93       	push	r24
    1ff0:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <rtc+0x4>
    1ff4:	1f 92       	push	r1
    1ff6:	8f 93       	push	r24
    1ff8:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <rtc+0x3>
    1ffc:	1f 92       	push	r1
    1ffe:	8f 93       	push	r24
    2000:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <rtc>
    2004:	1f 92       	push	r1
    2006:	8f 93       	push	r24
    2008:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <rtc+0x1>
    200c:	1f 92       	push	r1
    200e:	8f 93       	push	r24
    2010:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <rtc+0x2>
    2014:	1f 92       	push	r1
    2016:	8f 93       	push	r24
    2018:	df 92       	push	r13
    201a:	cf 92       	push	r12
    201c:	ff 92       	push	r15
    201e:	ef 92       	push	r14
    2020:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <sprintf>
		LCD_gotoXY(0,3);
    2024:	63 e0       	ldi	r22, 0x03	; 3
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		LCD_puts(buffer,18);
    202c:	62 e1       	ldi	r22, 0x12	; 18
    202e:	c7 01       	movw	r24, r14
    2030:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
		LCD_gotoXY(cursorPos*3,3);
    2034:	63 e0       	ldi	r22, 0x03	; 3
    2036:	81 2f       	mov	r24, r17
    2038:	88 0f       	add	r24, r24
    203a:	81 0f       	add	r24, r17
    203c:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		LCD_putchar(0x84);
    2040:	84 e8       	ldi	r24, 0x84	; 132
    2042:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_putchar>
		min=(cursorPos < 2)?(1):(0);
    2046:	01 e0       	ldi	r16, 0x01	; 1
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	12 30       	cpi	r17, 0x02	; 2
    2054:	08 f0       	brcs	.+2      	; 0x2058 <datavremya+0xde>
    2056:	00 e0       	ldi	r16, 0x00	; 0

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2058:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    205c:	85 30       	cpi	r24, 0x05	; 5
    205e:	b1 f0       	breq	.+44     	; 0x208c <datavremya+0x112>
    2060:	30 f4       	brcc	.+12     	; 0x206e <datavremya+0xf4>
    2062:	82 30       	cpi	r24, 0x02	; 2
    2064:	09 f4       	brne	.+2      	; 0x2068 <datavremya+0xee>
    2066:	43 c0       	rjmp	.+134    	; 0x20ee <datavremya+0x174>
    2068:	84 30       	cpi	r24, 0x04	; 4
    206a:	59 f0       	breq	.+22     	; 0x2082 <datavremya+0x108>
    206c:	44 c0       	rjmp	.+136    	; 0x20f6 <datavremya+0x17c>
    206e:	86 30       	cpi	r24, 0x06	; 6
    2070:	29 f1       	breq	.+74     	; 0x20bc <datavremya+0x142>
    2072:	87 30       	cpi	r24, 0x07	; 7
    2074:	09 f0       	breq	.+2      	; 0x2078 <datavremya+0xfe>
    2076:	3f c0       	rjmp	.+126    	; 0x20f6 <datavremya+0x17c>
		{
		case RIGHT: if(cursorPos < 5) cursorPos++;
    2078:	15 30       	cpi	r17, 0x05	; 5
    207a:	08 f0       	brcs	.+2      	; 0x207e <datavremya+0x104>
    207c:	b5 cf       	rjmp	.-150    	; 0x1fe8 <datavremya+0x6e>
    207e:	1f 5f       	subi	r17, 0xFF	; 255
    2080:	b3 cf       	rjmp	.-154    	; 0x1fe8 <datavremya+0x6e>
		break;
		case LEFT: if(cursorPos >0) cursorPos--;
    2082:	11 23       	and	r17, r17
    2084:	09 f4       	brne	.+2      	; 0x2088 <datavremya+0x10e>
    2086:	b0 cf       	rjmp	.-160    	; 0x1fe8 <datavremya+0x6e>
    2088:	11 50       	subi	r17, 0x01	; 1
    208a:	ae cf       	rjmp	.-164    	; 0x1fe8 <datavremya+0x6e>
		break;
		case UP:(*ptr[cursorPos] < max[cursorPos])?((*ptr[cursorPos])++):(*ptr[cursorPos]=min);
    208c:	21 2f       	mov	r18, r17
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	f9 01       	movw	r30, r18
    2092:	ee 0f       	add	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	ee 0d       	add	r30, r14
    2098:	ff 1d       	adc	r31, r15
    209a:	04 88       	ldd	r0, Z+20	; 0x14
    209c:	f5 89       	ldd	r31, Z+21	; 0x15
    209e:	e0 2d       	mov	r30, r0
    20a0:	80 81       	ld	r24, Z
    20a2:	a1 e2       	ldi	r26, 0x21	; 33
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	ac 0f       	add	r26, r28
    20a8:	bd 1f       	adc	r27, r29
    20aa:	a2 0f       	add	r26, r18
    20ac:	b3 1f       	adc	r27, r19
    20ae:	9c 91       	ld	r25, X
    20b0:	89 17       	cp	r24, r25
    20b2:	10 f4       	brcc	.+4      	; 0x20b8 <datavremya+0x13e>
    20b4:	8f 5f       	subi	r24, 0xFF	; 255
    20b6:	19 c0       	rjmp	.+50     	; 0x20ea <datavremya+0x170>
    20b8:	00 83       	st	Z, r16
    20ba:	96 cf       	rjmp	.-212    	; 0x1fe8 <datavremya+0x6e>
		break;
		case DOWN:(*ptr[cursorPos] > min)?((*ptr[cursorPos])--):(*ptr[cursorPos]=max[cursorPos]);
    20bc:	81 2f       	mov	r24, r17
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	fc 01       	movw	r30, r24
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	ee 0d       	add	r30, r14
    20c8:	ff 1d       	adc	r31, r15
    20ca:	04 88       	ldd	r0, Z+20	; 0x14
    20cc:	f5 89       	ldd	r31, Z+21	; 0x15
    20ce:	e0 2d       	mov	r30, r0
    20d0:	20 81       	ld	r18, Z
    20d2:	02 17       	cp	r16, r18
    20d4:	18 f4       	brcc	.+6      	; 0x20dc <datavremya+0x162>
    20d6:	21 50       	subi	r18, 0x01	; 1
    20d8:	20 83       	st	Z, r18
    20da:	86 cf       	rjmp	.-244    	; 0x1fe8 <datavremya+0x6e>
    20dc:	a1 e2       	ldi	r26, 0x21	; 33
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	ac 0f       	add	r26, r28
    20e2:	bd 1f       	adc	r27, r29
    20e4:	a8 0f       	add	r26, r24
    20e6:	b9 1f       	adc	r27, r25
    20e8:	8c 91       	ld	r24, X
    20ea:	80 83       	st	Z, r24
    20ec:	7d cf       	rjmp	.-262    	; 0x1fe8 <datavremya+0x6e>
		break;
		case ENT:{rtc_set(&rtc);return;}
    20ee:	80 ef       	ldi	r24, 0xF0	; 240
    20f0:	94 e0       	ldi	r25, 0x04	; 4
    20f2:	0e 94 4f 02 	call	0x49e	; 0x49e <rtc_set>
		default: return;
		}
	}


}
    20f6:	a6 96       	adiw	r28, 0x26	; 38
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	08 95       	ret

00002114 <chetnost>:
		}
	}
}

static void chetnost(void)
{
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	cf 93       	push	r28
	printMenuHeader(CHETNOST);
    211a:	87 e1       	ldi	r24, 0x17	; 23
    211c:	91 e0       	ldi	r25, 0x01	; 1
    211e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <printMenuHeader>
	unsigned char mparity=eeprom_read_byte(&parity);
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    212a:	c8 2f       	mov	r28, r24
	PGM_P ptr=0;
    212c:	00 e0       	ldi	r16, 0x00	; 0
    212e:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		LCD_gotoXY(10,0);
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	8a e0       	ldi	r24, 0x0A	; 10
    2134:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		switch(mparity)
    2138:	c0 32       	cpi	r28, 0x20	; 32
    213a:	19 f1       	breq	.+70     	; 0x2182 <chetnost+0x6e>
    213c:	c0 33       	cpi	r28, 0x30	; 48
    213e:	61 f0       	breq	.+24     	; 0x2158 <chetnost+0x44>
    2140:	c1 11       	cpse	r28, r1
    2142:	0d c0       	rjmp	.+26     	; 0x215e <chetnost+0x4a>
		{
		case NONE:ptr=C_NONE;
    2144:	09 e0       	ldi	r16, 0x09	; 9
    2146:	11 e0       	ldi	r17, 0x01	; 1
    2148:	c0 e0       	ldi	r28, 0x00	; 0
		break;
    214a:	09 c0       	rjmp	.+18     	; 0x215e <chetnost+0x4a>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mparity==EVEN) mparity=ODD;
    214c:	c0 32       	cpi	r28, 0x20	; 32
    214e:	39 f5       	brne	.+78     	; 0x219e <chetnost+0x8a>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	8a e0       	ldi	r24, 0x0A	; 10
    2154:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		{
		case NONE:ptr=C_NONE;
		break;
		case EVEN:ptr=C_EVEN;
		break;
		case ODD:ptr=C_ODD;
    2158:	03 e1       	ldi	r16, 0x13	; 19
    215a:	11 e0       	ldi	r17, 0x01	; 1
    215c:	c0 e3       	ldi	r28, 0x30	; 48
		break;
		}
		LCD_puts_P(ptr,5);
    215e:	65 e0       	ldi	r22, 0x05	; 5
    2160:	c8 01       	movw	r24, r16
    2162:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2166:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    216a:	85 30       	cpi	r24, 0x05	; 5
    216c:	79 f3       	breq	.-34     	; 0x214c <chetnost+0x38>
    216e:	86 30       	cpi	r24, 0x06	; 6
    2170:	61 f4       	brne	.+24     	; 0x218a <chetnost+0x76>
			else if(mparity==ODD)mparity=NONE;
		}
		break;
		case DOWN:
		{
			if(mparity==NONE) mparity=ODD;
    2172:	cc 23       	and	r28, r28
    2174:	69 f3       	breq	.-38     	; 0x2150 <chetnost+0x3c>
			else if(mparity==ODD)mparity=EVEN;
    2176:	c0 33       	cpi	r28, 0x30	; 48
    2178:	d9 f6       	brne	.-74     	; 0x2130 <chetnost+0x1c>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	8a e0       	ldi	r24, 0x0A	; 10
    217e:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		switch(mparity)
		{
		case NONE:ptr=C_NONE;
		break;
		case EVEN:ptr=C_EVEN;
    2182:	0e e0       	ldi	r16, 0x0E	; 14
    2184:	11 e0       	ldi	r17, 0x01	; 1
    2186:	c0 e2       	ldi	r28, 0x20	; 32
		break;
    2188:	ea cf       	rjmp	.-44     	; 0x215e <chetnost+0x4a>
		case ODD:ptr=C_ODD;
		break;
		}
		LCD_puts_P(ptr,5);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    218a:	82 30       	cpi	r24, 0x02	; 2
    218c:	79 f4       	brne	.+30     	; 0x21ac <chetnost+0x98>
			else if(mparity==ODD)mparity=EVEN;
		}
		break;
		case ENT:
		{
			eeprom_write_byte(&parity,mparity);
    218e:	6c 2f       	mov	r22, r28
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		default: return;
		}
	}
}
    2194:	cf 91       	pop	r28
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
			else if(mparity==ODD)mparity=EVEN;
		}
		break;
		case ENT:
		{
			eeprom_write_byte(&parity,mparity);
    219a:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <eeprom_write_byte>
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mparity==EVEN) mparity=ODD;
			else if(mparity==ODD)mparity=NONE;
    219e:	c0 33       	cpi	r28, 0x30	; 48
    21a0:	39 f6       	brne	.-114    	; 0x2130 <chetnost+0x1c>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	8a e0       	ldi	r24, 0x0A	; 10
    21a6:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
    21aa:	cc cf       	rjmp	.-104    	; 0x2144 <chetnost+0x30>
			return;
		}
		default: return;
		}
	}
}
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	08 95       	ret

000021b4 <skorost>:
		}
	}
}

static void skorost(void)
{
    21b4:	cf 92       	push	r12
    21b6:	df 92       	push	r13
    21b8:	ef 92       	push	r14
    21ba:	ff 92       	push	r15
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	27 97       	sbiw	r28, 0x07	; 7
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61

//	unsigned int speeds_table[SPEED_INDEX]={9600,19200,38400,76800};
	unsigned long int mspeed=eeprom_read_dword(&speed);
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <eeprom_read_dword>
    21d8:	6b 01       	movw	r12, r22
    21da:	7c 01       	movw	r14, r24
	char buf[7];

	printMenuHeader(SKOROST);
    21dc:	80 e2       	ldi	r24, 0x20	; 32
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <printMenuHeader>

	while(1)
	{
		LCD_gotoXY(10,0);
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	8a e0       	ldi	r24, 0x0A	; 10
    21e8:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    21ec:	2a e0       	ldi	r18, 0x0A	; 10
    21ee:	ae 01       	movw	r20, r28
    21f0:	4f 5f       	subi	r20, 0xFF	; 255
    21f2:	5f 4f       	sbci	r21, 0xFF	; 255
    21f4:	c7 01       	movw	r24, r14
    21f6:	b6 01       	movw	r22, r12
    21f8:	0e 94 29 1c 	call	0x3852	; 0x3852 <__ltoa_ncheck>
		LCD_puts(ltoa(mspeed,buf,10),5);
    21fc:	65 e0       	ldi	r22, 0x05	; 5
    21fe:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>


		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2202:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    2206:	85 30       	cpi	r24, 0x05	; 5
    2208:	59 f0       	breq	.+22     	; 0x2220 <skorost+0x6c>
    220a:	86 30       	cpi	r24, 0x06	; 6
    220c:	a9 f0       	breq	.+42     	; 0x2238 <skorost+0x84>
    220e:	82 30       	cpi	r24, 0x02	; 2
    2210:	f9 f4       	brne	.+62     	; 0x2250 <skorost+0x9c>
		{
			if(mspeed>9600) mspeed/=2;
		}

		break;
		case ENT:{eeprom_write_dword(&speed,mspeed);return;}
    2212:	b7 01       	movw	r22, r14
    2214:	a6 01       	movw	r20, r12
    2216:	82 e0       	ldi	r24, 0x02	; 2
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <eeprom_write_dword>
    221e:	18 c0       	rjmp	.+48     	; 0x2250 <skorost+0x9c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mspeed<76800) mspeed*=2;
    2220:	c1 14       	cp	r12, r1
    2222:	8c e2       	ldi	r24, 0x2C	; 44
    2224:	d8 06       	cpc	r13, r24
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	e8 06       	cpc	r14, r24
    222a:	f1 04       	cpc	r15, r1
    222c:	d8 f6       	brcc	.-74     	; 0x21e4 <skorost+0x30>
    222e:	cc 0c       	add	r12, r12
    2230:	dd 1c       	adc	r13, r13
    2232:	ee 1c       	adc	r14, r14
    2234:	ff 1c       	adc	r15, r15
    2236:	d6 cf       	rjmp	.-84     	; 0x21e4 <skorost+0x30>
		}
		break;
		case DOWN:
		{
			if(mspeed>9600) mspeed/=2;
    2238:	81 e8       	ldi	r24, 0x81	; 129
    223a:	c8 16       	cp	r12, r24
    223c:	85 e2       	ldi	r24, 0x25	; 37
    223e:	d8 06       	cpc	r13, r24
    2240:	e1 04       	cpc	r14, r1
    2242:	f1 04       	cpc	r15, r1
    2244:	78 f2       	brcs	.-98     	; 0x21e4 <skorost+0x30>
    2246:	f6 94       	lsr	r15
    2248:	e7 94       	ror	r14
    224a:	d7 94       	ror	r13
    224c:	c7 94       	ror	r12
    224e:	ca cf       	rjmp	.-108    	; 0x21e4 <skorost+0x30>
		break;
		case ENT:{eeprom_write_dword(&speed,mspeed);return;}
		default: return;
		}
	}
}
    2250:	27 96       	adiw	r28, 0x07	; 7
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	ff 90       	pop	r15
    2262:	ef 90       	pop	r14
    2264:	df 90       	pop	r13
    2266:	cf 90       	pop	r12
    2268:	08 95       	ret

0000226a <rezhim>:
	naviMenu(LVL_svyaz);
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
}

static void rezhim(void)
{
    226a:	cf 93       	push	r28
	printMenuHeader(REZHIM);
    226c:	83 e3       	ldi	r24, 0x33	; 51
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	0e 94 c6 06 	call	0xd8c	; 0xd8c <printMenuHeader>
	unsigned char mmode=eeprom_read_byte(&mode);
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    227c:	c8 2f       	mov	r28, r24

	while(1)
	{
		LCD_gotoXY(10,0);
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	8a e0       	ldi	r24, 0x0A	; 10
    2282:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		(mmode==RTU)?(LCD_puts_P(RTU_M,5)):(LCD_puts_P(ASCII_M,5));
    2286:	65 e0       	ldi	r22, 0x05	; 5
    2288:	c1 11       	cpse	r28, r1
    228a:	03 c0       	rjmp	.+6      	; 0x2292 <rezhim+0x28>
    228c:	8f e2       	ldi	r24, 0x2F	; 47
    228e:	91 e0       	ldi	r25, 0x01	; 1
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <rezhim+0x2c>
    2292:	89 e2       	ldi	r24, 0x29	; 41
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    229a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    229e:	85 30       	cpi	r24, 0x05	; 5
    22a0:	51 f0       	breq	.+20     	; 0x22b6 <rezhim+0x4c>
    22a2:	86 30       	cpi	r24, 0x06	; 6
    22a4:	61 f0       	breq	.+24     	; 0x22be <rezhim+0x54>
    22a6:	82 30       	cpi	r24, 0x02	; 2
    22a8:	71 f4       	brne	.+28     	; 0x22c6 <rezhim+0x5c>
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
		break;
		case ENT:
		{
			eeprom_write_byte(&mode,mmode);
    22aa:	6c 2f       	mov	r22, r28
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		default: return;
		}
	}
}
    22b0:	cf 91       	pop	r28
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
		break;
		case ENT:
		{
			eeprom_write_byte(&mode,mmode);
    22b2:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <eeprom_write_byte>
		LCD_gotoXY(10,0);
		(mmode==RTU)?(LCD_puts_P(RTU_M,5)):(LCD_puts_P(ASCII_M,5));

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:if(mmode==RTU)mmode=ASCII;
    22b6:	c1 11       	cpse	r28, r1
    22b8:	e2 cf       	rjmp	.-60     	; 0x227e <rezhim+0x14>
    22ba:	c1 e0       	ldi	r28, 0x01	; 1
    22bc:	e0 cf       	rjmp	.-64     	; 0x227e <rezhim+0x14>
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
    22be:	c1 30       	cpi	r28, 0x01	; 1
    22c0:	f1 f6       	brne	.-68     	; 0x227e <rezhim+0x14>
    22c2:	c0 e0       	ldi	r28, 0x00	; 0
    22c4:	dc cf       	rjmp	.-72     	; 0x227e <rezhim+0x14>
			return;
		}
		default: return;
		}
	}
}
    22c6:	cf 91       	pop	r28
    22c8:	08 95       	ret

000022ca <printSubMenu>:
		}
	}*/
}

static inline unsigned char printSubMenu(const char *flashName,unsigned char flag)
{
    22ca:	2f 92       	push	r2
    22cc:	3f 92       	push	r3
    22ce:	4f 92       	push	r4
    22d0:	5f 92       	push	r5
    22d2:	6f 92       	push	r6
    22d4:	7f 92       	push	r7
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	c8 56       	subi	r28, 0x68	; 104
    22f4:	d1 09       	sbc	r29, r1
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	4c 01       	movw	r8, r24
	unsigned char addr[MAXQDEV]={0};
    2302:	ce 01       	movw	r24, r28
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	7c 01       	movw	r14, r24
    2308:	83 e6       	ldi	r24, 0x63	; 99
    230a:	f7 01       	movw	r30, r14
    230c:	11 92       	st	Z+, r1
    230e:	8a 95       	dec	r24
    2310:	e9 f7       	brne	.-6      	; 0x230c <printSubMenu+0x42>
	unsigned char screenPos=0;	//указатель на позицию экрана
	unsigned char numPunkt=0,currPunkt=0;	//счетчик пунктов меню,
	char tmpStr[4];

	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);
    2312:	a6 2e       	mov	r10, r22
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	6c 01       	movw	r12, r24
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <printSubMenu+0x56>
    231c:	cc 0c       	add	r12, r12
    231e:	dd 1c       	adc	r13, r13
    2320:	6a 95       	dec	r22
    2322:	e2 f7       	brpl	.-8      	; 0x231c <printSubMenu+0x52>
    2324:	01 e0       	ldi	r16, 0x01	; 1
    2326:	10 e0       	ldi	r17, 0x00	; 0
static inline unsigned char printSubMenu(const char *flashName,unsigned char flag)
{
	unsigned char addr[MAXQDEV]={0};
	unsigned char cursorPos=1;	//указатель на текущий пункт
	unsigned char screenPos=0;	//указатель на позицию экрана
	unsigned char numPunkt=0,currPunkt=0;	//счетчик пунктов меню,
    2328:	41 2c       	mov	r4, r1
	char tmpStr[4];

	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);
    232a:	89 e0       	ldi	r24, 0x09	; 9
    232c:	78 2e       	mov	r7, r24
    232e:	c8 01       	movw	r24, r16
    2330:	87 5f       	subi	r24, 0xF7	; 247
    2332:	9f 4f       	sbci	r25, 0xFF	; 255
    2334:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    2338:	80 13       	cpse	r24, r16
    233a:	18 c0       	rjmp	.+48     	; 0x236c <printSubMenu+0xa2>
    233c:	70 9e       	mul	r7, r16
    233e:	f0 01       	movw	r30, r0
    2340:	71 9e       	mul	r7, r17
    2342:	f0 0d       	add	r31, r0
    2344:	11 24       	eor	r1, r1
    2346:	ef 59       	subi	r30, 0x9F	; 159
    2348:	fe 4f       	sbci	r31, 0xFE	; 254
    234a:	20 85       	ldd	r18, Z+8	; 0x08
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	2c 21       	and	r18, r12
    2350:	3d 21       	and	r19, r13
    2352:	0a 2c       	mov	r0, r10
    2354:	02 c0       	rjmp	.+4      	; 0x235a <printSubMenu+0x90>
    2356:	35 95       	asr	r19
    2358:	27 95       	ror	r18
    235a:	0a 94       	dec	r0
    235c:	e2 f7       	brpl	.-8      	; 0x2356 <printSubMenu+0x8c>
    235e:	23 2b       	or	r18, r19
    2360:	29 f0       	breq	.+10     	; 0x236c <printSubMenu+0xa2>
    2362:	f7 01       	movw	r30, r14
    2364:	e4 0d       	add	r30, r4
    2366:	f1 1d       	adc	r31, r1
    2368:	80 83       	st	Z, r24
    236a:	43 94       	inc	r4
    236c:	0f 5f       	subi	r16, 0xFF	; 255
    236e:	1f 4f       	sbci	r17, 0xFF	; 255
    2370:	03 36       	cpi	r16, 0x63	; 99
    2372:	11 05       	cpc	r17, r1
    2374:	e1 f6       	brne	.-72     	; 0x232e <printSubMenu+0x64>
    2376:	61 2c       	mov	r6, r1
    2378:	51 2c       	mov	r5, r1
    237a:	77 24       	eor	r7, r7
    237c:	73 94       	inc	r7

	while(1)
	{	//рисуем: "NAME:XX БДЗ"
		printMenuHeader(flashName);
		itoa(numPunkt,tmpStr,10);
    237e:	04 2d       	mov	r16, r4
    2380:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2382:	6e 01       	movw	r12, r28
    2384:	f4 e6       	ldi	r31, 0x64	; 100
    2386:	cf 0e       	add	r12, r31
    2388:	d1 1c       	adc	r13, r1

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt-1)
    238a:	18 01       	movw	r2, r16
    238c:	21 e0       	ldi	r18, 0x01	; 1
    238e:	22 1a       	sub	r2, r18
    2390:	31 08       	sbc	r3, r1
	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);

	while(1)
	{	//рисуем: "NAME:XX БДЗ"
		printMenuHeader(flashName);
    2392:	c4 01       	movw	r24, r8
    2394:	0e 94 c6 06 	call	0xd8c	; 0xd8c <printMenuHeader>
    2398:	4a e0       	ldi	r20, 0x0A	; 10
    239a:	b6 01       	movw	r22, r12
    239c:	c8 01       	movw	r24, r16
    239e:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
		itoa(numPunkt,tmpStr,10);
		LCD_puts(tmpStr,strlen(tmpStr)+1);
    23a2:	f6 01       	movw	r30, r12
    23a4:	01 90       	ld	r0, Z+
    23a6:	00 20       	and	r0, r0
    23a8:	e9 f7       	brne	.-6      	; 0x23a4 <printSubMenu+0xda>
    23aa:	6e 2f       	mov	r22, r30
    23ac:	6c 19       	sub	r22, r12
    23ae:	c6 01       	movw	r24, r12
    23b0:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
		LCD_puts_P(BDZ,3);
    23b4:	63 e0       	ldi	r22, 0x03	; 3
    23b6:	8b e7       	ldi	r24, 0x7B	; 123
    23b8:	91 e0       	ldi	r25, 0x01	; 1
    23ba:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
    23be:	57 01       	movw	r10, r14
    23c0:	a5 0c       	add	r10, r5
    23c2:	b1 1c       	adc	r11, r1

		for(unsigned char i=0;(i<NUMOFMENUSTRING) && (addr[i+screenPos]);i++)		//прорисовываем не более NUMOFMENUSTRING строк меню
    23c4:	41 2c       	mov	r4, r1
    23c6:	f5 01       	movw	r30, r10
    23c8:	21 91       	ld	r18, Z+
    23ca:	5f 01       	movw	r10, r30
    23cc:	a9 96       	adiw	r28, 0x29	; 41
    23ce:	2f af       	std	Y+63, r18	; 0x3f
    23d0:	a9 97       	sbiw	r28, 0x29	; 41
    23d2:	22 23       	and	r18, r18
    23d4:	c9 f0       	breq	.+50     	; 0x2408 <printSubMenu+0x13e>
		{
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
    23d6:	43 94       	inc	r4
    23d8:	64 2d       	mov	r22, r4
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
    23e0:	64 e0       	ldi	r22, 0x04	; 4
    23e2:	8b e7       	ldi	r24, 0x7B	; 123
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
    23ea:	4a e0       	ldi	r20, 0x0A	; 10
    23ec:	b6 01       	movw	r22, r12
    23ee:	a9 96       	adiw	r28, 0x29	; 41
    23f0:	ef ad       	ldd	r30, Y+63	; 0x3f
    23f2:	a9 97       	sbiw	r28, 0x29	; 41
    23f4:	8e 2f       	mov	r24, r30
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
    23fc:	63 e0       	ldi	r22, 0x03	; 3
    23fe:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
		printMenuHeader(flashName);
		itoa(numPunkt,tmpStr,10);
		LCD_puts(tmpStr,strlen(tmpStr)+1);
		LCD_puts_P(BDZ,3);

		for(unsigned char i=0;(i<NUMOFMENUSTRING) && (addr[i+screenPos]);i++)		//прорисовываем не более NUMOFMENUSTRING строк меню
    2402:	f3 e0       	ldi	r31, 0x03	; 3
    2404:	4f 12       	cpse	r4, r31
    2406:	df cf       	rjmp	.-66     	; 0x23c6 <printSubMenu+0xfc>
		{
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
		}
		LCD_gotoXY(0,cursorPos);LCD_putchar(0x84);			//...и курсор (символ >)
    2408:	67 2d       	mov	r22, r7
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
    2410:	84 e8       	ldi	r24, 0x84	; 132
    2412:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_putchar>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2416:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    241a:	85 30       	cpi	r24, 0x05	; 5
    241c:	f1 f0       	breq	.+60     	; 0x245a <printSubMenu+0x190>
    241e:	38 f4       	brcc	.+14     	; 0x242e <printSubMenu+0x164>
    2420:	82 30       	cpi	r24, 0x02	; 2
    2422:	31 f1       	breq	.+76     	; 0x2470 <printSubMenu+0x1a6>
    2424:	83 30       	cpi	r24, 0x03	; 3
    2426:	09 f0       	breq	.+2      	; 0x242a <printSubMenu+0x160>
    2428:	b4 cf       	rjmp	.-152    	; 0x2392 <printSubMenu+0xc8>
			}
		}
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
		break;
		case ESC:return 0;	//выход по ESC
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	25 c0       	rjmp	.+74     	; 0x2478 <printSubMenu+0x1ae>
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
		}
		LCD_gotoXY(0,cursorPos);LCD_putchar(0x84);			//...и курсор (символ >)

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    242e:	86 30       	cpi	r24, 0x06	; 6
    2430:	31 f0       	breq	.+12     	; 0x243e <printSubMenu+0x174>
    2432:	8f 3f       	cpi	r24, 0xFF	; 255
    2434:	09 f0       	breq	.+2      	; 0x2438 <printSubMenu+0x16e>
    2436:	ad cf       	rjmp	.-166    	; 0x2392 <printSubMenu+0xc8>
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
		break;
		case ESC:return 0;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");//автовыход
    2438:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    243c:	aa cf       	rjmp	.-172    	; 0x2392 <printSubMenu+0xc8>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt-1)
    243e:	86 2d       	mov	r24, r6
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	82 15       	cp	r24, r2
    2444:	93 05       	cpc	r25, r3
    2446:	0c f0       	brlt	.+2      	; 0x244a <printSubMenu+0x180>
    2448:	a4 cf       	rjmp	.-184    	; 0x2392 <printSubMenu+0xc8>
			{
				++currPunkt;
    244a:	63 94       	inc	r6
				(cursorPos < NUMOFMENUSTRING)?(cursorPos++):(screenPos++);
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	87 15       	cp	r24, r7
    2450:	10 f0       	brcs	.+4      	; 0x2456 <printSubMenu+0x18c>
    2452:	73 94       	inc	r7
    2454:	9e cf       	rjmp	.-196    	; 0x2392 <printSubMenu+0xc8>
    2456:	53 94       	inc	r5
    2458:	9c cf       	rjmp	.-200    	; 0x2392 <printSubMenu+0xc8>
			}
		}
		break;
		case UP:
		{
			if(currPunkt > 0 )
    245a:	66 20       	and	r6, r6
    245c:	09 f4       	brne	.+2      	; 0x2460 <printSubMenu+0x196>
    245e:	99 cf       	rjmp	.-206    	; 0x2392 <printSubMenu+0xc8>
			{
				--currPunkt;
    2460:	6a 94       	dec	r6
				(cursorPos > 1)?(cursorPos--):(screenPos--);
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	79 16       	cp	r7, r25
    2466:	11 f0       	breq	.+4      	; 0x246c <printSubMenu+0x1a2>
    2468:	7a 94       	dec	r7
    246a:	93 cf       	rjmp	.-218    	; 0x2392 <printSubMenu+0xc8>
    246c:	5a 94       	dec	r5
    246e:	91 cf       	rjmp	.-222    	; 0x2392 <printSubMenu+0xc8>
			}
		}
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
    2470:	f7 01       	movw	r30, r14
    2472:	e6 0d       	add	r30, r6
    2474:	f1 1d       	adc	r31, r1
    2476:	80 81       	ld	r24, Z
		default:continue;	//любая другая клавиша
		break;
		}
	}
	return NOKEY;
}
    2478:	c8 59       	subi	r28, 0x98	; 152
    247a:	df 4f       	sbci	r29, 0xFF	; 255
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	1f 91       	pop	r17
    248c:	0f 91       	pop	r16
    248e:	ff 90       	pop	r15
    2490:	ef 90       	pop	r14
    2492:	df 90       	pop	r13
    2494:	cf 90       	pop	r12
    2496:	bf 90       	pop	r11
    2498:	af 90       	pop	r10
    249a:	9f 90       	pop	r9
    249c:	8f 90       	pop	r8
    249e:	7f 90       	pop	r7
    24a0:	6f 90       	pop	r6
    24a2:	5f 90       	pop	r5
    24a4:	4f 90       	pop	r4
    24a6:	3f 90       	pop	r3
    24a8:	2f 90       	pop	r2
    24aa:	08 95       	ret

000024ac <in_line>:

static void in_line(void)
{
	printSubMenu(NA_SVYAZI,INL);
    24ac:	62 e0       	ldi	r22, 0x02	; 2
    24ae:	8f e8       	ldi	r24, 0x8F	; 143
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <printSubMenu>

000024b6 <viewArch>:

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
}

static unsigned char viewArch(unsigned char currBDZaddr,unsigned char index)
{
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ff 92       	push	r15
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	a9 97       	sbiw	r28, 0x29	; 41
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	f8 2e       	mov	r15, r24
    24d6:	d6 2e       	mov	r13, r22
	char tmpStr[7];
	unsigned char tmpData[14];
	unsigned char i,page=0;

	printMenuHeader(ARHIV);
    24d8:	89 e8       	ldi	r24, 0x89	; 137
    24da:	91 e0       	ldi	r25, 0x01	; 1
    24dc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <printMenuHeader>

	LCD_puts_P(BDZ,4);
    24e0:	64 e0       	ldi	r22, 0x04	; 4
    24e2:	8b e7       	ldi	r24, 0x7B	; 123
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
	LCD_puts(itoa(currBDZaddr,tmpStr,10),3);
    24ea:	0f 2d       	mov	r16, r15
    24ec:	10 e0       	ldi	r17, 0x00	; 0
    24ee:	4a e0       	ldi	r20, 0x0A	; 10
    24f0:	be 01       	movw	r22, r28
    24f2:	6d 5d       	subi	r22, 0xDD	; 221
    24f4:	7f 4f       	sbci	r23, 0xFF	; 255
    24f6:	c8 01       	movw	r24, r16
    24f8:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
    24fc:	63 e0       	ldi	r22, 0x03	; 3
    24fe:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
	LCD_gotoXY(18,0);
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	82 e1       	ldi	r24, 0x12	; 18
    2506:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
    250a:	8d 2d       	mov	r24, r13
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	4a e0       	ldi	r20, 0x0A	; 10
    2510:	be 01       	movw	r22, r28
    2512:	6d 5d       	subi	r22, 0xDD	; 221
    2514:	7f 4f       	sbci	r23, 0xFF	; 255
    2516:	01 96       	adiw	r24, 0x01	; 1
    2518:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
	LCD_puts(itoa(index+1,tmpStr,10),2);
    251c:	62 e0       	ldi	r22, 0x02	; 2
    251e:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>

	//первая часть архива
	if(send_read_arch(1,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
    2522:	4d 2d       	mov	r20, r13
    2524:	6f 2d       	mov	r22, r15
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <send_read_arch>
    252c:	87 ff       	sbrs	r24, 7
    252e:	03 c0       	rjmp	.+6      	; 0x2536 <viewArch+0x80>
    2530:	0e 94 bd 06 	call	0xd7a	; 0xd7a <printTOUT>
    2534:	1c c0       	rjmp	.+56     	; 0x256e <viewArch+0xb8>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
    2536:	89 e0       	ldi	r24, 0x09	; 9
    2538:	80 9f       	mul	r24, r16
    253a:	f0 01       	movw	r30, r0
    253c:	81 9f       	mul	r24, r17
    253e:	f0 0d       	add	r31, r0
    2540:	11 24       	eor	r1, r1
    2542:	ef 59       	subi	r30, 0x9F	; 159
    2544:	fe 4f       	sbci	r31, 0xFE	; 254
    2546:	80 81       	ld	r24, Z
    2548:	84 30       	cpi	r24, 0x04	; 4
    254a:	11 f0       	breq	.+4      	; 0x2550 <viewArch+0x9a>
	else return 0;
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	c6 c0       	rjmp	.+396    	; 0x26dc <viewArch+0x226>
    2550:	de 01       	movw	r26, r28
    2552:	55 96       	adiw	r26, 0x15	; 21
	LCD_gotoXY(18,0);
	LCD_puts(itoa(index+1,tmpStr,10),2);

	//первая часть архива
	if(send_read_arch(1,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	af 01       	movw	r20, r30
    255a:	9a 01       	movw	r18, r20
    255c:	28 0f       	add	r18, r24
    255e:	39 1f       	adc	r19, r25
    2560:	f9 01       	movw	r30, r18
    2562:	20 81       	ld	r18, Z
    2564:	2d 93       	st	X+, r18
    2566:	01 96       	adiw	r24, 0x01	; 1
    2568:	87 30       	cpi	r24, 0x07	; 7
    256a:	91 05       	cpc	r25, r1
    256c:	b1 f7       	brne	.-20     	; 0x255a <viewArch+0xa4>
	else return 0;

	//вторая часть архива
	if(send_read_arch(2,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
    256e:	4d 2d       	mov	r20, r13
    2570:	6f 2d       	mov	r22, r15
    2572:	82 e0       	ldi	r24, 0x02	; 2
    2574:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <send_read_arch>
    2578:	87 ff       	sbrs	r24, 7
    257a:	07 c0       	rjmp	.+14     	; 0x258a <viewArch+0xd4>
    257c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <printTOUT>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_2) for(i=7;i<14;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i-7];	//скопировали данные
    2580:	f1 2c       	mov	r15, r1

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
    2582:	cc 24       	eor	r12, r12
    2584:	c3 94       	inc	r12
    2586:	d1 2c       	mov	r13, r1
    2588:	51 c0       	rjmp	.+162    	; 0x262c <viewArch+0x176>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
	else return 0;

	//вторая часть архива
	if(send_read_arch(2,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_2) for(i=7;i<14;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i-7];	//скопировали данные
    258a:	89 e0       	ldi	r24, 0x09	; 9
    258c:	80 9f       	mul	r24, r16
    258e:	f0 01       	movw	r30, r0
    2590:	81 9f       	mul	r24, r17
    2592:	f0 0d       	add	r31, r0
    2594:	11 24       	eor	r1, r1
    2596:	ef 59       	subi	r30, 0x9F	; 159
    2598:	fe 4f       	sbci	r31, 0xFE	; 254
    259a:	80 81       	ld	r24, Z
    259c:	85 30       	cpi	r24, 0x05	; 5
    259e:	b1 f6       	brne	.-84     	; 0x254c <viewArch+0x96>
    25a0:	de 01       	movw	r26, r28
    25a2:	5c 96       	adiw	r26, 0x1c	; 28
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	af 01       	movw	r20, r30
    25aa:	9a 01       	movw	r18, r20
    25ac:	28 0f       	add	r18, r24
    25ae:	39 1f       	adc	r19, r25
    25b0:	f9 01       	movw	r30, r18
    25b2:	20 81       	ld	r18, Z
    25b4:	2d 93       	st	X+, r18
    25b6:	01 96       	adiw	r24, 0x01	; 1
    25b8:	87 30       	cpi	r24, 0x07	; 7
    25ba:	91 05       	cpc	r25, r1
    25bc:	b1 f7       	brne	.-20     	; 0x25aa <viewArch+0xf4>
    25be:	e0 cf       	rjmp	.-64     	; 0x2580 <viewArch+0xca>

		if(tmpData[3]==0xFF) {LCD_gotoXY(0,2);LCD_puts_P(PUSTO,7);}	//если год 0xFF строка 0 "пусто"
		else
		{
			//строка 1 дата/время
			printTimeStr(&tmpData[1],0,1);
    25c0:	ce 01       	movw	r24, r28
    25c2:	46 96       	adiw	r24, 0x16	; 22
    25c4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <printTimeStr.constprop.2>

			switch(page)
    25c8:	f1 10       	cpse	r15, r1
    25ca:	3d c0       	rjmp	.+122    	; 0x2646 <viewArch+0x190>
			{
			case 0:
			{
				//строка ВОД1234 ДВХ1234
				printIOStr(&tmpData[8]);
    25cc:	ce 01       	movw	r24, r28
    25ce:	4d 96       	adiw	r24, 0x1d	; 29
    25d0:	0e 94 34 05 	call	0xa68	; 0xa68 <printIOStr>

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
    25d4:	63 e0       	ldi	r22, 0x03	; 3
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
    25dc:	6e e6       	ldi	r22, 0x6E	; 110
    25de:	71 e0       	ldi	r23, 0x01	; 1
    25e0:	ce 01       	movw	r24, r28
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	0e 94 03 1c 	call	0x3806	; 0x3806 <strcpy_P>
    25e8:	66 ef       	ldi	r22, 0xF6	; 246
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	ce 01       	movw	r24, r28
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	0e 94 13 1c 	call	0x3826	; 0x3826 <strcat>
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
    25f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25f6:	8f 70       	andi	r24, 0x0F	; 15
    25f8:	b1 f5       	brne	.+108    	; 0x2666 <viewArch+0x1b0>
    25fa:	67 eb       	ldi	r22, 0xB7	; 183
    25fc:	70 e0       	ldi	r23, 0x00	; 0
    25fe:	ce 01       	movw	r24, r28
    2600:	01 96       	adiw	r24, 0x01	; 1
    2602:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <strcat_P>
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
				LCD_puts(buffer,20);
    2606:	64 e1       	ldi	r22, 0x14	; 20
    2608:	ce 01       	movw	r24, r28
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
			break;
			}//switch

		}

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2610:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    2614:	87 30       	cpi	r24, 0x07	; 7
    2616:	08 f0       	brcs	.+2      	; 0x261a <viewArch+0x164>
    2618:	4f c0       	rjmp	.+158    	; 0x26b8 <viewArch+0x202>
    261a:	85 30       	cpi	r24, 0x05	; 5
    261c:	08 f0       	brcs	.+2      	; 0x2620 <viewArch+0x16a>
    261e:	5e c0       	rjmp	.+188    	; 0x26dc <viewArch+0x226>
    2620:	83 30       	cpi	r24, 0x03	; 3
    2622:	09 f4       	brne	.+2      	; 0x2626 <viewArch+0x170>
    2624:	5b c0       	rjmp	.+182    	; 0x26dc <viewArch+0x226>
    2626:	84 30       	cpi	r24, 0x04	; 4
    2628:	09 f4       	brne	.+2      	; 0x262c <viewArch+0x176>
    262a:	53 c0       	rjmp	.+166    	; 0x26d2 <viewArch+0x21c>

	while(1)
	{
		char buffer[20];

		if(tmpData[3]==0xFF) {LCD_gotoXY(0,2);LCD_puts_P(PUSTO,7);}	//если год 0xFF строка 0 "пусто"
    262c:	88 8d       	ldd	r24, Y+24	; 0x18
    262e:	8f 3f       	cpi	r24, 0xFF	; 255
    2630:	39 f6       	brne	.-114    	; 0x25c0 <viewArch+0x10a>
    2632:	62 e0       	ldi	r22, 0x02	; 2
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
    263a:	67 e0       	ldi	r22, 0x07	; 7
    263c:	8b e8       	ldi	r24, 0x8B	; 139
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
    2644:	e5 cf       	rjmp	.-54     	; 0x2610 <viewArch+0x15a>
		else
		{
			//строка 1 дата/время
			printTimeStr(&tmpData[1],0,1);

			switch(page)
    2646:	f1 e0       	ldi	r31, 0x01	; 1
    2648:	ff 12       	cpse	r15, r31
    264a:	e2 cf       	rjmp	.-60     	; 0x2610 <viewArch+0x15a>
			}
			break;
			case 1:
			{
				//строки вкл/откл МТЗ
				printMTZStr((unsigned int)tmpData[10]<<8 | tmpData[11],(unsigned int)tmpData[12]<<8 | tmpData[13]);
    264c:	69 a1       	ldd	r22, Y+33	; 0x21
    264e:	7a a1       	ldd	r23, Y+34	; 0x22
    2650:	76 27       	eor	r23, r22
    2652:	67 27       	eor	r22, r23
    2654:	76 27       	eor	r23, r22
    2656:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2658:	98 a1       	ldd	r25, Y+32	; 0x20
    265a:	98 27       	eor	r25, r24
    265c:	89 27       	eor	r24, r25
    265e:	98 27       	eor	r25, r24
    2660:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <printMTZStr>
			}
			break;
    2664:	d5 cf       	rjmp	.-86     	; 0x2610 <viewArch+0x15a>
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
    266a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	a6 01       	movw	r20, r12
    2670:	08 2e       	mov	r0, r24
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <viewArch+0x1c2>
    2674:	44 0f       	add	r20, r20
    2676:	55 1f       	adc	r21, r21
    2678:	0a 94       	dec	r0
    267a:	e2 f7       	brpl	.-8      	; 0x2674 <viewArch+0x1be>
    267c:	24 23       	and	r18, r20
    267e:	35 23       	and	r19, r21
    2680:	08 2e       	mov	r0, r24
    2682:	02 c0       	rjmp	.+4      	; 0x2688 <viewArch+0x1d2>
    2684:	35 95       	asr	r19
    2686:	27 95       	ror	r18
    2688:	0a 94       	dec	r0
    268a:	e2 f7       	brpl	.-8      	; 0x2684 <viewArch+0x1ce>
    268c:	8c 01       	movw	r16, r24
    268e:	0f 5f       	subi	r16, 0xFF	; 255
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	23 2b       	or	r18, r19
    2694:	61 f0       	breq	.+24     	; 0x26ae <viewArch+0x1f8>
    2696:	4a e0       	ldi	r20, 0x0A	; 10
    2698:	be 01       	movw	r22, r28
    269a:	6d 5d       	subi	r22, 0xDD	; 221
    269c:	7f 4f       	sbci	r23, 0xFF	; 255
    269e:	c8 01       	movw	r24, r16
    26a0:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
    26a4:	bc 01       	movw	r22, r24
    26a6:	ce 01       	movw	r24, r28
    26a8:	01 96       	adiw	r24, 0x01	; 1
    26aa:	0e 94 13 1c 	call	0x3826	; 0x3826 <strcat>
    26ae:	c8 01       	movw	r24, r16
    26b0:	04 30       	cpi	r16, 0x04	; 4
    26b2:	11 05       	cpc	r17, r1
    26b4:	d1 f6       	brne	.-76     	; 0x266a <viewArch+0x1b4>
    26b6:	a7 cf       	rjmp	.-178    	; 0x2606 <viewArch+0x150>
			break;
			}//switch

		}

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    26b8:	87 30       	cpi	r24, 0x07	; 7
    26ba:	31 f0       	breq	.+12     	; 0x26c8 <viewArch+0x212>
    26bc:	8f 3f       	cpi	r24, 0xFF	; 255
    26be:	09 f0       	breq	.+2      	; 0x26c2 <viewArch+0x20c>
    26c0:	b5 cf       	rjmp	.-150    	; 0x262c <viewArch+0x176>
		break;
		case LEFT:if(page>0)page--;
		break;
		case ESC:return ESC;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    26c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    26c6:	b2 cf       	rjmp	.-156    	; 0x262c <viewArch+0x176>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:return UP;
		case DOWN:return DOWN;
		case RIGHT:if(page<1)page++;
    26c8:	f1 10       	cpse	r15, r1
    26ca:	b0 cf       	rjmp	.-160    	; 0x262c <viewArch+0x176>
    26cc:	ff 24       	eor	r15, r15
    26ce:	f3 94       	inc	r15
    26d0:	ad cf       	rjmp	.-166    	; 0x262c <viewArch+0x176>
		break;
		case LEFT:if(page>0)page--;
    26d2:	ff 20       	and	r15, r15
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <viewArch+0x222>
    26d6:	aa cf       	rjmp	.-172    	; 0x262c <viewArch+0x176>
    26d8:	fa 94       	dec	r15
    26da:	a8 cf       	rjmp	.-176    	; 0x262c <viewArch+0x176>
		default:continue;	//любая другая клавиша
		break;
		}
	}
	return 0;
}
    26dc:	a9 96       	adiw	r28, 0x29	; 41
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	1f 91       	pop	r17
    26ee:	0f 91       	pop	r16
    26f0:	ff 90       	pop	r15
    26f2:	df 90       	pop	r13
    26f4:	cf 90       	pop	r12
    26f6:	08 95       	ret

000026f8 <archieve>:
	if( whileKey() ==ESC)reset(currBDZaddr);//а если ответ был правильный предлагаем ресетнуть

}

static void archieve(void)
{
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
	unsigned char currBDZaddr = printSubMenu(ARHIV,INL); /*выполнить просмотр архива инлайновых*/
    26fc:	62 e0       	ldi	r22, 0x02	; 2
    26fe:	89 e8       	ldi	r24, 0x89	; 137
    2700:	91 e0       	ldi	r25, 0x01	; 1
    2702:	0e 94 65 11 	call	0x22ca	; 0x22ca <printSubMenu>
    2706:	d8 2f       	mov	r29, r24
	unsigned char index=0;

	if(currBDZaddr<1)return;
    2708:	88 23       	and	r24, r24
    270a:	91 f0       	breq	.+36     	; 0x2730 <archieve+0x38>
    270c:	c0 e0       	ldi	r28, 0x00	; 0

	while(1)
	{
		switch(viewArch(currBDZaddr,index))
    270e:	6c 2f       	mov	r22, r28
    2710:	8d 2f       	mov	r24, r29
    2712:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <viewArch>
    2716:	85 30       	cpi	r24, 0x05	; 5
    2718:	19 f0       	breq	.+6      	; 0x2720 <archieve+0x28>
    271a:	86 30       	cpi	r24, 0x06	; 6
    271c:	29 f0       	breq	.+10     	; 0x2728 <archieve+0x30>
    271e:	08 c0       	rjmp	.+16     	; 0x2730 <archieve+0x38>
		{
		case UP:if(index>0)index--;
    2720:	cc 23       	and	r28, r28
    2722:	a9 f3       	breq	.-22     	; 0x270e <archieve+0x16>
    2724:	c1 50       	subi	r28, 0x01	; 1
    2726:	f3 cf       	rjmp	.-26     	; 0x270e <archieve+0x16>
		break;
		case DOWN:if(index<31)index++;
    2728:	cf 31       	cpi	r28, 0x1F	; 31
    272a:	88 f7       	brcc	.-30     	; 0x270e <archieve+0x16>
    272c:	cf 5f       	subi	r28, 0xFF	; 255
    272e:	ef cf       	rjmp	.-34     	; 0x270e <archieve+0x16>
		break;
		default:return;
		}
	}
}
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	08 95       	ret

00002736 <reset>:

	return;
}

static void reset(unsigned char currBDZaddr)
{
    2736:	cf 93       	push	r28
    2738:	c8 2f       	mov	r28, r24
	whileKey();	//ждем нажатия/отпускания кнопки или автовыхода
    273a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>

	LCD_clr();
    273e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LCD_clr>
	LCD_puts_P(SBROSIT,20);
    2742:	64 e1       	ldi	r22, 0x14	; 20
    2744:	83 ea       	ldi	r24, 0xA3	; 163
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
    274c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    2750:	82 30       	cpi	r24, 0x02	; 2
    2752:	29 f4       	brne	.+10     	; 0x275e <reset+0x28>
    2754:	62 e0       	ldi	r22, 0x02	; 2
    2756:	8c 2f       	mov	r24, r28
}
    2758:	cf 91       	pop	r28
	whileKey();	//ждем нажатия/отпускания кнопки или автовыхода

	LCD_clr();
	LCD_puts_P(SBROSIT,20);

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
    275a:	0c 94 85 0c 	jmp	0x190a	; 0x190a <send_cmd>
}
    275e:	cf 91       	pop	r28
    2760:	08 95       	ret

00002762 <fault>:
		}
	}
}

static void fault(void)
{
    2762:	ef 92       	push	r14
    2764:	ff 92       	push	r15
    2766:	1f 93       	push	r17
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	00 d0       	rcall	.+0      	; 0x276e <fault+0xc>
    276e:	00 d0       	rcall	.+0      	; 0x2770 <fault+0xe>
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
	char tmpStr[4];
	unsigned char currBDZaddr = printSubMenu(NEISPRAVNOST,FLT);	//получили адрес выбранного БДЗ
    2774:	61 e0       	ldi	r22, 0x01	; 1
    2776:	8d e9       	ldi	r24, 0x9D	; 157
    2778:	91 e0       	ldi	r25, 0x01	; 1
    277a:	0e 94 65 11 	call	0x22ca	; 0x22ca <printSubMenu>
    277e:	18 2f       	mov	r17, r24
//LCD_gotoXY(0,0);
//LCD_putchar(currBDZaddr+'0');
//_delay_ms(2000);
	if(currBDZaddr<1)return;
    2780:	88 23       	and	r24, r24
    2782:	09 f4       	brne	.+2      	; 0x2786 <fault+0x24>
    2784:	4c c0       	rjmp	.+152    	; 0x281e <fault+0xbc>

	printMenuHeader(NEISPRAVNOST);
    2786:	8d e9       	ldi	r24, 0x9D	; 157
    2788:	91 e0       	ldi	r25, 0x01	; 1
    278a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <printMenuHeader>

	LCD_puts_P(BDZ,4);
    278e:	64 e0       	ldi	r22, 0x04	; 4
    2790:	8b e7       	ldi	r24, 0x7B	; 123
    2792:	91 e0       	ldi	r25, 0x01	; 1
    2794:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
	LCD_puts(itoa(currBDZaddr,tmpStr,10),3);
    2798:	e1 2e       	mov	r14, r17
    279a:	f1 2c       	mov	r15, r1
    279c:	4a e0       	ldi	r20, 0x0A	; 10
    279e:	be 01       	movw	r22, r28
    27a0:	6f 5f       	subi	r22, 0xFF	; 255
    27a2:	7f 4f       	sbci	r23, 0xFF	; 255
    27a4:	c7 01       	movw	r24, r14
    27a6:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
    27aa:	63 e0       	ldi	r22, 0x03	; 3
    27ac:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>

	if(send_cmd(currBDZaddr,RD_FAULT) <0) printTOUT();	//послали команду,дождались таймаута -"нет связи"
    27b0:	63 e0       	ldi	r22, 0x03	; 3
    27b2:	81 2f       	mov	r24, r17
    27b4:	0e 94 85 0c 	call	0x190a	; 0x190a <send_cmd>
    27b8:	87 ff       	sbrs	r24, 7
    27ba:	03 c0       	rjmp	.+6      	; 0x27c2 <fault+0x60>
    27bc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <printTOUT>
    27c0:	27 c0       	rjmp	.+78     	; 0x2810 <fault+0xae>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_FAULT)	//иначе если принятое сообщени это ответ на этот запрос
    27c2:	29 e0       	ldi	r18, 0x09	; 9
    27c4:	2e 9d       	mul	r18, r14
    27c6:	c0 01       	movw	r24, r0
    27c8:	2f 9d       	mul	r18, r15
    27ca:	90 0d       	add	r25, r0
    27cc:	11 24       	eor	r1, r1
    27ce:	9c 01       	movw	r18, r24
    27d0:	2f 59       	subi	r18, 0x9F	; 159
    27d2:	3e 4f       	sbci	r19, 0xFE	; 254
    27d4:	79 01       	movw	r14, r18
    27d6:	f9 01       	movw	r30, r18
    27d8:	20 81       	ld	r18, Z
    27da:	23 30       	cpi	r18, 0x03	; 3
    27dc:	01 f5       	brne	.+64     	; 0x281e <fault+0xbc>
	{
//		data[1] -состояния входов	 <7>ЦВХ3; <6>ЦВХ2; <5>ЦВХ1; <4>ЦВХ0; <3>ОВХ3; <2>ОВХ2; <1>ОВХ1; <0>ОВХ0  (неисправный вход ==1)
//		data[2] -код ошибки {TEST=1,DATACRC,WATCHDOG,HARDMEM,SOFTHAND,SOFTTIM,UART,RTC,CAN,MSG}
		printIOStr(&inSysBDZ[currBDZaddr].data[1]);
    27de:	8e 59       	subi	r24, 0x9E	; 158
    27e0:	9e 4f       	sbci	r25, 0xFE	; 254
    27e2:	0e 94 34 05 	call	0xa68	; 0xa68 <printIOStr>

		LCD_gotoXY(0,3);
    27e6:	63 e0       	ldi	r22, 0x03	; 3
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		LCD_puts_P(OSHIBKA,7);
    27ee:	67 e0       	ldi	r22, 0x07	; 7
    27f0:	85 ec       	ldi	r24, 0xC5	; 197
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
		LCD_puts(itoa(inSysBDZ[currBDZaddr].data[2],tmpStr,10),2);
    27f8:	f7 01       	movw	r30, r14
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	4a e0       	ldi	r20, 0x0A	; 10
    27fe:	be 01       	movw	r22, r28
    2800:	6f 5f       	subi	r22, 0xFF	; 255
    2802:	7f 4f       	sbci	r23, 0xFF	; 255
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
    280a:	62 e0       	ldi	r22, 0x02	; 2
    280c:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
	}
	else return;							//если получен не тот ответ выходим
	if( whileKey() ==ESC)reset(currBDZaddr);//а если ответ был правильный предлагаем ресетнуть
    2810:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    2814:	83 30       	cpi	r24, 0x03	; 3
    2816:	19 f4       	brne	.+6      	; 0x281e <fault+0xbc>
    2818:	81 2f       	mov	r24, r17
    281a:	0e 94 9b 13 	call	0x2736	; 0x2736 <reset>

}
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	1f 91       	pop	r17
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	08 95       	ret

00002832 <alarm>:
{
	printSubMenu(NA_SVYAZI,INL);
}

static void alarm(void)
{
    2832:	8f 92       	push	r8
    2834:	9f 92       	push	r9
    2836:	af 92       	push	r10
    2838:	bf 92       	push	r11
    283a:	cf 92       	push	r12
    283c:	df 92       	push	r13
    283e:	ef 92       	push	r14
    2840:	ff 92       	push	r15
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	00 d0       	rcall	.+0      	; 0x284c <alarm+0x1a>
    284c:	00 d0       	rcall	.+0      	; 0x284e <alarm+0x1c>
    284e:	1f 92       	push	r1
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
	unsigned char Ndev=0,tmpAddr=0;
	char tmpStr[5];

	printMenuHeader(AVARIYA);//рисуем название пункта':'
    2854:	8b ea       	ldi	r24, 0xAB	; 171
    2856:	91 e0       	ldi	r25, 0x01	; 1
    2858:	0e 94 c6 06 	call	0xd8c	; 0xd8c <printMenuHeader>
    285c:	aa 24       	eor	r10, r10
    285e:	a3 94       	inc	r10
    2860:	b1 2c       	mov	r11, r1
static void alarm(void)
{
	unsigned char currBDZaddr = 0;
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
	unsigned char Ndev=0,tmpAddr=0;
    2862:	10 e0       	ldi	r17, 0x00	; 0
    2864:	00 e0       	ldi	r16, 0x00	; 0

static void alarm(void)
{
	unsigned char currBDZaddr = 0;
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
    2866:	ee 24       	eor	r14, r14
    2868:	ea 94       	dec	r14
    286a:	fe 2c       	mov	r15, r14
    286c:	cc 24       	eor	r12, r12
    286e:	ca 94       	dec	r12
    2870:	dc 2c       	mov	r13, r12

	printMenuHeader(AVARIYA);//рисуем название пункта':'

	for(unsigned char i=1;i<MAXQDEV;i++)
	{
		if(readID(i)==i && chkBit(inSysBDZ[i].flags,ALM))	//обнаружили девайс с флагом авария
    2872:	39 e0       	ldi	r19, 0x09	; 9
    2874:	83 2e       	mov	r8, r19
    2876:	c5 01       	movw	r24, r10
    2878:	87 5f       	subi	r24, 0xF7	; 247
    287a:	9f 4f       	sbci	r25, 0xFF	; 255
    287c:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    2880:	98 2e       	mov	r9, r24
    2882:	8a 11       	cpse	r24, r10
    2884:	2f c0       	rjmp	.+94     	; 0x28e4 <alarm+0xb2>
    2886:	8a 9c       	mul	r8, r10
    2888:	f0 01       	movw	r30, r0
    288a:	8b 9c       	mul	r8, r11
    288c:	f0 0d       	add	r31, r0
    288e:	11 24       	eor	r1, r1
    2890:	ef 59       	subi	r30, 0x9F	; 159
    2892:	fe 4f       	sbci	r31, 0xFE	; 254
    2894:	80 85       	ldd	r24, Z+8	; 0x08
    2896:	80 ff       	sbrs	r24, 0
    2898:	25 c0       	rjmp	.+74     	; 0x28e4 <alarm+0xb2>
		{
			if(tmpAddr==0)tmpAddr=i;						//на случай если не найдется БДЗ,зафиксировавщих время сраб.МТЗ
    289a:	11 11       	cpse	r17, r1
    289c:	01 c0       	rjmp	.+2      	; 0x28a0 <alarm+0x6e>
    289e:	19 2d       	mov	r17, r9
			Ndev++;											//добавляем кол-во обнаруженных девайсов
    28a0:	0f 5f       	subi	r16, 0xFF	; 255
			if(send_read_arch(2,i,0) <0) printTOUT();		//запрашиваем чась архива со значениями МТЗ.Если получен таймаут...
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	69 2d       	mov	r22, r9
    28a6:	82 e0       	ldi	r24, 0x02	; 2
    28a8:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <send_read_arch>
    28ac:	87 ff       	sbrs	r24, 7
    28ae:	03 c0       	rjmp	.+6      	; 0x28b6 <alarm+0x84>
    28b0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <printTOUT>
    28b4:	17 c0       	rjmp	.+46     	; 0x28e4 <alarm+0xb2>
			else if(inSysBDZ[i].data[0]==RD_ARCH_2)			//получили тот ответ который надо
    28b6:	8a 9c       	mul	r8, r10
    28b8:	f0 01       	movw	r30, r0
    28ba:	8b 9c       	mul	r8, r11
    28bc:	f0 0d       	add	r31, r0
    28be:	11 24       	eor	r1, r1
    28c0:	ef 59       	subi	r30, 0x9F	; 159
    28c2:	fe 4f       	sbci	r31, 0xFE	; 254
    28c4:	80 81       	ld	r24, Z
    28c6:	85 30       	cpi	r24, 0x05	; 5
    28c8:	69 f4       	brne	.+26     	; 0x28e4 <alarm+0xb2>
			{
				unsigned int tmpTime=(unsigned int)inSysBDZ[i].data[3]<<8 | inSysBDZ[i].data[4];
    28ca:	23 81       	ldd	r18, Z+3	; 0x03
    28cc:	84 81       	ldd	r24, Z+4	; 0x04
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	92 2b       	or	r25, r18

				if(tmpTime < minMTZ_ontime)
    28d2:	8c 15       	cp	r24, r12
    28d4:	9d 05       	cpc	r25, r13
    28d6:	30 f4       	brcc	.+12     	; 0x28e4 <alarm+0xb2>
				{
					minMTZ_ontime=tmpTime;				//если полученное время меньше сохраненного минимального-перезаписываем
					MTZ_offtime = (unsigned int)inSysBDZ[i].data[5]<<8 | inSysBDZ[i].data[6];	//время отпускания
    28d8:	25 81       	ldd	r18, Z+5	; 0x05
    28da:	e6 80       	ldd	r14, Z+6	; 0x06
    28dc:	f1 2c       	mov	r15, r1
    28de:	f2 2a       	or	r15, r18
    28e0:	19 2d       	mov	r17, r9
    28e2:	6c 01       	movw	r12, r24
    28e4:	2f ef       	ldi	r18, 0xFF	; 255
    28e6:	a2 1a       	sub	r10, r18
    28e8:	b2 0a       	sbc	r11, r18
	unsigned char Ndev=0,tmpAddr=0;
	char tmpStr[5];

	printMenuHeader(AVARIYA);//рисуем название пункта':'

	for(unsigned char i=1;i<MAXQDEV;i++)
    28ea:	83 e6       	ldi	r24, 0x63	; 99
    28ec:	a8 16       	cp	r10, r24
    28ee:	b1 04       	cpc	r11, r1
    28f0:	11 f6       	brne	.-124    	; 0x2876 <alarm+0x44>
				}
			}
		}
	}

	LCD_puts(itoa(Ndev,tmpStr,10),strlen(tmpStr)+2);LCD_puts_P(BDZ,4);		//ХХX	БД3
    28f2:	be 01       	movw	r22, r28
    28f4:	6f 5f       	subi	r22, 0xFF	; 255
    28f6:	7f 4f       	sbci	r23, 0xFF	; 255
    28f8:	fb 01       	movw	r30, r22
    28fa:	01 90       	ld	r0, Z+
    28fc:	00 20       	and	r0, r0
    28fe:	e9 f7       	brne	.-6      	; 0x28fa <alarm+0xc8>
    2900:	31 97       	sbiw	r30, 0x01	; 1
    2902:	5f 01       	movw	r10, r30
    2904:	a6 1a       	sub	r10, r22
    2906:	b7 0a       	sbc	r11, r23
    2908:	4a e0       	ldi	r20, 0x0A	; 10
    290a:	80 2f       	mov	r24, r16
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	0e 94 1e 1c 	call	0x383c	; 0x383c <__itoa_ncheck>
    2912:	62 e0       	ldi	r22, 0x02	; 2
    2914:	6a 0d       	add	r22, r10
    2916:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
    291a:	64 e0       	ldi	r22, 0x04	; 4
    291c:	8b e7       	ldi	r24, 0x7B	; 123
    291e:	91 e0       	ldi	r25, 0x01	; 1
    2920:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
	if(tmpAddr !=0)
    2924:	11 23       	and	r17, r17
    2926:	e1 f0       	breq	.+56     	; 0x2960 <alarm+0x12e>
	{
		if(send_read_arch(1,tmpAddr,0) <0)printTOUT();		//запрашиваем часть архива со значениями RTC. Если получен таймаут...
    2928:	40 e0       	ldi	r20, 0x00	; 0
    292a:	61 2f       	mov	r22, r17
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <send_read_arch>
    2932:	87 ff       	sbrs	r24, 7
    2934:	03 c0       	rjmp	.+6      	; 0x293c <alarm+0x10a>
    2936:	0e 94 bd 06 	call	0xd7a	; 0xd7a <printTOUT>
    293a:	12 c0       	rjmp	.+36     	; 0x2960 <alarm+0x12e>
		else if(inSysBDZ[tmpAddr].data[0]==RD_ARCH_1)
    293c:	29 e0       	ldi	r18, 0x09	; 9
    293e:	12 9f       	mul	r17, r18
    2940:	c0 01       	movw	r24, r0
    2942:	11 24       	eor	r1, r1
    2944:	fc 01       	movw	r30, r24
    2946:	ef 59       	subi	r30, 0x9F	; 159
    2948:	fe 4f       	sbci	r31, 0xFE	; 254
    294a:	20 81       	ld	r18, Z
    294c:	24 30       	cpi	r18, 0x04	; 4
    294e:	41 f4       	brne	.+16     	; 0x2960 <alarm+0x12e>
		{
			//строка дата/время
			printTimeStr(&inSysBDZ[tmpAddr].data[1],0,1);
    2950:	8e 59       	subi	r24, 0x9E	; 158
    2952:	9e 4f       	sbci	r25, 0xFE	; 254
    2954:	0e 94 59 06 	call	0xcb2	; 0xcb2 <printTimeStr.constprop.2>
			//строки вкл/откл МТЗ
			printMTZStr(minMTZ_ontime,MTZ_offtime);
    2958:	b7 01       	movw	r22, r14
    295a:	c6 01       	movw	r24, r12
    295c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <printMTZStr>
		}
	}
LOOP:
	switch(whileKey())	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2960:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    2964:	83 30       	cpi	r24, 0x03	; 3
    2966:	29 f0       	breq	.+10     	; 0x2972 <alarm+0x140>
    2968:	8f 3f       	cpi	r24, 0xFF	; 255
    296a:	59 f1       	breq	.+86     	; 0x29c2 <alarm+0x190>
    296c:	82 30       	cpi	r24, 0x02	; 2
    296e:	c1 f7       	brne	.-16     	; 0x2960 <alarm+0x12e>
    2970:	06 c0       	rjmp	.+12     	; 0x297e <alarm+0x14c>
	{
	case ESC:	//нажат ESC посылаем общий сброс
	{
		if(Ndev !=0) reset(0);
    2972:	00 23       	and	r16, r16
    2974:	31 f1       	breq	.+76     	; 0x29c2 <alarm+0x190>
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	0e 94 9b 13 	call	0x2736	; 0x2736 <reset>
    297c:	22 c0       	rjmp	.+68     	; 0x29c2 <alarm+0x190>
		return;
	}
	break;
	case ENT:if(Ndev==0)return;	//нажат ENT подолжаем далее(если есть аварии)
    297e:	00 23       	and	r16, r16
    2980:	01 f1       	breq	.+64     	; 0x29c2 <alarm+0x190>
	break;
	default:goto LOOP;	//любая другая клавиша
	break;
	}

	currBDZaddr = printSubMenu(AVARIYA,ALM);
    2982:	60 e0       	ldi	r22, 0x00	; 0
    2984:	8b ea       	ldi	r24, 0xAB	; 171
    2986:	91 e0       	ldi	r25, 0x01	; 1
    2988:	0e 94 65 11 	call	0x22ca	; 0x22ca <printSubMenu>
    298c:	08 2f       	mov	r16, r24
	if(currBDZaddr<1)return;
    298e:	88 23       	and	r24, r24
    2990:	c1 f0       	breq	.+48     	; 0x29c2 <alarm+0x190>
    2992:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		switch(viewArch(currBDZaddr,index))
    2994:	61 2f       	mov	r22, r17
    2996:	80 2f       	mov	r24, r16
    2998:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <viewArch>
    299c:	85 30       	cpi	r24, 0x05	; 5
    299e:	49 f0       	breq	.+18     	; 0x29b2 <alarm+0x180>
    29a0:	18 f4       	brcc	.+6      	; 0x29a8 <alarm+0x176>
    29a2:	83 30       	cpi	r24, 0x03	; 3
    29a4:	71 f0       	breq	.+28     	; 0x29c2 <alarm+0x190>
    29a6:	f6 cf       	rjmp	.-20     	; 0x2994 <alarm+0x162>
    29a8:	86 30       	cpi	r24, 0x06	; 6
    29aa:	39 f0       	breq	.+14     	; 0x29ba <alarm+0x188>
    29ac:	8f 3f       	cpi	r24, 0xFF	; 255
    29ae:	49 f0       	breq	.+18     	; 0x29c2 <alarm+0x190>
    29b0:	f1 cf       	rjmp	.-30     	; 0x2994 <alarm+0x162>
		{
		case UP:if(index>0)index--;
    29b2:	11 23       	and	r17, r17
    29b4:	79 f3       	breq	.-34     	; 0x2994 <alarm+0x162>
    29b6:	11 50       	subi	r17, 0x01	; 1
    29b8:	ed cf       	rjmp	.-38     	; 0x2994 <alarm+0x162>
		break;
		case DOWN:if(index<31)index++;
    29ba:	1f 31       	cpi	r17, 0x1F	; 31
    29bc:	58 f7       	brcc	.-42     	; 0x2994 <alarm+0x162>
    29be:	1f 5f       	subi	r17, 0xFF	; 255
    29c0:	e9 cf       	rjmp	.-46     	; 0x2994 <alarm+0x162>
		break;
		default:continue;	//любая другая клавиша
		break;
		}
	}
}
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	ff 90       	pop	r15
    29d6:	ef 90       	pop	r14
    29d8:	df 90       	pop	r13
    29da:	cf 90       	pop	r12
    29dc:	bf 90       	pop	r11
    29de:	af 90       	pop	r10
    29e0:	9f 90       	pop	r9
    29e2:	8f 90       	pop	r8
    29e4:	08 95       	ret

000029e6 <naviMenu>:
		LCD_puts(lowerCase,19);	//прорисовали пункты меню:
	}
}

void naviMenu(struct menu *level)
{
    29e6:	7f 92       	push	r7
    29e8:	8f 92       	push	r8
    29ea:	9f 92       	push	r9
    29ec:	af 92       	push	r10
    29ee:	bf 92       	push	r11
    29f0:	cf 92       	push	r12
    29f2:	df 92       	push	r13
    29f4:	ef 92       	push	r14
    29f6:	ff 92       	push	r15
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	cf 93       	push	r28
    29fe:	df 93       	push	r29
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
    2a04:	64 97       	sbiw	r28, 0x14	; 20
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	5c 01       	movw	r10, r24
	unsigned char cursorPos=1;			//указатель на текущий пункт
	unsigned char screenPos=0;			//указатель на текущий пункт
	unsigned char numPunkt,currPunkt=1;	//счетчик пунктов меню,

	for(numPunkt=0;(level+1+numPunkt)->name != NULL;numPunkt++);	//считаем кол-во пунктов в подменю (level -заголовок; level+1  -первый пункт)
    2a12:	e1 2c       	mov	r14, r1
    2a14:	f5 01       	movw	r30, r10
    2a16:	24 e0       	ldi	r18, 0x04	; 4
    2a18:	e2 9e       	mul	r14, r18
    2a1a:	e0 0d       	add	r30, r0
    2a1c:	f1 1d       	adc	r31, r1
    2a1e:	11 24       	eor	r1, r1
    2a20:	84 81       	ldd	r24, Z+4	; 0x04
    2a22:	95 81       	ldd	r25, Z+5	; 0x05
    2a24:	89 2b       	or	r24, r25
    2a26:	11 f0       	breq	.+4      	; 0x2a2c <naviMenu+0x46>
    2a28:	e3 94       	inc	r14
    2a2a:	f4 cf       	rjmp	.-24     	; 0x2a14 <naviMenu+0x2e>
    2a2c:	01 e0       	ldi	r16, 0x01	; 1
    2a2e:	f1 2c       	mov	r15, r1
    2a30:	11 e0       	ldi	r17, 0x01	; 1

	while(1)
	{
		printMenuHeader(level->name);		//рисуем заголовок
    2a32:	f5 01       	movw	r30, r10
    2a34:	80 81       	ld	r24, Z
    2a36:	91 81       	ldd	r25, Z+1	; 0x01
    2a38:	0e 94 c6 06 	call	0xd8c	; 0xd8c <printMenuHeader>
    2a3c:	c5 01       	movw	r24, r10
    2a3e:	f4 e0       	ldi	r31, 0x04	; 4
    2a40:	ff 9e       	mul	r15, r31
    2a42:	80 0d       	add	r24, r0
    2a44:	91 1d       	adc	r25, r1
    2a46:	11 24       	eor	r1, r1
    2a48:	9c 01       	movw	r18, r24
    2a4a:	2c 5f       	subi	r18, 0xFC	; 252
    2a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4e:	69 01       	movw	r12, r18

static inline void printMenuPunkt(struct menu *level)
{
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
    2a50:	91 2c       	mov	r9, r1
	{
		if((level+i)->name == NULL)return;	//если вместо имени заглушка(пункта не существует)
    2a52:	f6 01       	movw	r30, r12
    2a54:	20 81       	ld	r18, Z
    2a56:	31 81       	ldd	r19, Z+1	; 0x01
    2a58:	21 15       	cp	r18, r1
    2a5a:	31 05       	cpc	r19, r1
    2a5c:	29 f1       	breq	.+74     	; 0x2aa8 <naviMenu+0xc2>
    2a5e:	de 01       	movw	r26, r28
    2a60:	11 96       	adiw	r26, 0x01	; 1
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	7a 2e       	mov	r7, r26
    2a68:	8b 2e       	mov	r8, r27
    2a6a:	f9 01       	movw	r30, r18
    2a6c:	e8 0f       	add	r30, r24
    2a6e:	f9 1f       	adc	r31, r25
		for(unsigned char j=0;j<19;j++)		//преобразуем названия пунктов меню в нижний регистр
		{
			lowerCase[j]=(pgm_read_byte(&(level+i)->name[j]) >= 0xC0)?( pgm_read_byte(&(level+i)->name[j])+0x20 ):(pgm_read_byte(&(level+i)->name[j]));
    2a70:	44 91       	lpm	r20, Z
    2a72:	40 3c       	cpi	r20, 0xC0	; 192
    2a74:	18 f0       	brcs	.+6      	; 0x2a7c <naviMenu+0x96>
    2a76:	e4 91       	lpm	r30, Z
    2a78:	e0 5e       	subi	r30, 0xE0	; 224
    2a7a:	01 c0       	rjmp	.+2      	; 0x2a7e <naviMenu+0x98>
    2a7c:	e4 91       	lpm	r30, Z
    2a7e:	ed 93       	st	X+, r30
    2a80:	01 96       	adiw	r24, 0x01	; 1
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
	{
		if((level+i)->name == NULL)return;	//если вместо имени заглушка(пункта не существует)
		for(unsigned char j=0;j<19;j++)		//преобразуем названия пунктов меню в нижний регистр
    2a82:	83 31       	cpi	r24, 0x13	; 19
    2a84:	91 05       	cpc	r25, r1
    2a86:	89 f7       	brne	.-30     	; 0x2a6a <naviMenu+0x84>
		{
			lowerCase[j]=(pgm_read_byte(&(level+i)->name[j]) >= 0xC0)?( pgm_read_byte(&(level+i)->name[j])+0x20 ):(pgm_read_byte(&(level+i)->name[j]));
		}
		LCD_gotoXY(1,i+1);
    2a88:	93 94       	inc	r9
    2a8a:	69 2d       	mov	r22, r9
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		LCD_puts(lowerCase,19);	//прорисовали пункты меню:
    2a92:	63 e1       	ldi	r22, 0x13	; 19
    2a94:	87 2d       	mov	r24, r7
    2a96:	98 2d       	mov	r25, r8
    2a98:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
    2a9c:	f4 e0       	ldi	r31, 0x04	; 4
    2a9e:	cf 0e       	add	r12, r31
    2aa0:	d1 1c       	adc	r13, r1

static inline void printMenuPunkt(struct menu *level)
{
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
    2aa2:	23 e0       	ldi	r18, 0x03	; 3
    2aa4:	92 12       	cpse	r9, r18
    2aa6:	d5 cf       	rjmp	.-86     	; 0x2a52 <naviMenu+0x6c>

	while(1)
	{
		printMenuHeader(level->name);		//рисуем заголовок
		printMenuPunkt(level+screenPos+1);	//пункты меню
		LCD_gotoXY(0,cursorPos);			//и курсор (символ >)
    2aa8:	61 2f       	mov	r22, r17
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		LCD_putchar(0x84);
    2ab0:	84 e8       	ldi	r24, 0x84	; 132
    2ab2:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_putchar>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2ab6:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    2aba:	85 30       	cpi	r24, 0x05	; 5
    2abc:	61 f1       	breq	.+88     	; 0x2b16 <naviMenu+0x130>
    2abe:	c8 f4       	brcc	.+50     	; 0x2af2 <naviMenu+0x10c>
    2ac0:	82 30       	cpi	r24, 0x02	; 2
    2ac2:	99 f1       	breq	.+102    	; 0x2b2a <naviMenu+0x144>
    2ac4:	83 30       	cpi	r24, 0x03	; 3
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <naviMenu+0xe4>
    2ac8:	b4 cf       	rjmp	.-152    	; 0x2a32 <naviMenu+0x4c>
		break;
		case NOKEY:asm("jmp 0");	//автовыход
		break;
		}
	}
}
    2aca:	64 96       	adiw	r28, 0x14	; 20
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	1f 91       	pop	r17
    2adc:	0f 91       	pop	r16
    2ade:	ff 90       	pop	r15
    2ae0:	ef 90       	pop	r14
    2ae2:	df 90       	pop	r13
    2ae4:	cf 90       	pop	r12
    2ae6:	bf 90       	pop	r11
    2ae8:	af 90       	pop	r10
    2aea:	9f 90       	pop	r9
    2aec:	8f 90       	pop	r8
    2aee:	7f 90       	pop	r7
    2af0:	08 95       	ret
		printMenuHeader(level->name);		//рисуем заголовок
		printMenuPunkt(level+screenPos+1);	//пункты меню
		LCD_gotoXY(0,cursorPos);			//и курсор (символ >)
		LCD_putchar(0x84);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2af2:	86 30       	cpi	r24, 0x06	; 6
    2af4:	31 f0       	breq	.+12     	; 0x2b02 <naviMenu+0x11c>
    2af6:	8f 3f       	cpi	r24, 0xFF	; 255
    2af8:	09 f0       	breq	.+2      	; 0x2afc <naviMenu+0x116>
    2afa:	9b cf       	rjmp	.-202    	; 0x2a32 <naviMenu+0x4c>
		break;
		case ENT:(level+currPunkt)->pFunc();	//-запускаем функцию выбранного пункта	(она также может вызвать naviMenu -следующий подуровень)
		break;
		case ESC:return;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    2afc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    2b00:	98 cf       	rjmp	.-208    	; 0x2a32 <naviMenu+0x4c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt)
    2b02:	0e 15       	cp	r16, r14
    2b04:	08 f0       	brcs	.+2      	; 0x2b08 <naviMenu+0x122>
    2b06:	95 cf       	rjmp	.-214    	; 0x2a32 <naviMenu+0x4c>
			{
				++currPunkt;
    2b08:	0f 5f       	subi	r16, 0xFF	; 255
				(cursorPos < NUMOFMENUSTRING)?(cursorPos++):(screenPos++);
    2b0a:	13 30       	cpi	r17, 0x03	; 3
    2b0c:	10 f4       	brcc	.+4      	; 0x2b12 <naviMenu+0x12c>
    2b0e:	1f 5f       	subi	r17, 0xFF	; 255
    2b10:	90 cf       	rjmp	.-224    	; 0x2a32 <naviMenu+0x4c>
    2b12:	f3 94       	inc	r15
    2b14:	8e cf       	rjmp	.-228    	; 0x2a32 <naviMenu+0x4c>
			}
		}
		break;
		case UP:
		{
			if(currPunkt > 1 )
    2b16:	02 30       	cpi	r16, 0x02	; 2
    2b18:	08 f4       	brcc	.+2      	; 0x2b1c <naviMenu+0x136>
    2b1a:	8b cf       	rjmp	.-234    	; 0x2a32 <naviMenu+0x4c>
			{
				--currPunkt;
    2b1c:	01 50       	subi	r16, 0x01	; 1
				(cursorPos > 1)?(cursorPos--):(screenPos--);
    2b1e:	11 30       	cpi	r17, 0x01	; 1
    2b20:	11 f0       	breq	.+4      	; 0x2b26 <naviMenu+0x140>
    2b22:	11 50       	subi	r17, 0x01	; 1
    2b24:	86 cf       	rjmp	.-244    	; 0x2a32 <naviMenu+0x4c>
    2b26:	fa 94       	dec	r15
    2b28:	84 cf       	rjmp	.-248    	; 0x2a32 <naviMenu+0x4c>
			}
		}
		break;
		case ENT:(level+currPunkt)->pFunc();	//-запускаем функцию выбранного пункта	(она также может вызвать naviMenu -следующий подуровень)
    2b2a:	f5 01       	movw	r30, r10
    2b2c:	34 e0       	ldi	r19, 0x04	; 4
    2b2e:	03 9f       	mul	r16, r19
    2b30:	e0 0d       	add	r30, r0
    2b32:	f1 1d       	adc	r31, r1
    2b34:	11 24       	eor	r1, r1
    2b36:	02 80       	ldd	r0, Z+2	; 0x02
    2b38:	f3 81       	ldd	r31, Z+3	; 0x03
    2b3a:	e0 2d       	mov	r30, r0
    2b3c:	09 95       	icall
		break;
    2b3e:	79 cf       	rjmp	.-270    	; 0x2a32 <naviMenu+0x4c>

00002b40 <change_logic>:
	}
}


static void change_logic(void)
{
    2b40:	ff 92       	push	r15
    2b42:	0f 93       	push	r16
    2b44:	1f 93       	push	r17
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <change_logic+0xc>
    2b4c:	00 d0       	rcall	.+0      	; 0x2b4e <change_logic+0xe>
    2b4e:	00 d0       	rcall	.+0      	; 0x2b50 <change_logic+0x10>
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	01 e0       	ldi	r16, 0x01	; 1
    2b56:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char numBDZ=0;
	//scansys();//сканируем сеть
	//считаем кол-во БДЗ инлайн(в сети)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) numBDZ++;
    2b58:	89 e0       	ldi	r24, 0x09	; 9
    2b5a:	f8 2e       	mov	r15, r24
    2b5c:	c8 01       	movw	r24, r16
    2b5e:	87 5f       	subi	r24, 0xF7	; 247
    2b60:	9f 4f       	sbci	r25, 0xFF	; 255
    2b62:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    2b66:	80 13       	cpse	r24, r16
    2b68:	08 c0       	rjmp	.+16     	; 0x2b7a <change_logic+0x3a>
    2b6a:	f0 9e       	mul	r15, r16
    2b6c:	f0 01       	movw	r30, r0
    2b6e:	f1 9e       	mul	r15, r17
    2b70:	f0 0d       	add	r31, r0
    2b72:	11 24       	eor	r1, r1
    2b74:	ef 59       	subi	r30, 0x9F	; 159
    2b76:	fe 4f       	sbci	r31, 0xFE	; 254
    2b78:	80 85       	ldd	r24, Z+8	; 0x08
    2b7a:	0f 5f       	subi	r16, 0xFF	; 255
    2b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7e:	03 36       	cpi	r16, 0x63	; 99
    2b80:	11 05       	cpc	r17, r1
    2b82:	61 f7       	brne	.-40     	; 0x2b5c <change_logic+0x1c>
	//if (numBDZ>1)
	*&adress=numm();//если бдз в сети >1 то запрашиваем адрес БДЗ в котором будем менять п-тры
    2b84:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <numm>
    2b88:	48 2f       	mov	r20, r24
    2b8a:	50 e0       	ldi	r21, 0x00	; 0
    2b8c:	50 93 79 05 	sts	0x0579, r21	; 0x800579 <adress+0x1>
    2b90:	40 93 78 05 	sts	0x0578, r20	; 0x800578 <adress>
	//addr=*&adress;
	if (*&adress!=0) //если запрос не широковещательный(адресс не 0), то считываем показания БДЗ под № "addr"
    2b94:	41 15       	cp	r20, r1
    2b96:	51 05       	cpc	r21, r1
    2b98:	e1 f1       	breq	.+120    	; 0x2c12 <change_logic+0xd2>
		{
			unsigned char data[6]={PROG};
    2b9a:	96 e0       	ldi	r25, 0x06	; 6
    2b9c:	9e 01       	movw	r18, r28
    2b9e:	2f 5f       	subi	r18, 0xFF	; 255
    2ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba2:	f9 01       	movw	r30, r18
    2ba4:	69 2f       	mov	r22, r25
    2ba6:	11 92       	st	Z+, r1
    2ba8:	6a 95       	dec	r22
    2baa:	e9 f7       	brne	.-6      	; 0x2ba6 <change_logic+0x66>
    2bac:	99 83       	std	Y+1, r25	; 0x01
			inSysBDZ[*&adress].flags=1<<FLT;
    2bae:	19 e0       	ldi	r17, 0x09	; 9
    2bb0:	14 9f       	mul	r17, r20
    2bb2:	f0 01       	movw	r30, r0
    2bb4:	15 9f       	mul	r17, r21
    2bb6:	f0 0d       	add	r31, r0
    2bb8:	11 24       	eor	r1, r1
    2bba:	ef 59       	subi	r30, 0x9F	; 159
    2bbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bbe:	92 e0       	ldi	r25, 0x02	; 2
    2bc0:	90 87       	std	Z+8, r25	; 0x08
			CAN_loadTXbuf((unsigned long int)*&adress,2,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    2bc2:	68 2f       	mov	r22, r24
    2bc4:	70 e0       	ldi	r23, 0x00	; 0
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	07 ef       	ldi	r16, 0xF7	; 247
    2bcc:	42 e0       	ldi	r20, 0x02	; 2
    2bce:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CAN_loadTXbuf>
			if((checkTOUT(*&adress) <0)||(inSysBDZ[*&adress].data[0] !=PROG)){printTOUT();_delay_ms(2000);return;}
    2bd2:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <adress>
    2bd6:	0e 94 4e 01 	call	0x29c	; 0x29c <checkTOUT>
    2bda:	87 fd       	sbrc	r24, 7
    2bdc:	0e c0       	rjmp	.+28     	; 0x2bfa <change_logic+0xba>
    2bde:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <adress>
    2be2:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <adress+0x1>
    2be6:	18 9f       	mul	r17, r24
    2be8:	f0 01       	movw	r30, r0
    2bea:	19 9f       	mul	r17, r25
    2bec:	f0 0d       	add	r31, r0
    2bee:	11 24       	eor	r1, r1
    2bf0:	ef 59       	subi	r30, 0x9F	; 159
    2bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf4:	80 81       	ld	r24, Z
    2bf6:	86 30       	cpi	r24, 0x06	; 6
    2bf8:	61 f0       	breq	.+24     	; 0x2c12 <change_logic+0xd2>
    2bfa:	0e 94 bd 06 	call	0xd7a	; 0xd7a <printTOUT>
    2bfe:	8f ef       	ldi	r24, 0xFF	; 255
    2c00:	97 ea       	ldi	r25, 0xA7	; 167
    2c02:	e1 e6       	ldi	r30, 0x61	; 97
    2c04:	81 50       	subi	r24, 0x01	; 1
    2c06:	90 40       	sbci	r25, 0x00	; 0
    2c08:	e0 40       	sbci	r30, 0x00	; 0
    2c0a:	e1 f7       	brne	.-8      	; 0x2c04 <change_logic+0xc4>
    2c0c:	00 c0       	rjmp	.+0      	; 0x2c0e <change_logic+0xce>
    2c0e:	00 00       	nop
    2c10:	04 c0       	rjmp	.+8      	; 0x2c1a <change_logic+0xda>
		}
	naviMenu(LVL_in);
    2c12:	8c e7       	ldi	r24, 0x7C	; 124
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <naviMenu>
	return;
}
    2c1a:	26 96       	adiw	r28, 0x06	; 6
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	df 91       	pop	r29
    2c28:	cf 91       	pop	r28
    2c2a:	1f 91       	pop	r17
    2c2c:	0f 91       	pop	r16
    2c2e:	ff 90       	pop	r15
    2c30:	08 95       	ret

00002c32 <svyaz>:
{
	change_param(0);
}

static void svyaz(void)
{
    2c32:	cf 92       	push	r12
    2c34:	df 92       	push	r13
    2c36:	ef 92       	push	r14
    2c38:	ff 92       	push	r15
    2c3a:	cf 93       	push	r28
	naviMenu(LVL_svyaz);
    2c3c:	80 ea       	ldi	r24, 0xA0	; 160
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <naviMenu>
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    2c44:	82 e0       	ldi	r24, 0x02	; 2
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <eeprom_read_dword>
    2c4c:	6b 01       	movw	r12, r22
    2c4e:	7c 01       	movw	r14, r24
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    2c58:	c8 2f       	mov	r28, r24
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    2c62:	a7 01       	movw	r20, r14
    2c64:	96 01       	movw	r18, r12
    2c66:	6c 2f       	mov	r22, r28
}
    2c68:	cf 91       	pop	r28
    2c6a:	ff 90       	pop	r15
    2c6c:	ef 90       	pop	r14
    2c6e:	df 90       	pop	r13
    2c70:	cf 90       	pop	r12
}

static void svyaz(void)
{
	naviMenu(LVL_svyaz);
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    2c72:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <MODB_init>

00002c76 <progsys>:
	return ;
}

static void progsys(void)
{
	scansys();
    2c76:	0e 94 40 0b 	call	0x1680	; 0x1680 <scansys>
	naviMenu(LVL_prog);
    2c7a:	8c ec       	ldi	r24, 0xCC	; 204
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <naviMenu>

00002c82 <nastroyka>:
		}
	}
}

static void nastroyka(void)
{
    2c82:	6f 92       	push	r6
    2c84:	7f 92       	push	r7
    2c86:	8f 92       	push	r8
    2c88:	9f 92       	push	r9
    2c8a:	af 92       	push	r10
    2c8c:	bf 92       	push	r11
    2c8e:	cf 92       	push	r12
    2c90:	df 92       	push	r13
    2c92:	ef 92       	push	r14
    2c94:	ff 92       	push	r15
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <nastroyka+0x1e>
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <nastroyka+0x20>
    2ca2:	1f 92       	push	r1
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62

static unsigned char passwd(void)
{
	signed int currPasswd=0,step=1;
	char str[5];
	unsigned char cursorPos=3;
    2ca8:	33 e0       	ldi	r19, 0x03	; 3
    2caa:	73 2e       	mov	r7, r19
	LCD_gotoXY(0,2);LCD_puts_P(NEDOSTUPNO,20);
}

static unsigned char passwd(void)
{
	signed int currPasswd=0,step=1;
    2cac:	ee 24       	eor	r14, r14
    2cae:	e3 94       	inc	r14
    2cb0:	f1 2c       	mov	r15, r1
    2cb2:	00 e0       	ldi	r16, 0x00	; 0
    2cb4:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		printMenuHeader(PAROL);	//прорисовываем заголовок
		LCD_gotoXY(0,2);
		sprintf(str,"%04d",currPasswd);
    2cb6:	5e e3       	ldi	r21, 0x3E	; 62
    2cb8:	c5 2e       	mov	r12, r21
    2cba:	51 e0       	ldi	r21, 0x01	; 1
    2cbc:	d5 2e       	mov	r13, r21
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	01 96       	adiw	r24, 0x01	; 1
    2cc2:	5c 01       	movw	r10, r24
			(cursorPos>0)?(cursorPos--):(cursorPos=3);
		}
		break;
		case RIGHT:
		{
			(step > 1)?(step /= 10):(step=1000);
    2cc4:	6a e0       	ldi	r22, 0x0A	; 10
    2cc6:	86 2e       	mov	r8, r22
    2cc8:	91 2c       	mov	r9, r1
			currPasswd=((currPasswd + step)>=9999)?(0):(currPasswd+step);
		}
		break;
		case LEFT:
		{
			(step < 1000)?(step *= 10):(step=1);
    2cca:	7a e0       	ldi	r23, 0x0A	; 10
    2ccc:	67 2e       	mov	r6, r23
	char str[5];
	unsigned char cursorPos=3;

	while(1)
	{
		printMenuHeader(PAROL);	//прорисовываем заголовок
    2cce:	8e e6       	ldi	r24, 0x6E	; 110
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <printMenuHeader>
		LCD_gotoXY(0,2);
    2cd6:	62 e0       	ldi	r22, 0x02	; 2
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		sprintf(str,"%04d",currPasswd);
    2cde:	1f 93       	push	r17
    2ce0:	0f 93       	push	r16
    2ce2:	df 92       	push	r13
    2ce4:	cf 92       	push	r12
    2ce6:	bf 92       	push	r11
    2ce8:	af 92       	push	r10
    2cea:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <sprintf>
		LCD_puts(str,4);
    2cee:	64 e0       	ldi	r22, 0x04	; 4
    2cf0:	c5 01       	movw	r24, r10
    2cf2:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
		LCD_gotoXY(cursorPos,2);
    2cf6:	62 e0       	ldi	r22, 0x02	; 2
    2cf8:	87 2d       	mov	r24, r7
    2cfa:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		LCD_cursorBlink();
    2cfe:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_cursorBlink>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2d02:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <whileKey>
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	85 30       	cpi	r24, 0x05	; 5
    2d14:	c1 f0       	breq	.+48     	; 0x2d46 <nastroyka+0xc4>
    2d16:	40 f4       	brcc	.+16     	; 0x2d28 <nastroyka+0xa6>
    2d18:	83 30       	cpi	r24, 0x03	; 3
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <nastroyka+0x9c>
    2d1c:	57 c0       	rjmp	.+174    	; 0x2dcc <nastroyka+0x14a>
    2d1e:	e8 f4       	brcc	.+58     	; 0x2d5a <nastroyka+0xd8>
    2d20:	82 30       	cpi	r24, 0x02	; 2
    2d22:	09 f4       	brne	.+2      	; 0x2d26 <nastroyka+0xa4>
    2d24:	45 c0       	rjmp	.+138    	; 0x2db0 <nastroyka+0x12e>
    2d26:	d3 cf       	rjmp	.-90     	; 0x2cce <nastroyka+0x4c>
    2d28:	87 30       	cpi	r24, 0x07	; 7
    2d2a:	69 f1       	breq	.+90     	; 0x2d86 <nastroyka+0x104>
    2d2c:	28 f0       	brcs	.+10     	; 0x2d38 <nastroyka+0xb6>
    2d2e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d30:	71 f6       	brne	.-100    	; 0x2cce <nastroyka+0x4c>
			else return 0;
		}
		break;
		case ESC:{LCD_cursorOff();return 0;}	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    2d32:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2d36:	cb cf       	rjmp	.-106    	; 0x2cce <nastroyka+0x4c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			currPasswd=((currPasswd - step)>=0)?(currPasswd-step):(9999);
    2d38:	0e 19       	sub	r16, r14
    2d3a:	1f 09       	sbc	r17, r15
    2d3c:	17 ff       	sbrs	r17, 7
    2d3e:	c7 cf       	rjmp	.-114    	; 0x2cce <nastroyka+0x4c>
    2d40:	0f e0       	ldi	r16, 0x0F	; 15
    2d42:	17 e2       	ldi	r17, 0x27	; 39
    2d44:	c4 cf       	rjmp	.-120    	; 0x2cce <nastroyka+0x4c>
		}
		break;
		case UP:
		{
			currPasswd=((currPasswd + step)>=9999)?(0):(currPasswd+step);
    2d46:	0e 0d       	add	r16, r14
    2d48:	1f 1d       	adc	r17, r15
    2d4a:	0f 30       	cpi	r16, 0x0F	; 15
    2d4c:	97 e2       	ldi	r25, 0x27	; 39
    2d4e:	19 07       	cpc	r17, r25
    2d50:	0c f4       	brge	.+2      	; 0x2d54 <nastroyka+0xd2>
    2d52:	bd cf       	rjmp	.-134    	; 0x2cce <nastroyka+0x4c>
    2d54:	00 e0       	ldi	r16, 0x00	; 0
    2d56:	10 e0       	ldi	r17, 0x00	; 0
    2d58:	ba cf       	rjmp	.-140    	; 0x2cce <nastroyka+0x4c>
		}
		break;
		case LEFT:
		{
			(step < 1000)?(step *= 10):(step=1);
    2d5a:	88 ee       	ldi	r24, 0xE8	; 232
    2d5c:	e8 16       	cp	r14, r24
    2d5e:	83 e0       	ldi	r24, 0x03	; 3
    2d60:	f8 06       	cpc	r15, r24
    2d62:	3c f4       	brge	.+14     	; 0x2d72 <nastroyka+0xf0>
    2d64:	c7 01       	movw	r24, r14
    2d66:	68 9e       	mul	r6, r24
    2d68:	70 01       	movw	r14, r0
    2d6a:	69 9e       	mul	r6, r25
    2d6c:	f0 0c       	add	r15, r0
    2d6e:	11 24       	eor	r1, r1
    2d70:	03 c0       	rjmp	.+6      	; 0x2d78 <nastroyka+0xf6>
    2d72:	ee 24       	eor	r14, r14
    2d74:	e3 94       	inc	r14
    2d76:	f1 2c       	mov	r15, r1
			(cursorPos>0)?(cursorPos--):(cursorPos=3);
    2d78:	71 10       	cpse	r7, r1
    2d7a:	03 c0       	rjmp	.+6      	; 0x2d82 <nastroyka+0x100>
    2d7c:	23 e0       	ldi	r18, 0x03	; 3
    2d7e:	72 2e       	mov	r7, r18
    2d80:	a6 cf       	rjmp	.-180    	; 0x2cce <nastroyka+0x4c>
    2d82:	7a 94       	dec	r7
    2d84:	a4 cf       	rjmp	.-184    	; 0x2cce <nastroyka+0x4c>
		}
		break;
		case RIGHT:
		{
			(step > 1)?(step /= 10):(step=1000);
    2d86:	92 e0       	ldi	r25, 0x02	; 2
    2d88:	e9 16       	cp	r14, r25
    2d8a:	f1 04       	cpc	r15, r1
    2d8c:	34 f0       	brlt	.+12     	; 0x2d9a <nastroyka+0x118>
    2d8e:	c7 01       	movw	r24, r14
    2d90:	b4 01       	movw	r22, r8
    2d92:	0e 94 ae 1b 	call	0x375c	; 0x375c <__divmodhi4>
    2d96:	7b 01       	movw	r14, r22
    2d98:	04 c0       	rjmp	.+8      	; 0x2da2 <nastroyka+0x120>
    2d9a:	88 ee       	ldi	r24, 0xE8	; 232
    2d9c:	e8 2e       	mov	r14, r24
    2d9e:	83 e0       	ldi	r24, 0x03	; 3
    2da0:	f8 2e       	mov	r15, r24
			(cursorPos<3)?(cursorPos++):(cursorPos=0);
    2da2:	83 e0       	ldi	r24, 0x03	; 3
    2da4:	78 12       	cpse	r7, r24
    2da6:	02 c0       	rjmp	.+4      	; 0x2dac <nastroyka+0x12a>
    2da8:	71 2c       	mov	r7, r1
    2daa:	91 cf       	rjmp	.-222    	; 0x2cce <nastroyka+0x4c>
    2dac:	73 94       	inc	r7
    2dae:	8f cf       	rjmp	.-226    	; 0x2cce <nastroyka+0x4c>
		}
		break;
		case ENT:
		{
			LCD_cursorOff();
    2db0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <LCD_visible>
			if(eeprom_read_word(&password) == currPasswd)return 1;	//
    2db4:	87 e0       	ldi	r24, 0x07	; 7
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <eeprom_read_word>
    2dbc:	08 17       	cp	r16, r24
    2dbe:	19 07       	cpc	r17, r25
    2dc0:	39 f4       	brne	.+14     	; 0x2dd0 <nastroyka+0x14e>
	}
}

static void nastroyka(void)
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
    2dc2:	84 eb       	ldi	r24, 0xB4	; 180
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <naviMenu>
}
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <nastroyka+0x14e>
			LCD_cursorOff();
			if(eeprom_read_word(&password) == currPasswd)return 1;	//
			else return 0;
		}
		break;
		case ESC:{LCD_cursorOff();return 0;}	//выход по ESC
    2dcc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <LCD_visible>
}

static void nastroyka(void)
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	df 91       	pop	r29
    2ddc:	cf 91       	pop	r28
    2dde:	1f 91       	pop	r17
    2de0:	0f 91       	pop	r16
    2de2:	ff 90       	pop	r15
    2de4:	ef 90       	pop	r14
    2de6:	df 90       	pop	r13
    2de8:	cf 90       	pop	r12
    2dea:	bf 90       	pop	r11
    2dec:	af 90       	pop	r10
    2dee:	9f 90       	pop	r9
    2df0:	8f 90       	pop	r8
    2df2:	7f 90       	pop	r7
    2df4:	6f 90       	pop	r6
    2df6:	08 95       	ret

00002df8 <main>:
#include "menu.c"



int main(void)
{
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	64 97       	sbiw	r28, 0x14	; 20
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
	bki_init();
    2e0c:	0e 94 9d 0a 	call	0x153a	; 0x153a <bki_init>
		//PGM_P title=RABOTA;
		PGM_P title;

		if(!(chkBit(sys_state,ALM))&&!(chkBit(sys_state,FLT))) title=RABOTA;
		//заголовок
		(ind_state==0)?(ind_state++):(ind_state=0);
    2e10:	33 24       	eor	r3, r3
    2e12:	33 94       	inc	r3
		if(chkBit(sys_state,ERR))                  title=NET_GOTOVNOSTI;
		LCD_gotoXY(0,0);LCD_puts_P(title,20);

		//читаем время
		rtc_get(&rtc);
		sprintf(buffer,"%02u.%02u.%02u %02u:%02u:%02u",rtc.day,rtc.month,rtc.year,rtc.hours,rtc.minutes,rtc.seconds);
    2e14:	e0 e2       	ldi	r30, 0x20	; 32
    2e16:	6e 2e       	mov	r6, r30
    2e18:	e1 e0       	ldi	r30, 0x01	; 1
    2e1a:	7e 2e       	mov	r7, r30
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	6c 01       	movw	r12, r24
		{
			LCD_puts(buffer,20);
		}


		sprintf(buffer, "%u", sys_state);
    2e22:	f3 e4       	ldi	r31, 0x43	; 67
    2e24:	af 2e       	mov	r10, r31
    2e26:	f1 e0       	ldi	r31, 0x01	; 1
    2e28:	bf 2e       	mov	r11, r31
		/*sprintf(buffer, "%u", inSysBDZ[13].data[0]);
		LCD_gotoXY(0,2);
		LCD_puts(buffer,20);*/

		//новое в версии
		if(TWI_ERR)ERROR=RTC;
    2e2a:	a2 e0       	ldi	r26, 0x02	; 2
    2e2c:	4a 2e       	mov	r4, r26
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
		{
			if(readID(i)==i)	//если блок есть в списке
			{
				modbusRegisters[BDZ_INSYS]++;																//счетчик инлайн блоков
				if(chkBit(inSysBDZ[i].flags,CONF)) setBit(sys_state,CONF);
    2e2e:	b9 e0       	ldi	r27, 0x09	; 9
    2e30:	5b 2e       	mov	r5, r27

		//здесь можно пингануть.После пинга пройдет "пауза со сканированием"-за это время должны прийти все отклики
		if(pingTime ==0)
		{
			ping();
			pingTime=PINGTIME;
    2e32:	18 e8       	ldi	r17, 0x88	; 136
    2e34:	81 2e       	mov	r8, r17
    2e36:	13 e1       	ldi	r17, 0x13	; 19
    2e38:	91 2e       	mov	r9, r17
	{
		char buffer[20];
		//PGM_P title=RABOTA;
		PGM_P title;

		if(!(chkBit(sys_state,ALM))&&!(chkBit(sys_state,FLT))) title=RABOTA;
    2e3a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    2e3e:	98 2f       	mov	r25, r24
    2e40:	92 70       	andi	r25, 0x02	; 2
    2e42:	28 2f       	mov	r18, r24
    2e44:	21 70       	andi	r18, 0x01	; 1
    2e46:	80 fd       	sbrc	r24, 0
    2e48:	06 c0       	rjmp	.+12     	; 0x2e56 <main+0x5e>
    2e4a:	91 11       	cpse	r25, r1
    2e4c:	04 c0       	rjmp	.+8      	; 0x2e56 <main+0x5e>
    2e4e:	72 eb       	ldi	r23, 0xB2	; 178
    2e50:	e7 2e       	mov	r14, r23
    2e52:	71 e0       	ldi	r23, 0x01	; 1
    2e54:	f7 2e       	mov	r15, r23
		//заголовок
		(ind_state==0)?(ind_state++):(ind_state=0);
    2e56:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <ind_state>
    2e5a:	31 11       	cpse	r19, r1
    2e5c:	03 c0       	rjmp	.+6      	; 0x2e64 <main+0x6c>
    2e5e:	30 92 4c 01 	sts	0x014C, r3	; 0x80014c <ind_state>
    2e62:	08 c0       	rjmp	.+16     	; 0x2e74 <main+0x7c>
    2e64:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <ind_state>
		if(chkBit(sys_state,ALM) && ind_state==0)  title=AVARIYA;
    2e68:	22 23       	and	r18, r18
    2e6a:	21 f0       	breq	.+8      	; 0x2e74 <main+0x7c>
    2e6c:	6b ea       	ldi	r22, 0xAB	; 171
    2e6e:	e6 2e       	mov	r14, r22
    2e70:	61 e0       	ldi	r22, 0x01	; 1
    2e72:	f6 2e       	mov	r15, r22
		if(chkBit(sys_state,FLT) && ind_state==1)  title=NEISPRAVNOST;
    2e74:	99 23       	and	r25, r25
    2e76:	41 f0       	breq	.+16     	; 0x2e88 <main+0x90>
    2e78:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <ind_state>
    2e7c:	91 30       	cpi	r25, 0x01	; 1
    2e7e:	21 f4       	brne	.+8      	; 0x2e88 <main+0x90>
    2e80:	5d e9       	ldi	r21, 0x9D	; 157
    2e82:	e5 2e       	mov	r14, r21
    2e84:	51 e0       	ldi	r21, 0x01	; 1
    2e86:	f5 2e       	mov	r15, r21
		if(chkBit(sys_state,ERR))                  title=NET_GOTOVNOSTI;
    2e88:	83 ff       	sbrs	r24, 3
    2e8a:	04 c0       	rjmp	.+8      	; 0x2e94 <main+0x9c>
    2e8c:	4c ec       	ldi	r20, 0xCC	; 204
    2e8e:	e4 2e       	mov	r14, r20
    2e90:	40 e0       	ldi	r20, 0x00	; 0
    2e92:	f4 2e       	mov	r15, r20
		LCD_gotoXY(0,0);LCD_puts_P(title,20);
    2e94:	60 e0       	ldi	r22, 0x00	; 0
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
    2e9c:	64 e1       	ldi	r22, 0x14	; 20
    2e9e:	c7 01       	movw	r24, r14
    2ea0:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>

		//читаем время
		rtc_get(&rtc);
    2ea4:	80 ef       	ldi	r24, 0xF0	; 240
    2ea6:	94 e0       	ldi	r25, 0x04	; 4
    2ea8:	0e 94 b4 02 	call	0x568	; 0x568 <rtc_get>
		sprintf(buffer,"%02u.%02u.%02u %02u:%02u:%02u",rtc.day,rtc.month,rtc.year,rtc.hours,rtc.minutes,rtc.seconds);
    2eac:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <rtc+0x5>
    2eb0:	1f 92       	push	r1
    2eb2:	8f 93       	push	r24
    2eb4:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <rtc+0x4>
    2eb8:	1f 92       	push	r1
    2eba:	8f 93       	push	r24
    2ebc:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <rtc+0x3>
    2ec0:	1f 92       	push	r1
    2ec2:	8f 93       	push	r24
    2ec4:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <rtc>
    2ec8:	1f 92       	push	r1
    2eca:	8f 93       	push	r24
    2ecc:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <rtc+0x1>
    2ed0:	1f 92       	push	r1
    2ed2:	8f 93       	push	r24
    2ed4:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <rtc+0x2>
    2ed8:	1f 92       	push	r1
    2eda:	8f 93       	push	r24
    2edc:	7f 92       	push	r7
    2ede:	6f 92       	push	r6
    2ee0:	df 92       	push	r13
    2ee2:	cf 92       	push	r12
    2ee4:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <sprintf>
		//обновляем модбас
		modbusRegisters[TIME_YYMM]=(unsigned int)rtc.year<<8 | rtc.month;
    2ee8:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <rtc>
    2eec:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <rtc+0x1>
    2ef0:	98 27       	eor	r25, r24
    2ef2:	89 27       	eor	r24, r25
    2ef4:	98 27       	eor	r25, r24
    2ef6:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <modbusRegisters+0xb>
    2efa:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <modbusRegisters+0xa>
		modbusRegisters[TIME_DDHH]=(unsigned int)rtc.day<<8 | rtc.hours;
    2efe:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <rtc+0x2>
    2f02:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <rtc+0x3>
    2f06:	98 27       	eor	r25, r24
    2f08:	89 27       	eor	r24, r25
    2f0a:	98 27       	eor	r25, r24
    2f0c:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <modbusRegisters+0xd>
    2f10:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <modbusRegisters+0xc>
		modbusRegisters[TIME_MMSS]=(unsigned int)rtc.minutes<<8 | rtc.seconds;
    2f14:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <rtc+0x4>
    2f18:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <rtc+0x5>
    2f1c:	98 27       	eor	r25, r24
    2f1e:	89 27       	eor	r24, r25
    2f20:	98 27       	eor	r25, r24
    2f22:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <modbusRegisters+0xf>
    2f26:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <modbusRegisters+0xe>

		//экран:код ошибки или строка RTC
		LCD_gotoXY(0,3);
    2f2a:	63 e0       	ldi	r22, 0x03	; 3
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		if(ERROR)
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    2f40:	88 23       	and	r24, r24
    2f42:	a1 f0       	breq	.+40     	; 0x2f6c <main+0x174>
		{
			setBit(sys_state,ERR);
    2f44:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    2f48:	88 60       	ori	r24, 0x08	; 8
    2f4a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <sys_state>
			LCD_puts_P(OSHIBKA,20);
    2f4e:	64 e1       	ldi	r22, 0x14	; 20
    2f50:	85 ec       	ldi	r24, 0xC5	; 197
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 9b 06 	call	0xd36	; 0xd36 <LCD_puts_P>
			LCD_gotoXY(7,3);
    2f58:	63 e0       	ldi	r22, 0x03	; 3
    2f5a:	87 e0       	ldi	r24, 0x07	; 7
    2f5c:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
			LCD_putchar(ERROR+'0');
    2f60:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    2f64:	80 5d       	subi	r24, 0xD0	; 208
    2f66:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_putchar>
    2f6a:	04 c0       	rjmp	.+8      	; 0x2f74 <main+0x17c>
		}
		else
		{
			LCD_puts(buffer,20);
    2f6c:	64 e1       	ldi	r22, 0x14	; 20
    2f6e:	c6 01       	movw	r24, r12
    2f70:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
		}


		sprintf(buffer, "%u", sys_state);
    2f74:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    2f78:	1f 92       	push	r1
    2f7a:	8f 93       	push	r24
    2f7c:	bf 92       	push	r11
    2f7e:	af 92       	push	r10
    2f80:	df 92       	push	r13
    2f82:	cf 92       	push	r12
    2f84:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <sprintf>
		LCD_gotoXY(0,1);
    2f88:	61 e0       	ldi	r22, 0x01	; 1
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
		LCD_puts(buffer,20);
    2f90:	64 e1       	ldi	r22, 0x14	; 20
    2f92:	c6 01       	movw	r24, r12
    2f94:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_puts>
		/*sprintf(buffer, "%u", inSysBDZ[13].data[0]);
		LCD_gotoXY(0,2);
		LCD_puts(buffer,20);*/

		//новое в версии
		if(TWI_ERR)ERROR=RTC;
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <TWI_ERR>
    2fa8:	81 11       	cpse	r24, r1
    2faa:	40 92 4b 01 	sts	0x014B, r4	; 0x80014b <ERROR>
		if(MODB_ERR)ERROR=MODB;
    2fae:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <MODB_ERR>
    2fb2:	88 23       	and	r24, r24
    2fb4:	19 f0       	breq	.+6      	; 0x2fbc <main+0x1c4>
    2fb6:	85 e0       	ldi	r24, 0x05	; 5
    2fb8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>
		if(CAN_ERR)ERROR=CAN;
    2fbc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CAN_ERR>
    2fc0:	88 23       	and	r24, r24
    2fc2:	19 f0       	breq	.+6      	; 0x2fca <main+0x1d2>
    2fc4:	83 e0       	ldi	r24, 0x03	; 3
    2fc6:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>



		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
    2fca:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sys_state>
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
    2fce:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <modbusRegisters+0x9>
    2fd2:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <modbusRegisters+0x8>
    2fd6:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <modbusRegisters+0x7>
    2fda:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <modbusRegisters+0x6>
    2fde:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <modbusRegisters+0x5>
    2fe2:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <modbusRegisters+0x4>
    2fe6:	01 e0       	ldi	r16, 0x01	; 1
    2fe8:	10 e0       	ldi	r17, 0x00	; 0
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
		{
			if(readID(i)==i)	//если блок есть в списке
    2fea:	c8 01       	movw	r24, r16
    2fec:	87 5f       	subi	r24, 0xF7	; 247
    2fee:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff0:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    2ff4:	80 13       	cpse	r24, r16
    2ff6:	53 c0       	rjmp	.+166    	; 0x309e <main+0x2a6>
			{
				modbusRegisters[BDZ_INSYS]++;																//счетчик инлайн блоков
    2ff8:	20 91 e4 04 	lds	r18, 0x04E4	; 0x8004e4 <modbusRegisters+0x4>
    2ffc:	30 91 e5 04 	lds	r19, 0x04E5	; 0x8004e5 <modbusRegisters+0x5>
    3000:	2f 5f       	subi	r18, 0xFF	; 255
    3002:	3f 4f       	sbci	r19, 0xFF	; 255
    3004:	30 93 e5 04 	sts	0x04E5, r19	; 0x8004e5 <modbusRegisters+0x5>
    3008:	20 93 e4 04 	sts	0x04E4, r18	; 0x8004e4 <modbusRegisters+0x4>
				if(chkBit(inSysBDZ[i].flags,CONF)) setBit(sys_state,CONF);
    300c:	50 9e       	mul	r5, r16
    300e:	f0 01       	movw	r30, r0
    3010:	51 9e       	mul	r5, r17
    3012:	f0 0d       	add	r31, r0
    3014:	11 24       	eor	r1, r1
    3016:	ef 59       	subi	r30, 0x9F	; 159
    3018:	fe 4f       	sbci	r31, 0xFE	; 254
    301a:	90 85       	ldd	r25, Z+8	; 0x08
    301c:	95 ff       	sbrs	r25, 5
    301e:	05 c0       	rjmp	.+10     	; 0x302a <main+0x232>
    3020:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sys_state>
    3024:	90 62       	ori	r25, 0x20	; 32
    3026:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sys_state>
				if(chkBit(inSysBDZ[i].flags,ALM))
    302a:	50 9e       	mul	r5, r16
    302c:	f0 01       	movw	r30, r0
    302e:	51 9e       	mul	r5, r17
    3030:	f0 0d       	add	r31, r0
    3032:	11 24       	eor	r1, r1
    3034:	ef 59       	subi	r30, 0x9F	; 159
    3036:	fe 4f       	sbci	r31, 0xFE	; 254
    3038:	90 85       	ldd	r25, Z+8	; 0x08
    303a:	90 ff       	sbrs	r25, 0
    303c:	18 c0       	rjmp	.+48     	; 0x306e <main+0x276>
				{
					modbusRegisters[BDZ_ALARM]++;
    303e:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <modbusRegisters+0x8>
    3042:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <modbusRegisters+0x9>
    3046:	2f 5f       	subi	r18, 0xFF	; 255
    3048:	3f 4f       	sbci	r19, 0xFF	; 255
    304a:	30 93 e9 04 	sts	0x04E9, r19	; 0x8004e9 <modbusRegisters+0x9>
    304e:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <modbusRegisters+0x8>
					setBit(sys_state,ALM);
    3052:	20 90 4d 01 	lds	r2, 0x014D	; 0x80014d <sys_state>
    3056:	92 2d       	mov	r25, r2
    3058:	91 60       	ori	r25, 0x01	; 1
    305a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sys_state>
					if (scanID(i)) setBit(sys_state,NEW);
    305e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <scanID>
    3062:	88 23       	and	r24, r24
    3064:	21 f0       	breq	.+8      	; 0x306e <main+0x276>
    3066:	82 2d       	mov	r24, r2
    3068:	81 64       	ori	r24, 0x41	; 65
    306a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <sys_state>
				}	//счетчик аварийных блоков и установка флага общей аварии
				if(chkBit(inSysBDZ[i].flags,FLT)) {modbusRegisters[BDZ_FAULT]++; setBit(sys_state,FLT);}	//счетчик неисправный блоков и установка флага общей неисправности
    306e:	50 9e       	mul	r5, r16
    3070:	f0 01       	movw	r30, r0
    3072:	51 9e       	mul	r5, r17
    3074:	f0 0d       	add	r31, r0
    3076:	11 24       	eor	r1, r1
    3078:	ef 59       	subi	r30, 0x9F	; 159
    307a:	fe 4f       	sbci	r31, 0xFE	; 254
    307c:	80 85       	ldd	r24, Z+8	; 0x08
    307e:	81 ff       	sbrs	r24, 1
    3080:	0e c0       	rjmp	.+28     	; 0x309e <main+0x2a6>
    3082:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <modbusRegisters+0x6>
    3086:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <modbusRegisters+0x7>
    308a:	01 96       	adiw	r24, 0x01	; 1
    308c:	90 93 e7 04 	sts	0x04E7, r25	; 0x8004e7 <modbusRegisters+0x7>
    3090:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <modbusRegisters+0x6>
    3094:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    3098:	82 60       	ori	r24, 0x02	; 2
    309a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <sys_state>
				//if(new==i) setBit(sys_state,NEW);
				//sys_state |= inSysBDZ[i].flags & 0x03;				//два мл.бита-это флаги аварии и неисправности
			}

			(chkBit(sys_state,CONF))?(PORTA|=1<<OUT2):(PORTA &= ~(1<<OUT2));
    309e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    30a2:	85 ff       	sbrs	r24, 5
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <main+0x2b2>
    30a6:	da 9a       	sbi	0x1b, 2	; 27
    30a8:	01 c0       	rjmp	.+2      	; 0x30ac <main+0x2b4>
    30aa:	da 98       	cbi	0x1b, 2	; 27
			(chkBit(sys_state,ALM))?(PORTA|=1<<OUT1):(PORTA &= ~(1<<OUT1));	//обнаружили аварию ОТКЛЮЧАЕМ
    30ac:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    30b0:	80 ff       	sbrs	r24, 0
    30b2:	02 c0       	rjmp	.+4      	; 0x30b8 <main+0x2c0>
    30b4:	db 9a       	sbi	0x1b, 3	; 27
    30b6:	01 c0       	rjmp	.+2      	; 0x30ba <main+0x2c2>
    30b8:	db 98       	cbi	0x1b, 3	; 27
			(chkBit(sys_state,NEW))?(PORTA|=1<<OUT3):(PORTA &= ~(1<<OUT3));
    30ba:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    30be:	86 ff       	sbrs	r24, 6
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <main+0x2ce>
    30c2:	d9 9a       	sbi	0x1b, 1	; 27
    30c4:	01 c0       	rjmp	.+2      	; 0x30c8 <main+0x2d0>
    30c6:	d9 98       	cbi	0x1b, 1	; 27
			(chkBit(sys_state,FLT) || ERROR)?(clrBit(PORTA,OUT4)):(setBit(PORTA,OUT4));
    30c8:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    30cc:	81 fd       	sbrc	r24, 1
    30ce:	04 c0       	rjmp	.+8      	; 0x30d8 <main+0x2e0>
    30d0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    30d4:	88 23       	and	r24, r24
    30d6:	11 f0       	breq	.+4      	; 0x30dc <main+0x2e4>
    30d8:	d8 98       	cbi	0x1b, 0	; 27
    30da:	01 c0       	rjmp	.+2      	; 0x30de <main+0x2e6>
    30dc:	d8 9a       	sbi	0x1b, 0	; 27
    30de:	0f 5f       	subi	r16, 0xFF	; 255
    30e0:	1f 4f       	sbci	r17, 0xFF	; 255


		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
    30e2:	03 36       	cpi	r16, 0x63	; 99
    30e4:	11 05       	cpc	r17, r1
    30e6:	09 f0       	breq	.+2      	; 0x30ea <main+0x2f2>
    30e8:	80 cf       	rjmp	.-256    	; 0x2fea <main+0x1f2>
			(chkBit(sys_state,ALM))?(PORTA|=1<<OUT1):(PORTA &= ~(1<<OUT1));	//обнаружили аварию ОТКЛЮЧАЕМ
			(chkBit(sys_state,NEW))?(PORTA|=1<<OUT3):(PORTA &= ~(1<<OUT3));
			(chkBit(sys_state,FLT) || ERROR)?(clrBit(PORTA,OUT4)):(setBit(PORTA,OUT4));
		}
		//сохраняем ошибку, статус системы и состояния выходов
		modbusRegisters[BKI_STATE]=(unsigned int)ERROR<<8 | sys_state;
    30ea:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	98 2f       	mov	r25, r24
    30f2:	88 27       	eor	r24, r24
    30f4:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <sys_state>
    30f8:	82 2b       	or	r24, r18
    30fa:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <modbusRegisters+0x1>
    30fe:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <modbusRegisters>
		modbusRegisters[BKI_OUTS]= PINA & 0x0F;
    3102:	89 b3       	in	r24, 0x19	; 25
    3104:	8f 70       	andi	r24, 0x0F	; 15
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <modbusRegisters+0x3>
    310c:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <modbusRegisters+0x2>

		//здесь можно пингануть.После пинга пройдет "пауза со сканированием"-за это время должны прийти все отклики
		if(pingTime ==0)
    3110:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pingTime>
    3114:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <pingTime+0x1>
    3118:	89 2b       	or	r24, r25
    311a:	69 f4       	brne	.+26     	; 0x3136 <main+0x33e>
		{
			ping();
    311c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ping>
			pingTime=PINGTIME;
    3120:	90 92 5d 01 	sts	0x015D, r9	; 0x80015d <pingTime+0x1>
    3124:	80 92 5c 01 	sts	0x015C, r8	; 0x80015c <pingTime>
			LCD_gotoXY(19,0);
    3128:	60 e0       	ldi	r22, 0x00	; 0
    312a:	83 e1       	ldi	r24, 0x13	; 19
    312c:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_gotoXY>
			LCD_putchar('*');
    3130:	8a e2       	ldi	r24, 0x2A	; 42
    3132:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_putchar>



		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
    3136:	08 ee       	ldi	r16, 0xE8	; 232
    3138:	13 e0       	ldi	r17, 0x03	; 3
		}



		//пауза со сканированием клавы.Если появился RX прерываемся
		for(unsigned int i=0;(i<1000) && (!rx_counter);i++)
    313a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_counter>
    313e:	81 11       	cpse	r24, r1
    3140:	19 c0       	rjmp	.+50     	; 0x3174 <main+0x37c>
    3142:	8f e9       	ldi	r24, 0x9F	; 159
    3144:	9f e0       	ldi	r25, 0x0F	; 15
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <main+0x34e>
    314a:	00 c0       	rjmp	.+0      	; 0x314c <main+0x354>
    314c:	00 00       	nop
		{
			_delay_ms(1);
			//нажат ENT-висим пока не отпустят-по выходу из меню очищаем экран,обнуляем статус
			if(scanKBD()==ENT){while(scanKBD()!=NOKEY);naviMenu(LVL_main);LCD_clr();sys_state=0;}
    314e:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <scanKBD>
    3152:	82 30       	cpi	r24, 0x02	; 2
    3154:	61 f4       	brne	.+24     	; 0x316e <main+0x376>
    3156:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <scanKBD>
    315a:	8f 3f       	cpi	r24, 0xFF	; 255
    315c:	e1 f7       	brne	.-8      	; 0x3156 <main+0x35e>
    315e:	80 e6       	ldi	r24, 0x60	; 96
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <naviMenu>
    3166:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LCD_clr>
    316a:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sys_state>
    316e:	01 50       	subi	r16, 0x01	; 1
    3170:	11 09       	sbc	r17, r1
		}



		//пауза со сканированием клавы.Если появился RX прерываемся
		for(unsigned int i=0;(i<1000) && (!rx_counter);i++)
    3172:	19 f7       	brne	.-58     	; 0x313a <main+0x342>
			//нажат ENT-висим пока не отпустят-по выходу из меню очищаем экран,обнуляем статус
			if(scanKBD()==ENT){while(scanKBD()!=NOKEY);naviMenu(LVL_main);LCD_clr();sys_state=0;}
		}

		//отработка модбаса.если что то есть в буфере читаем сообщение
		if(rx_counter)
    3174:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_counter>
    3178:	88 23       	and	r24, r24
    317a:	09 f4       	brne	.+2      	; 0x317e <main+0x386>
    317c:	5e ce       	rjmp	.-836    	; 0x2e3a <main+0x42>
		{
			signed char a=getModbMsg();
    317e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <getModbMsg>
			if(a<1)ERROR=MODB;
    3182:	18 16       	cp	r1, r24
    3184:	24 f0       	brlt	.+8      	; 0x318e <main+0x396>
    3186:	85 e0       	ldi	r24, 0x05	; 5
    3188:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>
    318c:	56 ce       	rjmp	.-852    	; 0x2e3a <main+0x42>
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
    318e:	dd 98       	cbi	0x1b, 5	; 27
				if(ERROR==MODB)ERROR=0;
    3190:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    3194:	85 30       	cpi	r24, 0x05	; 5
    3196:	11 f4       	brne	.+4      	; 0x319c <main+0x3a4>
    3198:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <ERROR>


static signed char modbDecoder(void)
{
	//адрес не наш
	if(MODB_ADDR != eeprom_read_byte(&bki_addr)) return -1;
    319c:	10 91 a4 05 	lds	r17, 0x05A4	; 0x8005a4 <modb_message>
    31a0:	86 e0       	ldi	r24, 0x06	; 6
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <eeprom_read_byte>
    31a8:	18 13       	cpse	r17, r24
    31aa:	41 c0       	rjmp	.+130    	; 0x322e <main+0x436>
    31ac:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <modb_message+0x2>
    31b0:	f0 91 a7 05 	lds	r31, 0x05A7	; 0x8005a7 <modb_message+0x3>
    31b4:	fe 27       	eor	r31, r30
    31b6:	ef 27       	eor	r30, r31
    31b8:	fe 27       	eor	r31, r30
    31ba:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <modb_message+0x4>
    31be:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <modb_message+0x5>
    31c2:	98 27       	eor	r25, r24
    31c4:	89 27       	eor	r24, r25
    31c6:	98 27       	eor	r25, r24
	//неправильный регистр или их кол-во
	if((MODB_START_REG+MODB_QUANT_REG) > MAX_QUANT_MODB_REG) return modbErr(ILLEGAL_DATA_ADDR);
    31c8:	af 01       	movw	r20, r30
    31ca:	48 0f       	add	r20, r24
    31cc:	59 1f       	adc	r21, r25
    31ce:	20 91 a5 05 	lds	r18, 0x05A5	; 0x8005a5 <modb_message+0x1>
    31d2:	49 30       	cpi	r20, 0x09	; 9
    31d4:	51 05       	cpc	r21, r1
    31d6:	38 f0       	brcs	.+14     	; 0x31e6 <main+0x3ee>
	return 0;
}

static unsigned char modbErr(unsigned char errCode)
{
	MODB_FUNC |= 0x80;			//установили флаг ошибки
    31d8:	20 68       	ori	r18, 0x80	; 128
    31da:	20 93 a5 05 	sts	0x05A5, r18	; 0x8005a5 <modb_message+0x1>
	MOBD_ERROR_CODE = errCode; 	//код ошибки
    31de:	40 92 a6 05 	sts	0x05A6, r4	; 0x8005a6 <modb_message+0x2>
static signed char modbDecoder(void)
{
	//адрес не наш
	if(MODB_ADDR != eeprom_read_byte(&bki_addr)) return -1;
	//неправильный регистр или их кол-во
	if((MODB_START_REG+MODB_QUANT_REG) > MAX_QUANT_MODB_REG) return modbErr(ILLEGAL_DATA_ADDR);
    31e2:	83 e0       	ldi	r24, 0x03	; 3
    31e4:	26 c0       	rjmp	.+76     	; 0x3232 <main+0x43a>
	//обрабатываем функцию
	switch(MODB_FUNC)
    31e6:	23 30       	cpi	r18, 0x03	; 3
    31e8:	e9 f4       	brne	.+58     	; 0x3224 <main+0x42c>
    31ea:	ee 0f       	add	r30, r30
    31ec:	ff 1f       	adc	r31, r31
    31ee:	e0 52       	subi	r30, 0x20	; 32
    31f0:	fb 4f       	sbci	r31, 0xFB	; 251
    31f2:	a4 ea       	ldi	r26, 0xA4	; 164
    31f4:	b5 e0       	ldi	r27, 0x05	; 5
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	12 96       	adiw	r26, 0x02	; 2
	{
		unsigned char j=MOBD_START_DATA;
		unsigned int  s=MODB_START_REG;
		unsigned int  e=MODB_QUANT_REG;

		for(unsigned int i=0; i<e; i++)
    31fc:	82 17       	cp	r24, r18
    31fe:	93 07       	cpc	r25, r19
    3200:	61 f0       	breq	.+24     	; 0x321a <main+0x422>
		{
			modb_message[j++] =modbusRegisters[i+s] >>8;		//старший байт данных
    3202:	40 81       	ld	r20, Z
    3204:	51 81       	ldd	r21, Z+1	; 0x01
    3206:	32 96       	adiw	r30, 0x02	; 2
    3208:	11 96       	adiw	r26, 0x01	; 1
    320a:	5c 93       	st	X, r21
    320c:	11 97       	sbiw	r26, 0x01	; 1
			modb_message[j++] =modbusRegisters[i+s] & 0x00FF;	//младший
    320e:	12 96       	adiw	r26, 0x02	; 2
    3210:	4c 93       	st	X, r20
    3212:	12 97       	sbiw	r26, 0x02	; 2
	{
		unsigned char j=MOBD_START_DATA;
		unsigned int  s=MODB_START_REG;
		unsigned int  e=MODB_QUANT_REG;

		for(unsigned int i=0; i<e; i++)
    3214:	2f 5f       	subi	r18, 0xFF	; 255
    3216:	3f 4f       	sbci	r19, 0xFF	; 255
    3218:	f0 cf       	rjmp	.-32     	; 0x31fa <main+0x402>
    321a:	88 0f       	add	r24, r24
		{
			modb_message[j++] =modbusRegisters[i+s] >>8;		//старший байт данных
			modb_message[j++] =modbusRegisters[i+s] & 0x00FF;	//младший
		}
		MOBD_BYTE_COUNT = j-MOBD_START_DATA;				//счетчик байт в сообщении
    321c:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <modb_message+0x2>
		return MOBD_BYTE_COUNT+3;
    3220:	8d 5f       	subi	r24, 0xFD	; 253
    3222:	07 c0       	rjmp	.+14     	; 0x3232 <main+0x43a>
	return 0;
}

static unsigned char modbErr(unsigned char errCode)
{
	MODB_FUNC |= 0x80;			//установили флаг ошибки
    3224:	20 68       	ori	r18, 0x80	; 128
    3226:	20 93 a5 05 	sts	0x05A5, r18	; 0x8005a5 <modb_message+0x1>
	MOBD_ERROR_CODE = errCode; 	//код ошибки
    322a:	30 92 a6 05 	sts	0x05A6, r3	; 0x8005a6 <modb_message+0x2>
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
				if(ERROR==MODB)ERROR=0;
				if((a=modbDecoder()) >0)putModbMsg(a);
				PORTA |= 1<<5;	//зажигаем СД
    322e:	dd 9a       	sbi	0x1b, 5	; 27
			}
		}


	}
    3230:	04 ce       	rjmp	.-1016   	; 0x2e3a <main+0x42>
			if(a<1)ERROR=MODB;
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
				if(ERROR==MODB)ERROR=0;
				if((a=modbDecoder()) >0)putModbMsg(a);
    3232:	0e 94 32 1a 	call	0x3464	; 0x3464 <putModbMsg>
    3236:	fb cf       	rjmp	.-10     	; 0x322e <main+0x436>

00003238 <__vector_7>:
	clrBit(PORTA,BEEP);
}

//таймер 1ms
ISR(TIMER1_COMPA_vect)
{
    3238:	1f 92       	push	r1
    323a:	0f 92       	push	r0
    323c:	0f b6       	in	r0, 0x3f	; 63
    323e:	0f 92       	push	r0
    3240:	11 24       	eor	r1, r1
    3242:	8f 93       	push	r24
    3244:	9f 93       	push	r25
    3246:	af 93       	push	r26
    3248:	bf 93       	push	r27
	if(CAN_timeout)CAN_timeout--;
    324a:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <CAN_timeout>
    324e:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <CAN_timeout+0x1>
    3252:	89 2b       	or	r24, r25
    3254:	49 f0       	breq	.+18     	; 0x3268 <__vector_7+0x30>
    3256:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <CAN_timeout>
    325a:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <CAN_timeout+0x1>
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <CAN_timeout+0x1>
    3264:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <CAN_timeout>
	if(SPI_timeout)SPI_timeout--;
    3268:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <SPI_timeout>
    326c:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <SPI_timeout+0x1>
    3270:	89 2b       	or	r24, r25
    3272:	49 f0       	breq	.+18     	; 0x3286 <__vector_7+0x4e>
    3274:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <SPI_timeout>
    3278:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <SPI_timeout+0x1>
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <SPI_timeout+0x1>
    3282:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <SPI_timeout>
	if(menuExit)menuExit--;
    3286:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <menuExit>
    328a:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <menuExit+0x1>
    328e:	89 2b       	or	r24, r25
    3290:	49 f0       	breq	.+18     	; 0x32a4 <__vector_7+0x6c>
    3292:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <menuExit>
    3296:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <menuExit+0x1>
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <menuExit+0x1>
    32a0:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <menuExit>
	if(pingTime)pingTime--;
    32a4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pingTime>
    32a8:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <pingTime+0x1>
    32ac:	89 2b       	or	r24, r25
    32ae:	49 f0       	breq	.+18     	; 0x32c2 <__vector_7+0x8a>
    32b0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pingTime>
    32b4:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <pingTime+0x1>
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <pingTime+0x1>
    32be:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <pingTime>

	if(MODB_timeout)MODB_timeout--;
    32c2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <MODB_timeout>
    32c6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <MODB_timeout+0x1>
    32ca:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <MODB_timeout+0x2>
    32ce:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <MODB_timeout+0x3>
    32d2:	89 2b       	or	r24, r25
    32d4:	8a 2b       	or	r24, r26
    32d6:	8b 2b       	or	r24, r27
    32d8:	99 f0       	breq	.+38     	; 0x3300 <__vector_7+0xc8>
    32da:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <MODB_timeout>
    32de:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <MODB_timeout+0x1>
    32e2:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <MODB_timeout+0x2>
    32e6:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <MODB_timeout+0x3>
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	a1 09       	sbc	r26, r1
    32ee:	b1 09       	sbc	r27, r1
    32f0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <MODB_timeout>
    32f4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <MODB_timeout+0x1>
    32f8:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <MODB_timeout+0x2>
    32fc:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <MODB_timeout+0x3>

}
    3300:	bf 91       	pop	r27
    3302:	af 91       	pop	r26
    3304:	9f 91       	pop	r25
    3306:	8f 91       	pop	r24
    3308:	0f 90       	pop	r0
    330a:	0f be       	out	0x3f, r0	; 63
    330c:	0f 90       	pop	r0
    330e:	1f 90       	pop	r1
    3310:	18 95       	reti

00003312 <__vector_13>:

//чтение данный UART
ISR(USART_RXC_vect)
{
    3312:	1f 92       	push	r1
    3314:	0f 92       	push	r0
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	0f 92       	push	r0
    331a:	11 24       	eor	r1, r1
    331c:	8f 93       	push	r24
    331e:	9f 93       	push	r25
    3320:	ef 93       	push	r30
    3322:	ff 93       	push	r31
//отправить сообщение из модбас буфера. На входе RTU сообщение, передаем его длину
extern void putModbMsg(unsigned char lenght);
//прием символа и помещение в приемный буфер. Вставляется,например в прерывание
inline void read_raw_data(void)
{
	char status=UCSRA,data=UDR;
    3324:	8b b1       	in	r24, 0x0b	; 11
    3326:	9c b1       	in	r25, 0x0c	; 12

	if ((status & (1<<FE | 1<<PE | 1<<DOR))!=0) {MODB_ERR=MODBHW;return;}
    3328:	8c 71       	andi	r24, 0x1C	; 28
    332a:	11 f0       	breq	.+4      	; 0x3330 <__vector_13+0x1e>
    332c:	83 e0       	ldi	r24, 0x03	; 3
    332e:	19 c0       	rjmp	.+50     	; 0x3362 <__vector_13+0x50>
	rx_buffer[wr_index]=data;
    3330:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <wr_index>
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	e4 58       	subi	r30, 0x84	; 132
    3338:	fa 4f       	sbci	r31, 0xFA	; 250
    333a:	90 83       	st	Z, r25
	if (++wr_index == MODB_MESSSIZE) wr_index=0;
    333c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <wr_index>
    3340:	8f 5f       	subi	r24, 0xFF	; 255
    3342:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <wr_index>
    3346:	88 32       	cpi	r24, 0x28	; 40
    3348:	11 f4       	brne	.+4      	; 0x334e <__vector_13+0x3c>
    334a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <wr_index>
	if (++rx_counter == MODB_MESSSIZE) {rx_counter=0;MODB_ERR=MODBBUFOVF;return;}
    334e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_counter>
    3352:	8f 5f       	subi	r24, 0xFF	; 255
    3354:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_counter>
    3358:	88 32       	cpi	r24, 0x28	; 40
    335a:	29 f4       	brne	.+10     	; 0x3366 <__vector_13+0x54>
    335c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_counter>
    3360:	82 e0       	ldi	r24, 0x02	; 2
    3362:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <MODB_ERR>
	read_raw_data();
}
    3366:	ff 91       	pop	r31
    3368:	ef 91       	pop	r30
    336a:	9f 91       	pop	r25
    336c:	8f 91       	pop	r24
    336e:	0f 90       	pop	r0
    3370:	0f be       	out	0x3f, r0	; 63
    3372:	0f 90       	pop	r0
    3374:	1f 90       	pop	r1
    3376:	18 95       	reti

00003378 <modb_putchar>:
}

//отсылка символа по УАРТу
static void modb_putchar(char c)
{
	while((UCSRA&(1<<UDRE))==0);
    3378:	5d 9b       	sbis	0x0b, 5	; 11
    337a:	fe cf       	rjmp	.-4      	; 0x3378 <modb_putchar>
	UDR=c;
    337c:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<TXC))==0);	//ждем окончания передачи
    337e:	5e 9b       	sbis	0x0b, 6	; 11
    3380:	fe cf       	rjmp	.-4      	; 0x337e <modb_putchar+0x6>
	UCSRA |= 1<<TXC;			//сброс флага окончания передачи
    3382:	5e 9a       	sbi	0x0b, 6	; 11
    3384:	08 95       	ret

00003386 <CRC.constprop.0>:
  while(lenght--) {lrc+=*data++;}
  return ((unsigned char) (-(signed char) lrc));
}

//вычисление CRC
static unsigned int CRC(volatile unsigned char *data, unsigned char lenght)
    3386:	28 2f       	mov	r18, r24
{
  unsigned int crc=0xFFFF;
    3388:	8f ef       	ldi	r24, 0xFF	; 255
    338a:	9f ef       	ldi	r25, 0xFF	; 255
    338c:	e4 ea       	ldi	r30, 0xA4	; 164
    338e:	f5 e0       	ldi	r31, 0x05	; 5

  while(lenght--)
    3390:	21 50       	subi	r18, 0x01	; 1
    3392:	b0 f0       	brcs	.+44     	; 0x33c0 <CRC.constprop.0+0x3a>
  {
    crc ^= *data++;
    3394:	bf 01       	movw	r22, r30
    3396:	6f 5f       	subi	r22, 0xFF	; 255
    3398:	7f 4f       	sbci	r23, 0xFF	; 255
    339a:	30 81       	ld	r19, Z
    339c:	83 27       	eor	r24, r19
    339e:	38 e0       	ldi	r19, 0x08	; 8
    33a0:	ac 01       	movw	r20, r24
    33a2:	56 95       	lsr	r21
    33a4:	47 95       	ror	r20
    for (unsigned char i = 0; i < 8; ++i)
    {
	if (crc & 1) crc = (crc >> 1) ^ 0xA001;
    33a6:	80 ff       	sbrs	r24, 0
    33a8:	06 c0       	rjmp	.+12     	; 0x33b6 <CRC.constprop.0+0x30>
    33aa:	ca 01       	movw	r24, r20
    33ac:	e1 e0       	ldi	r30, 0x01	; 1
    33ae:	8e 27       	eor	r24, r30
    33b0:	e0 ea       	ldi	r30, 0xA0	; 160
    33b2:	9e 27       	eor	r25, r30
    33b4:	01 c0       	rjmp	.+2      	; 0x33b8 <CRC.constprop.0+0x32>
	else crc = (crc >> 1);
    33b6:	ca 01       	movw	r24, r20
    33b8:	31 50       	subi	r19, 0x01	; 1
  unsigned int crc=0xFFFF;

  while(lenght--)
  {
    crc ^= *data++;
    for (unsigned char i = 0; i < 8; ++i)
    33ba:	91 f7       	brne	.-28     	; 0x33a0 <CRC.constprop.0+0x1a>
{
  unsigned int crc=0xFFFF;

  while(lenght--)
  {
    crc ^= *data++;
    33bc:	fb 01       	movw	r30, r22
    33be:	e8 cf       	rjmp	.-48     	; 0x3390 <CRC.constprop.0+0xa>
	else crc = (crc >> 1);
    }
  }

  return crc;
}
    33c0:	08 95       	ret

000033c2 <MODB_init>:
static void modb_putchar(char);


//Инициализация.Выглядит примерно так:  MODB_init(RTU,EVEN,9600);
void MODB_init(unsigned char type,unsigned char parity,unsigned long int speed)
{
    33c2:	0f 93       	push	r16
    33c4:	1f 93       	push	r17
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	18 2f       	mov	r17, r24
    33cc:	c6 2f       	mov	r28, r22
  unsigned char stop=(parity ==NONE)?(2):(1);	//1 стоп бит если есть паритет; 2 бита если нет паритета
    33ce:	66 23       	and	r22, r22
    33d0:	11 f0       	breq	.+4      	; 0x33d6 <MODB_init+0x14>
    33d2:	01 e0       	ldi	r16, 0x01	; 1
    33d4:	01 c0       	rjmp	.+2      	; 0x33d8 <MODB_init+0x16>
    33d6:	02 e0       	ldi	r16, 0x02	; 2
  unsigned char size=(type ==ASCII)?(7):(8);	//если ASCII-7 бит данных MSB, если RTU-8 бит данных MSB
    33d8:	11 30       	cpi	r17, 0x01	; 1
    33da:	11 f0       	breq	.+4      	; 0x33e0 <MODB_init+0x1e>
    33dc:	d8 e0       	ldi	r29, 0x08	; 8
    33de:	01 c0       	rjmp	.+2      	; 0x33e2 <MODB_init+0x20>
    33e0:	d7 e0       	ldi	r29, 0x07	; 7
  unsigned int baud=0x7F & (unsigned int)((F_CPU/(16*speed))-1);
    33e2:	84 e0       	ldi	r24, 0x04	; 4
    33e4:	22 0f       	add	r18, r18
    33e6:	33 1f       	adc	r19, r19
    33e8:	44 1f       	adc	r20, r20
    33ea:	55 1f       	adc	r21, r21
    33ec:	8a 95       	dec	r24
    33ee:	d1 f7       	brne	.-12     	; 0x33e4 <MODB_init+0x22>
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	74 e2       	ldi	r23, 0x24	; 36
    33f4:	84 ef       	ldi	r24, 0xF4	; 244
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__udivmodsi4>
    33fc:	21 50       	subi	r18, 0x01	; 1
    33fe:	31 09       	sbc	r19, r1
    3400:	2f 77       	andi	r18, 0x7F	; 127
    3402:	33 27       	eor	r19, r19


  size-=5;
    3404:	d5 50       	subi	r29, 0x05	; 5
  TXENDDR |= 1<<TXENPIN;
    3406:	8e 9a       	sbi	0x11, 6	; 17
  TXDISABLE;
    3408:	96 98       	cbi	0x12, 6	; 18

  modb_type=type;
    340a:	10 93 53 01 	sts	0x0153, r17	; 0x800153 <modb_type>
  //длительность передачи одного бита == кол-во бит-в-символе(ASCII==10, RTU==11)/скорость
  //таймаут д.б. RTU>=3.5 символа (>38,5 бит), ASCII <=1000ms;
  //RTU = с запасом 40 бит=> 40/speed ==пауза, сек *1000 ==ms
//  val_timeout=(type ==ASCII)?(1000000):(40000000/speed);
  val_timeout=(type ==ASCII)?(1000):(2);	//при скоростях больше 19200 таймаут можно принять 2мс
    340e:	11 30       	cpi	r17, 0x01	; 1
    3410:	29 f0       	breq	.+10     	; 0x341c <MODB_init+0x5a>
    3412:	82 e0       	ldi	r24, 0x02	; 2
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	a0 e0       	ldi	r26, 0x00	; 0
    3418:	b0 e0       	ldi	r27, 0x00	; 0
    341a:	04 c0       	rjmp	.+8      	; 0x3424 <MODB_init+0x62>
    341c:	88 ee       	ldi	r24, 0xE8	; 232
    341e:	93 e0       	ldi	r25, 0x03	; 3
    3420:	a0 e0       	ldi	r26, 0x00	; 0
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <val_timeout>
    3428:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <val_timeout+0x1>
    342c:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <val_timeout+0x2>
    3430:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <val_timeout+0x3>

  //нога ТХ
  //When the USART Transmitter is enabled, this pin is configured as an output regardless of the value of DDD1.
  PORTD |= (1<<PORTD1);//PORTD.1=1 выход с "1"
    3434:	91 9a       	sbi	0x12, 1	; 18
  DDRD |= (1<<DDD1);  //DDRD.1=1 выход
    3436:	89 9a       	sbi	0x11, 1	; 17

  //нога RX
  PORTD |= (1<<PORTD0);//PORTD.1=1 вход с притяжкой
    3438:	90 9a       	sbi	0x12, 0	; 18
  DDRD &= ~(1<<DDD0);  //DDD.1=0 вход
    343a:	88 98       	cbi	0x11, 0	; 17

  UCSRA=0x00;
    343c:	1b b8       	out	0x0b, r1	; 11
  //(7)вкл.прер.по приему, (6)откл.прер.по передаче, (5)откл.прер.по опустошению UDR, (4)вкл.передатчик и (3)приемник, (2)9бит откл.
  UCSRB=0b10011000;
    343e:	88 e9       	ldi	r24, 0x98	; 152
    3440:	8a b9       	out	0x0a, r24	; 10
  //(7)?, (6)асинхронный режим, (5:4)четность(none), (3)1стоп, (2:1)8бит, (0)=0
  //	UCSRC=0b10000110;

  UCSRC=(1<<7) | parity | ((stop==2)?(1):(0) << 3) | (size<<1);
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	02 30       	cpi	r16, 0x02	; 2
    3446:	09 f0       	breq	.+2      	; 0x344a <MODB_init+0x88>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	c0 68       	ori	r28, 0x80	; 128
    344c:	8c 2b       	or	r24, r28
    344e:	cd 2f       	mov	r28, r29
    3450:	cc 0f       	add	r28, r28
    3452:	c8 2b       	or	r28, r24
    3454:	c0 bd       	out	0x20, r28	; 32
//	//(7)?, (6)асинхронный режим, (5:4)четность(EVEN), (3)1стоп, (2:1)8бит, (0)=0
//	UCSRC=0b10100110;
  UBRRH=baud << 8;
    3456:	10 bc       	out	0x20, r1	; 32
  UBRRL=baud & 0x00FF;
    3458:	29 b9       	out	0x09, r18	; 9
//	//9600 bps
//	UBRRH=0x00;
//	UBRRL=0x67;

}
    345a:	df 91       	pop	r29
    345c:	cf 91       	pop	r28
    345e:	1f 91       	pop	r17
    3460:	0f 91       	pop	r16
    3462:	08 95       	ret

00003464 <putModbMsg>:

//отправить сообщение из модбас буфера. На входе RTU сообщение, передаем его длину
void putModbMsg(unsigned char lenght)
{
    3464:	ef 92       	push	r14
    3466:	ff 92       	push	r15
    3468:	0f 93       	push	r16
    346a:	1f 93       	push	r17
    346c:	cf 93       	push	r28
    346e:	df 93       	push	r29
    3470:	c8 2f       	mov	r28, r24
  switch(modb_type)
    3472:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <modb_type>
    3476:	88 23       	and	r24, r24
    3478:	41 f0       	breq	.+16     	; 0x348a <putModbMsg+0x26>
    347a:	81 30       	cpi	r24, 0x01	; 1
    347c:	09 f0       	breq	.+2      	; 0x3480 <putModbMsg+0x1c>
    347e:	8e c0       	rjmp	.+284    	; 0x359c <putModbMsg+0x138>
    3480:	9c 2f       	mov	r25, r28
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	e4 ea       	ldi	r30, 0xA4	; 164
    3486:	f5 e0       	ldi	r31, 0x05	; 5
    3488:	35 c0       	rjmp	.+106    	; 0x34f4 <putModbMsg+0x90>
  {
  case(RTU):
    {
    unsigned int crc=CRC(modb_message,lenght);
    348a:	8c 2f       	mov	r24, r28
    348c:	0e 94 c3 19 	call	0x3386	; 0x3386 <CRC.constprop.0>
    3490:	f8 2e       	mov	r15, r24
    3492:	d9 2f       	mov	r29, r25
    unsigned char index=0;

    TXENABLE;
    3494:	96 9a       	sbi	0x12, 6	; 18
    3496:	04 ea       	ldi	r16, 0xA4	; 164
    3498:	15 e0       	ldi	r17, 0x05	; 5
    while(lenght--) modb_putchar(modb_message[index++]);
    349a:	cc 23       	and	r28, r28
    349c:	39 f0       	breq	.+14     	; 0x34ac <putModbMsg+0x48>
    349e:	f8 01       	movw	r30, r16
    34a0:	81 91       	ld	r24, Z+
    34a2:	8f 01       	movw	r16, r30
    34a4:	0e 94 bc 19 	call	0x3378	; 0x3378 <modb_putchar>
    34a8:	c1 50       	subi	r28, 0x01	; 1
    34aa:	f7 cf       	rjmp	.-18     	; 0x349a <putModbMsg+0x36>
    modb_putchar(crc & 0x00FF);	//младшим байтом вперед
    34ac:	8f 2d       	mov	r24, r15
    34ae:	0e 94 bc 19 	call	0x3378	; 0x3378 <modb_putchar>
    modb_putchar(crc>>8);
    34b2:	8d 2f       	mov	r24, r29
    34b4:	0e 94 bc 19 	call	0x3378	; 0x3378 <modb_putchar>
    TXDISABLE;
    34b8:	96 98       	cbi	0x12, 6	; 18
    MODB_timeout=val_timeout;
    34ba:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <val_timeout>
    34be:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <val_timeout+0x1>
    34c2:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <val_timeout+0x2>
    34c6:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <val_timeout+0x3>
    34ca:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <MODB_timeout>
    34ce:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <MODB_timeout+0x1>
    34d2:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <MODB_timeout+0x2>
    34d6:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <MODB_timeout+0x3>
    while(MODB_timeout);
    34da:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <MODB_timeout>
    34de:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <MODB_timeout+0x1>
    34e2:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <MODB_timeout+0x2>
    34e6:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <MODB_timeout+0x3>
    34ea:	89 2b       	or	r24, r25
    34ec:	8a 2b       	or	r24, r26
    34ee:	8b 2b       	or	r24, r27
    34f0:	a1 f7       	brne	.-24     	; 0x34da <putModbMsg+0x76>
    34f2:	54 c0       	rjmp	.+168    	; 0x359c <putModbMsg+0x138>
//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;

  while(lenght--) {lrc+=*data++;}
    34f4:	91 50       	subi	r25, 0x01	; 1
    34f6:	20 f0       	brcs	.+8      	; 0x3500 <putModbMsg+0x9c>
    34f8:	20 81       	ld	r18, Z
    34fa:	82 0f       	add	r24, r18
    34fc:	31 96       	adiw	r30, 0x01	; 1
    34fe:	fa cf       	rjmp	.-12     	; 0x34f4 <putModbMsg+0x90>
  return ((unsigned char) (-(signed char) lrc));
    3500:	d8 2f       	mov	r29, r24
    3502:	d1 95       	neg	r29
  case(ASCII):
    {
    unsigned char lrc=LRC(modb_message,lenght);
    unsigned char index=0;

    TXENABLE;
    3504:	96 9a       	sbi	0x12, 6	; 18
    3506:	ff ef       	ldi	r31, 0xFF	; 255
    3508:	29 ef       	ldi	r18, 0xF9	; 249
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	f1 50       	subi	r31, 0x01	; 1
    350e:	20 40       	sbci	r18, 0x00	; 0
    3510:	80 40       	sbci	r24, 0x00	; 0
    3512:	e1 f7       	brne	.-8      	; 0x350c <putModbMsg+0xa8>
    3514:	00 c0       	rjmp	.+0      	; 0x3516 <putModbMsg+0xb2>
    3516:	00 00       	nop
    _delay_ms(20);
    modb_putchar(':');
    3518:	8a e3       	ldi	r24, 0x3A	; 58
    351a:	0e 94 bc 19 	call	0x3378	; 0x3378 <modb_putchar>
    351e:	04 ea       	ldi	r16, 0xA4	; 164
    3520:	15 e0       	ldi	r17, 0x05	; 5

    while(lenght--)
    3522:	cc 23       	and	r28, r28
    3524:	f1 f0       	breq	.+60     	; 0x3562 <putModbMsg+0xfe>
    3526:	78 01       	movw	r14, r16
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
    3528:	f8 01       	movw	r30, r16
    352a:	80 81       	ld	r24, Z
    352c:	82 95       	swap	r24
    352e:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    3530:	90 e3       	ldi	r25, 0x30	; 48
    3532:	98 0f       	add	r25, r24
  if(num>57)return num+7;
    3534:	9a 33       	cpi	r25, 0x3A	; 58
    3536:	10 f0       	brcs	.+4      	; 0x353c <putModbMsg+0xd8>
    3538:	89 5c       	subi	r24, 0xC9	; 201
    353a:	01 c0       	rjmp	.+2      	; 0x353e <putModbMsg+0xda>
    353c:	89 2f       	mov	r24, r25
    _delay_ms(20);
    modb_putchar(':');

    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
    353e:	0e 94 bc 19 	call	0x3378	; 0x3378 <modb_putchar>
    3542:	0f 5f       	subi	r16, 0xFF	; 255
    3544:	1f 4f       	sbci	r17, 0xFF	; 255
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
    3546:	f7 01       	movw	r30, r14
    3548:	80 81       	ld	r24, Z
    354a:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    354c:	90 e3       	ldi	r25, 0x30	; 48
    354e:	98 0f       	add	r25, r24
  if(num>57)return num+7;
    3550:	9a 33       	cpi	r25, 0x3A	; 58
    3552:	10 f0       	brcs	.+4      	; 0x3558 <putModbMsg+0xf4>
    3554:	89 5c       	subi	r24, 0xC9	; 201
    3556:	01 c0       	rjmp	.+2      	; 0x355a <putModbMsg+0xf6>
    3558:	89 2f       	mov	r24, r25
    modb_putchar(':');

    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
    355a:	0e 94 bc 19 	call	0x3378	; 0x3378 <modb_putchar>
    355e:	c1 50       	subi	r28, 0x01	; 1
    3560:	e0 cf       	rjmp	.-64     	; 0x3522 <putModbMsg+0xbe>
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    3562:	9d 2f       	mov	r25, r29
    3564:	92 95       	swap	r25
    3566:	9f 70       	andi	r25, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    3568:	80 e3       	ldi	r24, 0x30	; 48
    356a:	89 0f       	add	r24, r25
  if(num>57)return num+7;
    356c:	8a 33       	cpi	r24, 0x3A	; 58
    356e:	10 f0       	brcs	.+4      	; 0x3574 <putModbMsg+0x110>
    3570:	87 e3       	ldi	r24, 0x37	; 55
    3572:	89 0f       	add	r24, r25
    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    3574:	0e 94 bc 19 	call	0x3378	; 0x3378 <modb_putchar>
    modb_putchar( dig_to_char(lrc& 0x0F) );
    3578:	8d 2f       	mov	r24, r29
    357a:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    357c:	d0 e3       	ldi	r29, 0x30	; 48
    357e:	d8 0f       	add	r29, r24
  if(num>57)return num+7;
    3580:	da 33       	cpi	r29, 0x3A	; 58
    3582:	10 f0       	brcs	.+4      	; 0x3588 <putModbMsg+0x124>
    3584:	89 5c       	subi	r24, 0xC9	; 201
    3586:	01 c0       	rjmp	.+2      	; 0x358a <putModbMsg+0x126>
    3588:	8d 2f       	mov	r24, r29
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    modb_putchar( dig_to_char(lrc& 0x0F) );
    358a:	0e 94 bc 19 	call	0x3378	; 0x3378 <modb_putchar>
    modb_putchar(0x0D);
    358e:	8d e0       	ldi	r24, 0x0D	; 13
    3590:	0e 94 bc 19 	call	0x3378	; 0x3378 <modb_putchar>
    modb_putchar(0x0A);
    3594:	8a e0       	ldi	r24, 0x0A	; 10
    3596:	0e 94 bc 19 	call	0x3378	; 0x3378 <modb_putchar>
    TXDISABLE;
    359a:	96 98       	cbi	0x12, 6	; 18
    }
   break;
  }
}
    359c:	df 91       	pop	r29
    359e:	cf 91       	pop	r28
    35a0:	1f 91       	pop	r17
    35a2:	0f 91       	pop	r16
    35a4:	ff 90       	pop	r15
    35a6:	ef 90       	pop	r14
    35a8:	08 95       	ret

000035aa <getModbMsg>:

//получить сообщение из приемного буфера УАРТа. В итоге-в буфере RTU сообщение,вернули длину полученного сообщения или -1 (ошибка)
signed char getModbMsg(void)
{
    35aa:	8f 92       	push	r8
    35ac:	9f 92       	push	r9
    35ae:	af 92       	push	r10
    35b0:	bf 92       	push	r11
    35b2:	cf 92       	push	r12
    35b4:	df 92       	push	r13
    35b6:	ef 92       	push	r14
    35b8:	ff 92       	push	r15
    35ba:	0f 93       	push	r16
    35bc:	1f 93       	push	r17
    35be:	cf 93       	push	r28
	unsigned char flag_tout=0,index=0,pass=0;

	while(1)																		//пока не дочитаем до конца сообщения или до ошибки крутимся тут
	{
		MODB_timeout=val_timeout;
    35c0:	c0 90 4f 01 	lds	r12, 0x014F	; 0x80014f <val_timeout>
    35c4:	d0 90 50 01 	lds	r13, 0x0150	; 0x800150 <val_timeout+0x1>
    35c8:	e0 90 51 01 	lds	r14, 0x0151	; 0x800151 <val_timeout+0x2>
    35cc:	f0 90 52 01 	lds	r15, 0x0152	; 0x800152 <val_timeout+0x3>
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    35d0:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <modb_type>
    35d4:	90 91 cc 05 	lds	r25, 0x05CC	; 0x8005cc <rd_index>
}

//получить сообщение из приемного буфера УАРТа. В итоге-в буфере RTU сообщение,вернули длину полученного сообщения или -1 (ошибка)
signed char getModbMsg(void)
{
	unsigned char flag_tout=0,index=0,pass=0;
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	80 e0       	ldi	r24, 0x00	; 0

	while(1)																		//пока не дочитаем до конца сообщения или до ошибки крутимся тут
	{
		MODB_timeout=val_timeout;
    35dc:	c0 92 56 01 	sts	0x0156, r12	; 0x800156 <MODB_timeout>
    35e0:	d0 92 57 01 	sts	0x0157, r13	; 0x800157 <MODB_timeout+0x1>
    35e4:	e0 92 58 01 	sts	0x0158, r14	; 0x800158 <MODB_timeout+0x2>
    35e8:	f0 92 59 01 	sts	0x0159, r15	; 0x800159 <MODB_timeout+0x3>
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут
    35ec:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <rx_counter>
    35f0:	31 11       	cpse	r19, r1
    35f2:	0d c0       	rjmp	.+26     	; 0x360e <getModbMsg+0x64>
    35f4:	80 90 56 01 	lds	r8, 0x0156	; 0x800156 <MODB_timeout>
    35f8:	90 90 57 01 	lds	r9, 0x0157	; 0x800157 <MODB_timeout+0x1>
    35fc:	a0 90 58 01 	lds	r10, 0x0158	; 0x800158 <MODB_timeout+0x2>
    3600:	b0 90 59 01 	lds	r11, 0x0159	; 0x800159 <MODB_timeout+0x3>
    3604:	89 28       	or	r8, r9
    3606:	8a 28       	or	r8, r10
    3608:	8b 28       	or	r8, r11
    360a:	81 f7       	brne	.-32     	; 0x35ec <getModbMsg+0x42>
    360c:	34 c0       	rjmp	.+104    	; 0x3676 <getModbMsg+0xcc>
    360e:	e9 2f       	mov	r30, r25
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	9f 5f       	subi	r25, 0xFF	; 255

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    3614:	61 11       	cpse	r22, r1
    3616:	0a c0       	rjmp	.+20     	; 0x362c <getModbMsg+0x82>
			{
				unsigned int crc= modb_message[index-1] <<8 | modb_message[index-2];//полученная CRC
				if(crc !=CRC(modb_message,index-2))	{MODB_ERR=MODBXRC;return -1;}	//сравниваем с фактической
				return index-2;														//длина сообщения минус 2 символа CRC
			}
			modb_message[index++]=rx_buffer[rd_index];								//если не таймаут принимаем след. символ
    3618:	e4 58       	subi	r30, 0x84	; 132
    361a:	fa 4f       	sbci	r31, 0xFA	; 250
    361c:	30 81       	ld	r19, Z
    361e:	e8 2f       	mov	r30, r24
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	ec 55       	subi	r30, 0x5C	; 92
    3624:	fa 4f       	sbci	r31, 0xFA	; 250
    3626:	30 83       	st	Z, r19
    3628:	8f 5f       	subi	r24, 0xFF	; 255
    362a:	1a c0       	rjmp	.+52     	; 0x3660 <getModbMsg+0xb6>

//////////////////////////////////если работаем в режиме ASCII
		else
		{
			if(flag_tout) {MODB_ERR=MODBTOUT;return -1;}							//таймаут в случае ASCII это ошибка
			switch(rx_buffer[rd_index])
    362c:	e4 58       	subi	r30, 0x84	; 132
    362e:	fa 4f       	sbci	r31, 0xFA	; 250
    3630:	30 81       	ld	r19, Z
    3632:	3d 30       	cpi	r19, 0x0D	; 13
    3634:	09 f4       	brne	.+2      	; 0x3638 <getModbMsg+0x8e>
    3636:	3c c0       	rjmp	.+120    	; 0x36b0 <getModbMsg+0x106>
    3638:	3a 33       	cpi	r19, 0x3A	; 58
    363a:	91 f0       	breq	.+36     	; 0x3660 <getModbMsg+0xb6>
    363c:	48 2f       	mov	r20, r24
    363e:	50 e0       	ldi	r21, 0x00	; 0
					return index-1;													// а возвращем длину без учета ЛРЦ
				}
				break;
				default:															//сборка ASCII-to-RTU
				{
					if(pass==0)														//первый проход- в буфер сообщения пишем первую тетраду
    3640:	21 11       	cpse	r18, r1
    3642:	58 c0       	rjmp	.+176    	; 0x36f4 <getModbMsg+0x14a>
					{
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
    3644:	20 81       	ld	r18, Z
}

//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
    3646:	30 ed       	ldi	r19, 0xD0	; 208
    3648:	32 0f       	add	r19, r18
  if(sym>41) return sym-39;	/* a .. f */
    364a:	3a 32       	cpi	r19, 0x2A	; 42
    364c:	08 f4       	brcc	.+2      	; 0x3650 <getModbMsg+0xa6>
    364e:	4c c0       	rjmp	.+152    	; 0x36e8 <getModbMsg+0x13e>
    3650:	27 55       	subi	r18, 0x57	; 87
				break;
				default:															//сборка ASCII-to-RTU
				{
					if(pass==0)														//первый проход- в буфер сообщения пишем первую тетраду
					{
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
    3652:	fa 01       	movw	r30, r20
    3654:	ec 55       	subi	r30, 0x5C	; 92
    3656:	fa 4f       	sbci	r31, 0xFA	; 250
    3658:	22 95       	swap	r18
    365a:	20 7f       	andi	r18, 0xF0	; 240
    365c:	20 83       	st	Z, r18
						pass=1;
    365e:	21 e0       	ldi	r18, 0x01	; 1
				}
				break;
			}
		}

		if (++rd_index == MODB_MESSSIZE) rd_index=0;
    3660:	98 32       	cpi	r25, 0x28	; 40
    3662:	09 f4       	brne	.+2      	; 0x3666 <getModbMsg+0xbc>
    3664:	90 e0       	ldi	r25, 0x00	; 0
		asm("cli");
    3666:	f8 94       	cli
		--rx_counter;
    3668:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <rx_counter>
    366c:	31 50       	subi	r19, 0x01	; 1
    366e:	30 93 54 01 	sts	0x0154, r19	; 0x800154 <rx_counter>
		asm("sei");
    3672:	78 94       	sei
	}
    3674:	b3 cf       	rjmp	.-154    	; 0x35dc <getModbMsg+0x32>
	{
		MODB_timeout=val_timeout;
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    3676:	61 11       	cpse	r22, r1
    3678:	53 c0       	rjmp	.+166    	; 0x3720 <getModbMsg+0x176>
    367a:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <rd_index>
		{
			if(flag_tout)															//таймаут в случае RTU -это конец сообщения.Проверяем CRC
			{
				unsigned int crc= modb_message[index-1] <<8 | modb_message[index-2];//полученная CRC
    367e:	28 2f       	mov	r18, r24
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	2c 55       	subi	r18, 0x5C	; 92
    3684:	3a 4f       	sbci	r19, 0xFA	; 250
    3686:	f9 01       	movw	r30, r18
    3688:	31 97       	sbiw	r30, 0x01	; 1
    368a:	00 81       	ld	r16, Z
    368c:	10 e0       	ldi	r17, 0x00	; 0
    368e:	10 2f       	mov	r17, r16
    3690:	00 27       	eor	r16, r16
    3692:	31 97       	sbiw	r30, 0x01	; 1
    3694:	90 81       	ld	r25, Z
    3696:	09 2b       	or	r16, r25
				if(crc !=CRC(modb_message,index-2))	{MODB_ERR=MODBXRC;return -1;}	//сравниваем с фактической
    3698:	ce ef       	ldi	r28, 0xFE	; 254
    369a:	c8 0f       	add	r28, r24
    369c:	8c 2f       	mov	r24, r28
    369e:	0e 94 c3 19 	call	0x3386	; 0x3386 <CRC.constprop.0>
    36a2:	08 17       	cp	r16, r24
    36a4:	19 07       	cpc	r17, r25
    36a6:	11 f4       	brne	.+4      	; 0x36ac <getModbMsg+0x102>
				return index-2;														//длина сообщения минус 2 символа CRC
    36a8:	8c 2f       	mov	r24, r28
    36aa:	40 c0       	rjmp	.+128    	; 0x372c <getModbMsg+0x182>
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
					if(LRC(modb_message,index) !=0){MODB_ERR=MODBXRC;return -1;}	//для проверки ЛРЦ посылаем сообщение без ':' но с ЛРЦ
    36ac:	85 e0       	ldi	r24, 0x05	; 5
    36ae:	3b c0       	rjmp	.+118    	; 0x3726 <getModbMsg+0x17c>
					;
				}
				break;
				case(0x0D):															//конец сообщения. Проверяем LRC и вываливаемся
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
    36b0:	98 32       	cpi	r25, 0x28	; 40
    36b2:	19 f0       	breq	.+6      	; 0x36ba <getModbMsg+0x110>
    36b4:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <rd_index>
    36b8:	02 c0       	rjmp	.+4      	; 0x36be <getModbMsg+0x114>
    36ba:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <rd_index>
					asm("cli");
    36be:	f8 94       	cli
					--rx_counter;
    36c0:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <rx_counter>
    36c4:	91 50       	subi	r25, 0x01	; 1
    36c6:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <rx_counter>
					asm("sei");
    36ca:	78 94       	sei
    36cc:	28 2f       	mov	r18, r24
}

//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;
    36ce:	90 e0       	ldi	r25, 0x00	; 0
				case(0x0D):															//конец сообщения. Проверяем LRC и вываливаемся
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
    36d0:	e4 ea       	ldi	r30, 0xA4	; 164
    36d2:	f5 e0       	ldi	r31, 0x05	; 5
//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;

  while(lenght--) {lrc+=*data++;}
    36d4:	21 50       	subi	r18, 0x01	; 1
    36d6:	20 f0       	brcs	.+8      	; 0x36e0 <getModbMsg+0x136>
    36d8:	30 81       	ld	r19, Z
    36da:	93 0f       	add	r25, r19
    36dc:	31 96       	adiw	r30, 0x01	; 1
    36de:	fa cf       	rjmp	.-12     	; 0x36d4 <getModbMsg+0x12a>
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
					if(LRC(modb_message,index) !=0){MODB_ERR=MODBXRC;return -1;}	//для проверки ЛРЦ посылаем сообщение без ':' но с ЛРЦ
    36e0:	91 11       	cpse	r25, r1
    36e2:	e4 cf       	rjmp	.-56     	; 0x36ac <getModbMsg+0x102>
					return index-1;													// а возвращем длину без учета ЛРЦ
    36e4:	81 50       	subi	r24, 0x01	; 1
    36e6:	22 c0       	rjmp	.+68     	; 0x372c <getModbMsg+0x182>
//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
  if(sym>41) return sym-39;	/* a .. f */
  if(sym>9) return sym-7;   	/* A .. F */
    36e8:	3a 30       	cpi	r19, 0x0A	; 10
    36ea:	10 f0       	brcs	.+4      	; 0x36f0 <getModbMsg+0x146>
    36ec:	27 53       	subi	r18, 0x37	; 55
    36ee:	b1 cf       	rjmp	.-158    	; 0x3652 <getModbMsg+0xa8>
    36f0:	23 2f       	mov	r18, r19
    36f2:	af cf       	rjmp	.-162    	; 0x3652 <getModbMsg+0xa8>
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
						pass=1;
					}
					else															//второй проход- в буфер сообщения пишем вторую тетраду
					{
						modb_message[index++] |= char_to_dig(rx_buffer[rd_index]) & 0x0F;
    36f4:	20 81       	ld	r18, Z
}

//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
    36f6:	30 ed       	ldi	r19, 0xD0	; 208
    36f8:	32 0f       	add	r19, r18
  if(sym>41) return sym-39;	/* a .. f */
    36fa:	3a 32       	cpi	r19, 0x2A	; 42
    36fc:	10 f0       	brcs	.+4      	; 0x3702 <getModbMsg+0x158>
    36fe:	27 55       	subi	r18, 0x57	; 87
    3700:	05 c0       	rjmp	.+10     	; 0x370c <getModbMsg+0x162>
  if(sym>9) return sym-7;   	/* A .. F */
    3702:	3a 30       	cpi	r19, 0x0A	; 10
    3704:	10 f0       	brcs	.+4      	; 0x370a <getModbMsg+0x160>
    3706:	27 53       	subi	r18, 0x37	; 55
    3708:	01 c0       	rjmp	.+2      	; 0x370c <getModbMsg+0x162>
    370a:	23 2f       	mov	r18, r19
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
						pass=1;
					}
					else															//второй проход- в буфер сообщения пишем вторую тетраду
					{
						modb_message[index++] |= char_to_dig(rx_buffer[rd_index]) & 0x0F;
    370c:	fa 01       	movw	r30, r20
    370e:	ec 55       	subi	r30, 0x5C	; 92
    3710:	fa 4f       	sbci	r31, 0xFA	; 250
    3712:	2f 70       	andi	r18, 0x0F	; 15
    3714:	30 81       	ld	r19, Z
    3716:	23 2b       	or	r18, r19
    3718:	20 83       	st	Z, r18
    371a:	8f 5f       	subi	r24, 0xFF	; 255
						pass=0;
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	a0 cf       	rjmp	.-192    	; 0x3660 <getModbMsg+0xb6>
    3720:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <rd_index>
		}

//////////////////////////////////если работаем в режиме ASCII
		else
		{
			if(flag_tout) {MODB_ERR=MODBTOUT;return -1;}							//таймаут в случае ASCII это ошибка
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <MODB_ERR>
    372a:	8f ef       	ldi	r24, 0xFF	; 255
		asm("cli");
		--rx_counter;
		asm("sei");
	}
	return -1;	//что то ваще пошло не так
}
    372c:	cf 91       	pop	r28
    372e:	1f 91       	pop	r17
    3730:	0f 91       	pop	r16
    3732:	ff 90       	pop	r15
    3734:	ef 90       	pop	r14
    3736:	df 90       	pop	r13
    3738:	cf 90       	pop	r12
    373a:	bf 90       	pop	r11
    373c:	af 90       	pop	r10
    373e:	9f 90       	pop	r9
    3740:	8f 90       	pop	r8
    3742:	08 95       	ret

00003744 <__udivmodqi4>:
    3744:	99 1b       	sub	r25, r25
    3746:	79 e0       	ldi	r23, 0x09	; 9
    3748:	04 c0       	rjmp	.+8      	; 0x3752 <__udivmodqi4_ep>

0000374a <__udivmodqi4_loop>:
    374a:	99 1f       	adc	r25, r25
    374c:	96 17       	cp	r25, r22
    374e:	08 f0       	brcs	.+2      	; 0x3752 <__udivmodqi4_ep>
    3750:	96 1b       	sub	r25, r22

00003752 <__udivmodqi4_ep>:
    3752:	88 1f       	adc	r24, r24
    3754:	7a 95       	dec	r23
    3756:	c9 f7       	brne	.-14     	; 0x374a <__udivmodqi4_loop>
    3758:	80 95       	com	r24
    375a:	08 95       	ret

0000375c <__divmodhi4>:
    375c:	97 fb       	bst	r25, 7
    375e:	07 2e       	mov	r0, r23
    3760:	16 f4       	brtc	.+4      	; 0x3766 <__divmodhi4+0xa>
    3762:	00 94       	com	r0
    3764:	07 d0       	rcall	.+14     	; 0x3774 <__divmodhi4_neg1>
    3766:	77 fd       	sbrc	r23, 7
    3768:	09 d0       	rcall	.+18     	; 0x377c <__divmodhi4_neg2>
    376a:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__udivmodhi4>
    376e:	07 fc       	sbrc	r0, 7
    3770:	05 d0       	rcall	.+10     	; 0x377c <__divmodhi4_neg2>
    3772:	3e f4       	brtc	.+14     	; 0x3782 <__divmodhi4_exit>

00003774 <__divmodhi4_neg1>:
    3774:	90 95       	com	r25
    3776:	81 95       	neg	r24
    3778:	9f 4f       	sbci	r25, 0xFF	; 255
    377a:	08 95       	ret

0000377c <__divmodhi4_neg2>:
    377c:	70 95       	com	r23
    377e:	61 95       	neg	r22
    3780:	7f 4f       	sbci	r23, 0xFF	; 255

00003782 <__divmodhi4_exit>:
    3782:	08 95       	ret

00003784 <__udivmodsi4>:
    3784:	a1 e2       	ldi	r26, 0x21	; 33
    3786:	1a 2e       	mov	r1, r26
    3788:	aa 1b       	sub	r26, r26
    378a:	bb 1b       	sub	r27, r27
    378c:	fd 01       	movw	r30, r26
    378e:	0d c0       	rjmp	.+26     	; 0x37aa <__udivmodsi4_ep>

00003790 <__udivmodsi4_loop>:
    3790:	aa 1f       	adc	r26, r26
    3792:	bb 1f       	adc	r27, r27
    3794:	ee 1f       	adc	r30, r30
    3796:	ff 1f       	adc	r31, r31
    3798:	a2 17       	cp	r26, r18
    379a:	b3 07       	cpc	r27, r19
    379c:	e4 07       	cpc	r30, r20
    379e:	f5 07       	cpc	r31, r21
    37a0:	20 f0       	brcs	.+8      	; 0x37aa <__udivmodsi4_ep>
    37a2:	a2 1b       	sub	r26, r18
    37a4:	b3 0b       	sbc	r27, r19
    37a6:	e4 0b       	sbc	r30, r20
    37a8:	f5 0b       	sbc	r31, r21

000037aa <__udivmodsi4_ep>:
    37aa:	66 1f       	adc	r22, r22
    37ac:	77 1f       	adc	r23, r23
    37ae:	88 1f       	adc	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	1a 94       	dec	r1
    37b4:	69 f7       	brne	.-38     	; 0x3790 <__udivmodsi4_loop>
    37b6:	60 95       	com	r22
    37b8:	70 95       	com	r23
    37ba:	80 95       	com	r24
    37bc:	90 95       	com	r25
    37be:	9b 01       	movw	r18, r22
    37c0:	ac 01       	movw	r20, r24
    37c2:	bd 01       	movw	r22, r26
    37c4:	cf 01       	movw	r24, r30
    37c6:	08 95       	ret

000037c8 <__udivmodhi4>:
    37c8:	aa 1b       	sub	r26, r26
    37ca:	bb 1b       	sub	r27, r27
    37cc:	51 e1       	ldi	r21, 0x11	; 17
    37ce:	07 c0       	rjmp	.+14     	; 0x37de <__udivmodhi4_ep>

000037d0 <__udivmodhi4_loop>:
    37d0:	aa 1f       	adc	r26, r26
    37d2:	bb 1f       	adc	r27, r27
    37d4:	a6 17       	cp	r26, r22
    37d6:	b7 07       	cpc	r27, r23
    37d8:	10 f0       	brcs	.+4      	; 0x37de <__udivmodhi4_ep>
    37da:	a6 1b       	sub	r26, r22
    37dc:	b7 0b       	sbc	r27, r23

000037de <__udivmodhi4_ep>:
    37de:	88 1f       	adc	r24, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	5a 95       	dec	r21
    37e4:	a9 f7       	brne	.-22     	; 0x37d0 <__udivmodhi4_loop>
    37e6:	80 95       	com	r24
    37e8:	90 95       	com	r25
    37ea:	bc 01       	movw	r22, r24
    37ec:	cd 01       	movw	r24, r26
    37ee:	08 95       	ret

000037f0 <strcat_P>:
    37f0:	fb 01       	movw	r30, r22
    37f2:	dc 01       	movw	r26, r24
    37f4:	0d 90       	ld	r0, X+
    37f6:	00 20       	and	r0, r0
    37f8:	e9 f7       	brne	.-6      	; 0x37f4 <strcat_P+0x4>
    37fa:	11 97       	sbiw	r26, 0x01	; 1
    37fc:	05 90       	lpm	r0, Z+
    37fe:	0d 92       	st	X+, r0
    3800:	00 20       	and	r0, r0
    3802:	e1 f7       	brne	.-8      	; 0x37fc <strcat_P+0xc>
    3804:	08 95       	ret

00003806 <strcpy_P>:
    3806:	fb 01       	movw	r30, r22
    3808:	dc 01       	movw	r26, r24
    380a:	05 90       	lpm	r0, Z+
    380c:	0d 92       	st	X+, r0
    380e:	00 20       	and	r0, r0
    3810:	e1 f7       	brne	.-8      	; 0x380a <strcpy_P+0x4>
    3812:	08 95       	ret

00003814 <__strlen_P>:
    3814:	fc 01       	movw	r30, r24
    3816:	05 90       	lpm	r0, Z+
    3818:	00 20       	and	r0, r0
    381a:	e9 f7       	brne	.-6      	; 0x3816 <__strlen_P+0x2>
    381c:	80 95       	com	r24
    381e:	90 95       	com	r25
    3820:	8e 0f       	add	r24, r30
    3822:	9f 1f       	adc	r25, r31
    3824:	08 95       	ret

00003826 <strcat>:
    3826:	fb 01       	movw	r30, r22
    3828:	dc 01       	movw	r26, r24
    382a:	0d 90       	ld	r0, X+
    382c:	00 20       	and	r0, r0
    382e:	e9 f7       	brne	.-6      	; 0x382a <strcat+0x4>
    3830:	11 97       	sbiw	r26, 0x01	; 1
    3832:	01 90       	ld	r0, Z+
    3834:	0d 92       	st	X+, r0
    3836:	00 20       	and	r0, r0
    3838:	e1 f7       	brne	.-8      	; 0x3832 <strcat+0xc>
    383a:	08 95       	ret

0000383c <__itoa_ncheck>:
    383c:	bb 27       	eor	r27, r27
    383e:	4a 30       	cpi	r20, 0x0A	; 10
    3840:	31 f4       	brne	.+12     	; 0x384e <__itoa_ncheck+0x12>
    3842:	99 23       	and	r25, r25
    3844:	22 f4       	brpl	.+8      	; 0x384e <__itoa_ncheck+0x12>
    3846:	bd e2       	ldi	r27, 0x2D	; 45
    3848:	90 95       	com	r25
    384a:	81 95       	neg	r24
    384c:	9f 4f       	sbci	r25, 0xFF	; 255
    384e:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__utoa_common>

00003852 <__ltoa_ncheck>:
    3852:	bb 27       	eor	r27, r27
    3854:	2a 30       	cpi	r18, 0x0A	; 10
    3856:	51 f4       	brne	.+20     	; 0x386c <__ltoa_ncheck+0x1a>
    3858:	99 23       	and	r25, r25
    385a:	42 f4       	brpl	.+16     	; 0x386c <__ltoa_ncheck+0x1a>
    385c:	bd e2       	ldi	r27, 0x2D	; 45
    385e:	90 95       	com	r25
    3860:	80 95       	com	r24
    3862:	70 95       	com	r23
    3864:	61 95       	neg	r22
    3866:	7f 4f       	sbci	r23, 0xFF	; 255
    3868:	8f 4f       	sbci	r24, 0xFF	; 255
    386a:	9f 4f       	sbci	r25, 0xFF	; 255
    386c:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__ultoa_common>

00003870 <__ultoa_ncheck>:
    3870:	bb 27       	eor	r27, r27

00003872 <__ultoa_common>:
    3872:	fa 01       	movw	r30, r20
    3874:	a6 2f       	mov	r26, r22
    3876:	62 17       	cp	r22, r18
    3878:	71 05       	cpc	r23, r1
    387a:	81 05       	cpc	r24, r1
    387c:	91 05       	cpc	r25, r1
    387e:	33 0b       	sbc	r19, r19
    3880:	30 fb       	bst	r19, 0
    3882:	66 f0       	brts	.+24     	; 0x389c <__ultoa_common+0x2a>
    3884:	aa 27       	eor	r26, r26
    3886:	66 0f       	add	r22, r22
    3888:	77 1f       	adc	r23, r23
    388a:	88 1f       	adc	r24, r24
    388c:	99 1f       	adc	r25, r25
    388e:	aa 1f       	adc	r26, r26
    3890:	a2 17       	cp	r26, r18
    3892:	10 f0       	brcs	.+4      	; 0x3898 <__ultoa_common+0x26>
    3894:	a2 1b       	sub	r26, r18
    3896:	63 95       	inc	r22
    3898:	38 50       	subi	r19, 0x08	; 8
    389a:	a9 f7       	brne	.-22     	; 0x3886 <__ultoa_common+0x14>
    389c:	a0 5d       	subi	r26, 0xD0	; 208
    389e:	aa 33       	cpi	r26, 0x3A	; 58
    38a0:	08 f0       	brcs	.+2      	; 0x38a4 <__ultoa_common+0x32>
    38a2:	a9 5d       	subi	r26, 0xD9	; 217
    38a4:	a1 93       	st	Z+, r26
    38a6:	36 f7       	brtc	.-52     	; 0x3874 <__ultoa_common+0x2>
    38a8:	b1 11       	cpse	r27, r1
    38aa:	b1 93       	st	Z+, r27
    38ac:	10 82       	st	Z, r1
    38ae:	ca 01       	movw	r24, r20
    38b0:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <strrev>

000038b4 <__utoa_ncheck>:
    38b4:	bb 27       	eor	r27, r27

000038b6 <__utoa_common>:
    38b6:	fb 01       	movw	r30, r22
    38b8:	55 27       	eor	r21, r21
    38ba:	aa 27       	eor	r26, r26
    38bc:	88 0f       	add	r24, r24
    38be:	99 1f       	adc	r25, r25
    38c0:	aa 1f       	adc	r26, r26
    38c2:	a4 17       	cp	r26, r20
    38c4:	10 f0       	brcs	.+4      	; 0x38ca <__utoa_common+0x14>
    38c6:	a4 1b       	sub	r26, r20
    38c8:	83 95       	inc	r24
    38ca:	50 51       	subi	r21, 0x10	; 16
    38cc:	b9 f7       	brne	.-18     	; 0x38bc <__utoa_common+0x6>
    38ce:	a0 5d       	subi	r26, 0xD0	; 208
    38d0:	aa 33       	cpi	r26, 0x3A	; 58
    38d2:	08 f0       	brcs	.+2      	; 0x38d6 <__utoa_common+0x20>
    38d4:	a9 5d       	subi	r26, 0xD9	; 217
    38d6:	a1 93       	st	Z+, r26
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	79 f7       	brne	.-34     	; 0x38ba <__utoa_common+0x4>
    38dc:	b1 11       	cpse	r27, r1
    38de:	b1 93       	st	Z+, r27
    38e0:	11 92       	st	Z+, r1
    38e2:	cb 01       	movw	r24, r22
    38e4:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <strrev>

000038e8 <sprintf>:
    38e8:	ae e0       	ldi	r26, 0x0E	; 14
    38ea:	b0 e0       	ldi	r27, 0x00	; 0
    38ec:	ea e7       	ldi	r30, 0x7A	; 122
    38ee:	fc e1       	ldi	r31, 0x1C	; 28
    38f0:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__prologue_saves__+0x1c>
    38f4:	0d 89       	ldd	r16, Y+21	; 0x15
    38f6:	1e 89       	ldd	r17, Y+22	; 0x16
    38f8:	86 e0       	ldi	r24, 0x06	; 6
    38fa:	8c 83       	std	Y+4, r24	; 0x04
    38fc:	1a 83       	std	Y+2, r17	; 0x02
    38fe:	09 83       	std	Y+1, r16	; 0x01
    3900:	8f ef       	ldi	r24, 0xFF	; 255
    3902:	9f e7       	ldi	r25, 0x7F	; 127
    3904:	9e 83       	std	Y+6, r25	; 0x06
    3906:	8d 83       	std	Y+5, r24	; 0x05
    3908:	ae 01       	movw	r20, r28
    390a:	47 5e       	subi	r20, 0xE7	; 231
    390c:	5f 4f       	sbci	r21, 0xFF	; 255
    390e:	6f 89       	ldd	r22, Y+23	; 0x17
    3910:	78 8d       	ldd	r23, Y+24	; 0x18
    3912:	ce 01       	movw	r24, r28
    3914:	01 96       	adiw	r24, 0x01	; 1
    3916:	0e 94 96 1c 	call	0x392c	; 0x392c <vfprintf>
    391a:	ef 81       	ldd	r30, Y+7	; 0x07
    391c:	f8 85       	ldd	r31, Y+8	; 0x08
    391e:	e0 0f       	add	r30, r16
    3920:	f1 1f       	adc	r31, r17
    3922:	10 82       	st	Z, r1
    3924:	2e 96       	adiw	r28, 0x0e	; 14
    3926:	e4 e0       	ldi	r30, 0x04	; 4
    3928:	0c 94 9f 1f 	jmp	0x3f3e	; 0x3f3e <__epilogue_restores__+0x1c>

0000392c <vfprintf>:
    392c:	ab e0       	ldi	r26, 0x0B	; 11
    392e:	b0 e0       	ldi	r27, 0x00	; 0
    3930:	ec e9       	ldi	r30, 0x9C	; 156
    3932:	fc e1       	ldi	r31, 0x1C	; 28
    3934:	0c 94 75 1f 	jmp	0x3eea	; 0x3eea <__prologue_saves__>
    3938:	6c 01       	movw	r12, r24
    393a:	7b 01       	movw	r14, r22
    393c:	8a 01       	movw	r16, r20
    393e:	fc 01       	movw	r30, r24
    3940:	17 82       	std	Z+7, r1	; 0x07
    3942:	16 82       	std	Z+6, r1	; 0x06
    3944:	83 81       	ldd	r24, Z+3	; 0x03
    3946:	81 ff       	sbrs	r24, 1
    3948:	cc c1       	rjmp	.+920    	; 0x3ce2 <vfprintf+0x3b6>
    394a:	ce 01       	movw	r24, r28
    394c:	01 96       	adiw	r24, 0x01	; 1
    394e:	3c 01       	movw	r6, r24
    3950:	f6 01       	movw	r30, r12
    3952:	93 81       	ldd	r25, Z+3	; 0x03
    3954:	f7 01       	movw	r30, r14
    3956:	93 fd       	sbrc	r25, 3
    3958:	85 91       	lpm	r24, Z+
    395a:	93 ff       	sbrs	r25, 3
    395c:	81 91       	ld	r24, Z+
    395e:	7f 01       	movw	r14, r30
    3960:	88 23       	and	r24, r24
    3962:	09 f4       	brne	.+2      	; 0x3966 <vfprintf+0x3a>
    3964:	ba c1       	rjmp	.+884    	; 0x3cda <vfprintf+0x3ae>
    3966:	85 32       	cpi	r24, 0x25	; 37
    3968:	39 f4       	brne	.+14     	; 0x3978 <vfprintf+0x4c>
    396a:	93 fd       	sbrc	r25, 3
    396c:	85 91       	lpm	r24, Z+
    396e:	93 ff       	sbrs	r25, 3
    3970:	81 91       	ld	r24, Z+
    3972:	7f 01       	movw	r14, r30
    3974:	85 32       	cpi	r24, 0x25	; 37
    3976:	29 f4       	brne	.+10     	; 0x3982 <vfprintf+0x56>
    3978:	b6 01       	movw	r22, r12
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3980:	e7 cf       	rjmp	.-50     	; 0x3950 <vfprintf+0x24>
    3982:	91 2c       	mov	r9, r1
    3984:	21 2c       	mov	r2, r1
    3986:	31 2c       	mov	r3, r1
    3988:	ff e1       	ldi	r31, 0x1F	; 31
    398a:	f3 15       	cp	r31, r3
    398c:	d8 f0       	brcs	.+54     	; 0x39c4 <vfprintf+0x98>
    398e:	8b 32       	cpi	r24, 0x2B	; 43
    3990:	79 f0       	breq	.+30     	; 0x39b0 <vfprintf+0x84>
    3992:	38 f4       	brcc	.+14     	; 0x39a2 <vfprintf+0x76>
    3994:	80 32       	cpi	r24, 0x20	; 32
    3996:	79 f0       	breq	.+30     	; 0x39b6 <vfprintf+0x8a>
    3998:	83 32       	cpi	r24, 0x23	; 35
    399a:	a1 f4       	brne	.+40     	; 0x39c4 <vfprintf+0x98>
    399c:	23 2d       	mov	r18, r3
    399e:	20 61       	ori	r18, 0x10	; 16
    39a0:	1d c0       	rjmp	.+58     	; 0x39dc <vfprintf+0xb0>
    39a2:	8d 32       	cpi	r24, 0x2D	; 45
    39a4:	61 f0       	breq	.+24     	; 0x39be <vfprintf+0x92>
    39a6:	80 33       	cpi	r24, 0x30	; 48
    39a8:	69 f4       	brne	.+26     	; 0x39c4 <vfprintf+0x98>
    39aa:	23 2d       	mov	r18, r3
    39ac:	21 60       	ori	r18, 0x01	; 1
    39ae:	16 c0       	rjmp	.+44     	; 0x39dc <vfprintf+0xb0>
    39b0:	83 2d       	mov	r24, r3
    39b2:	82 60       	ori	r24, 0x02	; 2
    39b4:	38 2e       	mov	r3, r24
    39b6:	e3 2d       	mov	r30, r3
    39b8:	e4 60       	ori	r30, 0x04	; 4
    39ba:	3e 2e       	mov	r3, r30
    39bc:	2a c0       	rjmp	.+84     	; 0x3a12 <vfprintf+0xe6>
    39be:	f3 2d       	mov	r31, r3
    39c0:	f8 60       	ori	r31, 0x08	; 8
    39c2:	1d c0       	rjmp	.+58     	; 0x39fe <vfprintf+0xd2>
    39c4:	37 fc       	sbrc	r3, 7
    39c6:	2d c0       	rjmp	.+90     	; 0x3a22 <vfprintf+0xf6>
    39c8:	20 ed       	ldi	r18, 0xD0	; 208
    39ca:	28 0f       	add	r18, r24
    39cc:	2a 30       	cpi	r18, 0x0A	; 10
    39ce:	40 f0       	brcs	.+16     	; 0x39e0 <vfprintf+0xb4>
    39d0:	8e 32       	cpi	r24, 0x2E	; 46
    39d2:	b9 f4       	brne	.+46     	; 0x3a02 <vfprintf+0xd6>
    39d4:	36 fc       	sbrc	r3, 6
    39d6:	81 c1       	rjmp	.+770    	; 0x3cda <vfprintf+0x3ae>
    39d8:	23 2d       	mov	r18, r3
    39da:	20 64       	ori	r18, 0x40	; 64
    39dc:	32 2e       	mov	r3, r18
    39de:	19 c0       	rjmp	.+50     	; 0x3a12 <vfprintf+0xe6>
    39e0:	36 fe       	sbrs	r3, 6
    39e2:	06 c0       	rjmp	.+12     	; 0x39f0 <vfprintf+0xc4>
    39e4:	8a e0       	ldi	r24, 0x0A	; 10
    39e6:	98 9e       	mul	r9, r24
    39e8:	20 0d       	add	r18, r0
    39ea:	11 24       	eor	r1, r1
    39ec:	92 2e       	mov	r9, r18
    39ee:	11 c0       	rjmp	.+34     	; 0x3a12 <vfprintf+0xe6>
    39f0:	ea e0       	ldi	r30, 0x0A	; 10
    39f2:	2e 9e       	mul	r2, r30
    39f4:	20 0d       	add	r18, r0
    39f6:	11 24       	eor	r1, r1
    39f8:	22 2e       	mov	r2, r18
    39fa:	f3 2d       	mov	r31, r3
    39fc:	f0 62       	ori	r31, 0x20	; 32
    39fe:	3f 2e       	mov	r3, r31
    3a00:	08 c0       	rjmp	.+16     	; 0x3a12 <vfprintf+0xe6>
    3a02:	8c 36       	cpi	r24, 0x6C	; 108
    3a04:	21 f4       	brne	.+8      	; 0x3a0e <vfprintf+0xe2>
    3a06:	83 2d       	mov	r24, r3
    3a08:	80 68       	ori	r24, 0x80	; 128
    3a0a:	38 2e       	mov	r3, r24
    3a0c:	02 c0       	rjmp	.+4      	; 0x3a12 <vfprintf+0xe6>
    3a0e:	88 36       	cpi	r24, 0x68	; 104
    3a10:	41 f4       	brne	.+16     	; 0x3a22 <vfprintf+0xf6>
    3a12:	f7 01       	movw	r30, r14
    3a14:	93 fd       	sbrc	r25, 3
    3a16:	85 91       	lpm	r24, Z+
    3a18:	93 ff       	sbrs	r25, 3
    3a1a:	81 91       	ld	r24, Z+
    3a1c:	7f 01       	movw	r14, r30
    3a1e:	81 11       	cpse	r24, r1
    3a20:	b3 cf       	rjmp	.-154    	; 0x3988 <vfprintf+0x5c>
    3a22:	98 2f       	mov	r25, r24
    3a24:	9f 7d       	andi	r25, 0xDF	; 223
    3a26:	95 54       	subi	r25, 0x45	; 69
    3a28:	93 30       	cpi	r25, 0x03	; 3
    3a2a:	28 f4       	brcc	.+10     	; 0x3a36 <vfprintf+0x10a>
    3a2c:	0c 5f       	subi	r16, 0xFC	; 252
    3a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a30:	9f e3       	ldi	r25, 0x3F	; 63
    3a32:	99 83       	std	Y+1, r25	; 0x01
    3a34:	0d c0       	rjmp	.+26     	; 0x3a50 <vfprintf+0x124>
    3a36:	83 36       	cpi	r24, 0x63	; 99
    3a38:	31 f0       	breq	.+12     	; 0x3a46 <vfprintf+0x11a>
    3a3a:	83 37       	cpi	r24, 0x73	; 115
    3a3c:	71 f0       	breq	.+28     	; 0x3a5a <vfprintf+0x12e>
    3a3e:	83 35       	cpi	r24, 0x53	; 83
    3a40:	09 f0       	breq	.+2      	; 0x3a44 <vfprintf+0x118>
    3a42:	59 c0       	rjmp	.+178    	; 0x3af6 <vfprintf+0x1ca>
    3a44:	21 c0       	rjmp	.+66     	; 0x3a88 <vfprintf+0x15c>
    3a46:	f8 01       	movw	r30, r16
    3a48:	80 81       	ld	r24, Z
    3a4a:	89 83       	std	Y+1, r24	; 0x01
    3a4c:	0e 5f       	subi	r16, 0xFE	; 254
    3a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a50:	88 24       	eor	r8, r8
    3a52:	83 94       	inc	r8
    3a54:	91 2c       	mov	r9, r1
    3a56:	53 01       	movw	r10, r6
    3a58:	13 c0       	rjmp	.+38     	; 0x3a80 <vfprintf+0x154>
    3a5a:	28 01       	movw	r4, r16
    3a5c:	f2 e0       	ldi	r31, 0x02	; 2
    3a5e:	4f 0e       	add	r4, r31
    3a60:	51 1c       	adc	r5, r1
    3a62:	f8 01       	movw	r30, r16
    3a64:	a0 80       	ld	r10, Z
    3a66:	b1 80       	ldd	r11, Z+1	; 0x01
    3a68:	36 fe       	sbrs	r3, 6
    3a6a:	03 c0       	rjmp	.+6      	; 0x3a72 <vfprintf+0x146>
    3a6c:	69 2d       	mov	r22, r9
    3a6e:	70 e0       	ldi	r23, 0x00	; 0
    3a70:	02 c0       	rjmp	.+4      	; 0x3a76 <vfprintf+0x14a>
    3a72:	6f ef       	ldi	r22, 0xFF	; 255
    3a74:	7f ef       	ldi	r23, 0xFF	; 255
    3a76:	c5 01       	movw	r24, r10
    3a78:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <strnlen>
    3a7c:	4c 01       	movw	r8, r24
    3a7e:	82 01       	movw	r16, r4
    3a80:	f3 2d       	mov	r31, r3
    3a82:	ff 77       	andi	r31, 0x7F	; 127
    3a84:	3f 2e       	mov	r3, r31
    3a86:	16 c0       	rjmp	.+44     	; 0x3ab4 <vfprintf+0x188>
    3a88:	28 01       	movw	r4, r16
    3a8a:	22 e0       	ldi	r18, 0x02	; 2
    3a8c:	42 0e       	add	r4, r18
    3a8e:	51 1c       	adc	r5, r1
    3a90:	f8 01       	movw	r30, r16
    3a92:	a0 80       	ld	r10, Z
    3a94:	b1 80       	ldd	r11, Z+1	; 0x01
    3a96:	36 fe       	sbrs	r3, 6
    3a98:	03 c0       	rjmp	.+6      	; 0x3aa0 <vfprintf+0x174>
    3a9a:	69 2d       	mov	r22, r9
    3a9c:	70 e0       	ldi	r23, 0x00	; 0
    3a9e:	02 c0       	rjmp	.+4      	; 0x3aa4 <vfprintf+0x178>
    3aa0:	6f ef       	ldi	r22, 0xFF	; 255
    3aa2:	7f ef       	ldi	r23, 0xFF	; 255
    3aa4:	c5 01       	movw	r24, r10
    3aa6:	0e 94 77 1e 	call	0x3cee	; 0x3cee <strnlen_P>
    3aaa:	4c 01       	movw	r8, r24
    3aac:	f3 2d       	mov	r31, r3
    3aae:	f0 68       	ori	r31, 0x80	; 128
    3ab0:	3f 2e       	mov	r3, r31
    3ab2:	82 01       	movw	r16, r4
    3ab4:	33 fc       	sbrc	r3, 3
    3ab6:	1b c0       	rjmp	.+54     	; 0x3aee <vfprintf+0x1c2>
    3ab8:	82 2d       	mov	r24, r2
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	88 16       	cp	r8, r24
    3abe:	99 06       	cpc	r9, r25
    3ac0:	b0 f4       	brcc	.+44     	; 0x3aee <vfprintf+0x1c2>
    3ac2:	b6 01       	movw	r22, r12
    3ac4:	80 e2       	ldi	r24, 0x20	; 32
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3acc:	2a 94       	dec	r2
    3ace:	f4 cf       	rjmp	.-24     	; 0x3ab8 <vfprintf+0x18c>
    3ad0:	f5 01       	movw	r30, r10
    3ad2:	37 fc       	sbrc	r3, 7
    3ad4:	85 91       	lpm	r24, Z+
    3ad6:	37 fe       	sbrs	r3, 7
    3ad8:	81 91       	ld	r24, Z+
    3ada:	5f 01       	movw	r10, r30
    3adc:	b6 01       	movw	r22, r12
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3ae4:	21 10       	cpse	r2, r1
    3ae6:	2a 94       	dec	r2
    3ae8:	21 e0       	ldi	r18, 0x01	; 1
    3aea:	82 1a       	sub	r8, r18
    3aec:	91 08       	sbc	r9, r1
    3aee:	81 14       	cp	r8, r1
    3af0:	91 04       	cpc	r9, r1
    3af2:	71 f7       	brne	.-36     	; 0x3ad0 <vfprintf+0x1a4>
    3af4:	e8 c0       	rjmp	.+464    	; 0x3cc6 <vfprintf+0x39a>
    3af6:	84 36       	cpi	r24, 0x64	; 100
    3af8:	11 f0       	breq	.+4      	; 0x3afe <vfprintf+0x1d2>
    3afa:	89 36       	cpi	r24, 0x69	; 105
    3afc:	41 f5       	brne	.+80     	; 0x3b4e <vfprintf+0x222>
    3afe:	f8 01       	movw	r30, r16
    3b00:	37 fe       	sbrs	r3, 7
    3b02:	07 c0       	rjmp	.+14     	; 0x3b12 <vfprintf+0x1e6>
    3b04:	60 81       	ld	r22, Z
    3b06:	71 81       	ldd	r23, Z+1	; 0x01
    3b08:	82 81       	ldd	r24, Z+2	; 0x02
    3b0a:	93 81       	ldd	r25, Z+3	; 0x03
    3b0c:	0c 5f       	subi	r16, 0xFC	; 252
    3b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b10:	08 c0       	rjmp	.+16     	; 0x3b22 <vfprintf+0x1f6>
    3b12:	60 81       	ld	r22, Z
    3b14:	71 81       	ldd	r23, Z+1	; 0x01
    3b16:	07 2e       	mov	r0, r23
    3b18:	00 0c       	add	r0, r0
    3b1a:	88 0b       	sbc	r24, r24
    3b1c:	99 0b       	sbc	r25, r25
    3b1e:	0e 5f       	subi	r16, 0xFE	; 254
    3b20:	1f 4f       	sbci	r17, 0xFF	; 255
    3b22:	f3 2d       	mov	r31, r3
    3b24:	ff 76       	andi	r31, 0x6F	; 111
    3b26:	3f 2e       	mov	r3, r31
    3b28:	97 ff       	sbrs	r25, 7
    3b2a:	09 c0       	rjmp	.+18     	; 0x3b3e <vfprintf+0x212>
    3b2c:	90 95       	com	r25
    3b2e:	80 95       	com	r24
    3b30:	70 95       	com	r23
    3b32:	61 95       	neg	r22
    3b34:	7f 4f       	sbci	r23, 0xFF	; 255
    3b36:	8f 4f       	sbci	r24, 0xFF	; 255
    3b38:	9f 4f       	sbci	r25, 0xFF	; 255
    3b3a:	f0 68       	ori	r31, 0x80	; 128
    3b3c:	3f 2e       	mov	r3, r31
    3b3e:	2a e0       	ldi	r18, 0x0A	; 10
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	a3 01       	movw	r20, r6
    3b44:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__ultoa_invert>
    3b48:	88 2e       	mov	r8, r24
    3b4a:	86 18       	sub	r8, r6
    3b4c:	45 c0       	rjmp	.+138    	; 0x3bd8 <vfprintf+0x2ac>
    3b4e:	85 37       	cpi	r24, 0x75	; 117
    3b50:	31 f4       	brne	.+12     	; 0x3b5e <vfprintf+0x232>
    3b52:	23 2d       	mov	r18, r3
    3b54:	2f 7e       	andi	r18, 0xEF	; 239
    3b56:	b2 2e       	mov	r11, r18
    3b58:	2a e0       	ldi	r18, 0x0A	; 10
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	25 c0       	rjmp	.+74     	; 0x3ba8 <vfprintf+0x27c>
    3b5e:	93 2d       	mov	r25, r3
    3b60:	99 7f       	andi	r25, 0xF9	; 249
    3b62:	b9 2e       	mov	r11, r25
    3b64:	8f 36       	cpi	r24, 0x6F	; 111
    3b66:	c1 f0       	breq	.+48     	; 0x3b98 <vfprintf+0x26c>
    3b68:	18 f4       	brcc	.+6      	; 0x3b70 <vfprintf+0x244>
    3b6a:	88 35       	cpi	r24, 0x58	; 88
    3b6c:	79 f0       	breq	.+30     	; 0x3b8c <vfprintf+0x260>
    3b6e:	b5 c0       	rjmp	.+362    	; 0x3cda <vfprintf+0x3ae>
    3b70:	80 37       	cpi	r24, 0x70	; 112
    3b72:	19 f0       	breq	.+6      	; 0x3b7a <vfprintf+0x24e>
    3b74:	88 37       	cpi	r24, 0x78	; 120
    3b76:	21 f0       	breq	.+8      	; 0x3b80 <vfprintf+0x254>
    3b78:	b0 c0       	rjmp	.+352    	; 0x3cda <vfprintf+0x3ae>
    3b7a:	e9 2f       	mov	r30, r25
    3b7c:	e0 61       	ori	r30, 0x10	; 16
    3b7e:	be 2e       	mov	r11, r30
    3b80:	b4 fe       	sbrs	r11, 4
    3b82:	0d c0       	rjmp	.+26     	; 0x3b9e <vfprintf+0x272>
    3b84:	fb 2d       	mov	r31, r11
    3b86:	f4 60       	ori	r31, 0x04	; 4
    3b88:	bf 2e       	mov	r11, r31
    3b8a:	09 c0       	rjmp	.+18     	; 0x3b9e <vfprintf+0x272>
    3b8c:	34 fe       	sbrs	r3, 4
    3b8e:	0a c0       	rjmp	.+20     	; 0x3ba4 <vfprintf+0x278>
    3b90:	29 2f       	mov	r18, r25
    3b92:	26 60       	ori	r18, 0x06	; 6
    3b94:	b2 2e       	mov	r11, r18
    3b96:	06 c0       	rjmp	.+12     	; 0x3ba4 <vfprintf+0x278>
    3b98:	28 e0       	ldi	r18, 0x08	; 8
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	05 c0       	rjmp	.+10     	; 0x3ba8 <vfprintf+0x27c>
    3b9e:	20 e1       	ldi	r18, 0x10	; 16
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	02 c0       	rjmp	.+4      	; 0x3ba8 <vfprintf+0x27c>
    3ba4:	20 e1       	ldi	r18, 0x10	; 16
    3ba6:	32 e0       	ldi	r19, 0x02	; 2
    3ba8:	f8 01       	movw	r30, r16
    3baa:	b7 fe       	sbrs	r11, 7
    3bac:	07 c0       	rjmp	.+14     	; 0x3bbc <vfprintf+0x290>
    3bae:	60 81       	ld	r22, Z
    3bb0:	71 81       	ldd	r23, Z+1	; 0x01
    3bb2:	82 81       	ldd	r24, Z+2	; 0x02
    3bb4:	93 81       	ldd	r25, Z+3	; 0x03
    3bb6:	0c 5f       	subi	r16, 0xFC	; 252
    3bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bba:	06 c0       	rjmp	.+12     	; 0x3bc8 <vfprintf+0x29c>
    3bbc:	60 81       	ld	r22, Z
    3bbe:	71 81       	ldd	r23, Z+1	; 0x01
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	0e 5f       	subi	r16, 0xFE	; 254
    3bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc8:	a3 01       	movw	r20, r6
    3bca:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__ultoa_invert>
    3bce:	88 2e       	mov	r8, r24
    3bd0:	86 18       	sub	r8, r6
    3bd2:	fb 2d       	mov	r31, r11
    3bd4:	ff 77       	andi	r31, 0x7F	; 127
    3bd6:	3f 2e       	mov	r3, r31
    3bd8:	36 fe       	sbrs	r3, 6
    3bda:	0d c0       	rjmp	.+26     	; 0x3bf6 <vfprintf+0x2ca>
    3bdc:	23 2d       	mov	r18, r3
    3bde:	2e 7f       	andi	r18, 0xFE	; 254
    3be0:	a2 2e       	mov	r10, r18
    3be2:	89 14       	cp	r8, r9
    3be4:	58 f4       	brcc	.+22     	; 0x3bfc <vfprintf+0x2d0>
    3be6:	34 fe       	sbrs	r3, 4
    3be8:	0b c0       	rjmp	.+22     	; 0x3c00 <vfprintf+0x2d4>
    3bea:	32 fc       	sbrc	r3, 2
    3bec:	09 c0       	rjmp	.+18     	; 0x3c00 <vfprintf+0x2d4>
    3bee:	83 2d       	mov	r24, r3
    3bf0:	8e 7e       	andi	r24, 0xEE	; 238
    3bf2:	a8 2e       	mov	r10, r24
    3bf4:	05 c0       	rjmp	.+10     	; 0x3c00 <vfprintf+0x2d4>
    3bf6:	b8 2c       	mov	r11, r8
    3bf8:	a3 2c       	mov	r10, r3
    3bfa:	03 c0       	rjmp	.+6      	; 0x3c02 <vfprintf+0x2d6>
    3bfc:	b8 2c       	mov	r11, r8
    3bfe:	01 c0       	rjmp	.+2      	; 0x3c02 <vfprintf+0x2d6>
    3c00:	b9 2c       	mov	r11, r9
    3c02:	a4 fe       	sbrs	r10, 4
    3c04:	0f c0       	rjmp	.+30     	; 0x3c24 <vfprintf+0x2f8>
    3c06:	fe 01       	movw	r30, r28
    3c08:	e8 0d       	add	r30, r8
    3c0a:	f1 1d       	adc	r31, r1
    3c0c:	80 81       	ld	r24, Z
    3c0e:	80 33       	cpi	r24, 0x30	; 48
    3c10:	21 f4       	brne	.+8      	; 0x3c1a <vfprintf+0x2ee>
    3c12:	9a 2d       	mov	r25, r10
    3c14:	99 7e       	andi	r25, 0xE9	; 233
    3c16:	a9 2e       	mov	r10, r25
    3c18:	09 c0       	rjmp	.+18     	; 0x3c2c <vfprintf+0x300>
    3c1a:	a2 fe       	sbrs	r10, 2
    3c1c:	06 c0       	rjmp	.+12     	; 0x3c2a <vfprintf+0x2fe>
    3c1e:	b3 94       	inc	r11
    3c20:	b3 94       	inc	r11
    3c22:	04 c0       	rjmp	.+8      	; 0x3c2c <vfprintf+0x300>
    3c24:	8a 2d       	mov	r24, r10
    3c26:	86 78       	andi	r24, 0x86	; 134
    3c28:	09 f0       	breq	.+2      	; 0x3c2c <vfprintf+0x300>
    3c2a:	b3 94       	inc	r11
    3c2c:	a3 fc       	sbrc	r10, 3
    3c2e:	11 c0       	rjmp	.+34     	; 0x3c52 <vfprintf+0x326>
    3c30:	a0 fe       	sbrs	r10, 0
    3c32:	06 c0       	rjmp	.+12     	; 0x3c40 <vfprintf+0x314>
    3c34:	b2 14       	cp	r11, r2
    3c36:	88 f4       	brcc	.+34     	; 0x3c5a <vfprintf+0x32e>
    3c38:	28 0c       	add	r2, r8
    3c3a:	92 2c       	mov	r9, r2
    3c3c:	9b 18       	sub	r9, r11
    3c3e:	0e c0       	rjmp	.+28     	; 0x3c5c <vfprintf+0x330>
    3c40:	b2 14       	cp	r11, r2
    3c42:	60 f4       	brcc	.+24     	; 0x3c5c <vfprintf+0x330>
    3c44:	b6 01       	movw	r22, r12
    3c46:	80 e2       	ldi	r24, 0x20	; 32
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3c4e:	b3 94       	inc	r11
    3c50:	f7 cf       	rjmp	.-18     	; 0x3c40 <vfprintf+0x314>
    3c52:	b2 14       	cp	r11, r2
    3c54:	18 f4       	brcc	.+6      	; 0x3c5c <vfprintf+0x330>
    3c56:	2b 18       	sub	r2, r11
    3c58:	02 c0       	rjmp	.+4      	; 0x3c5e <vfprintf+0x332>
    3c5a:	98 2c       	mov	r9, r8
    3c5c:	21 2c       	mov	r2, r1
    3c5e:	a4 fe       	sbrs	r10, 4
    3c60:	10 c0       	rjmp	.+32     	; 0x3c82 <vfprintf+0x356>
    3c62:	b6 01       	movw	r22, r12
    3c64:	80 e3       	ldi	r24, 0x30	; 48
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3c6c:	a2 fe       	sbrs	r10, 2
    3c6e:	17 c0       	rjmp	.+46     	; 0x3c9e <vfprintf+0x372>
    3c70:	a1 fc       	sbrc	r10, 1
    3c72:	03 c0       	rjmp	.+6      	; 0x3c7a <vfprintf+0x34e>
    3c74:	88 e7       	ldi	r24, 0x78	; 120
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	02 c0       	rjmp	.+4      	; 0x3c7e <vfprintf+0x352>
    3c7a:	88 e5       	ldi	r24, 0x58	; 88
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	b6 01       	movw	r22, r12
    3c80:	0c c0       	rjmp	.+24     	; 0x3c9a <vfprintf+0x36e>
    3c82:	8a 2d       	mov	r24, r10
    3c84:	86 78       	andi	r24, 0x86	; 134
    3c86:	59 f0       	breq	.+22     	; 0x3c9e <vfprintf+0x372>
    3c88:	a1 fe       	sbrs	r10, 1
    3c8a:	02 c0       	rjmp	.+4      	; 0x3c90 <vfprintf+0x364>
    3c8c:	8b e2       	ldi	r24, 0x2B	; 43
    3c8e:	01 c0       	rjmp	.+2      	; 0x3c92 <vfprintf+0x366>
    3c90:	80 e2       	ldi	r24, 0x20	; 32
    3c92:	a7 fc       	sbrc	r10, 7
    3c94:	8d e2       	ldi	r24, 0x2D	; 45
    3c96:	b6 01       	movw	r22, r12
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3c9e:	89 14       	cp	r8, r9
    3ca0:	38 f4       	brcc	.+14     	; 0x3cb0 <vfprintf+0x384>
    3ca2:	b6 01       	movw	r22, r12
    3ca4:	80 e3       	ldi	r24, 0x30	; 48
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3cac:	9a 94       	dec	r9
    3cae:	f7 cf       	rjmp	.-18     	; 0x3c9e <vfprintf+0x372>
    3cb0:	8a 94       	dec	r8
    3cb2:	f3 01       	movw	r30, r6
    3cb4:	e8 0d       	add	r30, r8
    3cb6:	f1 1d       	adc	r31, r1
    3cb8:	80 81       	ld	r24, Z
    3cba:	b6 01       	movw	r22, r12
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3cc2:	81 10       	cpse	r8, r1
    3cc4:	f5 cf       	rjmp	.-22     	; 0x3cb0 <vfprintf+0x384>
    3cc6:	22 20       	and	r2, r2
    3cc8:	09 f4       	brne	.+2      	; 0x3ccc <vfprintf+0x3a0>
    3cca:	42 ce       	rjmp	.-892    	; 0x3950 <vfprintf+0x24>
    3ccc:	b6 01       	movw	r22, r12
    3cce:	80 e2       	ldi	r24, 0x20	; 32
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <fputc>
    3cd6:	2a 94       	dec	r2
    3cd8:	f6 cf       	rjmp	.-20     	; 0x3cc6 <vfprintf+0x39a>
    3cda:	f6 01       	movw	r30, r12
    3cdc:	86 81       	ldd	r24, Z+6	; 0x06
    3cde:	97 81       	ldd	r25, Z+7	; 0x07
    3ce0:	02 c0       	rjmp	.+4      	; 0x3ce6 <vfprintf+0x3ba>
    3ce2:	8f ef       	ldi	r24, 0xFF	; 255
    3ce4:	9f ef       	ldi	r25, 0xFF	; 255
    3ce6:	2b 96       	adiw	r28, 0x0b	; 11
    3ce8:	e2 e1       	ldi	r30, 0x12	; 18
    3cea:	0c 94 91 1f 	jmp	0x3f22	; 0x3f22 <__epilogue_restores__>

00003cee <strnlen_P>:
    3cee:	fc 01       	movw	r30, r24
    3cf0:	05 90       	lpm	r0, Z+
    3cf2:	61 50       	subi	r22, 0x01	; 1
    3cf4:	70 40       	sbci	r23, 0x00	; 0
    3cf6:	01 10       	cpse	r0, r1
    3cf8:	d8 f7       	brcc	.-10     	; 0x3cf0 <strnlen_P+0x2>
    3cfa:	80 95       	com	r24
    3cfc:	90 95       	com	r25
    3cfe:	8e 0f       	add	r24, r30
    3d00:	9f 1f       	adc	r25, r31
    3d02:	08 95       	ret

00003d04 <strnlen>:
    3d04:	fc 01       	movw	r30, r24
    3d06:	61 50       	subi	r22, 0x01	; 1
    3d08:	70 40       	sbci	r23, 0x00	; 0
    3d0a:	01 90       	ld	r0, Z+
    3d0c:	01 10       	cpse	r0, r1
    3d0e:	d8 f7       	brcc	.-10     	; 0x3d06 <strnlen+0x2>
    3d10:	80 95       	com	r24
    3d12:	90 95       	com	r25
    3d14:	8e 0f       	add	r24, r30
    3d16:	9f 1f       	adc	r25, r31
    3d18:	08 95       	ret

00003d1a <strrev>:
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	67 2f       	mov	r22, r23
    3d20:	71 91       	ld	r23, Z+
    3d22:	77 23       	and	r23, r23
    3d24:	e1 f7       	brne	.-8      	; 0x3d1e <strrev+0x4>
    3d26:	32 97       	sbiw	r30, 0x02	; 2
    3d28:	04 c0       	rjmp	.+8      	; 0x3d32 <strrev+0x18>
    3d2a:	7c 91       	ld	r23, X
    3d2c:	6d 93       	st	X+, r22
    3d2e:	70 83       	st	Z, r23
    3d30:	62 91       	ld	r22, -Z
    3d32:	ae 17       	cp	r26, r30
    3d34:	bf 07       	cpc	r27, r31
    3d36:	c8 f3       	brcs	.-14     	; 0x3d2a <strrev+0x10>
    3d38:	08 95       	ret

00003d3a <fputc>:
    3d3a:	0f 93       	push	r16
    3d3c:	1f 93       	push	r17
    3d3e:	cf 93       	push	r28
    3d40:	df 93       	push	r29
    3d42:	fb 01       	movw	r30, r22
    3d44:	23 81       	ldd	r18, Z+3	; 0x03
    3d46:	21 fd       	sbrc	r18, 1
    3d48:	03 c0       	rjmp	.+6      	; 0x3d50 <fputc+0x16>
    3d4a:	8f ef       	ldi	r24, 0xFF	; 255
    3d4c:	9f ef       	ldi	r25, 0xFF	; 255
    3d4e:	2c c0       	rjmp	.+88     	; 0x3da8 <fputc+0x6e>
    3d50:	22 ff       	sbrs	r18, 2
    3d52:	16 c0       	rjmp	.+44     	; 0x3d80 <fputc+0x46>
    3d54:	46 81       	ldd	r20, Z+6	; 0x06
    3d56:	57 81       	ldd	r21, Z+7	; 0x07
    3d58:	24 81       	ldd	r18, Z+4	; 0x04
    3d5a:	35 81       	ldd	r19, Z+5	; 0x05
    3d5c:	42 17       	cp	r20, r18
    3d5e:	53 07       	cpc	r21, r19
    3d60:	44 f4       	brge	.+16     	; 0x3d72 <fputc+0x38>
    3d62:	a0 81       	ld	r26, Z
    3d64:	b1 81       	ldd	r27, Z+1	; 0x01
    3d66:	9d 01       	movw	r18, r26
    3d68:	2f 5f       	subi	r18, 0xFF	; 255
    3d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d6c:	31 83       	std	Z+1, r19	; 0x01
    3d6e:	20 83       	st	Z, r18
    3d70:	8c 93       	st	X, r24
    3d72:	26 81       	ldd	r18, Z+6	; 0x06
    3d74:	37 81       	ldd	r19, Z+7	; 0x07
    3d76:	2f 5f       	subi	r18, 0xFF	; 255
    3d78:	3f 4f       	sbci	r19, 0xFF	; 255
    3d7a:	37 83       	std	Z+7, r19	; 0x07
    3d7c:	26 83       	std	Z+6, r18	; 0x06
    3d7e:	14 c0       	rjmp	.+40     	; 0x3da8 <fputc+0x6e>
    3d80:	8b 01       	movw	r16, r22
    3d82:	ec 01       	movw	r28, r24
    3d84:	fb 01       	movw	r30, r22
    3d86:	00 84       	ldd	r0, Z+8	; 0x08
    3d88:	f1 85       	ldd	r31, Z+9	; 0x09
    3d8a:	e0 2d       	mov	r30, r0
    3d8c:	09 95       	icall
    3d8e:	89 2b       	or	r24, r25
    3d90:	e1 f6       	brne	.-72     	; 0x3d4a <fputc+0x10>
    3d92:	d8 01       	movw	r26, r16
    3d94:	16 96       	adiw	r26, 0x06	; 6
    3d96:	8d 91       	ld	r24, X+
    3d98:	9c 91       	ld	r25, X
    3d9a:	17 97       	sbiw	r26, 0x07	; 7
    3d9c:	01 96       	adiw	r24, 0x01	; 1
    3d9e:	17 96       	adiw	r26, 0x07	; 7
    3da0:	9c 93       	st	X, r25
    3da2:	8e 93       	st	-X, r24
    3da4:	16 97       	sbiw	r26, 0x06	; 6
    3da6:	ce 01       	movw	r24, r28
    3da8:	df 91       	pop	r29
    3daa:	cf 91       	pop	r28
    3dac:	1f 91       	pop	r17
    3dae:	0f 91       	pop	r16
    3db0:	08 95       	ret

00003db2 <__ultoa_invert>:
    3db2:	fa 01       	movw	r30, r20
    3db4:	aa 27       	eor	r26, r26
    3db6:	28 30       	cpi	r18, 0x08	; 8
    3db8:	51 f1       	breq	.+84     	; 0x3e0e <__ultoa_invert+0x5c>
    3dba:	20 31       	cpi	r18, 0x10	; 16
    3dbc:	81 f1       	breq	.+96     	; 0x3e1e <__ultoa_invert+0x6c>
    3dbe:	e8 94       	clt
    3dc0:	6f 93       	push	r22
    3dc2:	6e 7f       	andi	r22, 0xFE	; 254
    3dc4:	6e 5f       	subi	r22, 0xFE	; 254
    3dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc8:	8f 4f       	sbci	r24, 0xFF	; 255
    3dca:	9f 4f       	sbci	r25, 0xFF	; 255
    3dcc:	af 4f       	sbci	r26, 0xFF	; 255
    3dce:	b1 e0       	ldi	r27, 0x01	; 1
    3dd0:	3e d0       	rcall	.+124    	; 0x3e4e <__ultoa_invert+0x9c>
    3dd2:	b4 e0       	ldi	r27, 0x04	; 4
    3dd4:	3c d0       	rcall	.+120    	; 0x3e4e <__ultoa_invert+0x9c>
    3dd6:	67 0f       	add	r22, r23
    3dd8:	78 1f       	adc	r23, r24
    3dda:	89 1f       	adc	r24, r25
    3ddc:	9a 1f       	adc	r25, r26
    3dde:	a1 1d       	adc	r26, r1
    3de0:	68 0f       	add	r22, r24
    3de2:	79 1f       	adc	r23, r25
    3de4:	8a 1f       	adc	r24, r26
    3de6:	91 1d       	adc	r25, r1
    3de8:	a1 1d       	adc	r26, r1
    3dea:	6a 0f       	add	r22, r26
    3dec:	71 1d       	adc	r23, r1
    3dee:	81 1d       	adc	r24, r1
    3df0:	91 1d       	adc	r25, r1
    3df2:	a1 1d       	adc	r26, r1
    3df4:	20 d0       	rcall	.+64     	; 0x3e36 <__ultoa_invert+0x84>
    3df6:	09 f4       	brne	.+2      	; 0x3dfa <__ultoa_invert+0x48>
    3df8:	68 94       	set
    3dfa:	3f 91       	pop	r19
    3dfc:	2a e0       	ldi	r18, 0x0A	; 10
    3dfe:	26 9f       	mul	r18, r22
    3e00:	11 24       	eor	r1, r1
    3e02:	30 19       	sub	r19, r0
    3e04:	30 5d       	subi	r19, 0xD0	; 208
    3e06:	31 93       	st	Z+, r19
    3e08:	de f6       	brtc	.-74     	; 0x3dc0 <__ultoa_invert+0xe>
    3e0a:	cf 01       	movw	r24, r30
    3e0c:	08 95       	ret
    3e0e:	46 2f       	mov	r20, r22
    3e10:	47 70       	andi	r20, 0x07	; 7
    3e12:	40 5d       	subi	r20, 0xD0	; 208
    3e14:	41 93       	st	Z+, r20
    3e16:	b3 e0       	ldi	r27, 0x03	; 3
    3e18:	0f d0       	rcall	.+30     	; 0x3e38 <__ultoa_invert+0x86>
    3e1a:	c9 f7       	brne	.-14     	; 0x3e0e <__ultoa_invert+0x5c>
    3e1c:	f6 cf       	rjmp	.-20     	; 0x3e0a <__ultoa_invert+0x58>
    3e1e:	46 2f       	mov	r20, r22
    3e20:	4f 70       	andi	r20, 0x0F	; 15
    3e22:	40 5d       	subi	r20, 0xD0	; 208
    3e24:	4a 33       	cpi	r20, 0x3A	; 58
    3e26:	18 f0       	brcs	.+6      	; 0x3e2e <__ultoa_invert+0x7c>
    3e28:	49 5d       	subi	r20, 0xD9	; 217
    3e2a:	31 fd       	sbrc	r19, 1
    3e2c:	40 52       	subi	r20, 0x20	; 32
    3e2e:	41 93       	st	Z+, r20
    3e30:	02 d0       	rcall	.+4      	; 0x3e36 <__ultoa_invert+0x84>
    3e32:	a9 f7       	brne	.-22     	; 0x3e1e <__ultoa_invert+0x6c>
    3e34:	ea cf       	rjmp	.-44     	; 0x3e0a <__ultoa_invert+0x58>
    3e36:	b4 e0       	ldi	r27, 0x04	; 4
    3e38:	a6 95       	lsr	r26
    3e3a:	97 95       	ror	r25
    3e3c:	87 95       	ror	r24
    3e3e:	77 95       	ror	r23
    3e40:	67 95       	ror	r22
    3e42:	ba 95       	dec	r27
    3e44:	c9 f7       	brne	.-14     	; 0x3e38 <__ultoa_invert+0x86>
    3e46:	00 97       	sbiw	r24, 0x00	; 0
    3e48:	61 05       	cpc	r22, r1
    3e4a:	71 05       	cpc	r23, r1
    3e4c:	08 95       	ret
    3e4e:	9b 01       	movw	r18, r22
    3e50:	ac 01       	movw	r20, r24
    3e52:	0a 2e       	mov	r0, r26
    3e54:	06 94       	lsr	r0
    3e56:	57 95       	ror	r21
    3e58:	47 95       	ror	r20
    3e5a:	37 95       	ror	r19
    3e5c:	27 95       	ror	r18
    3e5e:	ba 95       	dec	r27
    3e60:	c9 f7       	brne	.-14     	; 0x3e54 <__ultoa_invert+0xa2>
    3e62:	62 0f       	add	r22, r18
    3e64:	73 1f       	adc	r23, r19
    3e66:	84 1f       	adc	r24, r20
    3e68:	95 1f       	adc	r25, r21
    3e6a:	a0 1d       	adc	r26, r0
    3e6c:	08 95       	ret

00003e6e <eeprom_read_byte>:
    3e6e:	e1 99       	sbic	0x1c, 1	; 28
    3e70:	fe cf       	rjmp	.-4      	; 0x3e6e <eeprom_read_byte>
    3e72:	9f bb       	out	0x1f, r25	; 31
    3e74:	8e bb       	out	0x1e, r24	; 30
    3e76:	e0 9a       	sbi	0x1c, 0	; 28
    3e78:	99 27       	eor	r25, r25
    3e7a:	8d b3       	in	r24, 0x1d	; 29
    3e7c:	08 95       	ret

00003e7e <eeprom_read_dword>:
    3e7e:	a6 e1       	ldi	r26, 0x16	; 22
    3e80:	b0 e0       	ldi	r27, 0x00	; 0
    3e82:	44 e0       	ldi	r20, 0x04	; 4
    3e84:	50 e0       	ldi	r21, 0x00	; 0
    3e86:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <eeprom_read_blraw>

00003e8a <eeprom_read_word>:
    3e8a:	a8 e1       	ldi	r26, 0x18	; 24
    3e8c:	b0 e0       	ldi	r27, 0x00	; 0
    3e8e:	42 e0       	ldi	r20, 0x02	; 2
    3e90:	50 e0       	ldi	r21, 0x00	; 0
    3e92:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <eeprom_read_blraw>

00003e96 <eeprom_write_byte>:
    3e96:	26 2f       	mov	r18, r22

00003e98 <eeprom_write_r18>:
    3e98:	e1 99       	sbic	0x1c, 1	; 28
    3e9a:	fe cf       	rjmp	.-4      	; 0x3e98 <eeprom_write_r18>
    3e9c:	9f bb       	out	0x1f, r25	; 31
    3e9e:	8e bb       	out	0x1e, r24	; 30
    3ea0:	2d bb       	out	0x1d, r18	; 29
    3ea2:	0f b6       	in	r0, 0x3f	; 63
    3ea4:	f8 94       	cli
    3ea6:	e2 9a       	sbi	0x1c, 2	; 28
    3ea8:	e1 9a       	sbi	0x1c, 1	; 28
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	01 96       	adiw	r24, 0x01	; 1
    3eae:	08 95       	ret

00003eb0 <eeprom_write_dword>:
    3eb0:	24 2f       	mov	r18, r20
    3eb2:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <eeprom_write_r18>
    3eb6:	25 2f       	mov	r18, r21
    3eb8:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <eeprom_write_r18>
    3ebc:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <eeprom_write_word>

00003ec0 <eeprom_write_word>:
    3ec0:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <eeprom_write_byte>
    3ec4:	27 2f       	mov	r18, r23
    3ec6:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <eeprom_write_r18>

00003eca <eeprom_read_block>:
    3eca:	dc 01       	movw	r26, r24
    3ecc:	cb 01       	movw	r24, r22

00003ece <eeprom_read_blraw>:
    3ece:	fc 01       	movw	r30, r24
    3ed0:	e1 99       	sbic	0x1c, 1	; 28
    3ed2:	fe cf       	rjmp	.-4      	; 0x3ed0 <eeprom_read_blraw+0x2>
    3ed4:	06 c0       	rjmp	.+12     	; 0x3ee2 <eeprom_read_blraw+0x14>
    3ed6:	ff bb       	out	0x1f, r31	; 31
    3ed8:	ee bb       	out	0x1e, r30	; 30
    3eda:	e0 9a       	sbi	0x1c, 0	; 28
    3edc:	31 96       	adiw	r30, 0x01	; 1
    3ede:	0d b2       	in	r0, 0x1d	; 29
    3ee0:	0d 92       	st	X+, r0
    3ee2:	41 50       	subi	r20, 0x01	; 1
    3ee4:	50 40       	sbci	r21, 0x00	; 0
    3ee6:	b8 f7       	brcc	.-18     	; 0x3ed6 <eeprom_read_blraw+0x8>
    3ee8:	08 95       	ret

00003eea <__prologue_saves__>:
    3eea:	2f 92       	push	r2
    3eec:	3f 92       	push	r3
    3eee:	4f 92       	push	r4
    3ef0:	5f 92       	push	r5
    3ef2:	6f 92       	push	r6
    3ef4:	7f 92       	push	r7
    3ef6:	8f 92       	push	r8
    3ef8:	9f 92       	push	r9
    3efa:	af 92       	push	r10
    3efc:	bf 92       	push	r11
    3efe:	cf 92       	push	r12
    3f00:	df 92       	push	r13
    3f02:	ef 92       	push	r14
    3f04:	ff 92       	push	r15
    3f06:	0f 93       	push	r16
    3f08:	1f 93       	push	r17
    3f0a:	cf 93       	push	r28
    3f0c:	df 93       	push	r29
    3f0e:	cd b7       	in	r28, 0x3d	; 61
    3f10:	de b7       	in	r29, 0x3e	; 62
    3f12:	ca 1b       	sub	r28, r26
    3f14:	db 0b       	sbc	r29, r27
    3f16:	0f b6       	in	r0, 0x3f	; 63
    3f18:	f8 94       	cli
    3f1a:	de bf       	out	0x3e, r29	; 62
    3f1c:	0f be       	out	0x3f, r0	; 63
    3f1e:	cd bf       	out	0x3d, r28	; 61
    3f20:	09 94       	ijmp

00003f22 <__epilogue_restores__>:
    3f22:	2a 88       	ldd	r2, Y+18	; 0x12
    3f24:	39 88       	ldd	r3, Y+17	; 0x11
    3f26:	48 88       	ldd	r4, Y+16	; 0x10
    3f28:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f30:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f32:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f34:	b9 84       	ldd	r11, Y+9	; 0x09
    3f36:	c8 84       	ldd	r12, Y+8	; 0x08
    3f38:	df 80       	ldd	r13, Y+7	; 0x07
    3f3a:	ee 80       	ldd	r14, Y+6	; 0x06
    3f3c:	fd 80       	ldd	r15, Y+5	; 0x05
    3f3e:	0c 81       	ldd	r16, Y+4	; 0x04
    3f40:	1b 81       	ldd	r17, Y+3	; 0x03
    3f42:	aa 81       	ldd	r26, Y+2	; 0x02
    3f44:	b9 81       	ldd	r27, Y+1	; 0x01
    3f46:	ce 0f       	add	r28, r30
    3f48:	d1 1d       	adc	r29, r1
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	f8 94       	cli
    3f4e:	de bf       	out	0x3e, r29	; 62
    3f50:	0f be       	out	0x3f, r0	; 63
    3f52:	cd bf       	out	0x3d, r28	; 61
    3f54:	ed 01       	movw	r28, r26
    3f56:	08 95       	ret

00003f58 <_exit>:
    3f58:	f8 94       	cli

00003f5a <__stop_program>:
    3f5a:	ff cf       	rjmp	.-2      	; 0x3f5a <__stop_program>
