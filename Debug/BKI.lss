
BKI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004106  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  00004106  000041ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000487  00800146  00800146  000042a0  2**0
                  ALLOC
  3 .eeprom       000000cf  00810000  00810000  000042a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000062a0  00000000  00000000  00004370  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00002a17  00000000  00000000  0000a610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000005c  00000000  00000000  0000d027  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000d084  2**2
                  CONTENTS, READONLY
  8 .debug_info   000004e6  00000000  00000000  0000d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004a3  00000000  00000000  0000d5a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0000da49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000196  00000000  00000000  0000da63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 01 	jmp	0x286	; 0x286 <__ctors_end>
       4:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__vector_1>
       8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
       c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      10:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      14:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      18:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      1c:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__vector_7>
      20:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      24:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      28:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      2c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      30:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      34:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__vector_13>
      38:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      3c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      40:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      44:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      48:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      4c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      50:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>

00000054 <NEDOSTUPNO>:
      54:	ed e5 e4 ee f1 f2 f3 ef ed ee 00                    ...........

0000005f <NOVOE_ZNACHENIE>:
      5f:	cd ce c2 ce c5 20 c7 cd c0 d7 c5 cd c8 c5 00        ..... .........

0000006e <PAROL>:
      6e:	cf c0 d0 ce cb dc 00                                .......

00000075 <MS>:
      75:	ec f1 00                                            ...

00000078 <OTKL_MTZ>:
      78:	ee f2 ea eb 2e cc d2 c7 3a 00                       ........:.

00000082 <VKL_MTZ>:
      82:	e2 ea eb 2e cc d2 c7 3a 00                          .......:.

0000008b <PUSTO>:
      8b:	3c ef f3 f1 f2 ee 3e 00                             <.....>.

00000093 <OBNARUZHENO>:
      93:	ee e1 ed e0 f0 f3 e6 e5 ed ee 20 c1 c4 c7 3a 00     .......... ...:.

000000a3 <SBROSIT>:
      a3:	d1 e1 f0 ee f1 e8 f2 fc 3f 20 e4 e0 2d 22 c2 c2     ........? ..-"..
      b3:	ce c4 22 00                                         ..".

000000b7 <NET>:
      b7:	ed e5 f2 00                                         ....

000000bb <NET_SVYAZI>:
      bb:	ed e5 f2 20 f1 e2 ff e7 e8 00                       ... ......

000000c5 <OSHIBKA>:
      c5:	ee f8 e8 e1 ea e0 00                                .......

000000cc <NET_GOTOVNOSTI>:
      cc:	cd c5 d2 20 c3 ce d2 ce c2 cd ce d1 d2 c8 00        ... ...........

000000db <VREMYA_UROV>:
      db:	c2 d0 c5 cc df 20 d3 d0 ce c2 00                    ..... .....

000000e6 <VREMYA_MTZ>:
      e6:	c2 d0 c5 cc df 20 cc d2 c7 00                       ..... ....

000000f0 <ADRES>:
      f0:	c0 c4 d0 c5 d1 00                                   ......

000000f6 <PO_ODNOMU>:
      f6:	cf ce 20 ce c4 cd ce cc d3 00                       .. .......

00000100 <DLYA_VSEH>:
     100:	c4 cb df 20 c2 d1 c5 d5 00                          ... .....

00000109 <C_NONE>:
     109:	4e 4f 4e 45 00                                      NONE.

0000010e <C_EVEN>:
     10e:	45 56 45 4e 00                                      EVEN.

00000113 <C_ODD>:
     113:	4f 44 44 00                                         ODD.

00000117 <CHETNOST>:
     117:	d7 c5 d2 cd ce d1 d2 dc 00                          .........

00000120 <SKOROST>:
     120:	d1 ca ce d0 ce d1 d2 dc 00                          .........

00000129 <ASCII_M>:
     129:	41 53 43 49 49 00                                   ASCII.

0000012f <RTU_M>:
     12f:	52 54 55 00                                         RTU.

00000133 <REZHIM>:
     133:	d0 c5 c6 c8 cc 00                                   ......

00000139 <SVYAZ>:
     139:	d1 c2 df c7 dc 20 52 53 34 38 35 00                 ..... RS485.

00000145 <PROGRAMMIROVANIE>:
     145:	cf d0 ce c3 d0 c0 cc cc c8 d0 ce c2 c0 cd c8 c5     ................
	...

00000156 <SCANIROVANIE>:
     156:	d1 ca c0 cd c8 d0 ce c2 c0 cd c8 c5 00              .............

00000163 <DATAVREMYA>:
     163:	c4 c0 d2 c0 2f c2 d0 c5 cc df 00                    ..../......

0000016e <RELE>:
     16e:	d0 c5 cb c5 00                                      .....

00000173 <DVX>:
     173:	c4 c2 d5 00                                         ....

00000177 <VOD>:
     177:	c2 ce c4 00                                         ....

0000017b <BDZ>:
     17b:	c1 c4 c7 00                                         ....

0000017f <NASTROYKA>:
     17f:	cd c0 d1 d2 d0 ce c9 ca c0 00                       ..........

00000189 <ARHIV>:
     189:	c0 d0 d5 c8 c2 00                                   ......

0000018f <NA_SVYAZI>:
     18f:	cd c0 20 d1 c2 df c7 c8 00                          .. ......

00000198 <MENU>:
     198:	cc c5 cd de 00                                      .....

0000019d <NEISPRAVNOST>:
     19d:	cd c5 c8 d1 cf d0 c0 c2 cd ce d1 d2 dc 00           ..............

000001ab <AVARIYA>:
     1ab:	c0 c2 c0 d0 c8 df 00                                .......

000001b2 <RABOTA>:
     1b2:	d0 c0 c1 ce d2 c0 31 00                             ......1.

000001ba <EXIT4>:
     1ba:	c2 db d5 34 3a 00                                   ...4:.

000001c0 <EXIT3>:
     1c0:	c2 db d5 33 3a 00                                   ...3:.

000001c6 <EXIT2>:
     1c6:	c2 db d5 32 3a 00                                   ...2:.

000001cc <EXIT1>:
     1cc:	c2 db d5 31 3a 00                                   ...1:.

000001d2 <CHOSE_EXT>:
     1d2:	c2 db d5 ce c4 db 00                                .......

000001d9 <OFF>:
     1d9:	c2 db ca cb 00                                      .....

000001de <ON>:
     1de:	c2 ca cb 00                                         ....

000001e2 <DVX3>:
     1e2:	c4 c2 d5 33 00                                      ...3.

000001e7 <DVX2>:
     1e7:	c4 c2 d5 32 00                                      ...2.

000001ec <DVX1>:
     1ec:	c4 c2 d5 31 00                                      ...1.

000001f1 <VOD4>:
     1f1:	c2 ce c4 34 00                                      ...4.

000001f6 <VOD3>:
     1f6:	c2 ce c4 33 00                                      ...3.

000001fb <VOD2>:
     1fb:	c2 ce c4 32 00                                      ...2.

00000200 <VOD1>:
     200:	c2 ce c4 31 00                                      ...1.

00000205 <LOGIKA>:
     205:	cb ce c3 c8 ca c0 20 d0 c0 c1 ce d2 db 00           ...... .......

00000213 <OSHIBKA_ADDR>:
     213:	ce d8 c8 c1 ca c0 20 e0 e4 f0 e5 f1 20 e7 e0 ed     ...... ..... ...
     223:	ff f2 00                                            ...

00000226 <STAROE_ZNACHENIE>:
     226:	d1 d2 c0 d0 ce c5 20 c7 cd c0 d7 c5 cd c8 c5 00     ...... .........

00000236 <NUMM>:
     236:	cd ce cc c5 d0 20 c1 c4 c7 00                       ..... ....

00000240 <NOVOE>:
     240:	cd ce c2 ce c5 00                                   ......

00000246 <lcd_codepage>:
     246:	41 a0 42 a1 e0 45 a3 a4 a5 a6 4b a7 4d 48 4f a8     A.B..E....K.MHO.
     256:	50 43 54 a9 aa 58 e1 ab ac e2 ad ae 62 af b0 b1     PCT..X......b...
     266:	61 b2 b3 b4 e3 65 b6 b7 b8 b9 ba bb bc bd 6f be     a....e........o.
     276:	70 63 bf 79 e4 78 e5 c0 c1 e6 c2 c3 c4 c5 c6 c7     pc.y.x..........

00000286 <__ctors_end>:
     286:	11 24       	eor	r1, r1
     288:	1f be       	out	0x3f, r1	; 63
     28a:	cf e5       	ldi	r28, 0x5F	; 95
     28c:	d8 e0       	ldi	r29, 0x08	; 8
     28e:	de bf       	out	0x3e, r29	; 62
     290:	cd bf       	out	0x3d, r28	; 61

00000292 <__do_copy_data>:
     292:	11 e0       	ldi	r17, 0x01	; 1
     294:	a0 e6       	ldi	r26, 0x60	; 96
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	e6 e0       	ldi	r30, 0x06	; 6
     29a:	f1 e4       	ldi	r31, 0x41	; 65
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <__do_copy_data+0x10>
     29e:	05 90       	lpm	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	a6 34       	cpi	r26, 0x46	; 70
     2a4:	b1 07       	cpc	r27, r17
     2a6:	d9 f7       	brne	.-10     	; 0x29e <__do_copy_data+0xc>

000002a8 <__do_clear_bss>:
     2a8:	25 e0       	ldi	r18, 0x05	; 5
     2aa:	a6 e4       	ldi	r26, 0x46	; 70
     2ac:	b1 e0       	ldi	r27, 0x01	; 1
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <.do_clear_bss_start>

000002b0 <.do_clear_bss_loop>:
     2b0:	1d 92       	st	X+, r1

000002b2 <.do_clear_bss_start>:
     2b2:	ad 3c       	cpi	r26, 0xCD	; 205
     2b4:	b2 07       	cpc	r27, r18
     2b6:	e1 f7       	brne	.-8      	; 0x2b0 <.do_clear_bss_loop>
     2b8:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <main>
     2bc:	0c 94 81 20 	jmp	0x4102	; 0x4102 <_exit>

000002c0 <__bad_interrupt>:
     2c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002c4 <checkTOUT>:
	return 	checkTOUT(addr);
}

static inline signed char checkTOUT(unsigned char addr)
{
	CAN_timeout=CAN_TOUT;
     2c4:	28 ee       	ldi	r18, 0xE8	; 232
     2c6:	33 e0       	ldi	r19, 0x03	; 3
     2c8:	30 93 dd 04 	sts	0x04DD, r19	; 0x8004dd <CAN_timeout+0x1>
     2cc:	20 93 dc 04 	sts	0x04DC, r18	; 0x8004dc <CAN_timeout>
	while(chkBit(inSysBDZ[addr].flags,INL)==0 && (CAN_timeout !=0));	//ждем ответа
     2d0:	29 e0       	ldi	r18, 0x09	; 9
     2d2:	82 9f       	mul	r24, r18
     2d4:	c0 01       	movw	r24, r0
     2d6:	11 24       	eor	r1, r1
     2d8:	fc 01       	movw	r30, r24
     2da:	e7 59       	subi	r30, 0x97	; 151
     2dc:	fe 4f       	sbci	r31, 0xFE	; 254
     2de:	80 81       	ld	r24, Z
     2e0:	82 fd       	sbrc	r24, 2
     2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <checkTOUT+0x2c>
     2e4:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <CAN_timeout>
     2e8:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <CAN_timeout+0x1>
     2ec:	89 2b       	or	r24, r25
     2ee:	b9 f7       	brne	.-18     	; 0x2de <checkTOUT+0x1a>
	return (CAN_timeout ==0 || CAN_ERR !=0)?(-1):(1);					//дождались таймаута или ошибки CAN вернули -1
     2f0:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <CAN_timeout>
     2f4:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <CAN_timeout+0x1>
     2f8:	89 2b       	or	r24, r25
     2fa:	31 f0       	breq	.+12     	; 0x308 <checkTOUT+0x44>
     2fc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CAN_ERR>
     300:	81 11       	cpse	r24, r1
     302:	02 c0       	rjmp	.+4      	; 0x308 <checkTOUT+0x44>
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	08 95       	ret
     308:	8f ef       	ldi	r24, 0xFF	; 255
}
     30a:	08 95       	ret

0000030c <LCD_strob>:
}


static inline void LCD_strob(void)
{
	LCP |= 1<<LCD_E;
     30c:	ac 9a       	sbi	0x15, 4	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30e:	8f e9       	ldi	r24, 0x9F	; 159
     310:	9f e0       	ldi	r25, 0x0F	; 15
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <LCD_strob+0x6>
     316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_strob+0xc>
     318:	00 00       	nop
	_delay_ms(1);
	LCP &= ~(1<<LCD_E);
     31a:	ac 98       	cbi	0x15, 4	; 21
     31c:	8f e9       	ldi	r24, 0x9F	; 159
     31e:	9f e0       	ldi	r25, 0x0F	; 15
     320:	01 97       	sbiw	r24, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <LCD_strob+0x14>
     324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_strob+0x1a>
     326:	00 00       	nop
     328:	08 95       	ret

0000032a <TWI_init>:
#define MR_DATA_NACK 0x58	//данные пришли, ACK не отправлен

void TWI_init(void)
{
//скорость 100 kHz
TWBR=72;
     32a:	88 e4       	ldi	r24, 0x48	; 72
     32c:	80 b9       	out	0x00, r24	; 0
//TWEA разрешение бита подтверждения,TWEN разрешение работы TWI модуля,
TWCR |= (1<<TWEA | 1<<TWEN);
     32e:	86 b7       	in	r24, 0x36	; 54
     330:	84 64       	ori	r24, 0x44	; 68
     332:	86 bf       	out	0x36, r24	; 54
TWSR &=~(1<<TWPS0) | (1<<TWPS1);
     334:	08 98       	cbi	0x01, 0	; 1
     336:	08 95       	ret

00000338 <twi_write>:
}

unsigned char twi_write(unsigned char addr,unsigned char *data,unsigned char len)
{
TWI_timeout=T_TOUT;
     338:	28 ee       	ldi	r18, 0xE8	; 232
     33a:	33 e0       	ldi	r19, 0x03	; 3
     33c:	30 93 7b 05 	sts	0x057B, r19	; 0x80057b <TWI_timeout+0x1>
     340:	20 93 7a 05 	sts	0x057A, r18	; 0x80057a <TWI_timeout>

//TWI_ERR=0;

TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);										//Send START condition
     344:	94 ea       	ldi	r25, 0xA4	; 164
     346:	96 bf       	out	0x36, r25	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//флаг TWINT говорит о том,что текущее задание выполнено
     348:	06 b6       	in	r0, 0x36	; 54
     34a:	07 fc       	sbrc	r0, 7
     34c:	08 c0       	rjmp	.+16     	; 0x35e <twi_write+0x26>
     34e:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <TWI_timeout>
     352:	30 91 7b 05 	lds	r19, 0x057B	; 0x80057b <TWI_timeout+0x1>
     356:	23 2b       	or	r18, r19
     358:	b9 f7       	brne	.-18     	; 0x348 <twi_write+0x10>
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	2d c0       	rjmp	.+90     	; 0x3b8 <twi_write+0x80>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел
     35e:	91 b1       	in	r25, 0x01	; 1
     360:	98 7f       	andi	r25, 0xF8	; 248
     362:	98 30       	cpi	r25, 0x08	; 8
     364:	11 f0       	breq	.+4      	; 0x36a <twi_write+0x32>
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	27 c0       	rjmp	.+78     	; 0x3b8 <twi_write+0x80>



TWDR = addr & 0xFE;													//грузим адпес и флаг записи (SLA+W)
     36a:	8e 7f       	andi	r24, 0xFE	; 254
     36c:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
     36e:	84 e8       	ldi	r24, 0x84	; 132
     370:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
     372:	06 b6       	in	r0, 0x36	; 54
     374:	07 fc       	sbrc	r0, 7
     376:	07 c0       	rjmp	.+14     	; 0x386 <twi_write+0x4e>
     378:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <TWI_timeout>
     37c:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <TWI_timeout+0x1>
     380:	89 2b       	or	r24, r25
     382:	b9 f7       	brne	.-18     	; 0x372 <twi_write+0x3a>
     384:	ea cf       	rjmp	.-44     	; 0x35a <twi_write+0x22>
if ((TWSR & 0xF8) != MT_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     386:	81 b1       	in	r24, 0x01	; 1
     388:	88 7f       	andi	r24, 0xF8	; 248
     38a:	88 31       	cpi	r24, 0x18	; 24
     38c:	21 f4       	brne	.+8      	; 0x396 <twi_write+0x5e>
     38e:	96 2f       	mov	r25, r22
     390:	fb 01       	movw	r30, r22


for(unsigned char i=0;i<len;i++)											//данные пошли
{
	TWDR = *(data+i);
	TWCR = (1<<TWINT) | (1<<TWEN);
     392:	24 e8       	ldi	r18, 0x84	; 132
     394:	02 c0       	rjmp	.+4      	; 0x39a <twi_write+0x62>


TWDR = addr & 0xFE;													//грузим адпес и флаг записи (SLA+W)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MT_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     396:	83 e0       	ldi	r24, 0x03	; 3
     398:	0f c0       	rjmp	.+30     	; 0x3b8 <twi_write+0x80>



for(unsigned char i=0;i<len;i++)											//данные пошли
     39a:	8e 2f       	mov	r24, r30
     39c:	89 1b       	sub	r24, r25
     39e:	84 17       	cp	r24, r20
     3a0:	a8 f4       	brcc	.+42     	; 0x3cc <twi_write+0x94>
{
	TWDR = *(data+i);
     3a2:	81 91       	ld	r24, Z+
     3a4:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     3a6:	26 bf       	out	0x36, r18	; 54
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}
     3a8:	06 b6       	in	r0, 0x36	; 54
     3aa:	07 fe       	sbrs	r0, 7
     3ac:	08 c0       	rjmp	.+16     	; 0x3be <twi_write+0x86>
	if ((TWSR & 0xF8) != MT_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}
     3ae:	81 b1       	in	r24, 0x01	; 1
     3b0:	88 7f       	andi	r24, 0xF8	; 248
     3b2:	88 32       	cpi	r24, 0x28	; 40
     3b4:	91 f3       	breq	.-28     	; 0x39a <twi_write+0x62>
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <TWI_ERR>
     3bc:	07 c0       	rjmp	.+14     	; 0x3cc <twi_write+0x94>

for(unsigned char i=0;i<len;i++)											//данные пошли
{
	TWDR = *(data+i);
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}
     3be:	60 91 7a 05 	lds	r22, 0x057A	; 0x80057a <TWI_timeout>
     3c2:	70 91 7b 05 	lds	r23, 0x057B	; 0x80057b <TWI_timeout+0x1>
     3c6:	67 2b       	or	r22, r23
     3c8:	79 f7       	brne	.-34     	; 0x3a8 <twi_write+0x70>
     3ca:	c7 cf       	rjmp	.-114    	; 0x35a <twi_write+0x22>


ERROR:


TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);										//Transmit STOP condition
     3cc:	84 e9       	ldi	r24, 0x94	; 148
     3ce:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d0:	8f e8       	ldi	r24, 0x8F	; 143
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <twi_write+0x9c>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <twi_write+0xa2>
     3da:	00 00       	nop
_delay_us(100);	//ждем прохождения стопа
#ifdef DEBUG
if(TWI_ERR)uart_puts("writeErr");
#endif
return TWI_ERR;	//возвращаем код ошибки
}
     3dc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <TWI_ERR>
     3e0:	08 95       	ret

000003e2 <twi_read>:

unsigned char twi_read(unsigned char addr,unsigned char *data,unsigned char len)
{
     3e2:	98 2f       	mov	r25, r24
unsigned char i=0;

TWI_timeout=T_TOUT;
     3e4:	28 ee       	ldi	r18, 0xE8	; 232
     3e6:	33 e0       	ldi	r19, 0x03	; 3
     3e8:	30 93 7b 05 	sts	0x057B, r19	; 0x80057b <TWI_timeout+0x1>
     3ec:	20 93 7a 05 	sts	0x057A, r18	; 0x80057a <TWI_timeout>

TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);										//Send START condition
     3f0:	84 ea       	ldi	r24, 0xA4	; 164
     3f2:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//флаг TWINT говорит о том,что текущее задание выполнено
     3f4:	06 b6       	in	r0, 0x36	; 54
     3f6:	07 fc       	sbrc	r0, 7
     3f8:	08 c0       	rjmp	.+16     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     3fa:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <TWI_timeout>
     3fe:	30 91 7b 05 	lds	r19, 0x057B	; 0x80057b <TWI_timeout+0x1>
     402:	23 2b       	or	r18, r19
     404:	b9 f7       	brne	.-18     	; 0x3f4 <twi_read+0x12>
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	34 c0       	rjmp	.+104    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел
     40a:	81 b1       	in	r24, 0x01	; 1
     40c:	88 7f       	andi	r24, 0xF8	; 248
     40e:	88 30       	cpi	r24, 0x08	; 8
     410:	11 f0       	breq	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	2e c0       	rjmp	.+92     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>

TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
     416:	91 60       	ori	r25, 0x01	; 1
     418:	93 b9       	out	0x03, r25	; 3
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
     41a:	84 e8       	ldi	r24, 0x84	; 132
     41c:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
     41e:	06 b6       	in	r0, 0x36	; 54
     420:	07 fc       	sbrc	r0, 7
     422:	07 c0       	rjmp	.+14     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     424:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <TWI_timeout>
     428:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <TWI_timeout+0x1>
     42c:	89 2b       	or	r24, r25
     42e:	b9 f7       	brne	.-18     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     430:	ea cf       	rjmp	.-44     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     432:	91 b1       	in	r25, 0x01	; 1
     434:	98 7f       	andi	r25, 0xF8	; 248
     436:	90 34       	cpi	r25, 0x40	; 64
     438:	31 f4       	brne	.+12     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     43a:	20 e0       	ldi	r18, 0x00	; 0

for(i=0;i<len-1;i++)												//данные пошли
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	41 50       	subi	r20, 0x01	; 1
     440:	51 09       	sbc	r21, r1
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
     442:	e4 ec       	ldi	r30, 0xC4	; 196
     444:	08 c0       	rjmp	.+16     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел

TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	14 c0       	rjmp	.+40     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
for(i=0;i<len-1;i++)												//данные пошли
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
	*(data+i)=TWDR;
     44a:	33 b1       	in	r19, 0x03	; 3
     44c:	db 01       	movw	r26, r22
     44e:	a8 0f       	add	r26, r24
     450:	b9 1f       	adc	r27, r25
     452:	3c 93       	st	X, r19
TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел

for(i=0;i<len-1;i++)												//данные пошли
     454:	2f 5f       	subi	r18, 0xFF	; 255
     456:	82 2f       	mov	r24, r18
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	84 17       	cp	r24, r20
     45c:	95 07       	cpc	r25, r21
     45e:	9c f4       	brge	.+38     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
     460:	e6 bf       	out	0x36, r30	; 54
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
     462:	06 b6       	in	r0, 0x36	; 54
     464:	07 fe       	sbrs	r0, 7
     466:	08 c0       	rjmp	.+16     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
     468:	31 b1       	in	r19, 0x01	; 1
     46a:	38 7f       	andi	r19, 0xF8	; 248
     46c:	30 35       	cpi	r19, 0x50	; 80
     46e:	69 f3       	breq	.-38     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     470:	84 e0       	ldi	r24, 0x04	; 4
     472:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <TWI_ERR>
     476:	1c c0       	rjmp	.+56     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел

for(i=0;i<len-1;i++)												//данные пошли
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
     478:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <TWI_timeout>
     47c:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <TWI_timeout+0x1>
     480:	ab 2b       	or	r26, r27
     482:	79 f7       	brne	.-34     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     484:	c0 cf       	rjmp	.-128    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
	*(data+i)=TWDR;
}
TWCR = (1<<TWINT) | (1<<TWEN);													//запускаем прием последнего байта без подтверждения
     486:	24 e8       	ldi	r18, 0x84	; 132
     488:	26 bf       	out	0x36, r18	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}		//ждем пока прилетит
     48a:	06 b6       	in	r0, 0x36	; 54
     48c:	07 fc       	sbrc	r0, 7
     48e:	07 c0       	rjmp	.+14     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     490:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <TWI_timeout>
     494:	30 91 7b 05 	lds	r19, 0x057B	; 0x80057b <TWI_timeout+0x1>
     498:	23 2b       	or	r18, r19
     49a:	b9 f7       	brne	.-18     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     49c:	b4 cf       	rjmp	.-152    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
if ((TWSR & 0xF8) != MR_DATA_NACK){TWI_ERR=TWIDATA;goto ERROR;}					//данные не прошли
     49e:	21 b1       	in	r18, 0x01	; 1
     4a0:	28 7f       	andi	r18, 0xF8	; 248
     4a2:	28 35       	cpi	r18, 0x58	; 88
     4a4:	29 f7       	brne	.-54     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
*(data+i)=TWDR;
     4a6:	23 b1       	in	r18, 0x03	; 3
     4a8:	fb 01       	movw	r30, r22
     4aa:	e8 0f       	add	r30, r24
     4ac:	f9 1f       	adc	r31, r25
     4ae:	20 83       	st	Z, r18

ERROR:
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWEA);											//Transmit STOP condition
     4b0:	84 ed       	ldi	r24, 0xD4	; 212
     4b2:	86 bf       	out	0x36, r24	; 54
     4b4:	8f e8       	ldi	r24, 0x8F	; 143
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     4be:	00 00       	nop
#ifdef DEBUG
if(TWI_ERR){uart_puts("readErr");}
#endif

return TWI_ERR;	//возвращаем код ошибки
}
     4c0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <TWI_ERR>
     4c4:	08 95       	ret

000004c6 <rtc_set>:
signed char rtc_check(void);
static inline unsigned char bcd2dec(unsigned char n);
static inline unsigned char dec2bcd(unsigned char n);

signed char rtc_set(struct RTC *rtc)
{
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	2a 97       	sbiw	r28, 0x0a	; 10
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	fc 01       	movw	r30, r24
	unsigned char data[10];

	data[0]=0;									//начальный регистр
     4dc:	19 82       	std	Y+1, r1	; 0x01
	data[1]=(dec2bcd(rtc->seconds) & ~(1<<CH));	//секунды с запуском тактового
     4de:	85 81       	ldd	r24, Z+5	; 0x05
     4e0:	2a e0       	ldi	r18, 0x0A	; 10
     4e2:	62 2f       	mov	r22, r18
     4e4:	0e 94 77 1c 	call	0x38ee	; 0x38ee <__udivmodqi4>
     4e8:	39 2f       	mov	r19, r25
     4ea:	40 e1       	ldi	r20, 0x10	; 16
     4ec:	84 9f       	mul	r24, r20
     4ee:	c0 01       	movw	r24, r0
     4f0:	11 24       	eor	r1, r1
     4f2:	83 2b       	or	r24, r19
     4f4:	8f 77       	andi	r24, 0x7F	; 127
     4f6:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=dec2bcd(rtc->minutes);
     4f8:	84 81       	ldd	r24, Z+4	; 0x04
     4fa:	0e 94 77 1c 	call	0x38ee	; 0x38ee <__udivmodqi4>
     4fe:	39 2f       	mov	r19, r25
     500:	40 e1       	ldi	r20, 0x10	; 16
     502:	84 9f       	mul	r24, r20
     504:	c0 01       	movw	r24, r0
     506:	11 24       	eor	r1, r1
     508:	83 2b       	or	r24, r19
     50a:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=dec2bcd(rtc->hours);
     50c:	83 81       	ldd	r24, Z+3	; 0x03
     50e:	0e 94 77 1c 	call	0x38ee	; 0x38ee <__udivmodqi4>
     512:	39 2f       	mov	r19, r25
     514:	40 e1       	ldi	r20, 0x10	; 16
     516:	84 9f       	mul	r24, r20
     518:	c0 01       	movw	r24, r0
     51a:	11 24       	eor	r1, r1
     51c:	83 2b       	or	r24, r19
     51e:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=0;									//день недели
     520:	1d 82       	std	Y+5, r1	; 0x05
	data[5]=dec2bcd(rtc->day);
     522:	82 81       	ldd	r24, Z+2	; 0x02
     524:	0e 94 77 1c 	call	0x38ee	; 0x38ee <__udivmodqi4>
     528:	39 2f       	mov	r19, r25
     52a:	40 e1       	ldi	r20, 0x10	; 16
     52c:	84 9f       	mul	r24, r20
     52e:	c0 01       	movw	r24, r0
     530:	11 24       	eor	r1, r1
     532:	83 2b       	or	r24, r19
     534:	8e 83       	std	Y+6, r24	; 0x06
	data[6]=dec2bcd(rtc->month);
     536:	81 81       	ldd	r24, Z+1	; 0x01
     538:	0e 94 77 1c 	call	0x38ee	; 0x38ee <__udivmodqi4>
     53c:	39 2f       	mov	r19, r25
     53e:	40 e1       	ldi	r20, 0x10	; 16
     540:	84 9f       	mul	r24, r20
     542:	c0 01       	movw	r24, r0
     544:	11 24       	eor	r1, r1
     546:	83 2b       	or	r24, r19
     548:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=dec2bcd(rtc->year);
     54a:	80 81       	ld	r24, Z
     54c:	0e 94 77 1c 	call	0x38ee	; 0x38ee <__udivmodqi4>
     550:	29 2f       	mov	r18, r25
     552:	30 e1       	ldi	r19, 0x10	; 16
     554:	83 9f       	mul	r24, r19
     556:	c0 01       	movw	r24, r0
     558:	11 24       	eor	r1, r1
     55a:	82 2b       	or	r24, r18
     55c:	88 87       	std	Y+8, r24	; 0x08
	data[8]=0;									//управляющий регистр
     55e:	19 86       	std	Y+9, r1	; 0x09
	data[9]=STRT;								//первый регистр ОЗУ(часы работают)
     560:	8a ea       	ldi	r24, 0xAA	; 170
     562:	8a 87       	std	Y+10, r24	; 0x0a
	if(twi_write(DS1307ADDR,data,10) !=0) return -1;//посыл
     564:	4a e0       	ldi	r20, 0x0A	; 10
     566:	be 01       	movw	r22, r28
     568:	6f 5f       	subi	r22, 0xFF	; 255
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	80 ed       	ldi	r24, 0xD0	; 208
     56e:	0e 94 9c 01 	call	0x338	; 0x338 <twi_write>
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	81 11       	cpse	r24, r1
     576:	01 c0       	rjmp	.+2      	; 0x57a <rtc_set+0xb4>
     578:	90 e0       	ldi	r25, 0x00	; 0

	return 0;
}
     57a:	89 2f       	mov	r24, r25
     57c:	81 95       	neg	r24
     57e:	2a 96       	adiw	r28, 0x0a	; 10
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <rtc_get>:

signed char rtc_get(struct RTC *rtc)
{
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	28 97       	sbiw	r28, 0x08	; 8
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	8c 01       	movw	r16, r24
	unsigned char data[7]={0},startreg=0;
     5ae:	ce 01       	movw	r24, r28
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	7c 01       	movw	r14, r24
     5b4:	87 e0       	ldi	r24, 0x07	; 7
     5b6:	f7 01       	movw	r30, r14
     5b8:	11 92       	st	Z+, r1
     5ba:	8a 95       	dec	r24
     5bc:	e9 f7       	brne	.-6      	; 0x5b8 <rtc_get+0x28>
     5be:	18 86       	std	Y+8, r1	; 0x08

	twi_write(DS1307ADDR,&startreg,1);							//посыл начальнОго регистра
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	be 01       	movw	r22, r28
     5c4:	68 5f       	subi	r22, 0xF8	; 248
     5c6:	7f 4f       	sbci	r23, 0xFF	; 255
     5c8:	80 ed       	ldi	r24, 0xD0	; 208
     5ca:	0e 94 9c 01 	call	0x338	; 0x338 <twi_write>
	if(twi_read(DS1307ADDR,data,7) !=0)return -1;	//читаем
     5ce:	47 e0       	ldi	r20, 0x07	; 7
     5d0:	b7 01       	movw	r22, r14
     5d2:	80 ed       	ldi	r24, 0xD0	; 208
     5d4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <twi_read>
     5d8:	81 11       	cpse	r24, r1
     5da:	44 c0       	rjmp	.+136    	; 0x664 <rtc_get+0xd4>

	rtc->seconds=bcd2dec(data[0]);
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	98 2f       	mov	r25, r24
     5e0:	92 95       	swap	r25
     5e2:	9f 70       	andi	r25, 0x0F	; 15
     5e4:	8f 70       	andi	r24, 0x0F	; 15
     5e6:	fa e0       	ldi	r31, 0x0A	; 10
     5e8:	9f 9f       	mul	r25, r31
     5ea:	80 0d       	add	r24, r0
     5ec:	11 24       	eor	r1, r1
     5ee:	f8 01       	movw	r30, r16
     5f0:	85 83       	std	Z+5, r24	; 0x05
	rtc->minutes=bcd2dec(data[1]);
     5f2:	8a 81       	ldd	r24, Y+2	; 0x02
     5f4:	98 2f       	mov	r25, r24
     5f6:	92 95       	swap	r25
     5f8:	9f 70       	andi	r25, 0x0F	; 15
     5fa:	8f 70       	andi	r24, 0x0F	; 15
     5fc:	fa e0       	ldi	r31, 0x0A	; 10
     5fe:	9f 9f       	mul	r25, r31
     600:	80 0d       	add	r24, r0
     602:	11 24       	eor	r1, r1
     604:	f8 01       	movw	r30, r16
     606:	84 83       	std	Z+4, r24	; 0x04
	rtc->hours  =bcd2dec(data[2]);
     608:	8b 81       	ldd	r24, Y+3	; 0x03
     60a:	98 2f       	mov	r25, r24
     60c:	92 95       	swap	r25
     60e:	9f 70       	andi	r25, 0x0F	; 15
     610:	8f 70       	andi	r24, 0x0F	; 15
     612:	fa e0       	ldi	r31, 0x0A	; 10
     614:	9f 9f       	mul	r25, r31
     616:	80 0d       	add	r24, r0
     618:	11 24       	eor	r1, r1
     61a:	f8 01       	movw	r30, r16
     61c:	83 83       	std	Z+3, r24	; 0x03
	rtc->day    =bcd2dec(data[4]);			//дни недели пропускаем
     61e:	8d 81       	ldd	r24, Y+5	; 0x05
     620:	98 2f       	mov	r25, r24
     622:	92 95       	swap	r25
     624:	9f 70       	andi	r25, 0x0F	; 15
     626:	8f 70       	andi	r24, 0x0F	; 15
     628:	fa e0       	ldi	r31, 0x0A	; 10
     62a:	9f 9f       	mul	r25, r31
     62c:	80 0d       	add	r24, r0
     62e:	11 24       	eor	r1, r1
     630:	f8 01       	movw	r30, r16
     632:	82 83       	std	Z+2, r24	; 0x02
	rtc->month  =bcd2dec(data[5]);
     634:	8e 81       	ldd	r24, Y+6	; 0x06
     636:	98 2f       	mov	r25, r24
     638:	92 95       	swap	r25
     63a:	9f 70       	andi	r25, 0x0F	; 15
     63c:	8f 70       	andi	r24, 0x0F	; 15
     63e:	fa e0       	ldi	r31, 0x0A	; 10
     640:	9f 9f       	mul	r25, r31
     642:	80 0d       	add	r24, r0
     644:	11 24       	eor	r1, r1
     646:	f8 01       	movw	r30, r16
     648:	81 83       	std	Z+1, r24	; 0x01
	rtc->year   =bcd2dec(data[6]);	//год без десятков
     64a:	8f 81       	ldd	r24, Y+7	; 0x07
     64c:	98 2f       	mov	r25, r24
     64e:	92 95       	swap	r25
     650:	9f 70       	andi	r25, 0x0F	; 15
     652:	8f 70       	andi	r24, 0x0F	; 15
     654:	fa e0       	ldi	r31, 0x0A	; 10
     656:	9f 9f       	mul	r25, r31
     658:	80 0d       	add	r24, r0
     65a:	11 24       	eor	r1, r1
     65c:	f8 01       	movw	r30, r16
     65e:	80 83       	st	Z, r24

	return 0;
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	01 c0       	rjmp	.+2      	; 0x666 <rtc_get+0xd6>
signed char rtc_get(struct RTC *rtc)
{
	unsigned char data[7]={0},startreg=0;

	twi_write(DS1307ADDR,&startreg,1);							//посыл начальнОго регистра
	if(twi_read(DS1307ADDR,data,7) !=0)return -1;	//читаем
     664:	8f ef       	ldi	r24, 0xFF	; 255
	rtc->day    =bcd2dec(data[4]);			//дни недели пропускаем
	rtc->month  =bcd2dec(data[5]);
	rtc->year   =bcd2dec(data[6]);	//год без десятков

	return 0;
}
     666:	28 96       	adiw	r28, 0x08	; 8
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	08 95       	ret

00000680 <rtc_check>:

signed char rtc_check(void)
{
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	00 d0       	rcall	.+0      	; 0x686 <rtc_check+0x6>
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
	unsigned char result=0,startreg=8;
     68a:	1a 82       	std	Y+2, r1	; 0x02
     68c:	88 e0       	ldi	r24, 0x08	; 8
     68e:	89 83       	std	Y+1, r24	; 0x01

	twi_write(DS1307ADDR,&startreg,1);								//посыл начальнОго регистра
     690:	41 e0       	ldi	r20, 0x01	; 1
     692:	be 01       	movw	r22, r28
     694:	6f 5f       	subi	r22, 0xFF	; 255
     696:	7f 4f       	sbci	r23, 0xFF	; 255
     698:	80 ed       	ldi	r24, 0xD0	; 208
     69a:	0e 94 9c 01 	call	0x338	; 0x338 <twi_write>
	if(twi_read(DS1307ADDR,&result,1) !=0)return -1;	//читаем
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	be 01       	movw	r22, r28
     6a2:	6e 5f       	subi	r22, 0xFE	; 254
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	80 ed       	ldi	r24, 0xD0	; 208
     6a8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <twi_read>
     6ac:	81 11       	cpse	r24, r1
     6ae:	07 c0       	rjmp	.+14     	; 0x6be <rtc_check+0x3e>

	if(result==STRT) return 0;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	9a 81       	ldd	r25, Y+2	; 0x02
     6b4:	9a 3a       	cpi	r25, 0xAA	; 170
     6b6:	09 f4       	brne	.+2      	; 0x6ba <rtc_check+0x3a>
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	81 95       	neg	r24
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <rtc_check+0x40>
signed char rtc_check(void)
{
	unsigned char result=0,startreg=8;

	twi_write(DS1307ADDR,&startreg,1);								//посыл начальнОго регистра
	if(twi_read(DS1307ADDR,&result,1) !=0)return -1;	//читаем
     6be:	8f ef       	ldi	r24, 0xFF	; 255

	if(result==STRT) return 0;
	return -1;
}
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <LCD_sendCmd>:
	_delay_ms(1);
}

void LCD_sendCmd(unsigned char cmd)	//Sends Command to LCD
{
     6ca:	cf 92       	push	r12
     6cc:	df 92       	push	r13
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	c8 2f       	mov	r28, r24
	//старшие полбайта команды
	LDP |= ((cmd>>7 & 0x01)<<LCD_DB7) | ((cmd>>6 & 0x01)<<LCD_DB6) | ((cmd>>5 & 0x01)<<LCD_DB5) | ((cmd>>4 & 0x01)<<LCD_DB4);
     6da:	88 b3       	in	r24, 0x18	; 24
     6dc:	c6 fb       	bst	r28, 6
     6de:	66 27       	eor	r22, r22
     6e0:	60 f9       	bld	r22, 0
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	66 0f       	add	r22, r22
     6e6:	77 1f       	adc	r23, r23
     6e8:	9c 2f       	mov	r25, r28
     6ea:	99 1f       	adc	r25, r25
     6ec:	99 27       	eor	r25, r25
     6ee:	99 1f       	adc	r25, r25
     6f0:	89 2b       	or	r24, r25
     6f2:	68 2b       	or	r22, r24
     6f4:	c5 fb       	bst	r28, 5
     6f6:	44 27       	eor	r20, r20
     6f8:	40 f9       	bld	r20, 0
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	44 0f       	add	r20, r20
     6fe:	55 1f       	adc	r21, r21
     700:	44 0f       	add	r20, r20
     702:	55 1f       	adc	r21, r21
     704:	46 2b       	or	r20, r22
     706:	c4 fb       	bst	r28, 4
     708:	22 27       	eor	r18, r18
     70a:	20 f9       	bld	r18, 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	53 e0       	ldi	r21, 0x03	; 3
     710:	22 0f       	add	r18, r18
     712:	33 1f       	adc	r19, r19
     714:	5a 95       	dec	r21
     716:	e1 f7       	brne	.-8      	; 0x710 <LCD_sendCmd+0x46>
     718:	24 2b       	or	r18, r20
     71a:	28 bb       	out	0x18, r18	; 24
	LCD_strob();
     71c:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_strob>
	//младшие полбайта команды
	CLRLDP;
     720:	88 b3       	in	r24, 0x18	; 24
     722:	80 7f       	andi	r24, 0xF0	; 240
     724:	88 bb       	out	0x18, r24	; 24
	LDP = ((cmd>>3 & 0x01)<<LCD_DB7) | ((cmd>>2 & 0x01)<<LCD_DB6) | ((cmd>>1 & 0x01)<<LCD_DB5) | ((cmd>>0 & 0x01)<<LCD_DB4);
     726:	c3 fb       	bst	r28, 3
     728:	88 27       	eor	r24, r24
     72a:	80 f9       	bld	r24, 0
     72c:	c0 fb       	bst	r28, 0
     72e:	cc 24       	eor	r12, r12
     730:	c0 f8       	bld	r12, 0
     732:	d1 2c       	mov	r13, r1
     734:	63 e0       	ldi	r22, 0x03	; 3
     736:	cc 0c       	add	r12, r12
     738:	dd 1c       	adc	r13, r13
     73a:	6a 95       	dec	r22
     73c:	e1 f7       	brne	.-8      	; 0x736 <LCD_sendCmd+0x6c>
     73e:	c8 2a       	or	r12, r24
     740:	c2 fb       	bst	r28, 2
     742:	ee 24       	eor	r14, r14
     744:	e0 f8       	bld	r14, 0
     746:	f1 2c       	mov	r15, r1
     748:	ee 0c       	add	r14, r14
     74a:	ff 1c       	adc	r15, r15
     74c:	ec 28       	or	r14, r12
     74e:	c1 fb       	bst	r28, 1
     750:	00 27       	eor	r16, r16
     752:	00 f9       	bld	r16, 0
     754:	10 e0       	ldi	r17, 0x00	; 0
     756:	00 0f       	add	r16, r16
     758:	11 1f       	adc	r17, r17
     75a:	00 0f       	add	r16, r16
     75c:	11 1f       	adc	r17, r17
     75e:	0e 29       	or	r16, r14
     760:	08 bb       	out	0x18, r16	; 24
	LCD_strob();
     762:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_strob>
	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины
     766:	85 b3       	in	r24, 0x15	; 21
     768:	83 7e       	andi	r24, 0xE3	; 227
     76a:	85 bb       	out	0x15, r24	; 21
     76c:	88 b3       	in	r24, 0x18	; 24
     76e:	80 7f       	andi	r24, 0xF0	; 240
     770:	88 bb       	out	0x18, r24	; 24
}
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	08 95       	ret

00000782 <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     782:	2f ef       	ldi	r18, 0xFF	; 255
     784:	89 ef       	ldi	r24, 0xF9	; 249
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	80 40       	sbci	r24, 0x00	; 0
     78c:	90 40       	sbci	r25, 0x00	; 0
     78e:	e1 f7       	brne	.-8      	; 0x788 <LCD_init+0x6>
     790:	00 c0       	rjmp	.+0      	; 0x792 <LCD_init+0x10>
     792:	00 00       	nop

void LCD_init(void)//Initializes LCD
{
	//инициализация портов
	_delay_ms(20);								//Wait for more than 15 ms after VCC rises to 4.5 V
	CLRLDP; 								//пины порта данных =0
     794:	88 b3       	in	r24, 0x18	; 24
     796:	80 7f       	andi	r24, 0xF0	; 240
     798:	88 bb       	out	0x18, r24	; 24
	LDDR |= (1<<LCD_DB7) | (1<<LCD_DB6) | (1<<LCD_DB5) | (1<<LCD_DB4);	//пины порта данных =выходы
     79a:	87 b3       	in	r24, 0x17	; 23
     79c:	8f 60       	ori	r24, 0x0F	; 15
     79e:	87 bb       	out	0x17, r24	; 23
	CLRLCP;									//пины порта управляющих сигналов =0
     7a0:	85 b3       	in	r24, 0x15	; 21
     7a2:	83 7e       	andi	r24, 0xE3	; 227
     7a4:	85 bb       	out	0x15, r24	; 21
	LCDR |= (1<<LCD_E) | (1<<LCD_RW) | (1<<LCD_RS);				//пины порта управляющих сигналов =выходы
     7a6:	84 b3       	in	r24, 0x14	; 20
     7a8:	8c 61       	ori	r24, 0x1C	; 28
     7aa:	84 bb       	out	0x14, r24	; 20

//	LDP |= convert(0b00110000);		//1
//	CLRLDP;								//обнулили пины DB
	LDP |= (1<<LCD_DB4) | (1<<LCD_DB5);	//step1
     7ac:	88 b3       	in	r24, 0x18	; 24
     7ae:	8c 60       	ori	r24, 0x0C	; 12
     7b0:	88 bb       	out	0x18, r24	; 24
	LCD_strob();
     7b2:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_strob>
     7b6:	8f e1       	ldi	r24, 0x1F	; 31
     7b8:	9e e4       	ldi	r25, 0x4E	; 78
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <LCD_init+0x38>
     7be:	00 c0       	rjmp	.+0      	; 0x7c0 <LCD_init+0x3e>
     7c0:	00 00       	nop
	_delay_ms(5);						//Wait for more than 4.1 m
	LCD_strob();						//step2
     7c2:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_strob>
     7c6:	8f e1       	ldi	r24, 0x1F	; 31
     7c8:	9e e4       	ldi	r25, 0x4E	; 78
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <LCD_init+0x48>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <LCD_init+0x4e>
     7d0:	00 00       	nop
	_delay_ms(5);
	LCD_strob();						//step3
     7d2:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_strob>
	LDP &= ~(1<<LCD_DB4);				//step4 обнулили DB4
     7d6:	c3 98       	cbi	0x18, 3	; 24
	LCD_strob();
     7d8:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_strob>
     7dc:	8f e3       	ldi	r24, 0x3F	; 63
     7de:	9f e1       	ldi	r25, 0x1F	; 31
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <LCD_init+0x5e>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <LCD_init+0x64>
     7e6:	00 00       	nop
	_delay_ms(2);
	LCD_sendCmd(0b00101000);	//4х разрядный режим(4);страница знакогенератора(1)
     7e8:	88 e2       	ldi	r24, 0x28	; 40
     7ea:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_sendCmd>
   	LCD_sendCmd(0b00001000);	//дисплей откл(2);курсор выкл(1);мигание курсора выкл(0)
     7ee:	88 e0       	ldi	r24, 0x08	; 8
     7f0:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_sendCmd>
   	LCD_sendCmd(0b00000001);	//очистка дисплея
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_sendCmd>
   	LCD_sendCmd(0b00000110);	//сдвиг курсора вправо(1)
     7fa:	86 e0       	ldi	r24, 0x06	; 6
     7fc:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_sendCmd>

   	CLRLDP; CLRLCP;
     800:	88 b3       	in	r24, 0x18	; 24
     802:	80 7f       	andi	r24, 0xF0	; 240
     804:	88 bb       	out	0x18, r24	; 24
     806:	85 b3       	in	r24, 0x15	; 21
     808:	83 7e       	andi	r24, 0xE3	; 227
     80a:	85 bb       	out	0x15, r24	; 21
     80c:	08 95       	ret

0000080e <LCD_cursorOn>:
}

void LCD_cursorOn(void) //displays LCD cursor
{
	LCD_sendCmd(0x0E);
     80e:	8e e0       	ldi	r24, 0x0E	; 14
     810:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <LCD_sendCmd>

00000814 <LCD_cursorBlink>:
}

void LCD_cursorBlink(void)	//displays LCD blinking cursor
{
	LCD_sendCmd(0x0F);
     814:	8f e0       	ldi	r24, 0x0F	; 15
     816:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <LCD_sendCmd>

0000081a <LCD_visible>:
	LCD_sendCmd(0x0C);
}

void LCD_visible(void)		//Shows LCD
{
	LCD_sendCmd(0x0C);
     81a:	8c e0       	ldi	r24, 0x0C	; 12
     81c:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <LCD_sendCmd>

00000820 <LCD_cursorOff>:
     820:	0c 94 0d 04 	jmp	0x81a	; 0x81a <LCD_visible>

00000824 <LCD_clr>:
}

void LCD_clr(void)				//Clears LCD
{
	LCD_sendCmd(0x01);x=0;y=0;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_sendCmd>
     82a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <x>
     82e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <y>
     832:	8f e1       	ldi	r24, 0x1F	; 31
     834:	9e e4       	ldi	r25, 0x4E	; 78
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <LCD_clr+0x12>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <LCD_clr+0x18>
     83c:	00 00       	nop
     83e:	08 95       	ret

00000840 <LCD_gotoXY>:
	_delay_ms(5);
}

void LCD_gotoXY(char cx, char cy)	//Cursor to X Y position
{
	x=cx;y=cy;
     840:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <x>
     844:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <y>
	// remap lines into proper order
	switch(y)
     848:	61 30       	cpi	r22, 0x01	; 1
     84a:	39 f0       	breq	.+14     	; 0x85a <LCD_gotoXY+0x1a>
     84c:	48 f0       	brcs	.+18     	; 0x860 <__stack+0x1>
     84e:	62 30       	cpi	r22, 0x02	; 2
     850:	31 f0       	breq	.+12     	; 0x85e <LCD_gotoXY+0x1e>
     852:	63 30       	cpi	r22, 0x03	; 3
     854:	29 f4       	brne	.+10     	; 0x860 <__stack+0x1>
	{
	case 0: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
	case 1: LCD_sendCmd(0x80 | (LCD_LINE1_DDRAMADDR+x)); break;
	case 2: LCD_sendCmd(0x80 | (LCD_LINE2_DDRAMADDR+x)); break;
	case 3: LCD_sendCmd(0x80 | (LCD_LINE3_DDRAMADDR+x)); break;
     856:	8c 5a       	subi	r24, 0xAC	; 172
     858:	03 c0       	rjmp	.+6      	; 0x860 <__stack+0x1>
	x=cx;y=cy;
	// remap lines into proper order
	switch(y)
	{
	case 0: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
	case 1: LCD_sendCmd(0x80 | (LCD_LINE1_DDRAMADDR+x)); break;
     85a:	80 5c       	subi	r24, 0xC0	; 192
     85c:	01 c0       	rjmp	.+2      	; 0x860 <__stack+0x1>
	case 2: LCD_sendCmd(0x80 | (LCD_LINE2_DDRAMADDR+x)); break;
     85e:	8c 5e       	subi	r24, 0xEC	; 236
	case 3: LCD_sendCmd(0x80 | (LCD_LINE3_DDRAMADDR+x)); break;
	default: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
     860:	80 68       	ori	r24, 0x80	; 128
     862:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <LCD_sendCmd>

00000866 <LCD_putchar>:
	}

}

void LCD_putchar(char ch)
{
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	c8 2f       	mov	r28, r24
	if ( ch >= 0xC0 ) ch = (char)pgm_read_byte(&lcd_codepage[ch - 0xC0]); //преобразование СР1251 в коды LCD
     878:	80 3c       	cpi	r24, 0xC0	; 192
     87a:	28 f0       	brcs	.+10     	; 0x886 <LCD_putchar+0x20>
     87c:	d0 e0       	ldi	r29, 0x00	; 0
     87e:	fe 01       	movw	r30, r28
     880:	ea 57       	subi	r30, 0x7A	; 122
     882:	fe 4f       	sbci	r31, 0xFE	; 254
     884:	c4 91       	lpm	r28, Z

	//4 bit part
	LCP |= 1<<LCD_RS; 	//установили RS
     886:	aa 9a       	sbi	0x15, 2	; 21

	//старшие полбайта символа
	LDP |= ((ch>>7 & 0x01)<<LCD_DB7) | ((ch>>6 & 0x01)<<LCD_DB6) | ((ch>>5 & 0x01)<<LCD_DB5) | ((ch>>4 & 0x01)<<LCD_DB4);
     888:	88 b3       	in	r24, 0x18	; 24
     88a:	c6 fb       	bst	r28, 6
     88c:	66 27       	eor	r22, r22
     88e:	60 f9       	bld	r22, 0
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	66 0f       	add	r22, r22
     894:	77 1f       	adc	r23, r23
     896:	9c 2f       	mov	r25, r28
     898:	99 1f       	adc	r25, r25
     89a:	99 27       	eor	r25, r25
     89c:	99 1f       	adc	r25, r25
     89e:	89 2b       	or	r24, r25
     8a0:	68 2b       	or	r22, r24
     8a2:	c5 fb       	bst	r28, 5
     8a4:	44 27       	eor	r20, r20
     8a6:	40 f9       	bld	r20, 0
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	44 0f       	add	r20, r20
     8ac:	55 1f       	adc	r21, r21
     8ae:	44 0f       	add	r20, r20
     8b0:	55 1f       	adc	r21, r21
     8b2:	46 2b       	or	r20, r22
     8b4:	c4 fb       	bst	r28, 4
     8b6:	22 27       	eor	r18, r18
     8b8:	20 f9       	bld	r18, 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	53 e0       	ldi	r21, 0x03	; 3
     8be:	22 0f       	add	r18, r18
     8c0:	33 1f       	adc	r19, r19
     8c2:	5a 95       	dec	r21
     8c4:	e1 f7       	brne	.-8      	; 0x8be <LCD_putchar+0x58>
     8c6:	24 2b       	or	r18, r20
     8c8:	28 bb       	out	0x18, r18	; 24
	LCD_strob();
     8ca:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_strob>

	//младшие полбайта символа
	CLRLDP;
     8ce:	88 b3       	in	r24, 0x18	; 24
     8d0:	80 7f       	andi	r24, 0xF0	; 240
     8d2:	88 bb       	out	0x18, r24	; 24
	LDP |= ((ch>>3 & 0x01)<<LCD_DB7) | ((ch>>2 & 0x01)<<LCD_DB6) | ((ch>>1 & 0x01)<<LCD_DB5) | ((ch>>0 & 0x01)<<LCD_DB4);
     8d4:	88 b3       	in	r24, 0x18	; 24
     8d6:	c3 fb       	bst	r28, 3
     8d8:	99 27       	eor	r25, r25
     8da:	90 f9       	bld	r25, 0
     8dc:	89 2b       	or	r24, r25
     8de:	c0 fb       	bst	r28, 0
     8e0:	cc 24       	eor	r12, r12
     8e2:	c0 f8       	bld	r12, 0
     8e4:	d1 2c       	mov	r13, r1
     8e6:	63 e0       	ldi	r22, 0x03	; 3
     8e8:	cc 0c       	add	r12, r12
     8ea:	dd 1c       	adc	r13, r13
     8ec:	6a 95       	dec	r22
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <LCD_putchar+0x82>
     8f0:	c8 2a       	or	r12, r24
     8f2:	c2 fb       	bst	r28, 2
     8f4:	ee 24       	eor	r14, r14
     8f6:	e0 f8       	bld	r14, 0
     8f8:	f1 2c       	mov	r15, r1
     8fa:	ee 0c       	add	r14, r14
     8fc:	ff 1c       	adc	r15, r15
     8fe:	ec 28       	or	r14, r12
     900:	c1 fb       	bst	r28, 1
     902:	00 27       	eor	r16, r16
     904:	00 f9       	bld	r16, 0
     906:	10 e0       	ldi	r17, 0x00	; 0
     908:	00 0f       	add	r16, r16
     90a:	11 1f       	adc	r17, r17
     90c:	00 0f       	add	r16, r16
     90e:	11 1f       	adc	r17, r17
     910:	0e 29       	or	r16, r14
     912:	08 bb       	out	0x18, r16	; 24
	LCD_strob();
     914:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_strob>

	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины
     918:	85 b3       	in	r24, 0x15	; 21
     91a:	83 7e       	andi	r24, 0xE3	; 227
     91c:	85 bb       	out	0x15, r24	; 21
     91e:	88 b3       	in	r24, 0x18	; 24
     920:	80 7f       	andi	r24, 0xF0	; 240
     922:	88 bb       	out	0x18, r24	; 24

	if(++x >= LCD_MAXX)
     924:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <x>
     928:	8f 5f       	subi	r24, 0xFF	; 255
     92a:	84 31       	cpi	r24, 0x14	; 20
     92c:	58 f4       	brcc	.+22     	; 0x944 <LCD_putchar+0xde>
     92e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <x>
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
		}
	}
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	cf 90       	pop	r12
     942:	08 95       	ret

	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины

	if(++x >= LCD_MAXX)
	{
		x=0;y++;
     944:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <x>
     948:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <y>
     94c:	8f 5f       	subi	r24, 0xFF	; 255
     94e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <y>
		switch (y)
     952:	81 30       	cpi	r24, 0x01	; 1
     954:	39 f0       	breq	.+14     	; 0x964 <LCD_putchar+0xfe>
     956:	50 f0       	brcs	.+20     	; 0x96c <LCD_putchar+0x106>
     958:	82 30       	cpi	r24, 0x02	; 2
     95a:	31 f0       	breq	.+12     	; 0x968 <LCD_putchar+0x102>
     95c:	83 30       	cpi	r24, 0x03	; 3
     95e:	31 f4       	brne	.+12     	; 0x96c <LCD_putchar+0x106>
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
     960:	84 ed       	ldi	r24, 0xD4	; 212
     962:	05 c0       	rjmp	.+10     	; 0x96e <LCD_putchar+0x108>
	{
		x=0;y++;
		switch (y)
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
     964:	80 ec       	ldi	r24, 0xC0	; 192
     966:	03 c0       	rjmp	.+6      	; 0x96e <LCD_putchar+0x108>
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
     968:	84 e9       	ldi	r24, 0x94	; 148
     96a:	01 c0       	rjmp	.+2      	; 0x96e <LCD_putchar+0x108>
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
     96c:	80 e8       	ldi	r24, 0x80	; 128
		}
	}
}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
     97e:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <LCD_sendCmd>

00000982 <LCD_puts>:
		}
	}
}

void LCD_puts(char* data, char nBytes)	//Outputs string to LCD с автоматической перекодировкой с СР1251
{
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	d6 2f       	mov	r29, r22
     98c:	8c 01       	movw	r16, r24
	// print data
	for(unsigned char i=0; i<nBytes; i++)
     98e:	c0 e0       	ldi	r28, 0x00	; 0
     990:	cd 17       	cp	r28, r29
     992:	81 f0       	breq	.+32     	; 0x9b4 <LCD_puts+0x32>
	{
		if(data[i]==0)								//если дошли до конца строки
     994:	f8 01       	movw	r30, r16
     996:	81 91       	ld	r24, Z+
     998:	8f 01       	movw	r16, r30
     99a:	81 11       	cpse	r24, r1
     99c:	07 c0       	rjmp	.+14     	; 0x9ac <LCD_puts+0x2a>
		{
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
     99e:	80 e2       	ldi	r24, 0x20	; 32
     9a0:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
     9a4:	cf 5f       	subi	r28, 0xFF	; 255
     9a6:	cd 17       	cp	r28, r29
     9a8:	d0 f3       	brcs	.-12     	; 0x99e <LCD_puts+0x1c>
     9aa:	04 c0       	rjmp	.+8      	; 0x9b4 <LCD_puts+0x32>
			return;
		}
		else LCD_putchar(data[i]);
     9ac:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
}

void LCD_puts(char* data, char nBytes)	//Outputs string to LCD с автоматической перекодировкой с СР1251
{
	// print data
	for(unsigned char i=0; i<nBytes; i++)
     9b0:	cf 5f       	subi	r28, 0xFF	; 255
     9b2:	ee cf       	rjmp	.-36     	; 0x990 <LCD_puts+0xe>
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
			return;
		}
		else LCD_putchar(data[i]);
	}
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <printIOStr>:
	LCD_gotoXY(x,y);
	LCD_puts(buffer,20);
}

static inline void printIOStr(volatile unsigned char *data)
{
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	6b 97       	sbiw	r28, 0x1b	; 27
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	7c 01       	movw	r14, r24
	char buffer[20];
	char tmpStr[7];
	unsigned char i;

	//строка 2 "ВОД:  ДВХ:"
	LCD_gotoXY(0,2);
     9e0:	62 e0       	ldi	r22, 0x02	; 2
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
	strcpy_P(buffer,VOD);strcat(buffer,":");										//ВОД:
     9e8:	67 e7       	ldi	r22, 0x77	; 119
     9ea:	71 e0       	ldi	r23, 0x01	; 1
     9ec:	ce 01       	movw	r24, r28
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <strcpy_P>
     9f4:	66 ef       	ldi	r22, 0xF6	; 246
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <strcat>
	if((*data & 0x0F) ==0) strcat_P(buffer,NET);									//"нет"
     a00:	f7 01       	movw	r30, r14
     a02:	80 81       	ld	r24, Z
     a04:	8f 70       	andi	r24, 0x0F	; 15
     a06:	39 f4       	brne	.+14     	; 0xa16 <printIOStr+0x58>
     a08:	67 eb       	ldi	r22, 0xB7	; 183
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	0e 94 cd 1c 	call	0x399a	; 0x399a <strcat_P>
     a14:	2d c0       	rjmp	.+90     	; 0xa70 <printIOStr+0xb2>
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
	else for(i=0;i<4;i++) if( chkBit(*data,i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//или номера
     a1a:	cc 24       	eor	r12, r12
     a1c:	c3 94       	inc	r12
     a1e:	d1 2c       	mov	r13, r1
     a20:	f7 01       	movw	r30, r14
     a22:	30 81       	ld	r19, Z
     a24:	a6 01       	movw	r20, r12
     a26:	08 2e       	mov	r0, r24
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <printIOStr+0x70>
     a2a:	44 0f       	add	r20, r20
     a2c:	55 1f       	adc	r21, r21
     a2e:	0a 94       	dec	r0
     a30:	e2 f7       	brpl	.-8      	; 0xa2a <printIOStr+0x6c>
     a32:	23 2f       	mov	r18, r19
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	24 23       	and	r18, r20
     a38:	35 23       	and	r19, r21
     a3a:	08 2e       	mov	r0, r24
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <printIOStr+0x84>
     a3e:	35 95       	asr	r19
     a40:	27 95       	ror	r18
     a42:	0a 94       	dec	r0
     a44:	e2 f7       	brpl	.-8      	; 0xa3e <printIOStr+0x80>
     a46:	8c 01       	movw	r16, r24
     a48:	0f 5f       	subi	r16, 0xFF	; 255
     a4a:	1f 4f       	sbci	r17, 0xFF	; 255
     a4c:	23 2b       	or	r18, r19
     a4e:	61 f0       	breq	.+24     	; 0xa68 <printIOStr+0xaa>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     a50:	4a e0       	ldi	r20, 0x0A	; 10
     a52:	be 01       	movw	r22, r28
     a54:	6b 5e       	subi	r22, 0xEB	; 235
     a56:	7f 4f       	sbci	r23, 0xFF	; 255
     a58:	c8 01       	movw	r24, r16
     a5a:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
     a5e:	bc 01       	movw	r22, r24
     a60:	ce 01       	movw	r24, r28
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <strcat>
     a68:	c8 01       	movw	r24, r16
     a6a:	04 30       	cpi	r16, 0x04	; 4
     a6c:	11 05       	cpc	r17, r1
     a6e:	c1 f6       	brne	.-80     	; 0xa20 <printIOStr+0x62>
	LCD_puts(buffer,20);
     a70:	64 e1       	ldi	r22, 0x14	; 20
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
	LCD_gotoXY(9,2);
     a7a:	62 e0       	ldi	r22, 0x02	; 2
     a7c:	89 e0       	ldi	r24, 0x09	; 9
     a7e:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
	strcpy_P(buffer,DVX);strcat(buffer,":");	//ДВХ:
     a82:	63 e7       	ldi	r22, 0x73	; 115
     a84:	71 e0       	ldi	r23, 0x01	; 1
     a86:	ce 01       	movw	r24, r28
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <strcpy_P>
     a8e:	66 ef       	ldi	r22, 0xF6	; 246
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	ce 01       	movw	r24, r28
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <strcat>
	if((*data & 0xF0) ==0) strcat_P(buffer,NET);	//"нет"
     a9a:	f7 01       	movw	r30, r14
     a9c:	80 81       	ld	r24, Z
     a9e:	80 7f       	andi	r24, 0xF0	; 240
     aa0:	39 f4       	brne	.+14     	; 0xab0 <printIOStr+0xf2>
     aa2:	67 eb       	ldi	r22, 0xB7	; 183
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	ce 01       	movw	r24, r28
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	0e 94 cd 1c 	call	0x399a	; 0x399a <strcat_P>
     aae:	2b c0       	rjmp	.+86     	; 0xb06 <printIOStr+0x148>
     ab0:	04 e0       	ldi	r16, 0x04	; 4
     ab2:	10 e0       	ldi	r17, 0x00	; 0
	else for(i=4;i<8;i++) if( chkBit(*data,i) ) strcat(buffer,itoa(i-4+1,tmpStr,10));	//рисуем номера неисправных
     ab4:	cc 24       	eor	r12, r12
     ab6:	c3 94       	inc	r12
     ab8:	d1 2c       	mov	r13, r1
     aba:	f7 01       	movw	r30, r14
     abc:	80 81       	ld	r24, Z
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	96 01       	movw	r18, r12
     ac2:	00 2e       	mov	r0, r16
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <printIOStr+0x10c>
     ac6:	22 0f       	add	r18, r18
     ac8:	33 1f       	adc	r19, r19
     aca:	0a 94       	dec	r0
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <printIOStr+0x108>
     ace:	82 23       	and	r24, r18
     ad0:	93 23       	and	r25, r19
     ad2:	00 2e       	mov	r0, r16
     ad4:	02 c0       	rjmp	.+4      	; 0xada <printIOStr+0x11c>
     ad6:	95 95       	asr	r25
     ad8:	87 95       	ror	r24
     ada:	0a 94       	dec	r0
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <printIOStr+0x118>
     ade:	89 2b       	or	r24, r25
     ae0:	69 f0       	breq	.+26     	; 0xafc <printIOStr+0x13e>
     ae2:	4a e0       	ldi	r20, 0x0A	; 10
     ae4:	be 01       	movw	r22, r28
     ae6:	6b 5e       	subi	r22, 0xEB	; 235
     ae8:	7f 4f       	sbci	r23, 0xFF	; 255
     aea:	c8 01       	movw	r24, r16
     aec:	03 97       	sbiw	r24, 0x03	; 3
     aee:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
     af2:	bc 01       	movw	r22, r24
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <strcat>
     afc:	0f 5f       	subi	r16, 0xFF	; 255
     afe:	1f 4f       	sbci	r17, 0xFF	; 255
     b00:	08 30       	cpi	r16, 0x08	; 8
     b02:	11 05       	cpc	r17, r1
     b04:	d1 f6       	brne	.-76     	; 0xaba <printIOStr+0xfc>
	LCD_puts(buffer,20);
     b06:	64 e1       	ldi	r22, 0x14	; 20
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
}
     b10:	6b 96       	adiw	r28, 0x1b	; 27
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	df 90       	pop	r13
     b2a:	cf 90       	pop	r12
     b2c:	08 95       	ret

00000b2e <printMTZStr>:

static inline void printMTZStr(unsigned int MTZon,unsigned int MTZoff)
{
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	6b 97       	sbiw	r28, 0x1b	; 27
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	7c 01       	movw	r14, r24
     b4c:	8b 01       	movw	r16, r22
	char buffer[20];
	char tmpStr[7];
	//строка 2 "вкл.МТЗ"
	LCD_gotoXY(0,2);
     b4e:	62 e0       	ldi	r22, 0x02	; 2
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
	strcpy_P(buffer,VKL_MTZ);
     b56:	62 e8       	ldi	r22, 0x82	; 130
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <strcpy_P>
	if(MTZon==0xFFFF)strcat_P(buffer,NET);
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	e8 16       	cp	r14, r24
     b66:	f8 06       	cpc	r15, r24
     b68:	19 f4       	brne	.+6      	; 0xb70 <printMTZStr+0x42>
     b6a:	67 eb       	ldi	r22, 0xB7	; 183
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	0e c0       	rjmp	.+28     	; 0xb8c <printMTZStr+0x5e>
     b70:	4a e0       	ldi	r20, 0x0A	; 10
     b72:	be 01       	movw	r22, r28
     b74:	6b 5e       	subi	r22, 0xEB	; 235
     b76:	7f 4f       	sbci	r23, 0xFF	; 255
     b78:	c7 01       	movw	r24, r14
     b7a:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
	else {strcat(buffer,itoa(MTZon,tmpStr,10));strcat_P(buffer,MS);}
     b7e:	bc 01       	movw	r22, r24
     b80:	ce 01       	movw	r24, r28
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <strcat>
     b88:	65 e7       	ldi	r22, 0x75	; 117
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 cd 1c 	call	0x399a	; 0x399a <strcat_P>
	LCD_puts(buffer,20);
     b94:	64 e1       	ldi	r22, 0x14	; 20
     b96:	ce 01       	movw	r24, r28
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>

	//строка 3 "откл.МТЗ"
	LCD_gotoXY(0,3);
     b9e:	63 e0       	ldi	r22, 0x03	; 3
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
	strcpy_P(buffer,OTKL_MTZ);
     ba6:	68 e7       	ldi	r22, 0x78	; 120
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	ce 01       	movw	r24, r28
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <strcpy_P>
	if(MTZoff==0xFFFF)strcat_P(buffer,NET);
     bb2:	0f 3f       	cpi	r16, 0xFF	; 255
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	18 07       	cpc	r17, r24
     bb8:	19 f4       	brne	.+6      	; 0xbc0 <printMTZStr+0x92>
     bba:	67 eb       	ldi	r22, 0xB7	; 183
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	0e c0       	rjmp	.+28     	; 0xbdc <printMTZStr+0xae>
     bc0:	4a e0       	ldi	r20, 0x0A	; 10
     bc2:	be 01       	movw	r22, r28
     bc4:	6b 5e       	subi	r22, 0xEB	; 235
     bc6:	7f 4f       	sbci	r23, 0xFF	; 255
     bc8:	c8 01       	movw	r24, r16
     bca:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
	else{strcat(buffer,itoa(MTZoff,tmpStr,10));strcat_P(buffer,MS);}
     bce:	bc 01       	movw	r22, r24
     bd0:	ce 01       	movw	r24, r28
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <strcat>
     bd8:	65 e7       	ldi	r22, 0x75	; 117
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	0e 94 cd 1c 	call	0x399a	; 0x399a <strcat_P>
	LCD_puts(buffer,20);
     be4:	64 e1       	ldi	r22, 0x14	; 20
     be6:	ce 01       	movw	r24, r28
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>

}
     bee:	6b 96       	adiw	r28, 0x1b	; 27
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	08 95       	ret

00000c08 <printTimeStr.constprop.3>:
		}
	}
	return 0;
}

static inline void printTimeStr(volatile unsigned char *data, unsigned char x,unsigned char y)
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	64 97       	sbiw	r28, 0x14	; 20
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	fc 01       	movw	r30, r24
{
	char buffer[20];

	sprintf(buffer,"%02u.%02u.%02u  %02u:%02u:%02u",*data,*(data+1),*(data+2),*(data+3),*(data+4),*(data+5));
     c22:	55 81       	ldd	r21, Z+5	; 0x05
     c24:	44 81       	ldd	r20, Z+4	; 0x04
     c26:	33 81       	ldd	r19, Z+3	; 0x03
     c28:	22 81       	ldd	r18, Z+2	; 0x02
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	80 81       	ld	r24, Z
     c2e:	1f 92       	push	r1
     c30:	5f 93       	push	r21
     c32:	1f 92       	push	r1
     c34:	4f 93       	push	r20
     c36:	1f 92       	push	r1
     c38:	3f 93       	push	r19
     c3a:	1f 92       	push	r1
     c3c:	2f 93       	push	r18
     c3e:	1f 92       	push	r1
     c40:	9f 93       	push	r25
     c42:	1f 92       	push	r1
     c44:	8f 93       	push	r24
     c46:	88 ef       	ldi	r24, 0xF8	; 248
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	9f 93       	push	r25
     c4c:	8f 93       	push	r24
     c4e:	8e 01       	movw	r16, r28
     c50:	0f 5f       	subi	r16, 0xFF	; 255
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	1f 93       	push	r17
     c56:	0f 93       	push	r16
     c58:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <sprintf>
	LCD_gotoXY(x,y);
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
	LCD_puts(buffer,20);
     c64:	64 e1       	ldi	r22, 0x14	; 20
     c66:	c8 01       	movw	r24, r16
     c68:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
}
     c76:	64 96       	adiw	r28, 0x14	; 20
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	08 95       	ret

00000c8c <LCD_puts_P>:

void LCD_puts_P(const char *FlashLoc, char nBytes)
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	d6 2f       	mov	r29, r22

	for(unsigned char i=0; i<nBytes; i++)
     c96:	c0 e0       	ldi	r28, 0x00	; 0
     c98:	cd 17       	cp	r28, r29
     c9a:	a9 f0       	breq	.+42     	; 0xcc6 <LCD_puts_P+0x3a>
	{
		if(pgm_read_byte(&FlashLoc[i])==0)			//если дошли до конца строки
     c9c:	fc 01       	movw	r30, r24
     c9e:	24 91       	lpm	r18, Z
     ca0:	8c 01       	movw	r16, r24
     ca2:	0f 5f       	subi	r16, 0xFF	; 255
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255
     ca6:	21 11       	cpse	r18, r1
     ca8:	07 c0       	rjmp	.+14     	; 0xcb8 <LCD_puts_P+0x2c>
		{
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
     caa:	80 e2       	ldi	r24, 0x20	; 32
     cac:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
     cb0:	cf 5f       	subi	r28, 0xFF	; 255
     cb2:	cd 17       	cp	r28, r29
     cb4:	d0 f3       	brcs	.-12     	; 0xcaa <LCD_puts_P+0x1e>
     cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <LCD_puts_P+0x3a>
			return;
		}
		else LCD_putchar(pgm_read_byte(&FlashLoc[i]));
     cb8:	fc 01       	movw	r30, r24
     cba:	84 91       	lpm	r24, Z
     cbc:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
}

void LCD_puts_P(const char *FlashLoc, char nBytes)
{

	for(unsigned char i=0; i<nBytes; i++)
     cc0:	cf 5f       	subi	r28, 0xFF	; 255
     cc2:	c8 01       	movw	r24, r16
     cc4:	e9 cf       	rjmp	.-46     	; 0xc98 <LCD_puts_P+0xc>
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
			return;
		}
		else LCD_putchar(pgm_read_byte(&FlashLoc[i]));
	}
}
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	08 95       	ret

00000cd0 <printTOUT>:
	return tmpKey;
}

static inline void printTOUT(void)
{
	LCD_gotoXY(0,2);LCD_puts_P(NET_SVYAZI,20);
     cd0:	62 e0       	ldi	r22, 0x02	; 2
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
     cd8:	64 e1       	ldi	r22, 0x14	; 20
     cda:	8b eb       	ldi	r24, 0xBB	; 187
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <LCD_puts_P>

00000ce2 <printMenuHeader>:
static void dvx3(void)
{
	printOut(7);
}
static inline void printMenuHeader(PGM_P name)
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	ec 01       	movw	r28, r24
	//прорисовываем заголовок "NAME:"
	LCD_clr();
     ce8:	0e 94 12 04 	call	0x824	; 0x824 <LCD_clr>
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
     cec:	ce 01       	movw	r24, r28
     cee:	0e 94 df 1c 	call	0x39be	; 0x39be <__strlen_P>
	LCD_puts_P(name,strlen_P(name));
     cf2:	68 2f       	mov	r22, r24
     cf4:	ce 01       	movw	r24, r28
     cf6:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
	LCD_putchar(0x3A);
     cfa:	8a e3       	ldi	r24, 0x3A	; 58
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
static inline void printMenuHeader(PGM_P name)
{
	//прорисовываем заголовок "NAME:"
	LCD_clr();
	LCD_puts_P(name,strlen_P(name));
	LCD_putchar(0x3A);
     d00:	0c 94 33 04 	jmp	0x866	; 0x866 <LCD_putchar>

00000d04 <SPI_init>:
#define DD_MOSI DDB5
#define DD_SCK  DDB7
#define DD_CS DDB4

/* Set MOSI and SCK and CS output, all others input */
DDRB |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     d04:	87 b3       	in	r24, 0x17	; 23
     d06:	80 6b       	ori	r24, 0xB0	; 176
     d08:	87 bb       	out	0x17, r24	; 23
//все выходы pullup
PORTB |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     d0a:	88 b3       	in	r24, 0x18	; 24
     d0c:	80 6b       	ori	r24, 0xB0	; 176
     d0e:	88 bb       	out	0x18, r24	; 24
/* Enable SPI, Master, set clock rate fck/64 (250kHz) SCK в покое=hi, выборка по зад. фронту CPHA=1*/
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<CPOL)|(1<<CPHA);//
     d10:	8e e5       	ldi	r24, 0x5E	; 94
     d12:	8d b9       	out	0x0d, r24	; 13
     d14:	08 95       	ret

00000d16 <SPI_transmit>:

unsigned char SPI_transmit(char cData)
{

/* Start transmission */
SPDR = cData;
     d16:	8f b9       	out	0x0f, r24	; 15
SPI_timeout=S_TOUT;
     d18:	88 ee       	ldi	r24, 0xE8	; 232
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <SPI_timeout+0x1>
     d20:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <SPI_timeout>

/* Wait for transmission complete */
#warning НЕКОРРЕКТНАЯ ОТРАБОТКА ОШИБКИ (spi.h)

while(!(SPSR & (1<<SPIF))) if(SPI_timeout==0){CAN_ERR=SPI;return -1;}
     d24:	77 99       	sbic	0x0e, 7	; 14
     d26:	0b c0       	rjmp	.+22     	; 0xd3e <SPI_transmit+0x28>
     d28:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <SPI_timeout>
     d2c:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <SPI_timeout+0x1>
     d30:	89 2b       	or	r24, r25
     d32:	c1 f7       	brne	.-16     	; 0xd24 <SPI_transmit+0xe>
     d34:	86 e0       	ldi	r24, 0x06	; 6
     d36:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	08 95       	ret

return SPDR;
     d3e:	8f b1       	in	r24, 0x0f	; 15
}
     d40:	08 95       	ret

00000d42 <CAN_getStatus>:
}

static unsigned char CAN_getStatus(void)
{
unsigned char data;
clrBit(CSPINPORT,CSPIN);
     d42:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0xA0);
     d44:	80 ea       	ldi	r24, 0xA0	; 160
     d46:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
//SPI_transmit(0x00);
data=SPI_transmit(0x00);
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     d50:	c4 9a       	sbi	0x18, 4	; 24
return data;
}
     d52:	08 95       	ret

00000d54 <CAN_read>:
	setBit(CSPINPORT,CSPIN);
}
}

static unsigned char CAN_read(unsigned char numOfReg)
{
     d54:	cf 93       	push	r28
     d56:	c8 2f       	mov	r28, r24
unsigned char data;

clrBit(CSPINPORT,CSPIN);
     d58:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x03);  //команда чтения
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(numOfReg);
     d60:	8c 2f       	mov	r24, r28
     d62:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
data=SPI_transmit(0x00);
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     d6c:	c4 9a       	sbi	0x18, 4	; 24
return data;
}
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <CAN_bitModify>:
SPI_transmit(data);
setBit(CSPINPORT,CSPIN);
}

static void CAN_bitModify(unsigned char numOfReg, unsigned char MASK, unsigned char DATA)
{
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	18 2f       	mov	r17, r24
     d7a:	d6 2f       	mov	r29, r22
     d7c:	c4 2f       	mov	r28, r20
clrBit(CSPINPORT,CSPIN);
     d7e:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x05);//Команда модификации
     d80:	85 e0       	ldi	r24, 0x05	; 5
     d82:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(numOfReg);
     d86:	81 2f       	mov	r24, r17
     d88:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(MASK);
     d8c:	8d 2f       	mov	r24, r29
     d8e:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(DATA);
     d92:	8c 2f       	mov	r24, r28
     d94:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     d98:	c4 9a       	sbi	0x18, 4	; 24
}
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	08 95       	ret

00000da2 <CAN_write>:
setBit(CSPINPORT,CSPIN);
return data;
}

static void CAN_write(unsigned char numOfReg, unsigned char data)
{
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	d8 2f       	mov	r29, r24
     da8:	c6 2f       	mov	r28, r22
clrBit(CSPINPORT,CSPIN);
     daa:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);  //команда записи
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(numOfReg);
     db2:	8d 2f       	mov	r24, r29
     db4:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(data);
     db8:	8c 2f       	mov	r24, r28
     dba:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     dbe:	c4 9a       	sbi	0x18, 4	; 24
}
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <CANgetPosition>:

signed char CANgetPosition(void)
{
	signed char index;

	CAN_timeout=CAN_TOUT;
     dc6:	88 ee       	ldi	r24, 0xE8	; 232
     dc8:	93 e0       	ldi	r25, 0x03	; 3
     dca:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <CAN_timeout+0x1>
     dce:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <CAN_timeout>
	while(CANRXcounter==0)
     dd2:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <CANRXcounter>
     dd6:	81 11       	cpse	r24, r1
     dd8:	0b c0       	rjmp	.+22     	; 0xdf0 <CANgetPosition+0x2a>
	{
		if(CAN_timeout==0) {CAN_ERR=CANTOUT;return -1;};
     dda:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <CAN_timeout>
     dde:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <CAN_timeout+0x1>
     de2:	89 2b       	or	r24, r25
     de4:	b1 f7       	brne	.-20     	; 0xdd2 <CANgetPosition+0xc>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	08 95       	ret
	}
	asm ("cli");
     df0:	f8 94       	cli
	CANRXcounter--;
     df2:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <CANRXcounter>
     df6:	81 50       	subi	r24, 0x01	; 1
     df8:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <CANRXcounter>
	asm ("sei");
     dfc:	78 94       	sei
	index=CANRDindex;
     dfe:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <CANRDindex>
	if(++CANRDindex == CAN_RX_BUFFER_SIZE)CANRDindex=0;
     e02:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <CANRDindex>
     e06:	9f 5f       	subi	r25, 0xFF	; 255
     e08:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <CANRDindex>
     e0c:	9a 30       	cpi	r25, 0x0A	; 10
     e0e:	11 f4       	brne	.+4      	; 0xe14 <CANgetPosition+0x4e>
     e10:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <CANRDindex>
	return index;
}
     e14:	08 95       	ret

00000e16 <CAN_gets>:
	if(CAN_ERR)return -1;
	return 1;
}
//получить строку
char *CAN_gets(char *str,unsigned char length)
{
     e16:	9f 92       	push	r9
     e18:	af 92       	push	r10
     e1a:	bf 92       	push	r11
     e1c:	cf 92       	push	r12
     e1e:	df 92       	push	r13
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	d8 2f       	mov	r29, r24
     e2e:	c9 2f       	mov	r28, r25
     e30:	b6 2e       	mov	r11, r22
	unsigned char i=CANgetPosition(),j;
     e32:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <CANgetPosition>
	unsigned long int ID=CANRXbuf[i].ID;
     e36:	9d e0       	ldi	r25, 0x0D	; 13
     e38:	89 9f       	mul	r24, r25
     e3a:	f0 01       	movw	r30, r0
     e3c:	11 24       	eor	r1, r1
     e3e:	ea 50       	subi	r30, 0x0A	; 10
     e40:	fb 4f       	sbci	r31, 0xFB	; 251
     e42:	c0 80       	ld	r12, Z
     e44:	d1 80       	ldd	r13, Z+1	; 0x01
     e46:	e2 80       	ldd	r14, Z+2	; 0x02
     e48:	f3 80       	ldd	r15, Z+3	; 0x03
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
     e4a:	0d 2f       	mov	r16, r29
     e4c:	1c 2f       	mov	r17, r28
	{
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
     e4e:	9d e0       	ldi	r25, 0x0D	; 13
     e50:	a9 2e       	mov	r10, r25
     e52:	2d e0       	ldi	r18, 0x0D	; 13
     e54:	92 2e       	mov	r9, r18
	unsigned char i=CANgetPosition(),j;
	unsigned long int ID=CANRXbuf[i].ID;
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
     e56:	b1 10       	cpse	r11, r1
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <CAN_gets+0x4a>
			str+=CANRXbuf[i].dataLength;
			i=CANgetPosition();
			if(CAN_ERR) return NULL;
			if(CANRXbuf[i].ID != ID){CAN_ERR=CANID;return NULL;}//LCDsendChar('e')
		}
		else return tmp;
     e5a:	8d 2f       	mov	r24, r29
     e5c:	9c 2f       	mov	r25, r28
     e5e:	41 c0       	rjmp	.+130    	; 0xee2 <CAN_gets+0xcc>
     e60:	40 e0       	ldi	r20, 0x00	; 0
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
	{
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
     e62:	a8 9e       	mul	r10, r24
     e64:	f0 01       	movw	r30, r0
     e66:	11 24       	eor	r1, r1
     e68:	ea 50       	subi	r30, 0x0A	; 10
     e6a:	fb 4f       	sbci	r31, 0xFB	; 251
     e6c:	bf 01       	movw	r22, r30
     e6e:	6c 5f       	subi	r22, 0xFC	; 252
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	db 01       	movw	r26, r22
     e74:	8c 91       	ld	r24, X
     e76:	24 2f       	mov	r18, r20
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	48 17       	cp	r20, r24
     e7c:	60 f4       	brcc	.+24     	; 0xe96 <CAN_gets+0x80>
     e7e:	cf 01       	movw	r24, r30
     e80:	82 0f       	add	r24, r18
     e82:	93 1f       	adc	r25, r19
     e84:	dc 01       	movw	r26, r24
     e86:	15 96       	adiw	r26, 0x05	; 5
     e88:	8c 91       	ld	r24, X
     e8a:	20 0f       	add	r18, r16
     e8c:	31 1f       	adc	r19, r17
     e8e:	d9 01       	movw	r26, r18
     e90:	8c 93       	st	X, r24
     e92:	4f 5f       	subi	r20, 0xFF	; 255
     e94:	ee cf       	rjmp	.-36     	; 0xe72 <CAN_gets+0x5c>
		if(str[j-1] !=0)	//последний принятый символ не \0
     e96:	20 0f       	add	r18, r16
     e98:	31 1f       	adc	r19, r17
     e9a:	d9 01       	movw	r26, r18
     e9c:	11 97       	sbiw	r26, 0x01	; 1
     e9e:	8c 91       	ld	r24, X
     ea0:	88 23       	and	r24, r24
     ea2:	d9 f2       	breq	.-74     	; 0xe5a <CAN_gets+0x44>
		{
			str+=CANRXbuf[i].dataLength;
     ea4:	84 81       	ldd	r24, Z+4	; 0x04
     ea6:	08 0f       	add	r16, r24
     ea8:	11 1d       	adc	r17, r1
			i=CANgetPosition();
     eaa:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <CANgetPosition>
			if(CAN_ERR) return NULL;
     eae:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <CAN_ERR>
     eb2:	91 11       	cpse	r25, r1
     eb4:	14 c0       	rjmp	.+40     	; 0xede <CAN_gets+0xc8>
			if(CANRXbuf[i].ID != ID){CAN_ERR=CANID;return NULL;}//LCDsendChar('e')
     eb6:	98 9e       	mul	r9, r24
     eb8:	f0 01       	movw	r30, r0
     eba:	11 24       	eor	r1, r1
     ebc:	ea 50       	subi	r30, 0x0A	; 10
     ebe:	fb 4f       	sbci	r31, 0xFB	; 251
     ec0:	40 81       	ld	r20, Z
     ec2:	51 81       	ldd	r21, Z+1	; 0x01
     ec4:	62 81       	ldd	r22, Z+2	; 0x02
     ec6:	73 81       	ldd	r23, Z+3	; 0x03
     ec8:	ba 94       	dec	r11
     eca:	c4 16       	cp	r12, r20
     ecc:	d5 06       	cpc	r13, r21
     ece:	e6 06       	cpc	r14, r22
     ed0:	f7 06       	cpc	r15, r23
     ed2:	09 f2       	breq	.-126    	; 0xe56 <CAN_gets+0x40>
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <CAN_gets+0xcc>
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
		if(str[j-1] !=0)	//последний принятый символ не \0
		{
			str+=CANRXbuf[i].dataLength;
			i=CANgetPosition();
			if(CAN_ERR) return NULL;
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
		}
		else return tmp;
	}
	if(length==0){CAN_ERR=CANSTROVF;return NULL;}
	return tmp;
}
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	df 90       	pop	r13
     ef0:	cf 90       	pop	r12
     ef2:	bf 90       	pop	r11
     ef4:	af 90       	pop	r10
     ef6:	9f 90       	pop	r9
     ef8:	08 95       	ret

00000efa <CAN_loadTXbuf>:
	CAN_ERR=0;
}


signed char CAN_loadTXbuf(unsigned long int ID, unsigned char dataLenght, unsigned char *data, unsigned char CAN_TX_MSG_SETTING)
{//ID==EID<28:11> SID<10:0>
     efa:	af 92       	push	r10
     efc:	bf 92       	push	r11
     efe:	cf 92       	push	r12
     f00:	df 92       	push	r13
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	6b 01       	movw	r12, r22
     f10:	7c 01       	movw	r14, r24
     f12:	14 2f       	mov	r17, r20
     f14:	59 01       	movw	r10, r18
#define EIDFLG  CAN_TX_MSG_SETTING & 0x08 //флаг расширенного идентификатора

unsigned char i,j;
unsigned char SIDL = 0;
unsigned char status=CAN_getStatus();
     f16:	0e 94 a1 06 	call	0xd42	; 0xd42 <CAN_getStatus>


//SID<2:0> == ID & 0x00000007
//EID<17:16> == (ID >> 27) & 0x00000003
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);
     f1a:	dc 2d       	mov	r29, r12
     f1c:	d2 95       	swap	r29
     f1e:	dd 0f       	add	r29, r29
     f20:	d0 7e       	andi	r29, 0xE0	; 224
     f22:	90 2f       	mov	r25, r16
     f24:	98 70       	andi	r25, 0x08	; 8
     f26:	d9 2b       	or	r29, r25
     f28:	b7 01       	movw	r22, r14
     f2a:	a6 01       	movw	r20, r12
     f2c:	eb e1       	ldi	r30, 0x1B	; 27
     f2e:	76 95       	lsr	r23
     f30:	67 95       	ror	r22
     f32:	57 95       	ror	r21
     f34:	47 95       	ror	r20
     f36:	ea 95       	dec	r30
     f38:	d1 f7       	brne	.-12     	; 0xf2e <CAN_loadTXbuf+0x34>
     f3a:	43 70       	andi	r20, 0x03	; 3
     f3c:	d4 2b       	or	r29, r20


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
  {
  if( chkBit(status,(i*2)) )continue; //если установлен флаг TXREQ -значить буфер занят
     f3e:	86 ff       	sbrs	r24, 6
     f40:	0b c0       	rjmp	.+22     	; 0xf58 <CAN_loadTXbuf+0x5e>
     f42:	84 ff       	sbrs	r24, 4
     f44:	0b c0       	rjmp	.+22     	; 0xf5c <CAN_loadTXbuf+0x62>
     f46:	82 fd       	sbrc	r24, 2
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <CAN_loadTXbuf+0x54>
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
     f4a:	c1 e0       	ldi	r28, 0x01	; 1
     f4c:	08 c0       	rjmp	.+16     	; 0xf5e <CAN_loadTXbuf+0x64>
  {
  if( chkBit(status,(i*2)) )continue; //если установлен флаг TXREQ -значить буфер занят
  else break;
  }

if(i==0) {CAN_ERR=CANBUFOVF;return -1;} //всё занято
     f4e:	85 e0       	ldi	r24, 0x05	; 5
     f50:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	58 c0       	rjmp	.+176    	; 0x1008 <CAN_loadTXbuf+0x10e>
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
     f58:	c3 e0       	ldi	r28, 0x03	; 3
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <CAN_loadTXbuf+0x64>
     f5c:	c2 e0       	ldi	r28, 0x02	; 2
  }

if(i==0) {CAN_ERR=CANBUFOVF;return -1;} //всё занято
//в результате i-это номер свободного буфера с более высоким приоритетом

asm("cli");
     f5e:	f8 94       	cli
clrBit(CSPINPORT,CSPIN);
     f60:	c4 98       	cbi	0x18, 4	; 24
//запись регистров командой write
SPI_transmit(0x02);                   	//Команда записи
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(i*0x10+0x20);             	//начало записи(TXBnCTRL)-регистр конфигурации
     f68:	8c 2f       	mov	r24, r28
     f6a:	82 95       	swap	r24
     f6c:	80 7f       	andi	r24, 0xF0	; 240
     f6e:	80 5e       	subi	r24, 0xE0	; 224
     f70:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(CAN_TX_MSG_SETTING & 0x03);//приоритет сообщения
     f74:	80 2f       	mov	r24, r16
     f76:	83 70       	andi	r24, 0x03	; 3
     f78:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
//запись ID
SPI_transmit((ID >> 3)  & 0x000000FF); 	//SIDH
     f7c:	d7 01       	movw	r26, r14
     f7e:	c6 01       	movw	r24, r12
     f80:	23 e0       	ldi	r18, 0x03	; 3
     f82:	b6 95       	lsr	r27
     f84:	a7 95       	ror	r26
     f86:	97 95       	ror	r25
     f88:	87 95       	ror	r24
     f8a:	2a 95       	dec	r18
     f8c:	d1 f7       	brne	.-12     	; 0xf82 <CAN_loadTXbuf+0x88>
     f8e:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(SIDL);
     f92:	8d 2f       	mov	r24, r29
     f94:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
if(1/*EIDFLG*/)	//EID пишем палюбому(запись по регистрам идет подряд)
{
	SPI_transmit((ID >> 19) & 0x000000FF);	//EID
     f98:	d7 01       	movw	r26, r14
     f9a:	c6 01       	movw	r24, r12
     f9c:	33 e1       	ldi	r19, 0x13	; 19
     f9e:	b6 95       	lsr	r27
     fa0:	a7 95       	ror	r26
     fa2:	97 95       	ror	r25
     fa4:	87 95       	ror	r24
     fa6:	3a 95       	dec	r19
     fa8:	d1 f7       	brne	.-12     	; 0xf9e <CAN_loadTXbuf+0xa4>
     faa:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
	SPI_transmit((ID >> 11) & 0x000000FF);
     fae:	d7 01       	movw	r26, r14
     fb0:	c6 01       	movw	r24, r12
     fb2:	4b e0       	ldi	r20, 0x0B	; 11
     fb4:	b6 95       	lsr	r27
     fb6:	a7 95       	ror	r26
     fb8:	97 95       	ror	r25
     fba:	87 95       	ror	r24
     fbc:	4a 95       	dec	r20
     fbe:	d1 f7       	brne	.-12     	; 0xfb4 <CAN_loadTXbuf+0xba>
     fc0:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
}

//запись количества байт в сообщении
SPI_transmit(dataLenght);
     fc4:	81 2f       	mov	r24, r17
     fc6:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
     fca:	75 01       	movw	r14, r10
//запись данных(не более 8 байт)
for(j=0;(j<dataLenght) && j<8;j++) SPI_transmit(*(data+j));
     fcc:	d0 e0       	ldi	r29, 0x00	; 0
     fce:	d1 17       	cp	r29, r17
     fd0:	49 f0       	breq	.+18     	; 0xfe4 <CAN_loadTXbuf+0xea>
     fd2:	d8 30       	cpi	r29, 0x08	; 8
     fd4:	39 f0       	breq	.+14     	; 0xfe4 <CAN_loadTXbuf+0xea>
     fd6:	f7 01       	movw	r30, r14
     fd8:	81 91       	ld	r24, Z+
     fda:	7f 01       	movw	r14, r30
     fdc:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
     fe0:	df 5f       	subi	r29, 0xFF	; 255
     fe2:	f5 cf       	rjmp	.-22     	; 0xfce <CAN_loadTXbuf+0xd4>
setBit(CSPINPORT,CSPIN);
     fe4:	c4 9a       	sbi	0x18, 4	; 24

//автоматический запрос на передачу
if(CAN_TX_MSG_SETTING & 0x04) CAN_RTS(i-1);
     fe6:	02 ff       	sbrs	r16, 2
     fe8:	0d c0       	rjmp	.+26     	; 0x1004 <CAN_loadTXbuf+0x10a>

static void CAN_RTS(unsigned char numOfBuf) //request to send
{
if(numOfBuf < 3)
{
	clrBit(CSPINPORT,CSPIN);
     fea:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(0x80 | (1<<numOfBuf));
     fec:	2f ef       	ldi	r18, 0xFF	; 255
     fee:	2c 0f       	add	r18, r28
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	01 c0       	rjmp	.+2      	; 0xff8 <CAN_loadTXbuf+0xfe>
     ff6:	88 0f       	add	r24, r24
     ff8:	2a 95       	dec	r18
     ffa:	ea f7       	brpl	.-6      	; 0xff6 <CAN_loadTXbuf+0xfc>
     ffc:	80 68       	ori	r24, 0x80	; 128
     ffe:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
	setBit(CSPINPORT,CSPIN);
    1002:	c4 9a       	sbi	0x18, 4	; 24
for(j=0;(j<dataLenght) && j<8;j++) SPI_transmit(*(data+j));
setBit(CSPINPORT,CSPIN);

//автоматический запрос на передачу
if(CAN_TX_MSG_SETTING & 0x04) CAN_RTS(i-1);
asm("sei");
    1004:	78 94       	sei
return i; //если все ОК возвращаем номер буфера
    1006:	8c 2f       	mov	r24, r28
}
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	cf 90       	pop	r12
    1018:	bf 90       	pop	r11
    101a:	af 90       	pop	r10
    101c:	08 95       	ret

0000101e <CAN_puts>:
	return 1;
}

//отсыл строки
signed char CAN_puts(char *str, unsigned char length, unsigned long int ID)	//посылаем строку с /0 на конце
{
    101e:	8f 92       	push	r8
    1020:	9f 92       	push	r9
    1022:	af 92       	push	r10
    1024:	bf 92       	push	r11
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	7c 01       	movw	r14, r24
    1034:	c6 2f       	mov	r28, r22
    1036:	49 01       	movw	r8, r18
    1038:	5a 01       	movw	r10, r20
	for(unsigned char i=0;i<length/8;i++)
    103a:	16 2f       	mov	r17, r22
    103c:	16 95       	lsr	r17
    103e:	16 95       	lsr	r17
    1040:	16 95       	lsr	r17
    1042:	d0 e0       	ldi	r29, 0x00	; 0
    1044:	d1 17       	cp	r29, r17
    1046:	91 f0       	breq	.+36     	; 0x106c <CAN_puts+0x4e>
	{
		CAN_loadTXbuf(ID,8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME );//LCDsendChar+'0'& CAN_TX_NO_RTS
    1048:	0f ef       	ldi	r16, 0xFF	; 255
    104a:	97 01       	movw	r18, r14
    104c:	48 e0       	ldi	r20, 0x08	; 8
    104e:	c5 01       	movw	r24, r10
    1050:	b4 01       	movw	r22, r8
    1052:	0e 94 7d 07 	call	0xefa	; 0xefa <CAN_loadTXbuf>
		if(CAN_ERR)return -1;
    1056:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CAN_ERR>
    105a:	88 23       	and	r24, r24
    105c:	11 f0       	breq	.+4      	; 0x1062 <CAN_puts+0x44>
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	13 c0       	rjmp	.+38     	; 0x1088 <CAN_puts+0x6a>
		str+=8;
    1062:	88 e0       	ldi	r24, 0x08	; 8
    1064:	e8 0e       	add	r14, r24
    1066:	f1 1c       	adc	r15, r1
}

//отсыл строки
signed char CAN_puts(char *str, unsigned char length, unsigned long int ID)	//посылаем строку с /0 на конце
{
	for(unsigned char i=0;i<length/8;i++)
    1068:	df 5f       	subi	r29, 0xFF	; 255
    106a:	ec cf       	rjmp	.-40     	; 0x1044 <CAN_puts+0x26>
	{
		CAN_loadTXbuf(ID,8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME );//LCDsendChar+'0'& CAN_TX_NO_RTS
		if(CAN_ERR)return -1;
		str+=8;
	}
	if(length%8)CAN_loadTXbuf(ID,length%8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME);
    106c:	4c 2f       	mov	r20, r28
    106e:	47 70       	andi	r20, 0x07	; 7
    1070:	31 f0       	breq	.+12     	; 0x107e <CAN_puts+0x60>
    1072:	0f ef       	ldi	r16, 0xFF	; 255
    1074:	97 01       	movw	r18, r14
    1076:	c5 01       	movw	r24, r10
    1078:	b4 01       	movw	r22, r8
    107a:	0e 94 7d 07 	call	0xefa	; 0xefa <CAN_loadTXbuf>
	if(CAN_ERR)return -1;
    107e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CAN_ERR>
    1082:	81 11       	cpse	r24, r1
    1084:	ec cf       	rjmp	.-40     	; 0x105e <CAN_puts+0x40>
	return 1;
    1086:	81 e0       	ldi	r24, 0x01	; 1
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	bf 90       	pop	r11
    1096:	af 90       	pop	r10
    1098:	9f 90       	pop	r9
    109a:	8f 90       	pop	r8
    109c:	08 95       	ret

0000109e <CAN_readRXbuf>:
asm("sei");
return i; //если все ОК возвращаем номер буфера
}

volatile unsigned char *CAN_readRXbuf(volatile unsigned long int *ID, volatile unsigned char *data, volatile unsigned char *dataLen, unsigned char *CAN_RX_MSG_FLAGS)
{
    109e:	2f 92       	push	r2
    10a0:	3f 92       	push	r3
    10a2:	4f 92       	push	r4
    10a4:	5f 92       	push	r5
    10a6:	6f 92       	push	r6
    10a8:	7f 92       	push	r7
    10aa:	8f 92       	push	r8
    10ac:	9f 92       	push	r9
    10ae:	af 92       	push	r10
    10b0:	bf 92       	push	r11
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <CAN_readRXbuf+0x26>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <CAN_readRXbuf+0x28>
    10c6:	1f 92       	push	r1
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	1c 01       	movw	r2, r24
    10ce:	8b 01       	movw	r16, r22
    10d0:	5d 83       	std	Y+5, r21	; 0x05
    10d2:	4c 83       	std	Y+4, r20	; 0x04
    10d4:	79 01       	movw	r14, r18
#define EID ( EID0 | EID8<<8 | (SIDL&0x03)<<16 )

//поиск заполненного буфера
for(i=0;i<2;i++)
  {
  if( CAN_getStatus() & (1<<i)  ) break;
    10d6:	0e 94 a1 06 	call	0xd42	; 0xd42 <CAN_getStatus>
    10da:	80 fd       	sbrc	r24, 0
    10dc:	07 c0       	rjmp	.+14     	; 0x10ec <CAN_readRXbuf+0x4e>
    10de:	0e 94 a1 06 	call	0xd42	; 0xd42 <CAN_getStatus>
    10e2:	81 fd       	sbrc	r24, 1
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <CAN_readRXbuf+0x52>
  }
// i-содержит номер буфера
if(i==2)return 0;//если все буферы пусты возвращаем 0
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	91 c0       	rjmp	.+290    	; 0x120e <CAN_readRXbuf+0x170>

#define SID ( SIDL>>5 | SIDH<<3 )
#define EID ( EID0 | EID8<<8 | (SIDL&0x03)<<16 )

//поиск заполненного буфера
for(i=0;i<2;i++)
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <CAN_readRXbuf+0x54>
    10f0:	81 e0       	ldi	r24, 0x01	; 1
  if( CAN_getStatus() & (1<<i)  ) break;
  }
// i-содержит номер буфера
if(i==2)return 0;//если все буферы пусты возвращаем 0

clrBit(CSPINPORT,CSPIN);
    10f2:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit( 0x90 | (i<<2) );// команда чтения с SIDH
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	80 69       	ori	r24, 0x90	; 144
    1100:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SIDH = SPI_transmit(0x00);
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
    110a:	88 2e       	mov	r8, r24
    110c:	91 2c       	mov	r9, r1
    110e:	a1 2c       	mov	r10, r1
    1110:	b1 2c       	mov	r11, r1
SIDL = SPI_transmit(0x00);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	48 2e       	mov	r4, r24
    111c:	51 2c       	mov	r5, r1
    111e:	61 2c       	mov	r6, r1
    1120:	71 2c       	mov	r7, r1

EID8 = SPI_transmit(0x00);
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
    1128:	8a 83       	std	Y+2, r24	; 0x02
EID0 = SPI_transmit(0x00);
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
    1130:	8b 83       	std	Y+3, r24	; 0x03
*dataLen = SPI_transmit(0x00);
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
    1138:	ec 81       	ldd	r30, Y+4	; 0x04
    113a:	fd 81       	ldd	r31, Y+5	; 0x05
    113c:	80 83       	st	Z, r24
    113e:	1d 82       	std	Y+5, r1	; 0x05
    1140:	1c 82       	std	Y+4, r1	; 0x04
    1142:	cc 80       	ldd	r12, Y+4	; 0x04
    1144:	dd 80       	ldd	r13, Y+5	; 0x05
    1146:	c0 0e       	add	r12, r16
    1148:	d1 1e       	adc	r13, r17

for(i=0;i<8;i++) *(data+i) = SPI_transmit(0x00);
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
    1150:	f6 01       	movw	r30, r12
    1152:	80 83       	st	Z, r24
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	9d 83       	std	Y+5, r25	; 0x05
    115c:	8c 83       	std	Y+4, r24	; 0x04
    115e:	08 97       	sbiw	r24, 0x08	; 8
    1160:	81 f7       	brne	.-32     	; 0x1142 <CAN_readRXbuf+0xa4>
setBit(CSPINPORT,CSPIN);
    1162:	c4 9a       	sbi	0x18, 4	; 24

if((SIDL & 0x08) ==0) EID8=EID0=0;	//если идентификатор не расширенный обнуляем EID
    1164:	99 81       	ldd	r25, Y+1	; 0x01
    1166:	93 ff       	sbrs	r25, 3
    1168:	0b c0       	rjmp	.+22     	; 0x1180 <CAN_readRXbuf+0xe2>
clrBit(CSPINPORT,CSPIN);
SPI_transmit( 0x90 | (i<<2) );// команда чтения с SIDH
SIDH = SPI_transmit(0x00);
SIDL = SPI_transmit(0x00);

EID8 = SPI_transmit(0x00);
    116a:	ea 81       	ldd	r30, Y+2	; 0x02
    116c:	4e 2f       	mov	r20, r30
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	70 e0       	ldi	r23, 0x00	; 0
EID0 = SPI_transmit(0x00);
    1174:	fb 81       	ldd	r31, Y+3	; 0x03
    1176:	8f 2f       	mov	r24, r31
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	06 c0       	rjmp	.+12     	; 0x118c <CAN_readRXbuf+0xee>
*dataLen = SPI_transmit(0x00);

for(i=0;i<8;i++) *(data+i) = SPI_transmit(0x00);
setBit(CSPINPORT,CSPIN);

if((SIDL & 0x08) ==0) EID8=EID0=0;	//если идентификатор не расширенный обнуляем EID
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	dc 01       	movw	r26, r24
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	ba 01       	movw	r22, r20

*ID=0;
    118c:	f1 01       	movw	r30, r2
    118e:	10 82       	st	Z, r1
    1190:	11 82       	std	Z+1, r1	; 0x01
    1192:	12 82       	std	Z+2, r1	; 0x02
    1194:	13 82       	std	Z+3, r1	; 0x03
*ID= EID<<11 | SID;
    1196:	29 81       	ldd	r18, Y+1	; 0x01
    1198:	23 70       	andi	r18, 0x03	; 3
    119a:	a2 2b       	or	r26, r18
    119c:	76 2f       	mov	r23, r22
    119e:	65 2f       	mov	r22, r21
    11a0:	54 2f       	mov	r21, r20
    11a2:	44 27       	eor	r20, r20
    11a4:	48 2b       	or	r20, r24
    11a6:	59 2b       	or	r21, r25
    11a8:	6a 2b       	or	r22, r26
    11aa:	7b 2b       	or	r23, r27
    11ac:	ab e0       	ldi	r26, 0x0B	; 11
    11ae:	44 0f       	add	r20, r20
    11b0:	55 1f       	adc	r21, r21
    11b2:	66 1f       	adc	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	aa 95       	dec	r26
    11b8:	d1 f7       	brne	.-12     	; 0x11ae <CAN_readRXbuf+0x110>
    11ba:	b5 e0       	ldi	r27, 0x05	; 5
    11bc:	76 94       	lsr	r7
    11be:	67 94       	ror	r6
    11c0:	57 94       	ror	r5
    11c2:	47 94       	ror	r4
    11c4:	ba 95       	dec	r27
    11c6:	d1 f7       	brne	.-12     	; 0x11bc <CAN_readRXbuf+0x11e>
    11c8:	83 e0       	ldi	r24, 0x03	; 3
    11ca:	88 0c       	add	r8, r8
    11cc:	99 1c       	adc	r9, r9
    11ce:	aa 1c       	adc	r10, r10
    11d0:	bb 1c       	adc	r11, r11
    11d2:	8a 95       	dec	r24
    11d4:	d1 f7       	brne	.-12     	; 0x11ca <CAN_readRXbuf+0x12c>
    11d6:	84 28       	or	r8, r4
    11d8:	95 28       	or	r9, r5
    11da:	a6 28       	or	r10, r6
    11dc:	b7 28       	or	r11, r7
    11de:	48 29       	or	r20, r8
    11e0:	59 29       	or	r21, r9
    11e2:	6a 29       	or	r22, r10
    11e4:	7b 29       	or	r23, r11
    11e6:	40 83       	st	Z, r20
    11e8:	51 83       	std	Z+1, r21	; 0x01
    11ea:	62 83       	std	Z+2, r22	; 0x02
    11ec:	73 83       	std	Z+3, r23	; 0x03

*CAN_RX_MSG_FLAGS=0;
    11ee:	f7 01       	movw	r30, r14
    11f0:	10 82       	st	Z, r1
*CAN_RX_MSG_FLAGS|=CAN_read(0x2D) & CAN_RX_OVF; //ошибка переполнения
    11f2:	8d e2       	ldi	r24, 0x2D	; 45
    11f4:	0e 94 aa 06 	call	0xd54	; 0xd54 <CAN_read>
    11f8:	80 7c       	andi	r24, 0xC0	; 192
    11fa:	f7 01       	movw	r30, r14
    11fc:	90 81       	ld	r25, Z
    11fe:	89 2b       	or	r24, r25
    1200:	80 83       	st	Z, r24

if(*CAN_RX_MSG_FLAGS & CAN_RX_OVF );//PORTC |= 1<<3;

CAN_bitModify(0x2D,0xC0,0x00);            //сброс флага переполнения
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	60 ec       	ldi	r22, 0xC0	; 192
    1206:	8d e2       	ldi	r24, 0x2D	; 45
    1208:	0e 94 b9 06 	call	0xd72	; 0xd72 <CAN_bitModify>
return data;
    120c:	c8 01       	movw	r24, r16
}
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	bf 90       	pop	r11
    122a:	af 90       	pop	r10
    122c:	9f 90       	pop	r9
    122e:	8f 90       	pop	r8
    1230:	7f 90       	pop	r7
    1232:	6f 90       	pop	r6
    1234:	5f 90       	pop	r5
    1236:	4f 90       	pop	r4
    1238:	3f 90       	pop	r3
    123a:	2f 90       	pop	r2
    123c:	08 95       	ret

0000123e <CAN_readMessage>:



//чтение сообщения из "железного" буфера в программный
signed char CAN_readMessage(void)
{
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	1f 92       	push	r1
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	unsigned char msg_flags=0;
    1248:	19 82       	std	Y+1, r1	; 0x01

	CAN_readRXbuf(&CANRXbuf[CANRWindex].ID, CANRXbuf[CANRWindex].data, &CANRXbuf[CANRWindex].dataLength, &msg_flags);
    124a:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <CANRWindex>
    124e:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <CANRWindex>
    1252:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <CANRWindex>
    1256:	8d e0       	ldi	r24, 0x0D	; 13
    1258:	84 9f       	mul	r24, r20
    125a:	a0 01       	movw	r20, r0
    125c:	11 24       	eor	r1, r1
    125e:	46 50       	subi	r20, 0x06	; 6
    1260:	5b 4f       	sbci	r21, 0xFB	; 251
    1262:	86 9f       	mul	r24, r22
    1264:	b0 01       	movw	r22, r0
    1266:	11 24       	eor	r1, r1
    1268:	65 50       	subi	r22, 0x05	; 5
    126a:	7b 4f       	sbci	r23, 0xFB	; 251
    126c:	89 9f       	mul	r24, r25
    126e:	c0 01       	movw	r24, r0
    1270:	11 24       	eor	r1, r1
    1272:	9e 01       	movw	r18, r28
    1274:	2f 5f       	subi	r18, 0xFF	; 255
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    1278:	8a 50       	subi	r24, 0x0A	; 10
    127a:	9b 4f       	sbci	r25, 0xFB	; 251
    127c:	0e 94 4f 08 	call	0x109e	; 0x109e <CAN_readRXbuf>

	if(++CANRWindex==CAN_RX_BUFFER_SIZE)   CANRWindex=0;
    1280:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <CANRWindex>
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <CANRWindex>
    128a:	8a 30       	cpi	r24, 0x0A	; 10
    128c:	11 f4       	brne	.+4      	; 0x1292 <CAN_readMessage+0x54>
    128e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <CANRWindex>
	if((++CANRXcounter==CAN_RX_BUFFER_SIZE)) {CANRXcounter=0;CAN_ERR=CANBUFOVF;return -1;}	//переполнение программного буфера
    1292:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <CANRXcounter>
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <CANRXcounter>
    129c:	8a 30       	cpi	r24, 0x0A	; 10
    129e:	19 f4       	brne	.+6      	; 0x12a6 <CAN_readMessage+0x68>
    12a0:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <CANRXcounter>
    12a4:	03 c0       	rjmp	.+6      	; 0x12ac <CAN_readMessage+0x6e>
	if(msg_flags & CAN_RX_OVF){CAN_ERR=CANBUFOVF;return -1;}								//переполнение аппаратног буфера
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	80 7c       	andi	r24, 0xC0	; 192
    12aa:	29 f0       	breq	.+10     	; 0x12b6 <CAN_readMessage+0x78>
    12ac:	85 e0       	ldi	r24, 0x05	; 5
    12ae:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <CAN_ERR>
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <CAN_readMessage+0x7a>
	return 1;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
}
    12b8:	0f 90       	pop	r0
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <CAN_setMask>:
CAN_bitModify(0x2D,0xC0,0x00);            //сброс флага переполнения
return data;
}

void CAN_setMask(unsigned char addrOfMask,unsigned long int MASK)
{//MASK==EID<28:11> SID<10:0>
    12c0:	cf 92       	push	r12
    12c2:	df 92       	push	r13
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	d8 2f       	mov	r29, r24
    12ce:	6a 01       	movw	r12, r20
    12d0:	7b 01       	movw	r14, r22
unsigned char RXM_SIDL = ((MASK & 0x00000007) << 5) | ((MASK >> 27) & 0x00000003);
    12d2:	db 01       	movw	r26, r22
    12d4:	ca 01       	movw	r24, r20
    12d6:	2b e1       	ldi	r18, 0x1B	; 27
    12d8:	b6 95       	lsr	r27
    12da:	a7 95       	ror	r26
    12dc:	97 95       	ror	r25
    12de:	87 95       	ror	r24
    12e0:	2a 95       	dec	r18
    12e2:	d1 f7       	brne	.-12     	; 0x12d8 <CAN_setMask+0x18>
    12e4:	c8 2f       	mov	r28, r24
    12e6:	c3 70       	andi	r28, 0x03	; 3
    12e8:	84 2f       	mov	r24, r20
    12ea:	82 95       	swap	r24
    12ec:	88 0f       	add	r24, r24
    12ee:	80 7e       	andi	r24, 0xE0	; 224
    12f0:	c8 2b       	or	r28, r24
//unsigned char i=0;

//if(addrOfMask>0x24)return;

clrBit(CSPINPORT,CSPIN);
    12f2:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);        //команда записи
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(addrOfMask);   //начальная ячейка
    12fa:	8d 2f       	mov	r24, r29
    12fc:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit((MASK >> 3)  & 0x000000FF);
    1300:	d7 01       	movw	r26, r14
    1302:	c6 01       	movw	r24, r12
    1304:	33 e0       	ldi	r19, 0x03	; 3
    1306:	b6 95       	lsr	r27
    1308:	a7 95       	ror	r26
    130a:	97 95       	ror	r25
    130c:	87 95       	ror	r24
    130e:	3a 95       	dec	r19
    1310:	d1 f7       	brne	.-12     	; 0x1306 <CAN_setMask+0x46>
    1312:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(RXM_SIDL);
    1316:	8c 2f       	mov	r24, r28
    1318:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit((MASK >> 19) & 0x000000FF);
    131c:	d7 01       	movw	r26, r14
    131e:	c6 01       	movw	r24, r12
    1320:	43 e1       	ldi	r20, 0x13	; 19
    1322:	b6 95       	lsr	r27
    1324:	a7 95       	ror	r26
    1326:	97 95       	ror	r25
    1328:	87 95       	ror	r24
    132a:	4a 95       	dec	r20
    132c:	d1 f7       	brne	.-12     	; 0x1322 <CAN_setMask+0x62>
    132e:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit((MASK >> 11) & 0x000000FF);
    1332:	d7 01       	movw	r26, r14
    1334:	c6 01       	movw	r24, r12
    1336:	5b e0       	ldi	r21, 0x0B	; 11
    1338:	b6 95       	lsr	r27
    133a:	a7 95       	ror	r26
    133c:	97 95       	ror	r25
    133e:	87 95       	ror	r24
    1340:	5a 95       	dec	r21
    1342:	d1 f7       	brne	.-12     	; 0x1338 <CAN_setMask+0x78>
    1344:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    1348:	c4 9a       	sbi	0x18, 4	; 24
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	df 90       	pop	r13
    1354:	cf 90       	pop	r12
    1356:	08 95       	ret

00001358 <CAN_setFilter>:

void CAN_setFilter(unsigned char addrOfFilter, unsigned long int FILTER, unsigned char CAN_TYPE_FRAME)
{//FILTER==EID<28:11> SID<10:0>
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	d8 2f       	mov	r29, r24
    1366:	6a 01       	movw	r12, r20
    1368:	7b 01       	movw	r14, r22
unsigned char RXF_SIDL = ((FILTER & 0x00000007) << 5) | ((FILTER >> 27) & 0x00000003) | (CAN_TYPE_FRAME & 0x08);
    136a:	c4 2f       	mov	r28, r20
    136c:	c2 95       	swap	r28
    136e:	cc 0f       	add	r28, r28
    1370:	c0 7e       	andi	r28, 0xE0	; 224
    1372:	28 70       	andi	r18, 0x08	; 8
    1374:	c2 2b       	or	r28, r18
    1376:	8b e1       	ldi	r24, 0x1B	; 27
    1378:	76 95       	lsr	r23
    137a:	67 95       	ror	r22
    137c:	57 95       	ror	r21
    137e:	47 95       	ror	r20
    1380:	8a 95       	dec	r24
    1382:	d1 f7       	brne	.-12     	; 0x1378 <CAN_setFilter+0x20>
    1384:	43 70       	andi	r20, 0x03	; 3
    1386:	c4 2b       	or	r28, r20
//unsigned char i=0;

//if(addrOfFilter>0x18)return;

clrBit(CSPINPORT,CSPIN);
    1388:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);        //команда записи
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(addrOfFilter); //начальная ячейка
    1390:	8d 2f       	mov	r24, r29
    1392:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit((FILTER >> 3)  & 0x000000FF);  //RXF_SIDH
    1396:	d7 01       	movw	r26, r14
    1398:	c6 01       	movw	r24, r12
    139a:	23 e0       	ldi	r18, 0x03	; 3
    139c:	b6 95       	lsr	r27
    139e:	a7 95       	ror	r26
    13a0:	97 95       	ror	r25
    13a2:	87 95       	ror	r24
    13a4:	2a 95       	dec	r18
    13a6:	d1 f7       	brne	.-12     	; 0x139c <CAN_setFilter+0x44>
    13a8:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit(RXF_SIDL);
    13ac:	8c 2f       	mov	r24, r28
    13ae:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit((FILTER >> 19) & 0x000000FF);  //RXF_EID8
    13b2:	d7 01       	movw	r26, r14
    13b4:	c6 01       	movw	r24, r12
    13b6:	33 e1       	ldi	r19, 0x13	; 19
    13b8:	b6 95       	lsr	r27
    13ba:	a7 95       	ror	r26
    13bc:	97 95       	ror	r25
    13be:	87 95       	ror	r24
    13c0:	3a 95       	dec	r19
    13c2:	d1 f7       	brne	.-12     	; 0x13b8 <CAN_setFilter+0x60>
    13c4:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
SPI_transmit((FILTER >> 11) & 0x000000FF);  //RXF_EID0
    13c8:	d7 01       	movw	r26, r14
    13ca:	c6 01       	movw	r24, r12
    13cc:	4b e0       	ldi	r20, 0x0B	; 11
    13ce:	b6 95       	lsr	r27
    13d0:	a7 95       	ror	r26
    13d2:	97 95       	ror	r25
    13d4:	87 95       	ror	r24
    13d6:	4a 95       	dec	r20
    13d8:	d1 f7       	brne	.-12     	; 0x13ce <CAN_setFilter+0x76>
    13da:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    13de:	c4 9a       	sbi	0x18, 4	; 24
}
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	08 95       	ret

000013ee <interrupt_init>:


void interrupt_init(void)
{
	//���� ��� ���������� �� CAN
	DDRD &= ~(1<<DDD2);	//PORTD.2 ����
    13ee:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= 1<<DDD2;	//pull up
    13f0:	92 9a       	sbi	0x12, 2	; 18

	MCUCR &= 0xFC;	//���������� �� ������� ������
    13f2:	85 b7       	in	r24, 0x35	; 53
    13f4:	8c 7f       	andi	r24, 0xFC	; 252
    13f6:	85 bf       	out	0x35, r24	; 53
	GICR |= 0x40;	//INT0 ���
    13f8:	8b b7       	in	r24, 0x3b	; 59
    13fa:	80 64       	ori	r24, 0x40	; 64
    13fc:	8b bf       	out	0x3b, r24	; 59
    13fe:	08 95       	ret

00001400 <timers_init>:
	// Input Capture on Falling Edge
	// Timer 1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=0x00;
    1400:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x0A; 	// Clock value: 2000 kHz
    1402:	8a e0       	ldi	r24, 0x0A	; 10
    1404:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
    1406:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
    1408:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
    140a:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
    140c:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x07;	//���������� 1 ��
    140e:	87 e0       	ldi	r24, 0x07	; 7
    1410:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0xD0;
    1412:	80 ed       	ldi	r24, 0xD0	; 208
    1414:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;	//
    1416:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
    1418:	18 bc       	out	0x28, r1	; 40

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK |= 1<<OCIE1A;// | 1<<OCIE1B;
    141a:	89 b7       	in	r24, 0x39	; 57
    141c:	80 61       	ori	r24, 0x10	; 16
    141e:	89 bf       	out	0x39, r24	; 57
    1420:	08 95       	ret

00001422 <CAN_init>:
}

signed char CAN_init(unsigned char mode)
  {
    1422:	cf 93       	push	r28
    1424:	c8 2f       	mov	r28, r24
  signed char result;

  SPI_init();
    1426:	0e 94 82 06 	call	0xd04	; 0xd04 <SPI_init>
  //��������� ����������
  //DDRB &= ~(1<<2);	//PORTB.2 ����
  //PORTB |= 1<<2;		//pull up
  //GICR=0x00;	//���������� �� ������� ������

  CSPINDDR |= 1<<CSPIN; 	//��� CS �����
    142a:	bc 9a       	sbi	0x17, 4	; 23
  CSPINPORT |= 1<<CSPIN;	// Hi-level
    142c:	c4 9a       	sbi	0x18, 4	; 24

static void CAN_reset(void)
{
clrBit(CSPINPORT,CSPIN);
    142e:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0xC0);
    1430:	80 ec       	ldi	r24, 0xC0	; 192
    1432:	0e 94 8b 06 	call	0xd16	; 0xd16 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    1436:	c4 9a       	sbi	0x18, 4	; 24

  CAN_reset();

  //��������� �������� (125 kib/s)
    CAN_bitModify(CNF2,0x80,0x80); //���������� ���������� ���������������� PHSEG2 (BTLMODE==1)
    1438:	40 e8       	ldi	r20, 0x80	; 128
    143a:	60 e8       	ldi	r22, 0x80	; 128
    143c:	89 e2       	ldi	r24, 0x29	; 41
    143e:	0e 94 b9 06 	call	0xd72	; 0xd72 <CAN_bitModify>
    CAN_write(CNF1,0x05);// SJW==1Tq, BRP==6;
    1442:	65 e0       	ldi	r22, 0x05	; 5
    1444:	8a e2       	ldi	r24, 0x2A	; 42
    1446:	0e 94 d1 06 	call	0xda2	; 0xda2 <CAN_write>
    CAN_write(CNF2,0x89);// BTLMODE==1,SAM==0,PRSEG2==2Tq,PHSEG1==2Tq ;
    144a:	69 e8       	ldi	r22, 0x89	; 137
    144c:	89 e2       	ldi	r24, 0x29	; 41
    144e:	0e 94 d1 06 	call	0xda2	; 0xda2 <CAN_write>
    CAN_write(CNF3,0x02);// PHSEG2==3Tq ;
    1452:	62 e0       	ldi	r22, 0x02	; 2
    1454:	88 e2       	ldi	r24, 0x28	; 40
    1456:	0e 94 d1 06 	call	0xda2	; 0xda2 <CAN_write>
  //��������� ������� 5 ��� SID
  CAN_bitModify(RXB1CTRL,0b01100111,0b00100101);
  #endif

  //��������� ���������� �� ������ ����� �������
  CAN_bitModify(CANINTE,0x03,0x03);
    145a:	43 e0       	ldi	r20, 0x03	; 3
    145c:	63 e0       	ldi	r22, 0x03	; 3
    145e:	8b e2       	ldi	r24, 0x2B	; 43
    1460:	0e 94 b9 06 	call	0xd72	; 0xd72 <CAN_bitModify>
return (CAN_read(CANSTAT) & 0xE0);
}

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0
    1464:	4c 2f       	mov	r20, r28
    1466:	6f ef       	ldi	r22, 0xFF	; 255
    1468:	8f e0       	ldi	r24, 0x0F	; 15
    146a:	0e 94 b9 06 	call	0xd72	; 0xd72 <CAN_bitModify>
return data;
}

static unsigned char CAN_getOpMode(void)
{
return (CAN_read(CANSTAT) & 0xE0);
    146e:	8e e0       	ldi	r24, 0x0E	; 14
    1470:	0e 94 aa 06 	call	0xd54	; 0xd54 <CAN_read>

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0

if( (CAN_getOpMode() )!=CAN_MODE ) return -1;
    1474:	80 7e       	andi	r24, 0xE0	; 224
    1476:	c8 13       	cpse	r28, r24
    1478:	02 c0       	rjmp	.+4      	; 0x147e <CAN_init+0x5c>
else return 1;//
    147a:	c1 e0       	ldi	r28, 0x01	; 1
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <CAN_init+0x5e>

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0

if( (CAN_getOpMode() )!=CAN_MODE ) return -1;
    147e:	cf ef       	ldi	r28, 0xFF	; 255
//  will not occur and the new message will be moved into
//  RXB1, regardless of the acceptance criteria of RXB1.


  //set rollover-mode
  CAN_bitModify(RXB0CTRL,0x04,0x04);
    1480:	44 e0       	ldi	r20, 0x04	; 4
    1482:	64 e0       	ldi	r22, 0x04	; 4
    1484:	80 e6       	ldi	r24, 0x60	; 96
    1486:	0e 94 b9 06 	call	0xd72	; 0xd72 <CAN_bitModify>

  //set one-shot-mode
  //CAN_bitModify(CANCTRL,0x08,0x08);

  return result;
  }
    148a:	8c 2f       	mov	r24, r28
    148c:	cf 91       	pop	r28
    148e:	08 95       	ret

00001490 <bki_init>:

void bki_init(void)
{
    1490:	cf 92       	push	r12
    1492:	df 92       	push	r13
    1494:	ef 92       	push	r14
    1496:	ff 92       	push	r15
    1498:	cf 93       	push	r28
	asm("cli");
    149a:	f8 94       	cli
	//������������� ����������
	DDRC &= ~((1<<7) | (1<<6) | (1<<5));//�����
    149c:	84 b3       	in	r24, 0x14	; 20
    149e:	8f 71       	andi	r24, 0x1F	; 31
    14a0:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<7) | (1<<6) | (1<<5);	//Pull Up
    14a2:	85 b3       	in	r24, 0x15	; 21
    14a4:	80 6e       	ori	r24, 0xE0	; 224
    14a6:	85 bb       	out	0x15, r24	; 21
	DDRD &= ~((1<<5) | (1<<4) | (1<<3));//�����
    14a8:	81 b3       	in	r24, 0x11	; 17
    14aa:	87 7c       	andi	r24, 0xC7	; 199
    14ac:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<5) | (1<<4) | (1<<3);	//Pull Up
    14ae:	82 b3       	in	r24, 0x12	; 18
    14b0:	88 63       	ori	r24, 0x38	; 56
    14b2:	82 bb       	out	0x12, r24	; 18
	DDRA |= (1<<BEEP);					//�������
    14b4:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1<<BEEP);
    14b6:	dc 98       	cbi	0x1b, 4	; 27
	DDRA |= 1<<5;						//��� ����������
    14b8:	d5 9a       	sbi	0x1a, 5	; 26
	PORTA |= 1<<5;
    14ba:	dd 9a       	sbi	0x1b, 5	; 27
	DDRA |= (1<<OUT1) | (1<<OUT2) | (1<<OUT3) | (1<<OUT4);	//����
    14bc:	8a b3       	in	r24, 0x1a	; 26
    14be:	8f 60       	ori	r24, 0x0F	; 15
    14c0:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<OUT1) | (1<<OUT2) | (1<<OUT3) | (1<<OUT4);	//��������
    14c2:	8b b3       	in	r24, 0x1b	; 27
    14c4:	8f 60       	ori	r24, 0x0F	; 15
    14c6:	8b bb       	out	0x1b, r24	; 27

	//������������� LCD
	LCD_init();
    14c8:	0e 94 c1 03 	call	0x782	; 0x782 <LCD_init>
	LCD_visible();
    14cc:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_visible>
	LCD_clr();
    14d0:	0e 94 12 04 	call	0x824	; 0x824 <LCD_clr>

	//����
	TWI_init();
    14d4:	0e 94 95 01 	call	0x32a	; 0x32a <TWI_init>
	rtc_get(&rtc);
    14d8:	80 ef       	ldi	r24, 0xF0	; 240
    14da:	94 e0       	ldi	r25, 0x04	; 4
    14dc:	0e 94 c8 02 	call	0x590	; 0x590 <rtc_get>
	if(rtc_check()<0){ERROR=RTC;/*return;*/}
    14e0:	0e 94 40 03 	call	0x680	; 0x680 <rtc_check>
    14e4:	87 ff       	sbrs	r24, 7
    14e6:	03 c0       	rjmp	.+6      	; 0x14ee <bki_init+0x5e>
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>

	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 14 20 	call	0x4028	; 0x4028 <eeprom_read_dword>
    14f6:	6b 01       	movw	r12, r22
    14f8:	7c 01       	movw	r14, r24
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    1502:	c8 2f       	mov	r28, r24
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    150c:	a7 01       	movw	r20, r14
    150e:	96 01       	movw	r18, r12
    1510:	6c 2f       	mov	r22, r28
    1512:	0e 94 b6 1a 	call	0x356c	; 0x356c <MODB_init>

UCSRB |= 1<<RXCIE;	//���������� UARTRX
    1516:	57 9a       	sbi	0x0a, 7	; 10

	interrupt_init();
    1518:	0e 94 f7 09 	call	0x13ee	; 0x13ee <interrupt_init>
	timers_init();
    151c:	0e 94 00 0a 	call	0x1400	; 0x1400 <timers_init>
	asm("sei");
    1520:	78 94       	sei
    1522:	2f ef       	ldi	r18, 0xFF	; 255
    1524:	89 e6       	ldi	r24, 0x69	; 105
    1526:	98 e1       	ldi	r25, 0x18	; 24
    1528:	21 50       	subi	r18, 0x01	; 1
    152a:	80 40       	sbci	r24, 0x00	; 0
    152c:	90 40       	sbci	r25, 0x00	; 0
    152e:	e1 f7       	brne	.-8      	; 0x1528 <bki_init+0x98>
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <bki_init+0xa2>
    1532:	00 00       	nop

	_delay_ms(500);
	if(CAN_init(CAN_MODE_NORMAL)<1){ERROR=CAN;return;}
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	0e 94 11 0a 	call	0x1422	; 0x1422 <CAN_init>
    153a:	18 16       	cp	r1, r24
    153c:	1c f0       	brlt	.+6      	; 0x1544 <bki_init+0xb4>
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>

//	_
//_delay_ms(500);


}
    1544:	cf 91       	pop	r28
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	df 90       	pop	r13
    154c:	cf 90       	pop	r12
    154e:	08 95       	ret

00001550 <ping>:
static inline signed char checkTOUT(unsigned char addr);
signed char aks_for_logic(unsigned char addr);


void ping(void)
{
    1550:	0f 93       	push	r16
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	27 97       	sbiw	r28, 0x07	; 7
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char data[7];

	for(unsigned char i=1;i<MAXQDEV;i++) inSysBDZ[i].flags=1<<FLT;	//перед посылкой команды обнуляем все флаги.Установленный флаг INL будет говорить о том,что ответ принят
    156a:	39 e0       	ldi	r19, 0x09	; 9
    156c:	22 e0       	ldi	r18, 0x02	; 2
    156e:	38 9f       	mul	r19, r24
    1570:	f0 01       	movw	r30, r0
    1572:	39 9f       	mul	r19, r25
    1574:	f0 0d       	add	r31, r0
    1576:	11 24       	eor	r1, r1
    1578:	ef 59       	subi	r30, 0x9F	; 159
    157a:	fe 4f       	sbci	r31, 0xFE	; 254
    157c:	20 87       	std	Z+8, r18	; 0x08
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	83 36       	cpi	r24, 0x63	; 99
    1582:	91 05       	cpc	r25, r1
    1584:	a1 f7       	brne	.-24     	; 0x156e <ping+0x1e>
	data[0]=PING;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	89 83       	std	Y+1, r24	; 0x01
	//синхронизация времени для БДЗ
	data[1]=rtc.day;
    158a:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <rtc+0x2>
    158e:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=rtc.month;
    1590:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <rtc+0x1>
    1594:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=rtc.year;
    1596:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <rtc>
    159a:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=rtc.hours;
    159c:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <rtc+0x3>
    15a0:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=rtc.minutes;
    15a2:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <rtc+0x4>
    15a6:	8e 83       	std	Y+6, r24	; 0x06
	data[6]=rtc.seconds;
    15a8:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <rtc+0x5>
    15ac:	8f 83       	std	Y+7, r24	; 0x07

	CAN_loadTXbuf(0,7,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    15ae:	07 ef       	ldi	r16, 0xF7	; 247
    15b0:	9e 01       	movw	r18, r28
    15b2:	2f 5f       	subi	r18, 0xFF	; 255
    15b4:	3f 4f       	sbci	r19, 0xFF	; 255
    15b6:	47 e0       	ldi	r20, 0x07	; 7
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	cb 01       	movw	r24, r22
    15be:	0e 94 7d 07 	call	0xefa	; 0xefa <CAN_loadTXbuf>
}
    15c2:	27 96       	adiw	r28, 0x07	; 7
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	0f 91       	pop	r16
    15d4:	08 95       	ret

000015d6 <scansys>:


}

static void scansys(void)
{
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <scansys+0xe>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <scansys+0x10>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	unsigned char i,j=0;
	char tmpStr[4];

	sys_state |= 1<<SCAN;
    15ea:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    15ee:	80 61       	ori	r24, 0x10	; 16
    15f0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <sys_state>
    15f4:	01 e0       	ldi	r16, 0x01	; 1
    15f6:	10 e0       	ldi	r17, 0x00	; 0
	for(i=1;i<MAXQDEV;i++) {eeprom_write_byte(&inSysBDZaddr[i],0);inSysBDZ[i].data[7]=0;}
    15f8:	99 e0       	ldi	r25, 0x09	; 9
    15fa:	f9 2e       	mov	r15, r25
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	c8 01       	movw	r24, r16
    1600:	87 5f       	subi	r24, 0xF7	; 247
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	0e 94 20 20 	call	0x4040	; 0x4040 <eeprom_write_byte>
    1608:	f0 9e       	mul	r15, r16
    160a:	f0 01       	movw	r30, r0
    160c:	f1 9e       	mul	r15, r17
    160e:	f0 0d       	add	r31, r0
    1610:	11 24       	eor	r1, r1
    1612:	ef 59       	subi	r30, 0x9F	; 159
    1614:	fe 4f       	sbci	r31, 0xFE	; 254
    1616:	17 82       	std	Z+7, r1	; 0x07
    1618:	0f 5f       	subi	r16, 0xFF	; 255
    161a:	1f 4f       	sbci	r17, 0xFF	; 255
    161c:	03 36       	cpi	r16, 0x63	; 99
    161e:	11 05       	cpc	r17, r1
    1620:	69 f7       	brne	.-38     	; 0x15fc <scansys+0x26>
	while(!eeprom_is_ready());
    1622:	e1 99       	sbic	0x1c, 1	; 28
    1624:	fe cf       	rjmp	.-4      	; 0x1622 <scansys+0x4c>
	ping();
    1626:	0e 94 a8 0a 	call	0x1550	; 0x1550 <ping>
    162a:	2f ef       	ldi	r18, 0xFF	; 255
    162c:	81 ee       	ldi	r24, 0xE1	; 225
    162e:	94 e0       	ldi	r25, 0x04	; 4
    1630:	21 50       	subi	r18, 0x01	; 1
    1632:	80 40       	sbci	r24, 0x00	; 0
    1634:	90 40       	sbci	r25, 0x00	; 0
    1636:	e1 f7       	brne	.-8      	; 0x1630 <scansys+0x5a>
    1638:	00 c0       	rjmp	.+0      	; 0x163a <scansys+0x64>
    163a:	00 00       	nop
	_delay_ms(100);
	LCD_clr();
    163c:	0e 94 12 04 	call	0x824	; 0x824 <LCD_clr>
	LCD_puts_P(SCANIROVANIE,12);
    1640:	6c e0       	ldi	r22, 0x0C	; 12
    1642:	86 e5       	ldi	r24, 0x56	; 86
    1644:	91 e0       	ldi	r25, 0x01	; 1
    1646:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
    164a:	18 e0       	ldi	r17, 0x08	; 8
	for(i=0;i<8;i++){LCD_putchar(0x2E);_delay_ms(500);}
    164c:	8e e2       	ldi	r24, 0x2E	; 46
    164e:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
    1652:	2f ef       	ldi	r18, 0xFF	; 255
    1654:	89 e6       	ldi	r24, 0x69	; 105
    1656:	98 e1       	ldi	r25, 0x18	; 24
    1658:	21 50       	subi	r18, 0x01	; 1
    165a:	80 40       	sbci	r24, 0x00	; 0
    165c:	90 40       	sbci	r25, 0x00	; 0
    165e:	e1 f7       	brne	.-8      	; 0x1658 <scansys+0x82>
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <scansys+0x8c>
    1662:	00 00       	nop
    1664:	11 50       	subi	r17, 0x01	; 1
    1666:	91 f7       	brne	.-28     	; 0x164c <scansys+0x76>

	sys_state =0;
    1668:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sys_state>
    166c:	01 e0       	ldi	r16, 0x01	; 1
    166e:	10 e0       	ldi	r17, 0x00	; 0

}

static void scansys(void)
{
	unsigned char i,j=0;
    1670:	f1 2c       	mov	r15, r1
	LCD_clr();
	LCD_puts_P(SCANIROVANIE,12);
	for(i=0;i<8;i++){LCD_putchar(0x2E);_delay_ms(500);}

	sys_state =0;
	for(i=1;i<MAXQDEV;i++) if(inSysBDZ[i].data[7] == i) {writeID(i);j++;}
    1672:	89 e0       	ldi	r24, 0x09	; 9
    1674:	e8 2e       	mov	r14, r24
    1676:	e0 9e       	mul	r14, r16
    1678:	f0 01       	movw	r30, r0
    167a:	e1 9e       	mul	r14, r17
    167c:	f0 0d       	add	r31, r0
    167e:	11 24       	eor	r1, r1
    1680:	ef 59       	subi	r30, 0x9F	; 159
    1682:	fe 4f       	sbci	r31, 0xFE	; 254
    1684:	67 81       	ldd	r22, Z+7	; 0x07
    1686:	60 13       	cpse	r22, r16
    1688:	06 c0       	rjmp	.+12     	; 0x1696 <scansys+0xc0>
    168a:	c8 01       	movw	r24, r16
    168c:	87 5f       	subi	r24, 0xF7	; 247
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	0e 94 20 20 	call	0x4040	; 0x4040 <eeprom_write_byte>
    1694:	f3 94       	inc	r15
    1696:	0f 5f       	subi	r16, 0xFF	; 255
    1698:	1f 4f       	sbci	r17, 0xFF	; 255
    169a:	03 36       	cpi	r16, 0x63	; 99
    169c:	11 05       	cpc	r17, r1
    169e:	59 f7       	brne	.-42     	; 0x1676 <scansys+0xa0>


	LCD_gotoXY(0,2);
    16a0:	62 e0       	ldi	r22, 0x02	; 2
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
	LCD_puts_P(OBNARUZHENO,16);
    16a8:	60 e1       	ldi	r22, 0x10	; 16
    16aa:	83 e9       	ldi	r24, 0x93	; 147
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
    16b2:	4a e0       	ldi	r20, 0x0A	; 10
    16b4:	be 01       	movw	r22, r28
    16b6:	6f 5f       	subi	r22, 0xFF	; 255
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	8f 2d       	mov	r24, r15
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
	LCD_puts(itoa(j,tmpStr,10),3);
    16c2:	63 e0       	ldi	r22, 0x03	; 3
    16c4:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
	ping();
    16c8:	0e 94 a8 0a 	call	0x1550	; 0x1550 <ping>
    16cc:	2f ef       	ldi	r18, 0xFF	; 255
    16ce:	87 ea       	ldi	r24, 0xA7	; 167
    16d0:	91 e6       	ldi	r25, 0x61	; 97
    16d2:	21 50       	subi	r18, 0x01	; 1
    16d4:	80 40       	sbci	r24, 0x00	; 0
    16d6:	90 40       	sbci	r25, 0x00	; 0
    16d8:	e1 f7       	brne	.-8      	; 0x16d2 <scansys+0xfc>
    16da:	00 c0       	rjmp	.+0      	; 0x16dc <scansys+0x106>
    16dc:	00 00       	nop
	_delay_ms(2000);
	menuExit=EXITMENU;
    16de:	80 e3       	ldi	r24, 0x30	; 48
    16e0:	95 e7       	ldi	r25, 0x75	; 117
    16e2:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <menuExit+0x1>
    16e6:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <menuExit>
	ERROR=0;
    16ea:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <ERROR>

	return ;
}
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	ff 90       	pop	r15
    1700:	ef 90       	pop	r14
    1702:	08 95       	ret

00001704 <send_read_arch>:

signed char send_read_arch(unsigned char part,unsigned char addr,unsigned char index)
{
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	00 d0       	rcall	.+0      	; 0x170e <send_read_arch+0xa>
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	16 2f       	mov	r17, r22
	unsigned char data[2]={(part==1)?(RD_ARCH_1):(RD_ARCH_2)};
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	11 f0       	breq	.+4      	; 0x171c <send_read_arch+0x18>
    1718:	85 e0       	ldi	r24, 0x05	; 5
    171a:	01 c0       	rjmp	.+2      	; 0x171e <send_read_arch+0x1a>
    171c:	84 e0       	ldi	r24, 0x04	; 4
    171e:	89 83       	std	Y+1, r24	; 0x01

	inSysBDZ[addr].flags=1<<FLT;	//перед посылкой команды обнуляем все флаги.Установленный флаг INL будет говорить о том,что ответ принят
    1720:	89 e0       	ldi	r24, 0x09	; 9
    1722:	18 9f       	mul	r17, r24
    1724:	f0 01       	movw	r30, r0
    1726:	11 24       	eor	r1, r1
    1728:	ef 59       	subi	r30, 0x9F	; 159
    172a:	fe 4f       	sbci	r31, 0xFE	; 254
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	80 87       	std	Z+8, r24	; 0x08
	data[1]=index;
    1730:	4a 83       	std	Y+2, r20	; 0x02

	CAN_loadTXbuf((unsigned long int)addr,2,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    1732:	61 2f       	mov	r22, r17
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	07 ef       	ldi	r16, 0xF7	; 247
    173c:	9e 01       	movw	r18, r28
    173e:	2f 5f       	subi	r18, 0xFF	; 255
    1740:	3f 4f       	sbci	r19, 0xFF	; 255
    1742:	42 e0       	ldi	r20, 0x02	; 2
    1744:	0e 94 7d 07 	call	0xefa	; 0xefa <CAN_loadTXbuf>
	return 	checkTOUT(addr);
    1748:	81 2f       	mov	r24, r17
    174a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <checkTOUT>
}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	08 95       	ret

0000175c <send_prog>:

signed char send_prog(unsigned char addr,volatile unsigned char *param)
{
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	00 d0       	rcall	.+0      	; 0x1766 <send_prog+0xa>
    1766:	00 d0       	rcall	.+0      	; 0x1768 <send_prog+0xc>
    1768:	00 d0       	rcall	.+0      	; 0x176a <send_prog+0xe>
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	18 2f       	mov	r17, r24
	unsigned char data[6]={PROG};
    1770:	86 e0       	ldi	r24, 0x06	; 6
    1772:	9e 01       	movw	r18, r28
    1774:	2f 5f       	subi	r18, 0xFF	; 255
    1776:	3f 4f       	sbci	r19, 0xFF	; 255
    1778:	f9 01       	movw	r30, r18
    177a:	98 2f       	mov	r25, r24
    177c:	11 92       	st	Z+, r1
    177e:	9a 95       	dec	r25
    1780:	e9 f7       	brne	.-6      	; 0x177c <send_prog+0x20>
    1782:	89 83       	std	Y+1, r24	; 0x01

	if(param != NULL) for(unsigned char i=0;i<6;i++)  data[i]=*(param+i);
    1784:	61 15       	cp	r22, r1
    1786:	71 05       	cpc	r23, r1
    1788:	61 f4       	brne	.+24     	; 0x17a2 <send_prog+0x46>
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    178a:	89 e0       	ldi	r24, 0x09	; 9
    178c:	18 9f       	mul	r17, r24
    178e:	f0 01       	movw	r30, r0
    1790:	11 24       	eor	r1, r1
    1792:	ef 59       	subi	r30, 0x9F	; 159
    1794:	fe 4f       	sbci	r31, 0xFE	; 254
    1796:	82 e0       	ldi	r24, 0x02	; 2
    1798:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,(param != NULL)?(6):(1),data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    179a:	67 2b       	or	r22, r23
    179c:	79 f4       	brne	.+30     	; 0x17bc <send_prog+0x60>
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	0e c0       	rjmp	.+28     	; 0x17be <send_prog+0x62>
    17a2:	f9 01       	movw	r30, r18

signed char send_prog(unsigned char addr,volatile unsigned char *param)
{
	unsigned char data[6]={PROG};

	if(param != NULL) for(unsigned char i=0;i<6;i++)  data[i]=*(param+i);
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	db 01       	movw	r26, r22
    17aa:	a8 0f       	add	r26, r24
    17ac:	b9 1f       	adc	r27, r25
    17ae:	4c 91       	ld	r20, X
    17b0:	41 93       	st	Z+, r20
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	86 30       	cpi	r24, 0x06	; 6
    17b6:	91 05       	cpc	r25, r1
    17b8:	b9 f7       	brne	.-18     	; 0x17a8 <send_prog+0x4c>
    17ba:	e7 cf       	rjmp	.-50     	; 0x178a <send_prog+0x2e>
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
	CAN_loadTXbuf((unsigned long int)addr,(param != NULL)?(6):(1),data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    17bc:	46 e0       	ldi	r20, 0x06	; 6
    17be:	81 2f       	mov	r24, r17
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	a0 e0       	ldi	r26, 0x00	; 0
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	07 ef       	ldi	r16, 0xF7	; 247
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 7d 07 	call	0xefa	; 0xefa <CAN_loadTXbuf>

	//если программируем широковещательно то ответа не будет
	return (addr==0)?(1):(checkTOUT(addr));
    17d0:	11 23       	and	r17, r17
    17d2:	21 f0       	breq	.+8      	; 0x17dc <send_prog+0x80>
    17d4:	81 2f       	mov	r24, r17
    17d6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <checkTOUT>
    17da:	01 c0       	rjmp	.+2      	; 0x17de <send_prog+0x82>
    17dc:	81 e0       	ldi	r24, 0x01	; 1
}
    17de:	26 96       	adiw	r28, 0x06	; 6
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	08 95       	ret

000017f4 <aks_for_logic>:

signed char aks_for_logic(unsigned char addr)
{
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <aks_for_logic+0xa>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <aks_for_logic+0xc>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <aks_for_logic+0xe>
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	18 2f       	mov	r17, r24
	unsigned char data[6]={PROG};
    1808:	86 e0       	ldi	r24, 0x06	; 6
    180a:	9e 01       	movw	r18, r28
    180c:	2f 5f       	subi	r18, 0xFF	; 255
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	f9 01       	movw	r30, r18
    1812:	98 2f       	mov	r25, r24
    1814:	11 92       	st	Z+, r1
    1816:	9a 95       	dec	r25
    1818:	e9 f7       	brne	.-6      	; 0x1814 <aks_for_logic+0x20>
    181a:	89 83       	std	Y+1, r24	; 0x01

	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    181c:	89 e0       	ldi	r24, 0x09	; 9
    181e:	18 9f       	mul	r17, r24
    1820:	f0 01       	movw	r30, r0
    1822:	11 24       	eor	r1, r1
    1824:	ef 59       	subi	r30, 0x9F	; 159
    1826:	fe 4f       	sbci	r31, 0xFE	; 254
    1828:	82 e0       	ldi	r24, 0x02	; 2
    182a:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,2,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    182c:	61 2f       	mov	r22, r17
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	07 ef       	ldi	r16, 0xF7	; 247
    1836:	42 e0       	ldi	r20, 0x02	; 2
    1838:	0e 94 7d 07 	call	0xefa	; 0xefa <CAN_loadTXbuf>

	//если программируем широковещательно то ответа не будет
	return (addr==0)?(1):(checkTOUT(addr));
    183c:	11 23       	and	r17, r17
    183e:	21 f0       	breq	.+8      	; 0x1848 <aks_for_logic+0x54>
    1840:	81 2f       	mov	r24, r17
    1842:	0e 94 62 01 	call	0x2c4	; 0x2c4 <checkTOUT>
    1846:	01 c0       	rjmp	.+2      	; 0x184a <aks_for_logic+0x56>
    1848:	81 e0       	ldi	r24, 0x01	; 1
}
    184a:	26 96       	adiw	r28, 0x06	; 6
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	08 95       	ret

00001860 <send_cmd>:

signed char send_cmd(unsigned char addr,unsigned char cmd)
{
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	1f 92       	push	r1
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	18 2f       	mov	r17, r24
    1870:	69 83       	std	Y+1, r22	; 0x01
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    1872:	89 e0       	ldi	r24, 0x09	; 9
    1874:	18 9f       	mul	r17, r24
    1876:	f0 01       	movw	r30, r0
    1878:	11 24       	eor	r1, r1
    187a:	ef 59       	subi	r30, 0x9F	; 159
    187c:	fe 4f       	sbci	r31, 0xFE	; 254
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,1,&cmd,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    1882:	61 2f       	mov	r22, r17
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	07 ef       	ldi	r16, 0xF7	; 247
    188c:	9e 01       	movw	r18, r28
    188e:	2f 5f       	subi	r18, 0xFF	; 255
    1890:	3f 4f       	sbci	r19, 0xFF	; 255
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 7d 07 	call	0xefa	; 0xefa <CAN_loadTXbuf>

	if(cmd==RESET) return 1;	//не требует ответа
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	82 30       	cpi	r24, 0x02	; 2
    189c:	21 f0       	breq	.+8      	; 0x18a6 <send_cmd+0x46>
	return 	checkTOUT(addr);
    189e:	81 2f       	mov	r24, r17
    18a0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <checkTOUT>
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <send_cmd+0x48>
{
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
	CAN_loadTXbuf((unsigned long int)addr,1,&cmd,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);

	if(cmd==RESET) return 1;	//не требует ответа
    18a6:	81 e0       	ldi	r24, 0x01	; 1
	return 	checkTOUT(addr);
}
    18a8:	0f 90       	pop	r0
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	1f 91       	pop	r17
    18b0:	0f 91       	pop	r16
    18b2:	08 95       	ret

000018b4 <__vector_1>:
}


//чтение принятого сообщения из буфера MCP2515 (CAN)
ISR(INT0_vect)
{
    18b4:	1f 92       	push	r1
    18b6:	0f 92       	push	r0
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	0f 92       	push	r0
    18bc:	11 24       	eor	r1, r1
    18be:	8f 92       	push	r8
    18c0:	9f 92       	push	r9
    18c2:	af 92       	push	r10
    18c4:	bf 92       	push	r11
    18c6:	cf 92       	push	r12
    18c8:	df 92       	push	r13
    18ca:	ef 92       	push	r14
    18cc:	ff 92       	push	r15
    18ce:	2f 93       	push	r18
    18d0:	3f 93       	push	r19
    18d2:	4f 93       	push	r20
    18d4:	5f 93       	push	r21
    18d6:	6f 93       	push	r22
    18d8:	7f 93       	push	r23
    18da:	8f 93       	push	r24
    18dc:	9f 93       	push	r25
    18de:	af 93       	push	r26
    18e0:	bf 93       	push	r27
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	2e 97       	sbiw	r28, 0x0e	; 14
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	cd bf       	out	0x3d, r28	; 61
		unsigned char dataLength;
		unsigned char data[8];
		unsigned char msg_flags;
	}tmpBuf;

	CAN_readRXbuf(&tmpBuf.ID, tmpBuf.data, &tmpBuf.dataLength, &tmpBuf.msg_flags);
    18f4:	9e 01       	movw	r18, r28
    18f6:	22 5f       	subi	r18, 0xF2	; 242
    18f8:	3f 4f       	sbci	r19, 0xFF	; 255
    18fa:	ae 01       	movw	r20, r28
    18fc:	4b 5f       	subi	r20, 0xFB	; 251
    18fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1900:	be 01       	movw	r22, r28
    1902:	6a 5f       	subi	r22, 0xFA	; 250
    1904:	7f 4f       	sbci	r23, 0xFF	; 255
    1906:	ce 01       	movw	r24, r28
    1908:	01 96       	adiw	r24, 0x01	; 1
    190a:	0e 94 4f 08 	call	0x109e	; 0x109e <CAN_readRXbuf>
	if(chkBit(sys_state,SCAN)) inSysBDZ[BDZ_ID].data[7]=BDZ_ID;								//если производится сканирование сохраняем откликнувшиеся ID в inSysBDZ[BDZ_ID].data[7]
    190e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    1912:	89 80       	ldd	r8, Y+1	; 0x01
    1914:	9a 80       	ldd	r9, Y+2	; 0x02
    1916:	ab 80       	ldd	r10, Y+3	; 0x03
    1918:	bc 80       	ldd	r11, Y+4	; 0x04
    191a:	84 ff       	sbrs	r24, 4
    191c:	11 c0       	rjmp	.+34     	; 0x1940 <__vector_1+0x8c>
    191e:	d5 01       	movw	r26, r10
    1920:	c4 01       	movw	r24, r8
    1922:	8f 77       	andi	r24, 0x7F	; 127
    1924:	99 27       	eor	r25, r25
    1926:	aa 27       	eor	r26, r26
    1928:	bb 27       	eor	r27, r27
    192a:	29 e0       	ldi	r18, 0x09	; 9
    192c:	28 9f       	mul	r18, r24
    192e:	f0 01       	movw	r30, r0
    1930:	29 9f       	mul	r18, r25
    1932:	f0 0d       	add	r31, r0
    1934:	11 24       	eor	r1, r1
    1936:	ef 59       	subi	r30, 0x9F	; 159
    1938:	fe 4f       	sbci	r31, 0xFE	; 254
    193a:	88 2d       	mov	r24, r8
    193c:	8f 77       	andi	r24, 0x7F	; 127
    193e:	87 83       	std	Z+7, r24	; 0x07

	if(readID(BDZ_ID) != BDZ_ID) {ERROR=ID;return;}											//проверка валидности (если ID не зарегистрирован)
    1940:	75 01       	movw	r14, r10
    1942:	64 01       	movw	r12, r8
    1944:	e8 94       	clt
    1946:	c7 f8       	bld	r12, 7
    1948:	dd 24       	eor	r13, r13
    194a:	ee 24       	eor	r14, r14
    194c:	ff 24       	eor	r15, r15
    194e:	c6 01       	movw	r24, r12
    1950:	87 5f       	subi	r24, 0xF7	; 247
    1952:	9f 4f       	sbci	r25, 0xFF	; 255
    1954:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a0 e0       	ldi	r26, 0x00	; 0
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	c8 16       	cp	r12, r24
    1960:	d9 06       	cpc	r13, r25
    1962:	ea 06       	cpc	r14, r26
    1964:	fb 06       	cpc	r15, r27
    1966:	21 f0       	breq	.+8      	; 0x1970 <__vector_1+0xbc>
    1968:	84 e0       	ldi	r24, 0x04	; 4
    196a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>
    196e:	40 c0       	rjmp	.+128    	; 0x19f0 <__vector_1+0x13c>

	setBit(inSysBDZ[BDZ_ID].flags,INL);														//ставим флаг инлайн
    1970:	89 e0       	ldi	r24, 0x09	; 9
    1972:	8c 9d       	mul	r24, r12
    1974:	f0 01       	movw	r30, r0
    1976:	8d 9d       	mul	r24, r13
    1978:	f0 0d       	add	r31, r0
    197a:	11 24       	eor	r1, r1
    197c:	ef 59       	subi	r30, 0x9F	; 159
    197e:	fe 4f       	sbci	r31, 0xFE	; 254
    1980:	80 85       	ldd	r24, Z+8	; 0x08
    1982:	84 60       	ori	r24, 0x04	; 4
    1984:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,10)==1) setBit(inSysBDZ[BDZ_ID].flags,CONF);
    1986:	92 fe       	sbrs	r9, 2
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <__vector_1+0xdc>
    198a:	80 85       	ldd	r24, Z+8	; 0x08
    198c:	80 62       	ori	r24, 0x20	; 32
    198e:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,9) ==0) setBit(inSysBDZ[BDZ_ID].flags,ALM);							//если есть авариz ставим флаг в БДЗ
    1990:	91 fc       	sbrc	r9, 1
    1992:	0b c0       	rjmp	.+22     	; 0x19aa <__vector_1+0xf6>
    1994:	89 e0       	ldi	r24, 0x09	; 9
    1996:	8c 9d       	mul	r24, r12
    1998:	f0 01       	movw	r30, r0
    199a:	8d 9d       	mul	r24, r13
    199c:	f0 0d       	add	r31, r0
    199e:	11 24       	eor	r1, r1
    19a0:	ef 59       	subi	r30, 0x9F	; 159
    19a2:	fe 4f       	sbci	r31, 0xFE	; 254
    19a4:	80 85       	ldd	r24, Z+8	; 0x08
    19a6:	81 60       	ori	r24, 0x01	; 1
    19a8:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,8) ==1) clrBit(inSysBDZ[BDZ_ID].flags,FLT);							//если нету неисправности обнуляем флаг в БДЗ
    19aa:	90 fe       	sbrs	r9, 0
    19ac:	0b c0       	rjmp	.+22     	; 0x19c4 <__vector_1+0x110>
    19ae:	89 e0       	ldi	r24, 0x09	; 9
    19b0:	8c 9d       	mul	r24, r12
    19b2:	f0 01       	movw	r30, r0
    19b4:	8d 9d       	mul	r24, r13
    19b6:	f0 0d       	add	r31, r0
    19b8:	11 24       	eor	r1, r1
    19ba:	ef 59       	subi	r30, 0x9F	; 159
    19bc:	fe 4f       	sbci	r31, 0xFE	; 254
    19be:	80 85       	ldd	r24, Z+8	; 0x08
    19c0:	8d 7f       	andi	r24, 0xFD	; 253
    19c2:	80 87       	std	Z+8, r24	; 0x08
	//inSysBDZ[BDZ_ID].data[0] = tmpBuf.ID>>8;
	for(unsigned char i=0;i<tmpBuf.dataLength;i++)inSysBDZ[BDZ_ID].data[i] = tmpBuf.data[i];//копируем данные
    19c4:	4d 81       	ldd	r20, Y+5	; 0x05
    19c6:	fe 01       	movw	r30, r28
    19c8:	36 96       	adiw	r30, 0x06	; 6
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	59 e0       	ldi	r21, 0x09	; 9
    19d0:	5c 9d       	mul	r21, r12
    19d2:	90 01       	movw	r18, r0
    19d4:	5d 9d       	mul	r21, r13
    19d6:	30 0d       	add	r19, r0
    19d8:	11 24       	eor	r1, r1
    19da:	2f 59       	subi	r18, 0x9F	; 159
    19dc:	3e 4f       	sbci	r19, 0xFE	; 254
    19de:	84 17       	cp	r24, r20
    19e0:	38 f4       	brcc	.+14     	; 0x19f0 <__vector_1+0x13c>
    19e2:	51 91       	ld	r21, Z+
    19e4:	d9 01       	movw	r26, r18
    19e6:	a8 0f       	add	r26, r24
    19e8:	b9 1f       	adc	r27, r25
    19ea:	5c 93       	st	X, r21
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	f7 cf       	rjmp	.-18     	; 0x19de <__vector_1+0x12a>
}
    19f0:	2e 96       	adiw	r28, 0x0e	; 14
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	ff 91       	pop	r31
    1a02:	ef 91       	pop	r30
    1a04:	bf 91       	pop	r27
    1a06:	af 91       	pop	r26
    1a08:	9f 91       	pop	r25
    1a0a:	8f 91       	pop	r24
    1a0c:	7f 91       	pop	r23
    1a0e:	6f 91       	pop	r22
    1a10:	5f 91       	pop	r21
    1a12:	4f 91       	pop	r20
    1a14:	3f 91       	pop	r19
    1a16:	2f 91       	pop	r18
    1a18:	ff 90       	pop	r15
    1a1a:	ef 90       	pop	r14
    1a1c:	df 90       	pop	r13
    1a1e:	cf 90       	pop	r12
    1a20:	bf 90       	pop	r11
    1a22:	af 90       	pop	r10
    1a24:	9f 90       	pop	r9
    1a26:	8f 90       	pop	r8
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	0f 90       	pop	r0
    1a2e:	1f 90       	pop	r1
    1a30:	18 95       	reti

00001a32 <scanID>:
//	while(1);
	return 3;					//длина сообщения об ошибке фиксирована
}

unsigned char scanID(unsigned char i)
{
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	18 2f       	mov	r17, r24
    1a3a:	cc e6       	ldi	r28, 0x6C	; 108
    1a3c:	d0 e0       	ldi	r29, 0x00	; 0
	for(unsigned char n=0;n<MAXQDEV;n++)
		if(readIDnew(n)==i) return 0;
    1a3e:	ce 01       	movw	r24, r28
    1a40:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    1a44:	81 17       	cp	r24, r17
    1a46:	39 f0       	breq	.+14     	; 0x1a56 <scanID+0x24>
    1a48:	21 96       	adiw	r28, 0x01	; 1
	return 3;					//длина сообщения об ошибке фиксирована
}

unsigned char scanID(unsigned char i)
{
	for(unsigned char n=0;n<MAXQDEV;n++)
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	cf 3c       	cpi	r28, 0xCF	; 207
    1a4e:	d8 07       	cpc	r29, r24
    1a50:	b1 f7       	brne	.-20     	; 0x1a3e <scanID+0xc>
		if(readIDnew(n)==i) return 0;
	return 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <scanID+0x26>
}

unsigned char scanID(unsigned char i)
{
	for(unsigned char n=0;n<MAXQDEV;n++)
		if(readIDnew(n)==i) return 0;
    1a56:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
}
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	08 95       	ret

00001a60 <scanKBD>:

unsigned char scanKBD(void)
{
	unsigned char kbd = (((PIND&0x38)>>1) | (PINC&0xE0)) & 0xFC;
    1a60:	20 b3       	in	r18, 0x10	; 16
    1a62:	83 b3       	in	r24, 0x13	; 19
    1a64:	28 73       	andi	r18, 0x38	; 56
    1a66:	26 95       	lsr	r18
    1a68:	80 7e       	andi	r24, 0xE0	; 224
    1a6a:	28 2b       	or	r18, r24
	static unsigned char prevkbd;

	if((kbd)==0xFC){prevkbd=0xFC; return NOKEY;}	//клавиша не нажата,вернули FF
    1a6c:	2c 3f       	cpi	r18, 0xFC	; 252
    1a6e:	19 f4       	brne	.+6      	; 0x1a76 <scanKBD+0x16>
    1a70:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <__data_end>
    1a74:	32 c0       	rjmp	.+100    	; 0x1ada <scanKBD+0x7a>
//	beep(10);					//пикалка + антидребезг

	if(prevkbd != kbd)
    1a76:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
    1a7a:	28 17       	cp	r18, r24
    1a7c:	71 f0       	breq	.+28     	; 0x1a9a <scanKBD+0x3a>
	return NOKEY;						//кнопка не нашлась.типа помеха.
}

static inline void beep(unsigned int lenght)
{
	setBit(PORTA,BEEP);					//пикалка + антидребезг
    1a7e:	dc 9a       	sbi	0x1b, 4	; 27
    1a80:	8a e0       	ldi	r24, 0x0A	; 10
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	ef e9       	ldi	r30, 0x9F	; 159
    1a86:	ff e0       	ldi	r31, 0x0F	; 15
    1a88:	31 97       	sbiw	r30, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <scanKBD+0x28>
    1a8c:	00 c0       	rjmp	.+0      	; 0x1a8e <scanKBD+0x2e>
    1a8e:	00 00       	nop
    1a90:	01 97       	sbiw	r24, 0x01	; 1
	for(unsigned int i=0;i<lenght;i++)_delay_ms(1);
    1a92:	c1 f7       	brne	.-16     	; 0x1a84 <scanKBD+0x24>
	clrBit(PORTA,BEEP);
    1a94:	dc 98       	cbi	0x1b, 4	; 27
//	beep(10);					//пикалка + антидребезг

	if(prevkbd != kbd)
	{
		beep(10);					//пикалка + антидребезг
		prevkbd = kbd;
    1a96:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <__data_end>
	}

	menuExit=EXITMENU;						//взводим таймер автовыхода
    1a9a:	80 e3       	ldi	r24, 0x30	; 48
    1a9c:	95 e7       	ldi	r25, 0x75	; 117
    1a9e:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <menuExit+0x1>
    1aa2:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <menuExit>
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
	for(char i=2;i<8;i++)
	{
		if(chkBit(kbd,i) ==0)return i;	//найдена нажатая кнопка.вернули код кнопки
    1aaa:	61 e0       	ldi	r22, 0x01	; 1
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	ab 01       	movw	r20, r22
    1ab2:	08 2e       	mov	r0, r24
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <scanKBD+0x5a>
    1ab6:	44 0f       	add	r20, r20
    1ab8:	55 1f       	adc	r21, r21
    1aba:	0a 94       	dec	r0
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <scanKBD+0x56>
    1abe:	42 23       	and	r20, r18
    1ac0:	53 23       	and	r21, r19
    1ac2:	08 2e       	mov	r0, r24
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <scanKBD+0x6a>
    1ac6:	55 95       	asr	r21
    1ac8:	47 95       	ror	r20
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <scanKBD+0x66>
    1ace:	45 2b       	or	r20, r21
    1ad0:	29 f0       	breq	.+10     	; 0x1adc <scanKBD+0x7c>
    1ad2:	01 96       	adiw	r24, 0x01	; 1
		beep(10);					//пикалка + антидребезг
		prevkbd = kbd;
	}

	menuExit=EXITMENU;						//взводим таймер автовыхода
	for(char i=2;i<8;i++)
    1ad4:	88 30       	cpi	r24, 0x08	; 8
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	59 f7       	brne	.-42     	; 0x1ab0 <scanKBD+0x50>
	{
		if(chkBit(kbd,i) ==0)return i;	//найдена нажатая кнопка.вернули код кнопки
	}
	return NOKEY;						//кнопка не нашлась.типа помеха.
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
}
    1adc:	08 95       	ret

00001ade <whileKey>:
	LCD_puts(buffer,20);

}

static inline unsigned char whileKey(void)
{
    1ade:	cf 93       	push	r28
	unsigned char tmpKey;

	while((tmpKey=scanKBD())==NOKEY) if(menuExit==0)return NOKEY;	//ждем нажатия кнопки или автовыхода
    1ae0:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <scanKBD>
    1ae4:	c8 2f       	mov	r28, r24
    1ae6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ae8:	41 f4       	brne	.+16     	; 0x1afa <whileKey+0x1c>
    1aea:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <menuExit>
    1aee:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <menuExit+0x1>
    1af2:	89 2b       	or	r24, r25
    1af4:	a9 f7       	brne	.-22     	; 0x1ae0 <whileKey+0x2>
    1af6:	8f ef       	ldi	r24, 0xFF	; 255
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <whileKey+0x26>
	while(scanKBD()!=NOKEY);										//...отпускания кнопки
    1afa:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <scanKBD>
    1afe:	8f 3f       	cpi	r24, 0xFF	; 255
    1b00:	e1 f7       	brne	.-8      	; 0x1afa <whileKey+0x1c>

static inline unsigned char whileKey(void)
{
	unsigned char tmpKey;

	while((tmpKey=scanKBD())==NOKEY) if(menuExit==0)return NOKEY;	//ждем нажатия кнопки или автовыхода
    1b02:	8c 2f       	mov	r24, r28
	while(scanKBD()!=NOKEY);										//...отпускания кнопки

	return tmpKey;
}
    1b04:	cf 91       	pop	r28
    1b06:	08 95       	ret

00001b08 <numm>:

	return 0;
}

static unsigned char numm(void)
{
    1b08:	cf 92       	push	r12
    1b0a:	df 92       	push	r13
    1b0c:	ef 92       	push	r14
    1b0e:	ff 92       	push	r15
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <numm+0x10>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
	unsigned char i=0;
	printMenuHeader(NUMM);	//прорисовываем заголовок
    1b1c:	86 e3       	ldi	r24, 0x36	; 54
    1b1e:	92 e0       	ldi	r25, 0x02	; 2
    1b20:	0e 94 71 06 	call	0xce2	; 0xce2 <printMenuHeader>
	return 0;
}

static unsigned char numm(void)
{
	unsigned char i=0;
    1b24:	10 e0       	ldi	r17, 0x00	; 0
	printMenuHeader(NUMM);	//прорисовываем заголовок
	while (1)
	{
		char str[2];
		LCD_gotoXY(0,2);
		sprintf(str,"%02d",i);
    1b26:	87 e1       	ldi	r24, 0x17	; 23
    1b28:	e8 2e       	mov	r14, r24
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	f8 2e       	mov	r15, r24
    1b2e:	ce 01       	movw	r24, r28
    1b30:	01 96       	adiw	r24, 0x01	; 1
    1b32:	6c 01       	movw	r12, r24
	unsigned char i=0;
	printMenuHeader(NUMM);	//прорисовываем заголовок
	while (1)
	{
		char str[2];
		LCD_gotoXY(0,2);
    1b34:	62 e0       	ldi	r22, 0x02	; 2
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		sprintf(str,"%02d",i);
    1b3c:	1f 92       	push	r1
    1b3e:	1f 93       	push	r17
    1b40:	ff 92       	push	r15
    1b42:	ef 92       	push	r14
    1b44:	df 92       	push	r13
    1b46:	cf 92       	push	r12
    1b48:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <sprintf>
		LCD_puts(str,4);
    1b4c:	64 e0       	ldi	r22, 0x04	; 4
    1b4e:	c6 01       	movw	r24, r12
    1b50:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1b54:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	85 30       	cpi	r24, 0x05	; 5
    1b66:	c9 f0       	breq	.+50     	; 0x1b9a <numm+0x92>
    1b68:	68 f4       	brcc	.+26     	; 0x1b84 <numm+0x7c>
    1b6a:	82 30       	cpi	r24, 0x02	; 2
    1b6c:	19 f7       	brne	.-58     	; 0x1b34 <numm+0x2c>
		break;
		case NOKEY:asm("jmp 0");
		break;
		}
	}
}
    1b6e:	81 2f       	mov	r24, r17
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	df 90       	pop	r13
    1b80:	cf 90       	pop	r12
    1b82:	08 95       	ret
		char str[2];
		LCD_gotoXY(0,2);
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1b84:	86 30       	cpi	r24, 0x06	; 6
    1b86:	29 f0       	breq	.+10     	; 0x1b92 <numm+0x8a>
    1b88:	8f 3f       	cpi	r24, 0xFF	; 255
    1b8a:	a1 f6       	brne	.-88     	; 0x1b34 <numm+0x2c>
		break;
		case UP:if(i==99) i=0; else i++;
		break;
		case ENT:return i;	//выход по ENT (отсылка новых параметров)
		break;
		case NOKEY:asm("jmp 0");
    1b8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    1b90:	d1 cf       	rjmp	.-94     	; 0x1b34 <numm+0x2c>
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(i==0) i=99; else i--;
    1b92:	11 23       	and	r17, r17
    1b94:	31 f0       	breq	.+12     	; 0x1ba2 <numm+0x9a>
    1b96:	11 50       	subi	r17, 0x01	; 1
    1b98:	cd cf       	rjmp	.-102    	; 0x1b34 <numm+0x2c>
		break;
		case UP:if(i==99) i=0; else i++;
    1b9a:	13 36       	cpi	r17, 0x63	; 99
    1b9c:	21 f0       	breq	.+8      	; 0x1ba6 <numm+0x9e>
    1b9e:	1f 5f       	subi	r17, 0xFF	; 255
    1ba0:	c9 cf       	rjmp	.-110    	; 0x1b34 <numm+0x2c>
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(i==0) i=99; else i--;
    1ba2:	13 e6       	ldi	r17, 0x63	; 99
    1ba4:	c7 cf       	rjmp	.-114    	; 0x1b34 <numm+0x2c>
		break;
		case UP:if(i==99) i=0; else i++;
    1ba6:	10 e0       	ldi	r17, 0x00	; 0
		case ENT:return i;	//выход по ENT (отсылка новых параметров)
		break;
		case NOKEY:asm("jmp 0");
		break;
		}
	}
    1ba8:	c5 cf       	rjmp	.-118    	; 0x1b34 <numm+0x2c>

00001baa <change_param>:
		}
	}
}

static void change_param(unsigned char nParam)
{
    1baa:	4f 92       	push	r4
    1bac:	5f 92       	push	r5
    1bae:	6f 92       	push	r6
    1bb0:	7f 92       	push	r7
    1bb2:	8f 92       	push	r8
    1bb4:	9f 92       	push	r9
    1bb6:	af 92       	push	r10
    1bb8:	bf 92       	push	r11
    1bba:	cf 92       	push	r12
    1bbc:	df 92       	push	r13
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <change_param+0x22>
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <change_param+0x24>
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <change_param+0x26>
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	48 2e       	mov	r4, r24
    1bd6:	01 e0       	ldi	r16, 0x01	; 1
    1bd8:	10 e0       	ldi	r17, 0x00	; 0
	signed char numBDZ=0;	//кол-во инлайновых БДЗ;
    1bda:	f1 2c       	mov	r15, r1
	unsigned char addr=0,step;
	signed int param=0,max,staroe=0;

	//scansys();
	//считаем кол-во БДЗ инлайн
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) {numBDZ++;/*addr=readID(i);*/}
    1bdc:	49 e0       	ldi	r20, 0x09	; 9
    1bde:	e4 2e       	mov	r14, r20
    1be0:	c8 01       	movw	r24, r16
    1be2:	87 5f       	subi	r24, 0xF7	; 247
    1be4:	9f 4f       	sbci	r25, 0xFF	; 255
    1be6:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    1bea:	80 13       	cpse	r24, r16
    1bec:	0a c0       	rjmp	.+20     	; 0x1c02 <change_param+0x58>
    1bee:	e0 9e       	mul	r14, r16
    1bf0:	f0 01       	movw	r30, r0
    1bf2:	e1 9e       	mul	r14, r17
    1bf4:	f0 0d       	add	r31, r0
    1bf6:	11 24       	eor	r1, r1
    1bf8:	ef 59       	subi	r30, 0x9F	; 159
    1bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfc:	80 85       	ldd	r24, Z+8	; 0x08
    1bfe:	82 fd       	sbrc	r24, 2
    1c00:	f3 94       	inc	r15
    1c02:	0f 5f       	subi	r16, 0xFF	; 255
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	03 36       	cpi	r16, 0x63	; 99
    1c08:	11 05       	cpc	r17, r1
    1c0a:	51 f7       	brne	.-44     	; 0x1be0 <change_param+0x36>

	if (numBDZ>1) addr=numm();//адрес БДЗ в котором будем менять, если addr=0 значит запрос широковещательный
    1c0c:	21 e0       	ldi	r18, 0x01	; 1
    1c0e:	2f 15       	cp	r18, r15
    1c10:	24 f5       	brge	.+72     	; 0x1c5a <change_param+0xb0>
    1c12:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <numm>
    1c16:	58 2e       	mov	r5, r24

	if(nParam==0 && addr==0) {printUNAVALIABLE();_delay_ms(2000);return;} //нельзя менять адрес во всех БДЗ разом
    1c18:	41 10       	cpse	r4, r1
    1c1a:	0a c0       	rjmp	.+20     	; 0x1c30 <change_param+0x86>
    1c1c:	81 11       	cpse	r24, r1
    1c1e:	0a c0       	rjmp	.+20     	; 0x1c34 <change_param+0x8a>
	LCD_gotoXY(0,2);LCD_puts_P(NET_SVYAZI,20);
}

static inline void printUNAVALIABLE(void)
{
	LCD_gotoXY(0,2);LCD_puts_P(NEDOSTUPNO,20);
    1c20:	62 e0       	ldi	r22, 0x02	; 2
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
    1c28:	64 e1       	ldi	r22, 0x14	; 20
    1c2a:	84 e5       	ldi	r24, 0x54	; 84
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0c c1       	rjmp	.+536    	; 0x1e48 <change_param+0x29e>
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) {numBDZ++;/*addr=readID(i);*/}

	if (numBDZ>1) addr=numm();//адрес БДЗ в котором будем менять, если addr=0 значит запрос широковещательный

	if(nParam==0 && addr==0) {printUNAVALIABLE();_delay_ms(2000);return;} //нельзя менять адрес во всех БДЗ разом
	if (addr!=0) //если запрос не широковещательный, то считываем показания БДЗ под № "addr"
    1c30:	88 23       	and	r24, r24
    1c32:	a9 f0       	breq	.+42     	; 0x1c5e <change_param+0xb4>
	{
		if((send_prog(addr,NULL) <0)||(inSysBDZ[addr].data[0] !=PROG))	{printTOUT();_delay_ms(2000);return;}
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	85 2d       	mov	r24, r5
    1c3a:	0e 94 ae 0b 	call	0x175c	; 0x175c <send_prog>
    1c3e:	87 fd       	sbrc	r24, 7
    1c40:	09 c0       	rjmp	.+18     	; 0x1c54 <change_param+0xaa>
    1c42:	29 e0       	ldi	r18, 0x09	; 9
    1c44:	52 9e       	mul	r5, r18
    1c46:	f0 01       	movw	r30, r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	ef 59       	subi	r30, 0x9F	; 159
    1c4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4e:	80 81       	ld	r24, Z
    1c50:	86 30       	cpi	r24, 0x06	; 6
    1c52:	31 f0       	breq	.+12     	; 0x1c60 <change_param+0xb6>
    1c54:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printTOUT>
    1c58:	f9 c0       	rjmp	.+498    	; 0x1e4c <change_param+0x2a2>
	//считаем кол-во БДЗ инлайн
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) {numBDZ++;/*addr=readID(i);*/}

	if (numBDZ>1) addr=numm();//адрес БДЗ в котором будем менять, если addr=0 значит запрос широковещательный

	if(nParam==0 && addr==0) {printUNAVALIABLE();_delay_ms(2000);return;} //нельзя менять адрес во всех БДЗ разом
    1c5a:	44 20       	and	r4, r4
    1c5c:	09 f3       	breq	.-62     	; 0x1c20 <change_param+0x76>
	}
}

static void change_param(unsigned char nParam)
{
	signed char numBDZ=0;	//кол-во инлайновых БДЗ;
    1c5e:	51 2c       	mov	r5, r1
	if (addr!=0) //если запрос не широковещательный, то считываем показания БДЗ под № "addr"
	{
		if((send_prog(addr,NULL) <0)||(inSysBDZ[addr].data[0] !=PROG))	{printTOUT();_delay_ms(2000);return;}
	}

	switch(nParam)
    1c60:	e1 e0       	ldi	r30, 0x01	; 1
    1c62:	4e 16       	cp	r4, r30
    1c64:	01 f1       	breq	.+64     	; 0x1ca6 <change_param+0xfc>
    1c66:	4e 16       	cp	r4, r30
    1c68:	88 f0       	brcs	.+34     	; 0x1c8c <change_param+0xe2>
    1c6a:	f2 e0       	ldi	r31, 0x02	; 2
    1c6c:	4f 12       	cpse	r4, r31
    1c6e:	10 c1       	rjmp	.+544    	; 0x1e90 <change_param+0x2e6>
	}
	break;
	//время УРОВ:если на связи 1 БДЗ пишем его время УРОВ, если больше то 0мс
	case 2:
	{
		staroe=(signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5];
    1c70:	89 e0       	ldi	r24, 0x09	; 9
    1c72:	58 9e       	mul	r5, r24
    1c74:	f0 01       	movw	r30, r0
    1c76:	11 24       	eor	r1, r1
    1c78:	ef 59       	subi	r30, 0x9F	; 159
    1c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c7c:	84 81       	ldd	r24, Z+4	; 0x04
    1c7e:	e5 80       	ldd	r14, Z+5	; 0x05
    1c80:	f1 2c       	mov	r15, r1
    1c82:	f8 2a       	or	r15, r24
		//param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5]):(0);
		inSysBDZ[addr].data[2]=inSysBDZ[addr].data[3]=-1;	//в неизменяемый параметр пишем -1
    1c84:	8f ef       	ldi	r24, 0xFF	; 255
    1c86:	83 83       	std	Z+3, r24	; 0x03
    1c88:	82 83       	std	Z+2, r24	; 0x02
    1c8a:	1a c0       	rjmp	.+52     	; 0x1cc0 <change_param+0x116>
	}

	switch(nParam)
	{
	//изменение адреса
	case 0:{staroe=inSysBDZ[addr].data[1];max=99;step=1;}
    1c8c:	29 e0       	ldi	r18, 0x09	; 9
    1c8e:	52 9e       	mul	r5, r18
    1c90:	f0 01       	movw	r30, r0
    1c92:	11 24       	eor	r1, r1
    1c94:	ef 59       	subi	r30, 0x9F	; 159
    1c96:	fe 4f       	sbci	r31, 0xFE	; 254
    1c98:	e1 80       	ldd	r14, Z+1	; 0x01
    1c9a:	f1 2c       	mov	r15, r1
    1c9c:	33 e6       	ldi	r19, 0x63	; 99
    1c9e:	83 2e       	mov	r8, r19
    1ca0:	91 2c       	mov	r9, r1
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
	break;
    1ca4:	12 c0       	rjmp	.+36     	; 0x1cca <change_param+0x120>
	//время МТЗ:если на связи 1 БДЗ пишем его время МТЗ, если больше то 0мс
	case 1:
	{
		staroe=(signed int)inSysBDZ[addr].data[2]<<8 | inSysBDZ[addr].data[3];
    1ca6:	39 e0       	ldi	r19, 0x09	; 9
    1ca8:	53 9e       	mul	r5, r19
    1caa:	f0 01       	movw	r30, r0
    1cac:	11 24       	eor	r1, r1
    1cae:	ef 59       	subi	r30, 0x9F	; 159
    1cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	e3 80       	ldd	r14, Z+3	; 0x03
    1cb6:	f1 2c       	mov	r15, r1
    1cb8:	f8 2a       	or	r15, r24
		//param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[2]<<8 | inSysBDZ[addr].data[3]):(0);
		inSysBDZ[addr].data[4]=inSysBDZ[addr].data[5]=-1;	//в неизменяемый параметр пишем -1
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	85 83       	std	Z+5, r24	; 0x05
    1cbe:	84 83       	std	Z+4, r24	; 0x04
	case 2:
	{
		staroe=(signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5];
		//param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5]):(0);
		inSysBDZ[addr].data[2]=inSysBDZ[addr].data[3]=-1;	//в неизменяемый параметр пишем -1
		max=30000;
    1cc0:	20 e3       	ldi	r18, 0x30	; 48
    1cc2:	82 2e       	mov	r8, r18
    1cc4:	25 e7       	ldi	r18, 0x75	; 117
    1cc6:	92 2e       	mov	r9, r18
		step=10;
    1cc8:	8a e0       	ldi	r24, 0x0A	; 10
    1cca:	00 e0       	ldi	r16, 0x00	; 0
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
    1cce:	fe 01       	movw	r30, r28
    1cd0:	31 96       	adiw	r30, 0x01	; 1
    1cd2:	6f 01       	movw	r12, r30
		if(addr!=0)
		{
			LCD_gotoXY(0,0);
			LCD_puts_P(STAROE_ZNACHENIE,16);
			LCD_putchar(0x3A);
			sprintf(str,"%d",staroe);
    1cd4:	9c e1       	ldi	r25, 0x1C	; 28
    1cd6:	69 2e       	mov	r6, r25
    1cd8:	91 e0       	ldi	r25, 0x01	; 1
    1cda:	79 2e       	mov	r7, r25
		if(nParam!=0)LCD_puts_P(MS,2);
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(param>(nParam==0)?(1):(0))param-=step;
		break;
		case UP:if(param<max)param+=step;
    1cdc:	a8 2e       	mov	r10, r24
    1cde:	b1 2c       	mov	r11, r1
	}

	while(1)
	{
		char str[6];
		LCD_clr();
    1ce0:	0e 94 12 04 	call	0x824	; 0x824 <LCD_clr>
		if(addr!=0)
    1ce4:	55 20       	and	r5, r5
    1ce6:	81 f1       	breq	.+96     	; 0x1d48 <change_param+0x19e>
		{
			LCD_gotoXY(0,0);
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
			LCD_puts_P(STAROE_ZNACHENIE,16);
    1cf0:	60 e1       	ldi	r22, 0x10	; 16
    1cf2:	86 e2       	ldi	r24, 0x26	; 38
    1cf4:	92 e0       	ldi	r25, 0x02	; 2
    1cf6:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
			LCD_putchar(0x3A);
    1cfa:	8a e3       	ldi	r24, 0x3A	; 58
    1cfc:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
			sprintf(str,"%d",staroe);
    1d00:	ff 92       	push	r15
    1d02:	ef 92       	push	r14
    1d04:	7f 92       	push	r7
    1d06:	6f 92       	push	r6
    1d08:	df 92       	push	r13
    1d0a:	cf 92       	push	r12
    1d0c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <sprintf>
			LCD_gotoXY(0,1);
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
			LCD_puts(str,strlen(str));
    1d18:	f6 01       	movw	r30, r12
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	00 20       	and	r0, r0
    1d1e:	e9 f7       	brne	.-6      	; 0x1d1a <change_param+0x170>
    1d20:	31 97       	sbiw	r30, 0x01	; 1
    1d22:	bf 01       	movw	r22, r30
    1d24:	6c 19       	sub	r22, r12
    1d26:	7d 09       	sbc	r23, r13
    1d28:	c6 01       	movw	r24, r12
    1d2a:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
			if(nParam!=0)LCD_puts_P(MS,2);
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	44 20       	and	r4, r4
    1d3c:	29 f0       	breq	.+10     	; 0x1d48 <change_param+0x19e>
    1d3e:	62 e0       	ldi	r22, 0x02	; 2
    1d40:	85 e7       	ldi	r24, 0x75	; 117
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
		}

		LCD_gotoXY(0,2);
    1d48:	62 e0       	ldi	r22, 0x02	; 2
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		LCD_puts_P(NOVOE_ZNACHENIE,strlen_P(NOVOE_ZNACHENIE));
    1d50:	6e e0       	ldi	r22, 0x0E	; 14
    1d52:	8f e5       	ldi	r24, 0x5F	; 95
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
		LCD_putchar(0x3A);
    1d5a:	8a e3       	ldi	r24, 0x3A	; 58
    1d5c:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
		sprintf(str,"%d",param);
    1d60:	1f 93       	push	r17
    1d62:	0f 93       	push	r16
    1d64:	7f 92       	push	r7
    1d66:	6f 92       	push	r6
    1d68:	df 92       	push	r13
    1d6a:	cf 92       	push	r12
    1d6c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <sprintf>
		LCD_gotoXY(0,3);
    1d70:	63 e0       	ldi	r22, 0x03	; 3
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		LCD_puts(str,strlen(str));
    1d78:	f6 01       	movw	r30, r12
    1d7a:	01 90       	ld	r0, Z+
    1d7c:	00 20       	and	r0, r0
    1d7e:	e9 f7       	brne	.-6      	; 0x1d7a <change_param+0x1d0>
    1d80:	31 97       	sbiw	r30, 0x01	; 1
    1d82:	bf 01       	movw	r22, r30
    1d84:	6c 19       	sub	r22, r12
    1d86:	7d 09       	sbc	r23, r13
    1d88:	c6 01       	movw	r24, r12
    1d8a:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
		if(nParam!=0)LCD_puts_P(MS,2);
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	44 20       	and	r4, r4
    1d9c:	29 f0       	breq	.+10     	; 0x1da8 <change_param+0x1fe>
    1d9e:	62 e0       	ldi	r22, 0x02	; 2
    1da0:	85 e7       	ldi	r24, 0x75	; 117
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1da8:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    1dac:	85 30       	cpi	r24, 0x05	; 5
    1dae:	e1 f0       	breq	.+56     	; 0x1de8 <change_param+0x23e>
    1db0:	30 f4       	brcc	.+12     	; 0x1dbe <change_param+0x214>
    1db2:	82 30       	cpi	r24, 0x02	; 2
    1db4:	01 f1       	breq	.+64     	; 0x1df6 <change_param+0x24c>
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <change_param+0x212>
    1dba:	6a c0       	rjmp	.+212    	; 0x1e90 <change_param+0x2e6>
    1dbc:	91 cf       	rjmp	.-222    	; 0x1ce0 <change_param+0x136>
    1dbe:	86 30       	cpi	r24, 0x06	; 6
    1dc0:	31 f0       	breq	.+12     	; 0x1dce <change_param+0x224>
    1dc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <change_param+0x21e>
    1dc6:	8c cf       	rjmp	.-232    	; 0x1ce0 <change_param+0x136>
		break;
		case ENT:goto SEND;	//выход по ENT (отсылка новых параметров)
		break;
		case ESC:return;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");
    1dc8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
		}
	}
    1dcc:	89 cf       	rjmp	.-238    	; 0x1ce0 <change_param+0x136>
		LCD_gotoXY(0,3);
		LCD_puts(str,strlen(str));
		if(nParam!=0)LCD_puts_P(MS,2);
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(param>(nParam==0)?(1):(0))param-=step;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	44 20       	and	r4, r4
    1dd4:	11 f0       	breq	.+4      	; 0x1dda <change_param+0x230>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	80 17       	cp	r24, r16
    1ddc:	91 07       	cpc	r25, r17
    1dde:	0c f0       	brlt	.+2      	; 0x1de2 <change_param+0x238>
    1de0:	7f cf       	rjmp	.-258    	; 0x1ce0 <change_param+0x136>
    1de2:	0a 19       	sub	r16, r10
    1de4:	1b 09       	sbc	r17, r11
    1de6:	7c cf       	rjmp	.-264    	; 0x1ce0 <change_param+0x136>
		break;
		case UP:if(param<max)param+=step;
    1de8:	08 15       	cp	r16, r8
    1dea:	19 05       	cpc	r17, r9
    1dec:	0c f0       	brlt	.+2      	; 0x1df0 <change_param+0x246>
    1dee:	78 cf       	rjmp	.-272    	; 0x1ce0 <change_param+0x136>
    1df0:	0a 0d       	add	r16, r10
    1df2:	1b 1d       	adc	r17, r11
    1df4:	75 cf       	rjmp	.-278    	; 0x1ce0 <change_param+0x136>
	}
SEND:
	//отсылка новых параметров
	//if(eeprom_read_byte(&inSysBDZaddr[addr])!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}

	inSysBDZ[addr].data[0]=PROG;
    1df6:	c5 2c       	mov	r12, r5
    1df8:	d1 2c       	mov	r13, r1
    1dfa:	f9 e0       	ldi	r31, 0x09	; 9
    1dfc:	5f 9e       	mul	r5, r31
    1dfe:	c0 01       	movw	r24, r0
    1e00:	11 24       	eor	r1, r1
    1e02:	9c 01       	movw	r18, r24
    1e04:	2f 59       	subi	r18, 0x9F	; 159
    1e06:	3e 4f       	sbci	r19, 0xFE	; 254
    1e08:	79 01       	movw	r14, r18
    1e0a:	86 e0       	ldi	r24, 0x06	; 6
    1e0c:	f9 01       	movw	r30, r18
    1e0e:	80 83       	st	Z, r24
	switch(nParam)
    1e10:	f1 e0       	ldi	r31, 0x01	; 1
    1e12:	4f 16       	cp	r4, r31
    1e14:	41 f1       	breq	.+80     	; 0x1e66 <change_param+0x2bc>
    1e16:	4f 16       	cp	r4, r31
    1e18:	38 f0       	brcs	.+14     	; 0x1e28 <change_param+0x27e>
    1e1a:	22 e0       	ldi	r18, 0x02	; 2
    1e1c:	42 12       	cpse	r4, r18
    1e1e:	38 c0       	rjmp	.+112    	; 0x1e90 <change_param+0x2e6>
	case 0:	if(readID(param)!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}
			inSysBDZ[addr].data[1]=param;
	break;
	case 1:{inSysBDZ[addr].data[2]=param >>8; inSysBDZ[addr].data[3]=param & 0x00FF;}
	break;
	case 2:{inSysBDZ[addr].data[4]=param >>8; inSysBDZ[addr].data[5]=param & 0x00FF;}
    1e20:	f7 01       	movw	r30, r14
    1e22:	14 83       	std	Z+4, r17	; 0x04
    1e24:	05 83       	std	Z+5, r16	; 0x05
	break;
    1e26:	22 c0       	rjmp	.+68     	; 0x1e6c <change_param+0x2c2>
	//if(eeprom_read_byte(&inSysBDZaddr[addr])!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}

	inSysBDZ[addr].data[0]=PROG;
	switch(nParam)
	{
	case 0:	if(readID(param)!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}
    1e28:	c8 01       	movw	r24, r16
    1e2a:	87 5f       	subi	r24, 0xF7	; 247
    1e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2e:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    1e32:	88 23       	and	r24, r24
    1e34:	a9 f0       	breq	.+42     	; 0x1e60 <change_param+0x2b6>
    1e36:	0e 94 12 04 	call	0x824	; 0x824 <LCD_clr>
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
    1e42:	64 e1       	ldi	r22, 0x14	; 20
    1e44:	83 e1       	ldi	r24, 0x13	; 19
    1e46:	92 e0       	ldi	r25, 0x02	; 2
    1e48:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
    1e4c:	3f ef       	ldi	r19, 0xFF	; 255
    1e4e:	87 ea       	ldi	r24, 0xA7	; 167
    1e50:	91 e6       	ldi	r25, 0x61	; 97
    1e52:	31 50       	subi	r19, 0x01	; 1
    1e54:	80 40       	sbci	r24, 0x00	; 0
    1e56:	90 40       	sbci	r25, 0x00	; 0
    1e58:	e1 f7       	brne	.-8      	; 0x1e52 <change_param+0x2a8>
    1e5a:	00 c0       	rjmp	.+0      	; 0x1e5c <change_param+0x2b2>
    1e5c:	00 00       	nop
    1e5e:	18 c0       	rjmp	.+48     	; 0x1e90 <change_param+0x2e6>
			inSysBDZ[addr].data[1]=param;
    1e60:	f7 01       	movw	r30, r14
    1e62:	01 83       	std	Z+1, r16	; 0x01
	break;
    1e64:	03 c0       	rjmp	.+6      	; 0x1e6c <change_param+0x2c2>
	case 1:{inSysBDZ[addr].data[2]=param >>8; inSysBDZ[addr].data[3]=param & 0x00FF;}
    1e66:	f9 01       	movw	r30, r18
    1e68:	12 83       	std	Z+2, r17	; 0x02
    1e6a:	03 83       	std	Z+3, r16	; 0x03
	break;
	case 2:{inSysBDZ[addr].data[4]=param >>8; inSysBDZ[addr].data[5]=param & 0x00FF;}
	break;
	default:return;
	}
	if((send_prog(addr,inSysBDZ[addr].data)<0) && (param!=0)){printTOUT();_delay_ms(2000);return;}
    1e6c:	89 e0       	ldi	r24, 0x09	; 9
    1e6e:	8c 9d       	mul	r24, r12
    1e70:	b0 01       	movw	r22, r0
    1e72:	8d 9d       	mul	r24, r13
    1e74:	70 0d       	add	r23, r0
    1e76:	11 24       	eor	r1, r1
    1e78:	6f 59       	subi	r22, 0x9F	; 159
    1e7a:	7e 4f       	sbci	r23, 0xFE	; 254
    1e7c:	85 2d       	mov	r24, r5
    1e7e:	0e 94 ae 0b 	call	0x175c	; 0x175c <send_prog>
    1e82:	87 ff       	sbrs	r24, 7
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <change_param+0x2e2>
    1e86:	01 2b       	or	r16, r17
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <change_param+0x2e2>
    1e8a:	e4 ce       	rjmp	.-568    	; 0x1c54 <change_param+0xaa>
	scansys();
    1e8c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <scansys>

	return;
}
    1e90:	26 96       	adiw	r28, 0x06	; 6
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	ff 90       	pop	r15
    1ea6:	ef 90       	pop	r14
    1ea8:	df 90       	pop	r13
    1eaa:	cf 90       	pop	r12
    1eac:	bf 90       	pop	r11
    1eae:	af 90       	pop	r10
    1eb0:	9f 90       	pop	r9
    1eb2:	8f 90       	pop	r8
    1eb4:	7f 90       	pop	r7
    1eb6:	6f 90       	pop	r6
    1eb8:	5f 90       	pop	r5
    1eba:	4f 90       	pop	r4
    1ebc:	08 95       	ret

00001ebe <vremya_urov>:
	change_param(1);
}

static void vremya_urov(void)
{
	change_param(2);
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <change_param>

00001ec4 <vremya_mtz>:
	naviMenu(LVL_prog);
}

static void vremya_mtz(void)
{
	change_param(1);
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <change_param>

00001eca <adres>:
	change_param(2);
}

static void adres(void)
{
	change_param(0);
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <change_param>

00001ed0 <datavremya>:
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}

static void datavremya(void)
{
    1ed0:	cf 92       	push	r12
    1ed2:	df 92       	push	r13
    1ed4:	ef 92       	push	r14
    1ed6:	ff 92       	push	r15
    1ed8:	0f 93       	push	r16
    1eda:	1f 93       	push	r17
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	a6 97       	sbiw	r28, 0x26	; 38
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
	char buffer[20],max[]={31,12,99,23,59,59},min;
    1ef0:	86 e0       	ldi	r24, 0x06	; 6
    1ef2:	e4 ee       	ldi	r30, 0xE4	; 228
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	de 01       	movw	r26, r28
    1ef8:	91 96       	adiw	r26, 0x21	; 33
    1efa:	01 90       	ld	r0, Z+
    1efc:	0d 92       	st	X+, r0
    1efe:	8a 95       	dec	r24
    1f00:	e1 f7       	brne	.-8      	; 0x1efa <datavremya+0x2a>
	unsigned char cursorPos=0;
	unsigned char *ptr[] = {&rtc.day,&rtc.month,&rtc.year,&rtc.hours,&rtc.minutes,&rtc.seconds};
    1f02:	8c e0       	ldi	r24, 0x0C	; 12
    1f04:	ea ee       	ldi	r30, 0xEA	; 234
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	de 01       	movw	r26, r28
    1f0a:	55 96       	adiw	r26, 0x15	; 21
    1f0c:	01 90       	ld	r0, Z+
    1f0e:	0d 92       	st	X+, r0
    1f10:	8a 95       	dec	r24
    1f12:	e1 f7       	brne	.-8      	; 0x1f0c <datavremya+0x3c>

	printMenuHeader(DATAVREMYA);
    1f14:	83 e6       	ldi	r24, 0x63	; 99
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	0e 94 71 06 	call	0xce2	; 0xce2 <printMenuHeader>

	if(rtc_get(&rtc) < 0) {ERROR=RTC;/*return -1;*/}
    1f1c:	80 ef       	ldi	r24, 0xF0	; 240
    1f1e:	94 e0       	ldi	r25, 0x04	; 4
    1f20:	0e 94 c8 02 	call	0x590	; 0x590 <rtc_get>
    1f24:	87 ff       	sbrs	r24, 7
    1f26:	03 c0       	rjmp	.+6      	; 0x1f2e <datavremya+0x5e>
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}

static void datavremya(void)
{
    1f2e:	10 e0       	ldi	r17, 0x00	; 0
	if(rtc_get(&rtc) < 0) {ERROR=RTC;/*return -1;*/}


	while(1)
	{
		sprintf(buffer," %02u.%02u.%02u %02u:%02u:%02u",*ptr[0],*ptr[1],*ptr[2],*ptr[3],*ptr[4],*ptr[5]);
    1f30:	5f e1       	ldi	r21, 0x1F	; 31
    1f32:	c5 2e       	mov	r12, r21
    1f34:	51 e0       	ldi	r21, 0x01	; 1
    1f36:	d5 2e       	mov	r13, r21
    1f38:	ce 01       	movw	r24, r28
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	7c 01       	movw	r14, r24
    1f3e:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <rtc+0x5>
    1f42:	1f 92       	push	r1
    1f44:	8f 93       	push	r24
    1f46:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <rtc+0x4>
    1f4a:	1f 92       	push	r1
    1f4c:	8f 93       	push	r24
    1f4e:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <rtc+0x3>
    1f52:	1f 92       	push	r1
    1f54:	8f 93       	push	r24
    1f56:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <rtc>
    1f5a:	1f 92       	push	r1
    1f5c:	8f 93       	push	r24
    1f5e:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <rtc+0x1>
    1f62:	1f 92       	push	r1
    1f64:	8f 93       	push	r24
    1f66:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <rtc+0x2>
    1f6a:	1f 92       	push	r1
    1f6c:	8f 93       	push	r24
    1f6e:	df 92       	push	r13
    1f70:	cf 92       	push	r12
    1f72:	ff 92       	push	r15
    1f74:	ef 92       	push	r14
    1f76:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <sprintf>
		LCD_gotoXY(0,3);
    1f7a:	63 e0       	ldi	r22, 0x03	; 3
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		LCD_puts(buffer,18);
    1f82:	62 e1       	ldi	r22, 0x12	; 18
    1f84:	c7 01       	movw	r24, r14
    1f86:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
		LCD_gotoXY(cursorPos*3,3);
    1f8a:	63 e0       	ldi	r22, 0x03	; 3
    1f8c:	81 2f       	mov	r24, r17
    1f8e:	88 0f       	add	r24, r24
    1f90:	81 0f       	add	r24, r17
    1f92:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		LCD_putchar(0x84);
    1f96:	84 e8       	ldi	r24, 0x84	; 132
    1f98:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
		min=(cursorPos < 2)?(1):(0);
    1f9c:	01 e0       	ldi	r16, 0x01	; 1
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	12 30       	cpi	r17, 0x02	; 2
    1faa:	08 f0       	brcs	.+2      	; 0x1fae <datavremya+0xde>
    1fac:	00 e0       	ldi	r16, 0x00	; 0

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1fae:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    1fb2:	85 30       	cpi	r24, 0x05	; 5
    1fb4:	b1 f0       	breq	.+44     	; 0x1fe2 <datavremya+0x112>
    1fb6:	30 f4       	brcc	.+12     	; 0x1fc4 <datavremya+0xf4>
    1fb8:	82 30       	cpi	r24, 0x02	; 2
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <datavremya+0xee>
    1fbc:	43 c0       	rjmp	.+134    	; 0x2044 <datavremya+0x174>
    1fbe:	84 30       	cpi	r24, 0x04	; 4
    1fc0:	59 f0       	breq	.+22     	; 0x1fd8 <datavremya+0x108>
    1fc2:	44 c0       	rjmp	.+136    	; 0x204c <datavremya+0x17c>
    1fc4:	86 30       	cpi	r24, 0x06	; 6
    1fc6:	29 f1       	breq	.+74     	; 0x2012 <datavremya+0x142>
    1fc8:	87 30       	cpi	r24, 0x07	; 7
    1fca:	09 f0       	breq	.+2      	; 0x1fce <datavremya+0xfe>
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <datavremya+0x17c>
		{
		case RIGHT: if(cursorPos < 5) cursorPos++;
    1fce:	15 30       	cpi	r17, 0x05	; 5
    1fd0:	08 f0       	brcs	.+2      	; 0x1fd4 <datavremya+0x104>
    1fd2:	b5 cf       	rjmp	.-150    	; 0x1f3e <datavremya+0x6e>
    1fd4:	1f 5f       	subi	r17, 0xFF	; 255
    1fd6:	b3 cf       	rjmp	.-154    	; 0x1f3e <datavremya+0x6e>
		break;
		case LEFT: if(cursorPos >0) cursorPos--;
    1fd8:	11 23       	and	r17, r17
    1fda:	09 f4       	brne	.+2      	; 0x1fde <datavremya+0x10e>
    1fdc:	b0 cf       	rjmp	.-160    	; 0x1f3e <datavremya+0x6e>
    1fde:	11 50       	subi	r17, 0x01	; 1
    1fe0:	ae cf       	rjmp	.-164    	; 0x1f3e <datavremya+0x6e>
		break;
		case UP:(*ptr[cursorPos] < max[cursorPos])?((*ptr[cursorPos])++):(*ptr[cursorPos]=min);
    1fe2:	21 2f       	mov	r18, r17
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	f9 01       	movw	r30, r18
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	ee 0d       	add	r30, r14
    1fee:	ff 1d       	adc	r31, r15
    1ff0:	04 88       	ldd	r0, Z+20	; 0x14
    1ff2:	f5 89       	ldd	r31, Z+21	; 0x15
    1ff4:	e0 2d       	mov	r30, r0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	a1 e2       	ldi	r26, 0x21	; 33
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	ac 0f       	add	r26, r28
    1ffe:	bd 1f       	adc	r27, r29
    2000:	a2 0f       	add	r26, r18
    2002:	b3 1f       	adc	r27, r19
    2004:	9c 91       	ld	r25, X
    2006:	89 17       	cp	r24, r25
    2008:	10 f4       	brcc	.+4      	; 0x200e <datavremya+0x13e>
    200a:	8f 5f       	subi	r24, 0xFF	; 255
    200c:	19 c0       	rjmp	.+50     	; 0x2040 <datavremya+0x170>
    200e:	00 83       	st	Z, r16
    2010:	96 cf       	rjmp	.-212    	; 0x1f3e <datavremya+0x6e>
		break;
		case DOWN:(*ptr[cursorPos] > min)?((*ptr[cursorPos])--):(*ptr[cursorPos]=max[cursorPos]);
    2012:	81 2f       	mov	r24, r17
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	fc 01       	movw	r30, r24
    2018:	ee 0f       	add	r30, r30
    201a:	ff 1f       	adc	r31, r31
    201c:	ee 0d       	add	r30, r14
    201e:	ff 1d       	adc	r31, r15
    2020:	04 88       	ldd	r0, Z+20	; 0x14
    2022:	f5 89       	ldd	r31, Z+21	; 0x15
    2024:	e0 2d       	mov	r30, r0
    2026:	20 81       	ld	r18, Z
    2028:	02 17       	cp	r16, r18
    202a:	18 f4       	brcc	.+6      	; 0x2032 <datavremya+0x162>
    202c:	21 50       	subi	r18, 0x01	; 1
    202e:	20 83       	st	Z, r18
    2030:	86 cf       	rjmp	.-244    	; 0x1f3e <datavremya+0x6e>
    2032:	a1 e2       	ldi	r26, 0x21	; 33
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	ac 0f       	add	r26, r28
    2038:	bd 1f       	adc	r27, r29
    203a:	a8 0f       	add	r26, r24
    203c:	b9 1f       	adc	r27, r25
    203e:	8c 91       	ld	r24, X
    2040:	80 83       	st	Z, r24
    2042:	7d cf       	rjmp	.-262    	; 0x1f3e <datavremya+0x6e>
		break;
		case ENT:{rtc_set(&rtc);return;}
    2044:	80 ef       	ldi	r24, 0xF0	; 240
    2046:	94 e0       	ldi	r25, 0x04	; 4
    2048:	0e 94 63 02 	call	0x4c6	; 0x4c6 <rtc_set>
		default: return;
		}
	}


}
    204c:	a6 96       	adiw	r28, 0x26	; 38
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	ff 90       	pop	r15
    2062:	ef 90       	pop	r14
    2064:	df 90       	pop	r13
    2066:	cf 90       	pop	r12
    2068:	08 95       	ret

0000206a <chetnost>:
		}
	}
}

static void chetnost(void)
{
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
	printMenuHeader(CHETNOST);
    2070:	87 e1       	ldi	r24, 0x17	; 23
    2072:	91 e0       	ldi	r25, 0x01	; 1
    2074:	0e 94 71 06 	call	0xce2	; 0xce2 <printMenuHeader>
	unsigned char mparity=eeprom_read_byte(&parity);
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    2080:	c8 2f       	mov	r28, r24
	PGM_P ptr=0;
    2082:	00 e0       	ldi	r16, 0x00	; 0
    2084:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		LCD_gotoXY(10,0);
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	8a e0       	ldi	r24, 0x0A	; 10
    208a:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		switch(mparity)
    208e:	c0 32       	cpi	r28, 0x20	; 32
    2090:	19 f1       	breq	.+70     	; 0x20d8 <chetnost+0x6e>
    2092:	c0 33       	cpi	r28, 0x30	; 48
    2094:	61 f0       	breq	.+24     	; 0x20ae <chetnost+0x44>
    2096:	c1 11       	cpse	r28, r1
    2098:	0d c0       	rjmp	.+26     	; 0x20b4 <chetnost+0x4a>
		{
		case NONE:ptr=C_NONE;
    209a:	09 e0       	ldi	r16, 0x09	; 9
    209c:	11 e0       	ldi	r17, 0x01	; 1
    209e:	c0 e0       	ldi	r28, 0x00	; 0
		break;
    20a0:	09 c0       	rjmp	.+18     	; 0x20b4 <chetnost+0x4a>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mparity==EVEN) mparity=ODD;
    20a2:	c0 32       	cpi	r28, 0x20	; 32
    20a4:	39 f5       	brne	.+78     	; 0x20f4 <chetnost+0x8a>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	8a e0       	ldi	r24, 0x0A	; 10
    20aa:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		{
		case NONE:ptr=C_NONE;
		break;
		case EVEN:ptr=C_EVEN;
		break;
		case ODD:ptr=C_ODD;
    20ae:	03 e1       	ldi	r16, 0x13	; 19
    20b0:	11 e0       	ldi	r17, 0x01	; 1
    20b2:	c0 e3       	ldi	r28, 0x30	; 48
		break;
		}
		LCD_puts_P(ptr,5);
    20b4:	65 e0       	ldi	r22, 0x05	; 5
    20b6:	c8 01       	movw	r24, r16
    20b8:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    20bc:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    20c0:	85 30       	cpi	r24, 0x05	; 5
    20c2:	79 f3       	breq	.-34     	; 0x20a2 <chetnost+0x38>
    20c4:	86 30       	cpi	r24, 0x06	; 6
    20c6:	61 f4       	brne	.+24     	; 0x20e0 <chetnost+0x76>
			else if(mparity==ODD)mparity=NONE;
		}
		break;
		case DOWN:
		{
			if(mparity==NONE) mparity=ODD;
    20c8:	cc 23       	and	r28, r28
    20ca:	69 f3       	breq	.-38     	; 0x20a6 <chetnost+0x3c>
			else if(mparity==ODD)mparity=EVEN;
    20cc:	c0 33       	cpi	r28, 0x30	; 48
    20ce:	d9 f6       	brne	.-74     	; 0x2086 <chetnost+0x1c>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	8a e0       	ldi	r24, 0x0A	; 10
    20d4:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		switch(mparity)
		{
		case NONE:ptr=C_NONE;
		break;
		case EVEN:ptr=C_EVEN;
    20d8:	0e e0       	ldi	r16, 0x0E	; 14
    20da:	11 e0       	ldi	r17, 0x01	; 1
    20dc:	c0 e2       	ldi	r28, 0x20	; 32
		break;
    20de:	ea cf       	rjmp	.-44     	; 0x20b4 <chetnost+0x4a>
		case ODD:ptr=C_ODD;
		break;
		}
		LCD_puts_P(ptr,5);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    20e0:	82 30       	cpi	r24, 0x02	; 2
    20e2:	79 f4       	brne	.+30     	; 0x2102 <chetnost+0x98>
			else if(mparity==ODD)mparity=EVEN;
		}
		break;
		case ENT:
		{
			eeprom_write_byte(&parity,mparity);
    20e4:	6c 2f       	mov	r22, r28
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		default: return;
		}
	}
}
    20ea:	cf 91       	pop	r28
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
			else if(mparity==ODD)mparity=EVEN;
		}
		break;
		case ENT:
		{
			eeprom_write_byte(&parity,mparity);
    20f0:	0c 94 20 20 	jmp	0x4040	; 0x4040 <eeprom_write_byte>
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mparity==EVEN) mparity=ODD;
			else if(mparity==ODD)mparity=NONE;
    20f4:	c0 33       	cpi	r28, 0x30	; 48
    20f6:	39 f6       	brne	.-114    	; 0x2086 <chetnost+0x1c>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	8a e0       	ldi	r24, 0x0A	; 10
    20fc:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
    2100:	cc cf       	rjmp	.-104    	; 0x209a <chetnost+0x30>
			return;
		}
		default: return;
		}
	}
}
    2102:	cf 91       	pop	r28
    2104:	1f 91       	pop	r17
    2106:	0f 91       	pop	r16
    2108:	08 95       	ret

0000210a <skorost>:
		}
	}
}

static void skorost(void)
{
    210a:	cf 92       	push	r12
    210c:	df 92       	push	r13
    210e:	ef 92       	push	r14
    2110:	ff 92       	push	r15
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	27 97       	sbiw	r28, 0x07	; 7
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61

//	unsigned int speeds_table[SPEED_INDEX]={9600,19200,38400,76800};
	unsigned long int mspeed=eeprom_read_dword(&speed);
    2126:	82 e0       	ldi	r24, 0x02	; 2
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	0e 94 14 20 	call	0x4028	; 0x4028 <eeprom_read_dword>
    212e:	6b 01       	movw	r12, r22
    2130:	7c 01       	movw	r14, r24
	char buf[7];

	printMenuHeader(SKOROST);
    2132:	80 e2       	ldi	r24, 0x20	; 32
    2134:	91 e0       	ldi	r25, 0x01	; 1
    2136:	0e 94 71 06 	call	0xce2	; 0xce2 <printMenuHeader>

	while(1)
	{
		LCD_gotoXY(10,0);
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	8a e0       	ldi	r24, 0x0A	; 10
    213e:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    2142:	2a e0       	ldi	r18, 0x0A	; 10
    2144:	ae 01       	movw	r20, r28
    2146:	4f 5f       	subi	r20, 0xFF	; 255
    2148:	5f 4f       	sbci	r21, 0xFF	; 255
    214a:	c7 01       	movw	r24, r14
    214c:	b6 01       	movw	r22, r12
    214e:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <__ltoa_ncheck>
		LCD_puts(ltoa(mspeed,buf,10),5);
    2152:	65 e0       	ldi	r22, 0x05	; 5
    2154:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>


		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2158:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    215c:	85 30       	cpi	r24, 0x05	; 5
    215e:	59 f0       	breq	.+22     	; 0x2176 <skorost+0x6c>
    2160:	86 30       	cpi	r24, 0x06	; 6
    2162:	a9 f0       	breq	.+42     	; 0x218e <skorost+0x84>
    2164:	82 30       	cpi	r24, 0x02	; 2
    2166:	f9 f4       	brne	.+62     	; 0x21a6 <skorost+0x9c>
		{
			if(mspeed>9600) mspeed/=2;
		}

		break;
		case ENT:{eeprom_write_dword(&speed,mspeed);return;}
    2168:	b7 01       	movw	r22, r14
    216a:	a6 01       	movw	r20, r12
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	0e 94 2d 20 	call	0x405a	; 0x405a <eeprom_write_dword>
    2174:	18 c0       	rjmp	.+48     	; 0x21a6 <skorost+0x9c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mspeed<76800) mspeed*=2;
    2176:	c1 14       	cp	r12, r1
    2178:	8c e2       	ldi	r24, 0x2C	; 44
    217a:	d8 06       	cpc	r13, r24
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	e8 06       	cpc	r14, r24
    2180:	f1 04       	cpc	r15, r1
    2182:	d8 f6       	brcc	.-74     	; 0x213a <skorost+0x30>
    2184:	cc 0c       	add	r12, r12
    2186:	dd 1c       	adc	r13, r13
    2188:	ee 1c       	adc	r14, r14
    218a:	ff 1c       	adc	r15, r15
    218c:	d6 cf       	rjmp	.-84     	; 0x213a <skorost+0x30>
		}
		break;
		case DOWN:
		{
			if(mspeed>9600) mspeed/=2;
    218e:	81 e8       	ldi	r24, 0x81	; 129
    2190:	c8 16       	cp	r12, r24
    2192:	85 e2       	ldi	r24, 0x25	; 37
    2194:	d8 06       	cpc	r13, r24
    2196:	e1 04       	cpc	r14, r1
    2198:	f1 04       	cpc	r15, r1
    219a:	78 f2       	brcs	.-98     	; 0x213a <skorost+0x30>
    219c:	f6 94       	lsr	r15
    219e:	e7 94       	ror	r14
    21a0:	d7 94       	ror	r13
    21a2:	c7 94       	ror	r12
    21a4:	ca cf       	rjmp	.-108    	; 0x213a <skorost+0x30>
		break;
		case ENT:{eeprom_write_dword(&speed,mspeed);return;}
		default: return;
		}
	}
}
    21a6:	27 96       	adiw	r28, 0x07	; 7
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	df 90       	pop	r13
    21bc:	cf 90       	pop	r12
    21be:	08 95       	ret

000021c0 <rezhim>:
	naviMenu(LVL_svyaz);
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
}

static void rezhim(void)
{
    21c0:	cf 93       	push	r28
	printMenuHeader(REZHIM);
    21c2:	83 e3       	ldi	r24, 0x33	; 51
    21c4:	91 e0       	ldi	r25, 0x01	; 1
    21c6:	0e 94 71 06 	call	0xce2	; 0xce2 <printMenuHeader>
	unsigned char mmode=eeprom_read_byte(&mode);
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    21d2:	c8 2f       	mov	r28, r24

	while(1)
	{
		LCD_gotoXY(10,0);
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	8a e0       	ldi	r24, 0x0A	; 10
    21d8:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		(mmode==RTU)?(LCD_puts_P(RTU_M,5)):(LCD_puts_P(ASCII_M,5));
    21dc:	65 e0       	ldi	r22, 0x05	; 5
    21de:	c1 11       	cpse	r28, r1
    21e0:	03 c0       	rjmp	.+6      	; 0x21e8 <rezhim+0x28>
    21e2:	8f e2       	ldi	r24, 0x2F	; 47
    21e4:	91 e0       	ldi	r25, 0x01	; 1
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <rezhim+0x2c>
    21e8:	89 e2       	ldi	r24, 0x29	; 41
    21ea:	91 e0       	ldi	r25, 0x01	; 1
    21ec:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    21f0:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    21f4:	85 30       	cpi	r24, 0x05	; 5
    21f6:	51 f0       	breq	.+20     	; 0x220c <rezhim+0x4c>
    21f8:	86 30       	cpi	r24, 0x06	; 6
    21fa:	61 f0       	breq	.+24     	; 0x2214 <rezhim+0x54>
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	71 f4       	brne	.+28     	; 0x221c <rezhim+0x5c>
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
		break;
		case ENT:
		{
			eeprom_write_byte(&mode,mmode);
    2200:	6c 2f       	mov	r22, r28
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		default: return;
		}
	}
}
    2206:	cf 91       	pop	r28
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
		break;
		case ENT:
		{
			eeprom_write_byte(&mode,mmode);
    2208:	0c 94 20 20 	jmp	0x4040	; 0x4040 <eeprom_write_byte>
		LCD_gotoXY(10,0);
		(mmode==RTU)?(LCD_puts_P(RTU_M,5)):(LCD_puts_P(ASCII_M,5));

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:if(mmode==RTU)mmode=ASCII;
    220c:	c1 11       	cpse	r28, r1
    220e:	e2 cf       	rjmp	.-60     	; 0x21d4 <rezhim+0x14>
    2210:	c1 e0       	ldi	r28, 0x01	; 1
    2212:	e0 cf       	rjmp	.-64     	; 0x21d4 <rezhim+0x14>
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
    2214:	c1 30       	cpi	r28, 0x01	; 1
    2216:	f1 f6       	brne	.-68     	; 0x21d4 <rezhim+0x14>
    2218:	c0 e0       	ldi	r28, 0x00	; 0
    221a:	dc cf       	rjmp	.-72     	; 0x21d4 <rezhim+0x14>
			return;
		}
		default: return;
		}
	}
}
    221c:	cf 91       	pop	r28
    221e:	08 95       	ret

00002220 <printOut.isra.2>:
			if((checkTOUT(*&adress) <0)||(inSysBDZ[*&adress].data[0] !=PROG)){printTOUT();_delay_ms(2000);return;}
		}
	naviMenu(LVL_in);
	return;
}
static inline unsigned char printOut(unsigned char numm)
    2220:	cf 92       	push	r12
    2222:	df 92       	push	r13
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	2a 97       	sbiw	r28, 0x0a	; 10
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
	itoa(*&adress,n,10);
	LCD_puts(n, 10);
	_delay_ms(5000);
	return 0;*/

	LCD_clr();
    2240:	0e 94 12 04 	call	0x824	; 0x824 <LCD_clr>
	LCD_puts_P(CHOSE_EXT,10);
    2244:	6a e0       	ldi	r22, 0x0A	; 10
    2246:	82 ed       	ldi	r24, 0xD2	; 210
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
	LCD_gotoXY(1,1);
    224e:	61 e0       	ldi	r22, 0x01	; 1
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
	LCD_puts_P(EXIT1,5);
    2256:	65 e0       	ldi	r22, 0x05	; 5
    2258:	8c ec       	ldi	r24, 0xCC	; 204
    225a:	91 e0       	ldi	r25, 0x01	; 1
    225c:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
	LCD_gotoXY(11,1);
    2260:	61 e0       	ldi	r22, 0x01	; 1
    2262:	8b e0       	ldi	r24, 0x0B	; 11
    2264:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
	LCD_puts_P(EXIT2,5);
    2268:	65 e0       	ldi	r22, 0x05	; 5
    226a:	86 ec       	ldi	r24, 0xC6	; 198
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
	LCD_gotoXY(1,2);
    2272:	62 e0       	ldi	r22, 0x02	; 2
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
	LCD_puts_P(EXIT3,5);
    227a:	65 e0       	ldi	r22, 0x05	; 5
    227c:	80 ec       	ldi	r24, 0xC0	; 192
    227e:	91 e0       	ldi	r25, 0x01	; 1
    2280:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
	LCD_gotoXY(11,2);
    2284:	62 e0       	ldi	r22, 0x02	; 2
    2286:	8b e0       	ldi	r24, 0x0B	; 11
    2288:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
	LCD_puts_P(EXIT4,5);
    228c:	65 e0       	ldi	r22, 0x05	; 5
    228e:	8a eb       	ldi	r24, 0xBA	; 186
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
	return;
}
static inline unsigned char printOut(unsigned char numm)
{

	unsigned char x=0,y=1,punkt=0,value=0;
    2296:	f1 2c       	mov	r15, r1
    2298:	e1 2c       	mov	r14, r1
    229a:	01 e0       	ldi	r16, 0x01	; 1
    229c:	10 e0       	ldi	r17, 0x00	; 0
			value&= ~(1<<punkt);
		}
		break;
		case UP:
		{
			value|= 1<<punkt;
    229e:	cc 24       	eor	r12, r12
    22a0:	c3 94       	inc	r12
    22a2:	d1 2c       	mov	r13, r1
	LCD_puts_P(EXIT4,5);

	while(1)
	{

		if(punkt==0){LCD_gotoXY(0,1);LCD_putchar(0x84);}
    22a4:	e1 10       	cpse	r14, r1
    22a6:	07 c0       	rjmp	.+14     	; 0x22b6 <printOut.isra.2+0x96>
    22a8:	61 e0       	ldi	r22, 0x01	; 1
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
    22b0:	84 e8       	ldi	r24, 0x84	; 132
    22b2:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
		LCD_gotoXY(6,1);
    22b6:	61 e0       	ldi	r22, 0x01	; 1
    22b8:	86 e0       	ldi	r24, 0x06	; 6
    22ba:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		(value&(1<<0))?(LCD_puts_P(ON,4)):(LCD_puts_P(OFF,4));
    22be:	64 e0       	ldi	r22, 0x04	; 4
    22c0:	f0 fe       	sbrs	r15, 0
    22c2:	03 c0       	rjmp	.+6      	; 0x22ca <printOut.isra.2+0xaa>
    22c4:	8e ed       	ldi	r24, 0xDE	; 222
    22c6:	91 e0       	ldi	r25, 0x01	; 1
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <printOut.isra.2+0xae>
    22ca:	89 ed       	ldi	r24, 0xD9	; 217
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
		LCD_gotoXY(16,1);
    22d2:	61 e0       	ldi	r22, 0x01	; 1
    22d4:	80 e1       	ldi	r24, 0x10	; 16
    22d6:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		(value&(1<<1))?(LCD_puts_P(ON,4)):(LCD_puts_P(OFF,4));
    22da:	64 e0       	ldi	r22, 0x04	; 4
    22dc:	f1 fe       	sbrs	r15, 1
    22de:	03 c0       	rjmp	.+6      	; 0x22e6 <printOut.isra.2+0xc6>
    22e0:	8e ed       	ldi	r24, 0xDE	; 222
    22e2:	91 e0       	ldi	r25, 0x01	; 1
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <printOut.isra.2+0xca>
    22e6:	89 ed       	ldi	r24, 0xD9	; 217
    22e8:	91 e0       	ldi	r25, 0x01	; 1
    22ea:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
		LCD_gotoXY(6,2);
    22ee:	62 e0       	ldi	r22, 0x02	; 2
    22f0:	86 e0       	ldi	r24, 0x06	; 6
    22f2:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		(value&(1<<2))?(LCD_puts_P(ON,4)):(LCD_puts_P(OFF,4));
    22f6:	64 e0       	ldi	r22, 0x04	; 4
    22f8:	f2 fe       	sbrs	r15, 2
    22fa:	03 c0       	rjmp	.+6      	; 0x2302 <printOut.isra.2+0xe2>
    22fc:	8e ed       	ldi	r24, 0xDE	; 222
    22fe:	91 e0       	ldi	r25, 0x01	; 1
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <printOut.isra.2+0xe6>
    2302:	89 ed       	ldi	r24, 0xD9	; 217
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
		LCD_gotoXY(16,2);
    230a:	62 e0       	ldi	r22, 0x02	; 2
    230c:	80 e1       	ldi	r24, 0x10	; 16
    230e:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		(value&(1<<3))?(LCD_puts_P(ON,4)):(LCD_puts_P(OFF,4));
    2312:	64 e0       	ldi	r22, 0x04	; 4
    2314:	f3 fe       	sbrs	r15, 3
    2316:	03 c0       	rjmp	.+6      	; 0x231e <printOut.isra.2+0xfe>
    2318:	8e ed       	ldi	r24, 0xDE	; 222
    231a:	91 e0       	ldi	r25, 0x01	; 1
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <printOut.isra.2+0x102>
    231e:	89 ed       	ldi	r24, 0xD9	; 217
    2320:	91 e0       	ldi	r25, 0x01	; 1
    2322:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
		LCD_gotoXY(0,3);
    2326:	63 e0       	ldi	r22, 0x03	; 3
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    232e:	42 e0       	ldi	r20, 0x02	; 2
    2330:	be 01       	movw	r22, r28
    2332:	6f 5f       	subi	r22, 0xFF	; 255
    2334:	7f 4f       	sbci	r23, 0xFF	; 255
    2336:	8f 2d       	mov	r24, r15
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
		itoa(value,n,2);
		LCD_puts(n, 10);
    233e:	6a e0       	ldi	r22, 0x0A	; 10
    2340:	ce 01       	movw	r24, r28
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2348:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    234c:	85 30       	cpi	r24, 0x05	; 5
    234e:	e9 f0       	breq	.+58     	; 0x238a <printOut.isra.2+0x16a>
    2350:	50 f4       	brcc	.+20     	; 0x2366 <printOut.isra.2+0x146>
    2352:	83 30       	cpi	r24, 0x03	; 3
    2354:	09 f4       	brne	.+2      	; 0x2358 <printOut.isra.2+0x138>
    2356:	70 c0       	rjmp	.+224    	; 0x2438 <printOut.isra.2+0x218>
    2358:	08 f0       	brcs	.+2      	; 0x235c <printOut.isra.2+0x13c>
    235a:	42 c0       	rjmp	.+132    	; 0x23e0 <printOut.isra.2+0x1c0>
    235c:	82 30       	cpi	r24, 0x02	; 2
    235e:	09 f0       	breq	.+2      	; 0x2362 <printOut.isra.2+0x142>
    2360:	a1 cf       	rjmp	.-190    	; 0x22a4 <printOut.isra.2+0x84>
    2362:	8f 2d       	mov	r24, r15
    2364:	6a c0       	rjmp	.+212    	; 0x243a <printOut.isra.2+0x21a>
    2366:	87 30       	cpi	r24, 0x07	; 7
    2368:	c1 f0       	breq	.+48     	; 0x239a <printOut.isra.2+0x17a>
    236a:	30 f0       	brcs	.+12     	; 0x2378 <printOut.isra.2+0x158>
    236c:	8f 3f       	cpi	r24, 0xFF	; 255
    236e:	09 f0       	breq	.+2      	; 0x2372 <printOut.isra.2+0x152>
    2370:	99 cf       	rjmp	.-206    	; 0x22a4 <printOut.isra.2+0x84>
		break;
		case ENT:return value; 	//-запускаем функцию выбранного пункта	(она также может вызвать naviMenu -следующий подуровень)
		break;
		case ESC:return 0;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    2372:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2376:	96 cf       	rjmp	.-212    	; 0x22a4 <printOut.isra.2+0x84>
		LCD_puts(n, 10);
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			value&= ~(1<<punkt);
    2378:	c6 01       	movw	r24, r12
    237a:	0e 2c       	mov	r0, r14
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <printOut.isra.2+0x160>
    237e:	88 0f       	add	r24, r24
    2380:	0a 94       	dec	r0
    2382:	ea f7       	brpl	.-6      	; 0x237e <printOut.isra.2+0x15e>
    2384:	80 95       	com	r24
    2386:	f8 22       	and	r15, r24
    2388:	8d cf       	rjmp	.-230    	; 0x22a4 <printOut.isra.2+0x84>
		}
		break;
		case UP:
		{
			value|= 1<<punkt;
    238a:	c6 01       	movw	r24, r12
    238c:	0e 2c       	mov	r0, r14
    238e:	01 c0       	rjmp	.+2      	; 0x2392 <printOut.isra.2+0x172>
    2390:	88 0f       	add	r24, r24
    2392:	0a 94       	dec	r0
    2394:	ea f7       	brpl	.-6      	; 0x2390 <printOut.isra.2+0x170>
    2396:	f8 2a       	or	r15, r24
    2398:	85 cf       	rjmp	.-246    	; 0x22a4 <printOut.isra.2+0x84>
		}
		break;
		case RIGHT:
		{
			if((x+10)>10 && y!=2)
    239a:	11 23       	and	r17, r17
    239c:	b9 f0       	breq	.+46     	; 0x23cc <printOut.isra.2+0x1ac>
    239e:	02 30       	cpi	r16, 0x02	; 2
    23a0:	91 f0       	breq	.+36     	; 0x23c6 <printOut.isra.2+0x1a6>
			{
				LCD_gotoXY(x,y);
    23a2:	60 2f       	mov	r22, r16
    23a4:	81 2f       	mov	r24, r17
    23a6:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
				LCD_putchar(' ');
    23aa:	80 e2       	ldi	r24, 0x20	; 32
    23ac:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
				y++;x=0;punkt++;
    23b0:	0f 5f       	subi	r16, 0xFF	; 255
    23b2:	e3 94       	inc	r14
				LCD_gotoXY(x,y);
    23b4:	60 2f       	mov	r22, r16
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
				LCD_putchar(0x84);
    23bc:	84 e8       	ldi	r24, 0x84	; 132
    23be:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
		{
			if((x+10)>10 && y!=2)
			{
				LCD_gotoXY(x,y);
				LCD_putchar(' ');
				y++;x=0;punkt++;
    23c2:	10 e0       	ldi	r17, 0x00	; 0
    23c4:	6f cf       	rjmp	.-290    	; 0x22a4 <printOut.isra.2+0x84>
				LCD_gotoXY(x,y);
				LCD_putchar(0x84);
			}
			else if(x!=10)
    23c6:	1a 30       	cpi	r17, 0x0A	; 10
    23c8:	09 f4       	brne	.+2      	; 0x23cc <printOut.isra.2+0x1ac>
    23ca:	6c cf       	rjmp	.-296    	; 0x22a4 <printOut.isra.2+0x84>
			{
				LCD_gotoXY(x,y);
    23cc:	60 2f       	mov	r22, r16
    23ce:	81 2f       	mov	r24, r17
    23d0:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
				LCD_putchar(' ');
    23d4:	80 e2       	ldi	r24, 0x20	; 32
    23d6:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
				punkt++;x+=10;
    23da:	e3 94       	inc	r14
    23dc:	16 5f       	subi	r17, 0xF6	; 246
    23de:	24 c0       	rjmp	.+72     	; 0x2428 <printOut.isra.2+0x208>
			}
		}
		break;
		case LEFT:
		{
			if((x-10)<0 && y!=1)
    23e0:	81 2f       	mov	r24, r17
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	0a 97       	sbiw	r24, 0x0a	; 10
    23e6:	a4 f4       	brge	.+40     	; 0x2410 <printOut.isra.2+0x1f0>
    23e8:	01 30       	cpi	r16, 0x01	; 1
    23ea:	91 f0       	breq	.+36     	; 0x2410 <printOut.isra.2+0x1f0>
			{
				LCD_gotoXY(x,y);
    23ec:	60 2f       	mov	r22, r16
    23ee:	81 2f       	mov	r24, r17
    23f0:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
				LCD_putchar(' ');
    23f4:	80 e2       	ldi	r24, 0x20	; 32
    23f6:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
				y--;x=10;punkt--;
    23fa:	01 50       	subi	r16, 0x01	; 1
    23fc:	ea 94       	dec	r14
				LCD_gotoXY(x,y);
    23fe:	60 2f       	mov	r22, r16
    2400:	8a e0       	ldi	r24, 0x0A	; 10
    2402:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
				LCD_putchar(0x84);
    2406:	84 e8       	ldi	r24, 0x84	; 132
    2408:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
		{
			if((x-10)<0 && y!=1)
			{
				LCD_gotoXY(x,y);
				LCD_putchar(' ');
				y--;x=10;punkt--;
    240c:	1a e0       	ldi	r17, 0x0A	; 10
    240e:	4a cf       	rjmp	.-364    	; 0x22a4 <printOut.isra.2+0x84>
				LCD_gotoXY(x,y);
				LCD_putchar(0x84);
			}
			else if(x!=0)
    2410:	11 23       	and	r17, r17
    2412:	09 f4       	brne	.+2      	; 0x2416 <printOut.isra.2+0x1f6>
    2414:	47 cf       	rjmp	.-370    	; 0x22a4 <printOut.isra.2+0x84>
			{
				LCD_gotoXY(x,y);
    2416:	60 2f       	mov	r22, r16
    2418:	81 2f       	mov	r24, r17
    241a:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
				LCD_putchar(' ');
    241e:	80 e2       	ldi	r24, 0x20	; 32
    2420:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
				punkt--;x-=10;
    2424:	ea 94       	dec	r14
    2426:	1a 50       	subi	r17, 0x0A	; 10
				LCD_gotoXY(x,y);
    2428:	60 2f       	mov	r22, r16
    242a:	81 2f       	mov	r24, r17
    242c:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
				LCD_putchar(0x84);
    2430:	84 e8       	ldi	r24, 0x84	; 132
    2432:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
    2436:	36 cf       	rjmp	.-404    	; 0x22a4 <printOut.isra.2+0x84>
			}
		}
		break;
		case ENT:return value; 	//-запускаем функцию выбранного пункта	(она также может вызвать naviMenu -следующий подуровень)
		break;
		case ESC:return 0;	//выход по ESC
    2438:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case NOKEY:asm("jmp 0");	//автовыход
		break;
		}
	}
}
    243a:	2a 96       	adiw	r28, 0x0a	; 10
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	08 95       	ret

00002458 <dvx3>:
{
	printOut(6);
}
static void dvx3(void)
{
	printOut(7);
    2458:	0c 94 10 11 	jmp	0x2220	; 0x2220 <printOut.isra.2>

0000245c <dvx2>:
    245c:	0c 94 10 11 	jmp	0x2220	; 0x2220 <printOut.isra.2>

00002460 <vod1>:
    2460:	0c 94 10 11 	jmp	0x2220	; 0x2220 <printOut.isra.2>

00002464 <vod2>:
    2464:	0c 94 10 11 	jmp	0x2220	; 0x2220 <printOut.isra.2>

00002468 <vod3>:
    2468:	0c 94 10 11 	jmp	0x2220	; 0x2220 <printOut.isra.2>

0000246c <vod4>:
    246c:	0c 94 10 11 	jmp	0x2220	; 0x2220 <printOut.isra.2>

00002470 <dvx1>:
    2470:	0c 94 10 11 	jmp	0x2220	; 0x2220 <printOut.isra.2>

00002474 <printSubMenu>:
		}
	}
}

static inline unsigned char printSubMenu(const char *flashName,unsigned char flag)
{
    2474:	2f 92       	push	r2
    2476:	3f 92       	push	r3
    2478:	4f 92       	push	r4
    247a:	5f 92       	push	r5
    247c:	6f 92       	push	r6
    247e:	7f 92       	push	r7
    2480:	8f 92       	push	r8
    2482:	9f 92       	push	r9
    2484:	af 92       	push	r10
    2486:	bf 92       	push	r11
    2488:	cf 92       	push	r12
    248a:	df 92       	push	r13
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	c8 56       	subi	r28, 0x68	; 104
    249e:	d1 09       	sbc	r29, r1
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	4c 01       	movw	r8, r24
	unsigned char addr[MAXQDEV]={0};
    24ac:	ce 01       	movw	r24, r28
    24ae:	01 96       	adiw	r24, 0x01	; 1
    24b0:	7c 01       	movw	r14, r24
    24b2:	83 e6       	ldi	r24, 0x63	; 99
    24b4:	f7 01       	movw	r30, r14
    24b6:	11 92       	st	Z+, r1
    24b8:	8a 95       	dec	r24
    24ba:	e9 f7       	brne	.-6      	; 0x24b6 <printSubMenu+0x42>
	unsigned char screenPos=0;	//указатель на позицию экрана
	unsigned char numPunkt=0,currPunkt=0;	//счетчик пунктов меню,
	char tmpStr[4];

	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);
    24bc:	a6 2e       	mov	r10, r22
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	6c 01       	movw	r12, r24
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <printSubMenu+0x56>
    24c6:	cc 0c       	add	r12, r12
    24c8:	dd 1c       	adc	r13, r13
    24ca:	6a 95       	dec	r22
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <printSubMenu+0x52>
    24ce:	01 e0       	ldi	r16, 0x01	; 1
    24d0:	10 e0       	ldi	r17, 0x00	; 0
static inline unsigned char printSubMenu(const char *flashName,unsigned char flag)
{
	unsigned char addr[MAXQDEV]={0};
	unsigned char cursorPos=1;	//указатель на текущий пункт
	unsigned char screenPos=0;	//указатель на позицию экрана
	unsigned char numPunkt=0,currPunkt=0;	//счетчик пунктов меню,
    24d2:	41 2c       	mov	r4, r1
	char tmpStr[4];

	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);
    24d4:	89 e0       	ldi	r24, 0x09	; 9
    24d6:	78 2e       	mov	r7, r24
    24d8:	c8 01       	movw	r24, r16
    24da:	87 5f       	subi	r24, 0xF7	; 247
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    24e2:	80 13       	cpse	r24, r16
    24e4:	18 c0       	rjmp	.+48     	; 0x2516 <printSubMenu+0xa2>
    24e6:	70 9e       	mul	r7, r16
    24e8:	f0 01       	movw	r30, r0
    24ea:	71 9e       	mul	r7, r17
    24ec:	f0 0d       	add	r31, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	ef 59       	subi	r30, 0x9F	; 159
    24f2:	fe 4f       	sbci	r31, 0xFE	; 254
    24f4:	20 85       	ldd	r18, Z+8	; 0x08
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	2c 21       	and	r18, r12
    24fa:	3d 21       	and	r19, r13
    24fc:	0a 2c       	mov	r0, r10
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <printSubMenu+0x90>
    2500:	35 95       	asr	r19
    2502:	27 95       	ror	r18
    2504:	0a 94       	dec	r0
    2506:	e2 f7       	brpl	.-8      	; 0x2500 <printSubMenu+0x8c>
    2508:	23 2b       	or	r18, r19
    250a:	29 f0       	breq	.+10     	; 0x2516 <printSubMenu+0xa2>
    250c:	f7 01       	movw	r30, r14
    250e:	e4 0d       	add	r30, r4
    2510:	f1 1d       	adc	r31, r1
    2512:	80 83       	st	Z, r24
    2514:	43 94       	inc	r4
    2516:	0f 5f       	subi	r16, 0xFF	; 255
    2518:	1f 4f       	sbci	r17, 0xFF	; 255
    251a:	03 36       	cpi	r16, 0x63	; 99
    251c:	11 05       	cpc	r17, r1
    251e:	e1 f6       	brne	.-72     	; 0x24d8 <printSubMenu+0x64>
    2520:	61 2c       	mov	r6, r1
    2522:	51 2c       	mov	r5, r1
    2524:	77 24       	eor	r7, r7
    2526:	73 94       	inc	r7

	while(1)
	{	//рисуем: "NAME:XX БДЗ"
		printMenuHeader(flashName);
		itoa(numPunkt,tmpStr,10);
    2528:	04 2d       	mov	r16, r4
    252a:	10 e0       	ldi	r17, 0x00	; 0
    252c:	6e 01       	movw	r12, r28
    252e:	f4 e6       	ldi	r31, 0x64	; 100
    2530:	cf 0e       	add	r12, r31
    2532:	d1 1c       	adc	r13, r1

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt-1)
    2534:	18 01       	movw	r2, r16
    2536:	21 e0       	ldi	r18, 0x01	; 1
    2538:	22 1a       	sub	r2, r18
    253a:	31 08       	sbc	r3, r1
	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);

	while(1)
	{	//рисуем: "NAME:XX БДЗ"
		printMenuHeader(flashName);
    253c:	c4 01       	movw	r24, r8
    253e:	0e 94 71 06 	call	0xce2	; 0xce2 <printMenuHeader>
    2542:	4a e0       	ldi	r20, 0x0A	; 10
    2544:	b6 01       	movw	r22, r12
    2546:	c8 01       	movw	r24, r16
    2548:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
		itoa(numPunkt,tmpStr,10);
		LCD_puts(tmpStr,strlen(tmpStr)+1);
    254c:	f6 01       	movw	r30, r12
    254e:	01 90       	ld	r0, Z+
    2550:	00 20       	and	r0, r0
    2552:	e9 f7       	brne	.-6      	; 0x254e <printSubMenu+0xda>
    2554:	6e 2f       	mov	r22, r30
    2556:	6c 19       	sub	r22, r12
    2558:	c6 01       	movw	r24, r12
    255a:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
		LCD_puts_P(BDZ,3);
    255e:	63 e0       	ldi	r22, 0x03	; 3
    2560:	8b e7       	ldi	r24, 0x7B	; 123
    2562:	91 e0       	ldi	r25, 0x01	; 1
    2564:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
    2568:	57 01       	movw	r10, r14
    256a:	a5 0c       	add	r10, r5
    256c:	b1 1c       	adc	r11, r1

		for(unsigned char i=0;(i<NUMOFMENUSTRING) && (addr[i+screenPos]);i++)		//прорисовываем не более NUMOFMENUSTRING строк меню
    256e:	41 2c       	mov	r4, r1
    2570:	f5 01       	movw	r30, r10
    2572:	21 91       	ld	r18, Z+
    2574:	5f 01       	movw	r10, r30
    2576:	a9 96       	adiw	r28, 0x29	; 41
    2578:	2f af       	std	Y+63, r18	; 0x3f
    257a:	a9 97       	sbiw	r28, 0x29	; 41
    257c:	22 23       	and	r18, r18
    257e:	c9 f0       	breq	.+50     	; 0x25b2 <printSubMenu+0x13e>
		{
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
    2580:	43 94       	inc	r4
    2582:	64 2d       	mov	r22, r4
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
    258a:	64 e0       	ldi	r22, 0x04	; 4
    258c:	8b e7       	ldi	r24, 0x7B	; 123
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
    2594:	4a e0       	ldi	r20, 0x0A	; 10
    2596:	b6 01       	movw	r22, r12
    2598:	a9 96       	adiw	r28, 0x29	; 41
    259a:	ef ad       	ldd	r30, Y+63	; 0x3f
    259c:	a9 97       	sbiw	r28, 0x29	; 41
    259e:	8e 2f       	mov	r24, r30
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
    25a6:	63 e0       	ldi	r22, 0x03	; 3
    25a8:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
		printMenuHeader(flashName);
		itoa(numPunkt,tmpStr,10);
		LCD_puts(tmpStr,strlen(tmpStr)+1);
		LCD_puts_P(BDZ,3);

		for(unsigned char i=0;(i<NUMOFMENUSTRING) && (addr[i+screenPos]);i++)		//прорисовываем не более NUMOFMENUSTRING строк меню
    25ac:	f3 e0       	ldi	r31, 0x03	; 3
    25ae:	4f 12       	cpse	r4, r31
    25b0:	df cf       	rjmp	.-66     	; 0x2570 <printSubMenu+0xfc>
		{
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
		}
		LCD_gotoXY(0,cursorPos);LCD_putchar(0x84);			//...и курсор (символ >)
    25b2:	67 2d       	mov	r22, r7
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
    25ba:	84 e8       	ldi	r24, 0x84	; 132
    25bc:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    25c0:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    25c4:	85 30       	cpi	r24, 0x05	; 5
    25c6:	f1 f0       	breq	.+60     	; 0x2604 <printSubMenu+0x190>
    25c8:	38 f4       	brcc	.+14     	; 0x25d8 <printSubMenu+0x164>
    25ca:	82 30       	cpi	r24, 0x02	; 2
    25cc:	31 f1       	breq	.+76     	; 0x261a <printSubMenu+0x1a6>
    25ce:	83 30       	cpi	r24, 0x03	; 3
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <printSubMenu+0x160>
    25d2:	b4 cf       	rjmp	.-152    	; 0x253c <printSubMenu+0xc8>
			}
		}
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
		break;
		case ESC:return 0;	//выход по ESC
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	25 c0       	rjmp	.+74     	; 0x2622 <printSubMenu+0x1ae>
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
		}
		LCD_gotoXY(0,cursorPos);LCD_putchar(0x84);			//...и курсор (символ >)

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    25d8:	86 30       	cpi	r24, 0x06	; 6
    25da:	31 f0       	breq	.+12     	; 0x25e8 <printSubMenu+0x174>
    25dc:	8f 3f       	cpi	r24, 0xFF	; 255
    25de:	09 f0       	breq	.+2      	; 0x25e2 <printSubMenu+0x16e>
    25e0:	ad cf       	rjmp	.-166    	; 0x253c <printSubMenu+0xc8>
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
		break;
		case ESC:return 0;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");//автовыход
    25e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    25e6:	aa cf       	rjmp	.-172    	; 0x253c <printSubMenu+0xc8>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt-1)
    25e8:	86 2d       	mov	r24, r6
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	82 15       	cp	r24, r2
    25ee:	93 05       	cpc	r25, r3
    25f0:	0c f0       	brlt	.+2      	; 0x25f4 <printSubMenu+0x180>
    25f2:	a4 cf       	rjmp	.-184    	; 0x253c <printSubMenu+0xc8>
			{
				++currPunkt;
    25f4:	63 94       	inc	r6
				(cursorPos < NUMOFMENUSTRING)?(cursorPos++):(screenPos++);
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	87 15       	cp	r24, r7
    25fa:	10 f0       	brcs	.+4      	; 0x2600 <printSubMenu+0x18c>
    25fc:	73 94       	inc	r7
    25fe:	9e cf       	rjmp	.-196    	; 0x253c <printSubMenu+0xc8>
    2600:	53 94       	inc	r5
    2602:	9c cf       	rjmp	.-200    	; 0x253c <printSubMenu+0xc8>
			}
		}
		break;
		case UP:
		{
			if(currPunkt > 0 )
    2604:	66 20       	and	r6, r6
    2606:	09 f4       	brne	.+2      	; 0x260a <printSubMenu+0x196>
    2608:	99 cf       	rjmp	.-206    	; 0x253c <printSubMenu+0xc8>
			{
				--currPunkt;
    260a:	6a 94       	dec	r6
				(cursorPos > 1)?(cursorPos--):(screenPos--);
    260c:	91 e0       	ldi	r25, 0x01	; 1
    260e:	79 16       	cp	r7, r25
    2610:	11 f0       	breq	.+4      	; 0x2616 <printSubMenu+0x1a2>
    2612:	7a 94       	dec	r7
    2614:	93 cf       	rjmp	.-218    	; 0x253c <printSubMenu+0xc8>
    2616:	5a 94       	dec	r5
    2618:	91 cf       	rjmp	.-222    	; 0x253c <printSubMenu+0xc8>
			}
		}
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
    261a:	f7 01       	movw	r30, r14
    261c:	e6 0d       	add	r30, r6
    261e:	f1 1d       	adc	r31, r1
    2620:	80 81       	ld	r24, Z
		default:continue;	//любая другая клавиша
		break;
		}
	}
	return NOKEY;
}
    2622:	c8 59       	subi	r28, 0x98	; 152
    2624:	df 4f       	sbci	r29, 0xFF	; 255
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	1f 91       	pop	r17
    2636:	0f 91       	pop	r16
    2638:	ff 90       	pop	r15
    263a:	ef 90       	pop	r14
    263c:	df 90       	pop	r13
    263e:	cf 90       	pop	r12
    2640:	bf 90       	pop	r11
    2642:	af 90       	pop	r10
    2644:	9f 90       	pop	r9
    2646:	8f 90       	pop	r8
    2648:	7f 90       	pop	r7
    264a:	6f 90       	pop	r6
    264c:	5f 90       	pop	r5
    264e:	4f 90       	pop	r4
    2650:	3f 90       	pop	r3
    2652:	2f 90       	pop	r2
    2654:	08 95       	ret

00002656 <in_line>:

static void in_line(void)
{
	printSubMenu(NA_SVYAZI,INL);
    2656:	62 e0       	ldi	r22, 0x02	; 2
    2658:	8f e8       	ldi	r24, 0x8F	; 143
    265a:	91 e0       	ldi	r25, 0x01	; 1
    265c:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <printSubMenu>

00002660 <viewArch>:

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
}

static unsigned char viewArch(unsigned char currBDZaddr,unsigned char index)
{
    2660:	cf 92       	push	r12
    2662:	df 92       	push	r13
    2664:	ff 92       	push	r15
    2666:	0f 93       	push	r16
    2668:	1f 93       	push	r17
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	a9 97       	sbiw	r28, 0x29	; 41
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	f8 2e       	mov	r15, r24
    2680:	d6 2e       	mov	r13, r22
	char tmpStr[7];
	unsigned char tmpData[14];
	unsigned char i,page=0;

	printMenuHeader(ARHIV);
    2682:	89 e8       	ldi	r24, 0x89	; 137
    2684:	91 e0       	ldi	r25, 0x01	; 1
    2686:	0e 94 71 06 	call	0xce2	; 0xce2 <printMenuHeader>

	LCD_puts_P(BDZ,4);
    268a:	64 e0       	ldi	r22, 0x04	; 4
    268c:	8b e7       	ldi	r24, 0x7B	; 123
    268e:	91 e0       	ldi	r25, 0x01	; 1
    2690:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
	LCD_puts(itoa(currBDZaddr,tmpStr,10),3);
    2694:	0f 2d       	mov	r16, r15
    2696:	10 e0       	ldi	r17, 0x00	; 0
    2698:	4a e0       	ldi	r20, 0x0A	; 10
    269a:	be 01       	movw	r22, r28
    269c:	6d 5d       	subi	r22, 0xDD	; 221
    269e:	7f 4f       	sbci	r23, 0xFF	; 255
    26a0:	c8 01       	movw	r24, r16
    26a2:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
    26a6:	63 e0       	ldi	r22, 0x03	; 3
    26a8:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
	LCD_gotoXY(18,0);
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	82 e1       	ldi	r24, 0x12	; 18
    26b0:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
    26b4:	8d 2d       	mov	r24, r13
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	4a e0       	ldi	r20, 0x0A	; 10
    26ba:	be 01       	movw	r22, r28
    26bc:	6d 5d       	subi	r22, 0xDD	; 221
    26be:	7f 4f       	sbci	r23, 0xFF	; 255
    26c0:	01 96       	adiw	r24, 0x01	; 1
    26c2:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
	LCD_puts(itoa(index+1,tmpStr,10),2);
    26c6:	62 e0       	ldi	r22, 0x02	; 2
    26c8:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>

	//первая часть архива
	if(send_read_arch(1,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
    26cc:	4d 2d       	mov	r20, r13
    26ce:	6f 2d       	mov	r22, r15
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	0e 94 82 0b 	call	0x1704	; 0x1704 <send_read_arch>
    26d6:	87 ff       	sbrs	r24, 7
    26d8:	03 c0       	rjmp	.+6      	; 0x26e0 <viewArch+0x80>
    26da:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printTOUT>
    26de:	1c c0       	rjmp	.+56     	; 0x2718 <viewArch+0xb8>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
    26e0:	89 e0       	ldi	r24, 0x09	; 9
    26e2:	80 9f       	mul	r24, r16
    26e4:	f0 01       	movw	r30, r0
    26e6:	81 9f       	mul	r24, r17
    26e8:	f0 0d       	add	r31, r0
    26ea:	11 24       	eor	r1, r1
    26ec:	ef 59       	subi	r30, 0x9F	; 159
    26ee:	fe 4f       	sbci	r31, 0xFE	; 254
    26f0:	80 81       	ld	r24, Z
    26f2:	84 30       	cpi	r24, 0x04	; 4
    26f4:	11 f0       	breq	.+4      	; 0x26fa <viewArch+0x9a>
	else return 0;
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	c6 c0       	rjmp	.+396    	; 0x2886 <viewArch+0x226>
    26fa:	de 01       	movw	r26, r28
    26fc:	55 96       	adiw	r26, 0x15	; 21
	LCD_gotoXY(18,0);
	LCD_puts(itoa(index+1,tmpStr,10),2);

	//первая часть архива
	if(send_read_arch(1,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	af 01       	movw	r20, r30
    2704:	9a 01       	movw	r18, r20
    2706:	28 0f       	add	r18, r24
    2708:	39 1f       	adc	r19, r25
    270a:	f9 01       	movw	r30, r18
    270c:	20 81       	ld	r18, Z
    270e:	2d 93       	st	X+, r18
    2710:	01 96       	adiw	r24, 0x01	; 1
    2712:	87 30       	cpi	r24, 0x07	; 7
    2714:	91 05       	cpc	r25, r1
    2716:	b1 f7       	brne	.-20     	; 0x2704 <viewArch+0xa4>
	else return 0;

	//вторая часть архива
	if(send_read_arch(2,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
    2718:	4d 2d       	mov	r20, r13
    271a:	6f 2d       	mov	r22, r15
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	0e 94 82 0b 	call	0x1704	; 0x1704 <send_read_arch>
    2722:	87 ff       	sbrs	r24, 7
    2724:	07 c0       	rjmp	.+14     	; 0x2734 <viewArch+0xd4>
    2726:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printTOUT>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_2) for(i=7;i<14;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i-7];	//скопировали данные
    272a:	f1 2c       	mov	r15, r1

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
    272c:	cc 24       	eor	r12, r12
    272e:	c3 94       	inc	r12
    2730:	d1 2c       	mov	r13, r1
    2732:	51 c0       	rjmp	.+162    	; 0x27d6 <viewArch+0x176>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
	else return 0;

	//вторая часть архива
	if(send_read_arch(2,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_2) for(i=7;i<14;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i-7];	//скопировали данные
    2734:	89 e0       	ldi	r24, 0x09	; 9
    2736:	80 9f       	mul	r24, r16
    2738:	f0 01       	movw	r30, r0
    273a:	81 9f       	mul	r24, r17
    273c:	f0 0d       	add	r31, r0
    273e:	11 24       	eor	r1, r1
    2740:	ef 59       	subi	r30, 0x9F	; 159
    2742:	fe 4f       	sbci	r31, 0xFE	; 254
    2744:	80 81       	ld	r24, Z
    2746:	85 30       	cpi	r24, 0x05	; 5
    2748:	b1 f6       	brne	.-84     	; 0x26f6 <viewArch+0x96>
    274a:	de 01       	movw	r26, r28
    274c:	5c 96       	adiw	r26, 0x1c	; 28
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	af 01       	movw	r20, r30
    2754:	9a 01       	movw	r18, r20
    2756:	28 0f       	add	r18, r24
    2758:	39 1f       	adc	r19, r25
    275a:	f9 01       	movw	r30, r18
    275c:	20 81       	ld	r18, Z
    275e:	2d 93       	st	X+, r18
    2760:	01 96       	adiw	r24, 0x01	; 1
    2762:	87 30       	cpi	r24, 0x07	; 7
    2764:	91 05       	cpc	r25, r1
    2766:	b1 f7       	brne	.-20     	; 0x2754 <viewArch+0xf4>
    2768:	e0 cf       	rjmp	.-64     	; 0x272a <viewArch+0xca>

		if(tmpData[3]==0xFF) {LCD_gotoXY(0,2);LCD_puts_P(PUSTO,7);}	//если год 0xFF строка 0 "пусто"
		else
		{
			//строка 1 дата/время
			printTimeStr(&tmpData[1],0,1);
    276a:	ce 01       	movw	r24, r28
    276c:	46 96       	adiw	r24, 0x16	; 22
    276e:	0e 94 04 06 	call	0xc08	; 0xc08 <printTimeStr.constprop.3>

			switch(page)
    2772:	f1 10       	cpse	r15, r1
    2774:	3d c0       	rjmp	.+122    	; 0x27f0 <viewArch+0x190>
			{
			case 0:
			{
				//строка ВОД1234 ДВХ1234
				printIOStr(&tmpData[8]);
    2776:	ce 01       	movw	r24, r28
    2778:	4d 96       	adiw	r24, 0x1d	; 29
    277a:	0e 94 df 04 	call	0x9be	; 0x9be <printIOStr>

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
    277e:	63 e0       	ldi	r22, 0x03	; 3
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
    2786:	6e e6       	ldi	r22, 0x6E	; 110
    2788:	71 e0       	ldi	r23, 0x01	; 1
    278a:	ce 01       	movw	r24, r28
    278c:	01 96       	adiw	r24, 0x01	; 1
    278e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <strcpy_P>
    2792:	66 ef       	ldi	r22, 0xF6	; 246
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	ce 01       	movw	r24, r28
    2798:	01 96       	adiw	r24, 0x01	; 1
    279a:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <strcat>
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
    279e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27a0:	8f 70       	andi	r24, 0x0F	; 15
    27a2:	b1 f5       	brne	.+108    	; 0x2810 <viewArch+0x1b0>
    27a4:	67 eb       	ldi	r22, 0xB7	; 183
    27a6:	70 e0       	ldi	r23, 0x00	; 0
    27a8:	ce 01       	movw	r24, r28
    27aa:	01 96       	adiw	r24, 0x01	; 1
    27ac:	0e 94 cd 1c 	call	0x399a	; 0x399a <strcat_P>
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
				LCD_puts(buffer,20);
    27b0:	64 e1       	ldi	r22, 0x14	; 20
    27b2:	ce 01       	movw	r24, r28
    27b4:	01 96       	adiw	r24, 0x01	; 1
    27b6:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
			break;
			}//switch

		}

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    27ba:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    27be:	87 30       	cpi	r24, 0x07	; 7
    27c0:	08 f0       	brcs	.+2      	; 0x27c4 <viewArch+0x164>
    27c2:	4f c0       	rjmp	.+158    	; 0x2862 <viewArch+0x202>
    27c4:	85 30       	cpi	r24, 0x05	; 5
    27c6:	08 f0       	brcs	.+2      	; 0x27ca <viewArch+0x16a>
    27c8:	5e c0       	rjmp	.+188    	; 0x2886 <viewArch+0x226>
    27ca:	83 30       	cpi	r24, 0x03	; 3
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <viewArch+0x170>
    27ce:	5b c0       	rjmp	.+182    	; 0x2886 <viewArch+0x226>
    27d0:	84 30       	cpi	r24, 0x04	; 4
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <viewArch+0x176>
    27d4:	53 c0       	rjmp	.+166    	; 0x287c <viewArch+0x21c>

	while(1)
	{
		char buffer[20];

		if(tmpData[3]==0xFF) {LCD_gotoXY(0,2);LCD_puts_P(PUSTO,7);}	//если год 0xFF строка 0 "пусто"
    27d6:	88 8d       	ldd	r24, Y+24	; 0x18
    27d8:	8f 3f       	cpi	r24, 0xFF	; 255
    27da:	39 f6       	brne	.-114    	; 0x276a <viewArch+0x10a>
    27dc:	62 e0       	ldi	r22, 0x02	; 2
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
    27e4:	67 e0       	ldi	r22, 0x07	; 7
    27e6:	8b e8       	ldi	r24, 0x8B	; 139
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
    27ee:	e5 cf       	rjmp	.-54     	; 0x27ba <viewArch+0x15a>
		else
		{
			//строка 1 дата/время
			printTimeStr(&tmpData[1],0,1);

			switch(page)
    27f0:	f1 e0       	ldi	r31, 0x01	; 1
    27f2:	ff 12       	cpse	r15, r31
    27f4:	e2 cf       	rjmp	.-60     	; 0x27ba <viewArch+0x15a>
			}
			break;
			case 1:
			{
				//строки вкл/откл МТЗ
				printMTZStr((unsigned int)tmpData[10]<<8 | tmpData[11],(unsigned int)tmpData[12]<<8 | tmpData[13]);
    27f6:	69 a1       	ldd	r22, Y+33	; 0x21
    27f8:	7a a1       	ldd	r23, Y+34	; 0x22
    27fa:	76 27       	eor	r23, r22
    27fc:	67 27       	eor	r22, r23
    27fe:	76 27       	eor	r23, r22
    2800:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2802:	98 a1       	ldd	r25, Y+32	; 0x20
    2804:	98 27       	eor	r25, r24
    2806:	89 27       	eor	r24, r25
    2808:	98 27       	eor	r25, r24
    280a:	0e 94 97 05 	call	0xb2e	; 0xb2e <printMTZStr>
			}
			break;
    280e:	d5 cf       	rjmp	.-86     	; 0x27ba <viewArch+0x15a>
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e0       	ldi	r25, 0x00	; 0

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
    2814:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	a6 01       	movw	r20, r12
    281a:	08 2e       	mov	r0, r24
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <viewArch+0x1c2>
    281e:	44 0f       	add	r20, r20
    2820:	55 1f       	adc	r21, r21
    2822:	0a 94       	dec	r0
    2824:	e2 f7       	brpl	.-8      	; 0x281e <viewArch+0x1be>
    2826:	24 23       	and	r18, r20
    2828:	35 23       	and	r19, r21
    282a:	08 2e       	mov	r0, r24
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <viewArch+0x1d2>
    282e:	35 95       	asr	r19
    2830:	27 95       	ror	r18
    2832:	0a 94       	dec	r0
    2834:	e2 f7       	brpl	.-8      	; 0x282e <viewArch+0x1ce>
    2836:	8c 01       	movw	r16, r24
    2838:	0f 5f       	subi	r16, 0xFF	; 255
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	23 2b       	or	r18, r19
    283e:	61 f0       	breq	.+24     	; 0x2858 <viewArch+0x1f8>
    2840:	4a e0       	ldi	r20, 0x0A	; 10
    2842:	be 01       	movw	r22, r28
    2844:	6d 5d       	subi	r22, 0xDD	; 221
    2846:	7f 4f       	sbci	r23, 0xFF	; 255
    2848:	c8 01       	movw	r24, r16
    284a:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
    284e:	bc 01       	movw	r22, r24
    2850:	ce 01       	movw	r24, r28
    2852:	01 96       	adiw	r24, 0x01	; 1
    2854:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <strcat>
    2858:	c8 01       	movw	r24, r16
    285a:	04 30       	cpi	r16, 0x04	; 4
    285c:	11 05       	cpc	r17, r1
    285e:	d1 f6       	brne	.-76     	; 0x2814 <viewArch+0x1b4>
    2860:	a7 cf       	rjmp	.-178    	; 0x27b0 <viewArch+0x150>
			break;
			}//switch

		}

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2862:	87 30       	cpi	r24, 0x07	; 7
    2864:	31 f0       	breq	.+12     	; 0x2872 <viewArch+0x212>
    2866:	8f 3f       	cpi	r24, 0xFF	; 255
    2868:	09 f0       	breq	.+2      	; 0x286c <viewArch+0x20c>
    286a:	b5 cf       	rjmp	.-150    	; 0x27d6 <viewArch+0x176>
		break;
		case LEFT:if(page>0)page--;
		break;
		case ESC:return ESC;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    286c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    2870:	b2 cf       	rjmp	.-156    	; 0x27d6 <viewArch+0x176>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:return UP;
		case DOWN:return DOWN;
		case RIGHT:if(page<1)page++;
    2872:	f1 10       	cpse	r15, r1
    2874:	b0 cf       	rjmp	.-160    	; 0x27d6 <viewArch+0x176>
    2876:	ff 24       	eor	r15, r15
    2878:	f3 94       	inc	r15
    287a:	ad cf       	rjmp	.-166    	; 0x27d6 <viewArch+0x176>
		break;
		case LEFT:if(page>0)page--;
    287c:	ff 20       	and	r15, r15
    287e:	09 f4       	brne	.+2      	; 0x2882 <viewArch+0x222>
    2880:	aa cf       	rjmp	.-172    	; 0x27d6 <viewArch+0x176>
    2882:	fa 94       	dec	r15
    2884:	a8 cf       	rjmp	.-176    	; 0x27d6 <viewArch+0x176>
		default:continue;	//любая другая клавиша
		break;
		}
	}
	return 0;
}
    2886:	a9 96       	adiw	r28, 0x29	; 41
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	ff 90       	pop	r15
    289c:	df 90       	pop	r13
    289e:	cf 90       	pop	r12
    28a0:	08 95       	ret

000028a2 <archieve>:
	if( whileKey() ==ESC)reset(currBDZaddr);//а если ответ был правильный предлагаем ресетнуть

}

static void archieve(void)
{
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
	unsigned char currBDZaddr = printSubMenu(ARHIV,INL); /*выполнить просмотр архива инлайновых*/
    28a6:	62 e0       	ldi	r22, 0x02	; 2
    28a8:	89 e8       	ldi	r24, 0x89	; 137
    28aa:	91 e0       	ldi	r25, 0x01	; 1
    28ac:	0e 94 3a 12 	call	0x2474	; 0x2474 <printSubMenu>
    28b0:	d8 2f       	mov	r29, r24
	unsigned char index=0;

	if(currBDZaddr<1)return;
    28b2:	88 23       	and	r24, r24
    28b4:	91 f0       	breq	.+36     	; 0x28da <archieve+0x38>
    28b6:	c0 e0       	ldi	r28, 0x00	; 0

	while(1)
	{
		switch(viewArch(currBDZaddr,index))
    28b8:	6c 2f       	mov	r22, r28
    28ba:	8d 2f       	mov	r24, r29
    28bc:	0e 94 30 13 	call	0x2660	; 0x2660 <viewArch>
    28c0:	85 30       	cpi	r24, 0x05	; 5
    28c2:	19 f0       	breq	.+6      	; 0x28ca <archieve+0x28>
    28c4:	86 30       	cpi	r24, 0x06	; 6
    28c6:	29 f0       	breq	.+10     	; 0x28d2 <archieve+0x30>
    28c8:	08 c0       	rjmp	.+16     	; 0x28da <archieve+0x38>
		{
		case UP:if(index>0)index--;
    28ca:	cc 23       	and	r28, r28
    28cc:	a9 f3       	breq	.-22     	; 0x28b8 <archieve+0x16>
    28ce:	c1 50       	subi	r28, 0x01	; 1
    28d0:	f3 cf       	rjmp	.-26     	; 0x28b8 <archieve+0x16>
		break;
		case DOWN:if(index<31)index++;
    28d2:	cf 31       	cpi	r28, 0x1F	; 31
    28d4:	88 f7       	brcc	.-30     	; 0x28b8 <archieve+0x16>
    28d6:	cf 5f       	subi	r28, 0xFF	; 255
    28d8:	ef cf       	rjmp	.-34     	; 0x28b8 <archieve+0x16>
		break;
		default:return;
		}
	}
}
    28da:	df 91       	pop	r29
    28dc:	cf 91       	pop	r28
    28de:	08 95       	ret

000028e0 <reset>:

	return;
}

static void reset(unsigned char currBDZaddr)
{
    28e0:	cf 93       	push	r28
    28e2:	c8 2f       	mov	r28, r24
	whileKey();	//ждем нажатия/отпускания кнопки или автовыхода
    28e4:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>

	LCD_clr();
    28e8:	0e 94 12 04 	call	0x824	; 0x824 <LCD_clr>
	LCD_puts_P(SBROSIT,20);
    28ec:	64 e1       	ldi	r22, 0x14	; 20
    28ee:	83 ea       	ldi	r24, 0xA3	; 163
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
    28f6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    28fa:	82 30       	cpi	r24, 0x02	; 2
    28fc:	29 f4       	brne	.+10     	; 0x2908 <reset+0x28>
    28fe:	62 e0       	ldi	r22, 0x02	; 2
    2900:	8c 2f       	mov	r24, r28
}
    2902:	cf 91       	pop	r28
	whileKey();	//ждем нажатия/отпускания кнопки или автовыхода

	LCD_clr();
	LCD_puts_P(SBROSIT,20);

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
    2904:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <send_cmd>
}
    2908:	cf 91       	pop	r28
    290a:	08 95       	ret

0000290c <fault>:
		}
	}
}

static void fault(void)
{
    290c:	ef 92       	push	r14
    290e:	ff 92       	push	r15
    2910:	1f 93       	push	r17
    2912:	cf 93       	push	r28
    2914:	df 93       	push	r29
    2916:	00 d0       	rcall	.+0      	; 0x2918 <fault+0xc>
    2918:	00 d0       	rcall	.+0      	; 0x291a <fault+0xe>
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
	char tmpStr[4];
	unsigned char currBDZaddr = printSubMenu(NEISPRAVNOST,FLT);	//получили адрес выбранного БДЗ
    291e:	61 e0       	ldi	r22, 0x01	; 1
    2920:	8d e9       	ldi	r24, 0x9D	; 157
    2922:	91 e0       	ldi	r25, 0x01	; 1
    2924:	0e 94 3a 12 	call	0x2474	; 0x2474 <printSubMenu>
    2928:	18 2f       	mov	r17, r24
//LCD_gotoXY(0,0);
//LCD_putchar(currBDZaddr+'0');
//_delay_ms(2000);
	if(currBDZaddr<1)return;
    292a:	88 23       	and	r24, r24
    292c:	09 f4       	brne	.+2      	; 0x2930 <fault+0x24>
    292e:	4c c0       	rjmp	.+152    	; 0x29c8 <fault+0xbc>

	printMenuHeader(NEISPRAVNOST);
    2930:	8d e9       	ldi	r24, 0x9D	; 157
    2932:	91 e0       	ldi	r25, 0x01	; 1
    2934:	0e 94 71 06 	call	0xce2	; 0xce2 <printMenuHeader>

	LCD_puts_P(BDZ,4);
    2938:	64 e0       	ldi	r22, 0x04	; 4
    293a:	8b e7       	ldi	r24, 0x7B	; 123
    293c:	91 e0       	ldi	r25, 0x01	; 1
    293e:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
	LCD_puts(itoa(currBDZaddr,tmpStr,10),3);
    2942:	e1 2e       	mov	r14, r17
    2944:	f1 2c       	mov	r15, r1
    2946:	4a e0       	ldi	r20, 0x0A	; 10
    2948:	be 01       	movw	r22, r28
    294a:	6f 5f       	subi	r22, 0xFF	; 255
    294c:	7f 4f       	sbci	r23, 0xFF	; 255
    294e:	c7 01       	movw	r24, r14
    2950:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
    2954:	63 e0       	ldi	r22, 0x03	; 3
    2956:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>

	if(send_cmd(currBDZaddr,RD_FAULT) <0) printTOUT();	//послали команду,дождались таймаута -"нет связи"
    295a:	63 e0       	ldi	r22, 0x03	; 3
    295c:	81 2f       	mov	r24, r17
    295e:	0e 94 30 0c 	call	0x1860	; 0x1860 <send_cmd>
    2962:	87 ff       	sbrs	r24, 7
    2964:	03 c0       	rjmp	.+6      	; 0x296c <fault+0x60>
    2966:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printTOUT>
    296a:	27 c0       	rjmp	.+78     	; 0x29ba <fault+0xae>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_FAULT)	//иначе если принятое сообщени это ответ на этот запрос
    296c:	29 e0       	ldi	r18, 0x09	; 9
    296e:	2e 9d       	mul	r18, r14
    2970:	c0 01       	movw	r24, r0
    2972:	2f 9d       	mul	r18, r15
    2974:	90 0d       	add	r25, r0
    2976:	11 24       	eor	r1, r1
    2978:	9c 01       	movw	r18, r24
    297a:	2f 59       	subi	r18, 0x9F	; 159
    297c:	3e 4f       	sbci	r19, 0xFE	; 254
    297e:	79 01       	movw	r14, r18
    2980:	f9 01       	movw	r30, r18
    2982:	20 81       	ld	r18, Z
    2984:	23 30       	cpi	r18, 0x03	; 3
    2986:	01 f5       	brne	.+64     	; 0x29c8 <fault+0xbc>
	{
//		data[1] -состояния входов	 <7>ЦВХ3; <6>ЦВХ2; <5>ЦВХ1; <4>ЦВХ0; <3>ОВХ3; <2>ОВХ2; <1>ОВХ1; <0>ОВХ0  (неисправный вход ==1)
//		data[2] -код ошибки {TEST=1,DATACRC,WATCHDOG,HARDMEM,SOFTHAND,SOFTTIM,UART,RTC,CAN,MSG}
		printIOStr(&inSysBDZ[currBDZaddr].data[1]);
    2988:	8e 59       	subi	r24, 0x9E	; 158
    298a:	9e 4f       	sbci	r25, 0xFE	; 254
    298c:	0e 94 df 04 	call	0x9be	; 0x9be <printIOStr>

		LCD_gotoXY(0,3);
    2990:	63 e0       	ldi	r22, 0x03	; 3
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		LCD_puts_P(OSHIBKA,7);
    2998:	67 e0       	ldi	r22, 0x07	; 7
    299a:	85 ec       	ldi	r24, 0xC5	; 197
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
		LCD_puts(itoa(inSysBDZ[currBDZaddr].data[2],tmpStr,10),2);
    29a2:	f7 01       	movw	r30, r14
    29a4:	82 81       	ldd	r24, Z+2	; 0x02
    29a6:	4a e0       	ldi	r20, 0x0A	; 10
    29a8:	be 01       	movw	r22, r28
    29aa:	6f 5f       	subi	r22, 0xFF	; 255
    29ac:	7f 4f       	sbci	r23, 0xFF	; 255
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
    29b4:	62 e0       	ldi	r22, 0x02	; 2
    29b6:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
	}
	else return;							//если получен не тот ответ выходим
	if( whileKey() ==ESC)reset(currBDZaddr);//а если ответ был правильный предлагаем ресетнуть
    29ba:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    29be:	83 30       	cpi	r24, 0x03	; 3
    29c0:	19 f4       	brne	.+6      	; 0x29c8 <fault+0xbc>
    29c2:	81 2f       	mov	r24, r17
    29c4:	0e 94 70 14 	call	0x28e0	; 0x28e0 <reset>

}
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	1f 91       	pop	r17
    29d6:	ff 90       	pop	r15
    29d8:	ef 90       	pop	r14
    29da:	08 95       	ret

000029dc <alarm>:
{
	printSubMenu(NA_SVYAZI,INL);
}

static void alarm(void)
{
    29dc:	8f 92       	push	r8
    29de:	9f 92       	push	r9
    29e0:	af 92       	push	r10
    29e2:	bf 92       	push	r11
    29e4:	cf 92       	push	r12
    29e6:	df 92       	push	r13
    29e8:	ef 92       	push	r14
    29ea:	ff 92       	push	r15
    29ec:	0f 93       	push	r16
    29ee:	1f 93       	push	r17
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <alarm+0x1a>
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <alarm+0x1c>
    29f8:	1f 92       	push	r1
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
	unsigned char Ndev=0,tmpAddr=0;
	char tmpStr[5];

	printMenuHeader(AVARIYA);//рисуем название пункта':'
    29fe:	8b ea       	ldi	r24, 0xAB	; 171
    2a00:	91 e0       	ldi	r25, 0x01	; 1
    2a02:	0e 94 71 06 	call	0xce2	; 0xce2 <printMenuHeader>
    2a06:	aa 24       	eor	r10, r10
    2a08:	a3 94       	inc	r10
    2a0a:	b1 2c       	mov	r11, r1
static void alarm(void)
{
	unsigned char currBDZaddr = 0;
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
	unsigned char Ndev=0,tmpAddr=0;
    2a0c:	10 e0       	ldi	r17, 0x00	; 0
    2a0e:	00 e0       	ldi	r16, 0x00	; 0

static void alarm(void)
{
	unsigned char currBDZaddr = 0;
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
    2a10:	ee 24       	eor	r14, r14
    2a12:	ea 94       	dec	r14
    2a14:	fe 2c       	mov	r15, r14
    2a16:	cc 24       	eor	r12, r12
    2a18:	ca 94       	dec	r12
    2a1a:	dc 2c       	mov	r13, r12

	printMenuHeader(AVARIYA);//рисуем название пункта':'

	for(unsigned char i=1;i<MAXQDEV;i++)
	{
		if(readID(i)==i && chkBit(inSysBDZ[i].flags,ALM))	//обнаружили девайс с флагом авария
    2a1c:	39 e0       	ldi	r19, 0x09	; 9
    2a1e:	83 2e       	mov	r8, r19
    2a20:	c5 01       	movw	r24, r10
    2a22:	87 5f       	subi	r24, 0xF7	; 247
    2a24:	9f 4f       	sbci	r25, 0xFF	; 255
    2a26:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    2a2a:	98 2e       	mov	r9, r24
    2a2c:	8a 11       	cpse	r24, r10
    2a2e:	2f c0       	rjmp	.+94     	; 0x2a8e <alarm+0xb2>
    2a30:	8a 9c       	mul	r8, r10
    2a32:	f0 01       	movw	r30, r0
    2a34:	8b 9c       	mul	r8, r11
    2a36:	f0 0d       	add	r31, r0
    2a38:	11 24       	eor	r1, r1
    2a3a:	ef 59       	subi	r30, 0x9F	; 159
    2a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a3e:	80 85       	ldd	r24, Z+8	; 0x08
    2a40:	80 ff       	sbrs	r24, 0
    2a42:	25 c0       	rjmp	.+74     	; 0x2a8e <alarm+0xb2>
		{
			if(tmpAddr==0)tmpAddr=i;						//на случай если не найдется БДЗ,зафиксировавщих время сраб.МТЗ
    2a44:	11 11       	cpse	r17, r1
    2a46:	01 c0       	rjmp	.+2      	; 0x2a4a <alarm+0x6e>
    2a48:	19 2d       	mov	r17, r9
			Ndev++;											//добавляем кол-во обнаруженных девайсов
    2a4a:	0f 5f       	subi	r16, 0xFF	; 255
			if(send_read_arch(2,i,0) <0) printTOUT();		//запрашиваем чась архива со значениями МТЗ.Если получен таймаут...
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	69 2d       	mov	r22, r9
    2a50:	82 e0       	ldi	r24, 0x02	; 2
    2a52:	0e 94 82 0b 	call	0x1704	; 0x1704 <send_read_arch>
    2a56:	87 ff       	sbrs	r24, 7
    2a58:	03 c0       	rjmp	.+6      	; 0x2a60 <alarm+0x84>
    2a5a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printTOUT>
    2a5e:	17 c0       	rjmp	.+46     	; 0x2a8e <alarm+0xb2>
			else if(inSysBDZ[i].data[0]==RD_ARCH_2)			//получили тот ответ который надо
    2a60:	8a 9c       	mul	r8, r10
    2a62:	f0 01       	movw	r30, r0
    2a64:	8b 9c       	mul	r8, r11
    2a66:	f0 0d       	add	r31, r0
    2a68:	11 24       	eor	r1, r1
    2a6a:	ef 59       	subi	r30, 0x9F	; 159
    2a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6e:	80 81       	ld	r24, Z
    2a70:	85 30       	cpi	r24, 0x05	; 5
    2a72:	69 f4       	brne	.+26     	; 0x2a8e <alarm+0xb2>
			{
				unsigned int tmpTime=(unsigned int)inSysBDZ[i].data[3]<<8 | inSysBDZ[i].data[4];
    2a74:	23 81       	ldd	r18, Z+3	; 0x03
    2a76:	84 81       	ldd	r24, Z+4	; 0x04
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	92 2b       	or	r25, r18

				if(tmpTime < minMTZ_ontime)
    2a7c:	8c 15       	cp	r24, r12
    2a7e:	9d 05       	cpc	r25, r13
    2a80:	30 f4       	brcc	.+12     	; 0x2a8e <alarm+0xb2>
				{
					minMTZ_ontime=tmpTime;				//если полученное время меньше сохраненного минимального-перезаписываем
					MTZ_offtime = (unsigned int)inSysBDZ[i].data[5]<<8 | inSysBDZ[i].data[6];	//время отпускания
    2a82:	25 81       	ldd	r18, Z+5	; 0x05
    2a84:	e6 80       	ldd	r14, Z+6	; 0x06
    2a86:	f1 2c       	mov	r15, r1
    2a88:	f2 2a       	or	r15, r18
    2a8a:	19 2d       	mov	r17, r9
    2a8c:	6c 01       	movw	r12, r24
    2a8e:	2f ef       	ldi	r18, 0xFF	; 255
    2a90:	a2 1a       	sub	r10, r18
    2a92:	b2 0a       	sbc	r11, r18
	unsigned char Ndev=0,tmpAddr=0;
	char tmpStr[5];

	printMenuHeader(AVARIYA);//рисуем название пункта':'

	for(unsigned char i=1;i<MAXQDEV;i++)
    2a94:	83 e6       	ldi	r24, 0x63	; 99
    2a96:	a8 16       	cp	r10, r24
    2a98:	b1 04       	cpc	r11, r1
    2a9a:	11 f6       	brne	.-124    	; 0x2a20 <alarm+0x44>
				}
			}
		}
	}

	LCD_puts(itoa(Ndev,tmpStr,10),strlen(tmpStr)+2);LCD_puts_P(BDZ,4);		//ХХX	БД3
    2a9c:	be 01       	movw	r22, r28
    2a9e:	6f 5f       	subi	r22, 0xFF	; 255
    2aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa2:	fb 01       	movw	r30, r22
    2aa4:	01 90       	ld	r0, Z+
    2aa6:	00 20       	and	r0, r0
    2aa8:	e9 f7       	brne	.-6      	; 0x2aa4 <alarm+0xc8>
    2aaa:	31 97       	sbiw	r30, 0x01	; 1
    2aac:	5f 01       	movw	r10, r30
    2aae:	a6 1a       	sub	r10, r22
    2ab0:	b7 0a       	sbc	r11, r23
    2ab2:	4a e0       	ldi	r20, 0x0A	; 10
    2ab4:	80 2f       	mov	r24, r16
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__itoa_ncheck>
    2abc:	62 e0       	ldi	r22, 0x02	; 2
    2abe:	6a 0d       	add	r22, r10
    2ac0:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
    2ac4:	64 e0       	ldi	r22, 0x04	; 4
    2ac6:	8b e7       	ldi	r24, 0x7B	; 123
    2ac8:	91 e0       	ldi	r25, 0x01	; 1
    2aca:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
	if(tmpAddr !=0)
    2ace:	11 23       	and	r17, r17
    2ad0:	e1 f0       	breq	.+56     	; 0x2b0a <alarm+0x12e>
	{
		if(send_read_arch(1,tmpAddr,0) <0)printTOUT();		//запрашиваем часть архива со значениями RTC. Если получен таймаут...
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	61 2f       	mov	r22, r17
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	0e 94 82 0b 	call	0x1704	; 0x1704 <send_read_arch>
    2adc:	87 ff       	sbrs	r24, 7
    2ade:	03 c0       	rjmp	.+6      	; 0x2ae6 <alarm+0x10a>
    2ae0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printTOUT>
    2ae4:	12 c0       	rjmp	.+36     	; 0x2b0a <alarm+0x12e>
		else if(inSysBDZ[tmpAddr].data[0]==RD_ARCH_1)
    2ae6:	29 e0       	ldi	r18, 0x09	; 9
    2ae8:	12 9f       	mul	r17, r18
    2aea:	c0 01       	movw	r24, r0
    2aec:	11 24       	eor	r1, r1
    2aee:	fc 01       	movw	r30, r24
    2af0:	ef 59       	subi	r30, 0x9F	; 159
    2af2:	fe 4f       	sbci	r31, 0xFE	; 254
    2af4:	20 81       	ld	r18, Z
    2af6:	24 30       	cpi	r18, 0x04	; 4
    2af8:	41 f4       	brne	.+16     	; 0x2b0a <alarm+0x12e>
		{
			//строка дата/время
			printTimeStr(&inSysBDZ[tmpAddr].data[1],0,1);
    2afa:	8e 59       	subi	r24, 0x9E	; 158
    2afc:	9e 4f       	sbci	r25, 0xFE	; 254
    2afe:	0e 94 04 06 	call	0xc08	; 0xc08 <printTimeStr.constprop.3>
			//строки вкл/откл МТЗ
			printMTZStr(minMTZ_ontime,MTZ_offtime);
    2b02:	b7 01       	movw	r22, r14
    2b04:	c6 01       	movw	r24, r12
    2b06:	0e 94 97 05 	call	0xb2e	; 0xb2e <printMTZStr>
		}
	}
LOOP:
	switch(whileKey())	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2b0a:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    2b0e:	83 30       	cpi	r24, 0x03	; 3
    2b10:	29 f0       	breq	.+10     	; 0x2b1c <alarm+0x140>
    2b12:	8f 3f       	cpi	r24, 0xFF	; 255
    2b14:	59 f1       	breq	.+86     	; 0x2b6c <alarm+0x190>
    2b16:	82 30       	cpi	r24, 0x02	; 2
    2b18:	c1 f7       	brne	.-16     	; 0x2b0a <alarm+0x12e>
    2b1a:	06 c0       	rjmp	.+12     	; 0x2b28 <alarm+0x14c>
	{
	case ESC:	//нажат ESC посылаем общий сброс
	{
		if(Ndev !=0) reset(0);
    2b1c:	00 23       	and	r16, r16
    2b1e:	31 f1       	breq	.+76     	; 0x2b6c <alarm+0x190>
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	0e 94 70 14 	call	0x28e0	; 0x28e0 <reset>
    2b26:	22 c0       	rjmp	.+68     	; 0x2b6c <alarm+0x190>
		return;
	}
	break;
	case ENT:if(Ndev==0)return;	//нажат ENT подолжаем далее(если есть аварии)
    2b28:	00 23       	and	r16, r16
    2b2a:	01 f1       	breq	.+64     	; 0x2b6c <alarm+0x190>
	break;
	default:goto LOOP;	//любая другая клавиша
	break;
	}

	currBDZaddr = printSubMenu(AVARIYA,ALM);
    2b2c:	60 e0       	ldi	r22, 0x00	; 0
    2b2e:	8b ea       	ldi	r24, 0xAB	; 171
    2b30:	91 e0       	ldi	r25, 0x01	; 1
    2b32:	0e 94 3a 12 	call	0x2474	; 0x2474 <printSubMenu>
    2b36:	08 2f       	mov	r16, r24
	if(currBDZaddr<1)return;
    2b38:	88 23       	and	r24, r24
    2b3a:	c1 f0       	breq	.+48     	; 0x2b6c <alarm+0x190>
    2b3c:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		switch(viewArch(currBDZaddr,index))
    2b3e:	61 2f       	mov	r22, r17
    2b40:	80 2f       	mov	r24, r16
    2b42:	0e 94 30 13 	call	0x2660	; 0x2660 <viewArch>
    2b46:	85 30       	cpi	r24, 0x05	; 5
    2b48:	49 f0       	breq	.+18     	; 0x2b5c <alarm+0x180>
    2b4a:	18 f4       	brcc	.+6      	; 0x2b52 <alarm+0x176>
    2b4c:	83 30       	cpi	r24, 0x03	; 3
    2b4e:	71 f0       	breq	.+28     	; 0x2b6c <alarm+0x190>
    2b50:	f6 cf       	rjmp	.-20     	; 0x2b3e <alarm+0x162>
    2b52:	86 30       	cpi	r24, 0x06	; 6
    2b54:	39 f0       	breq	.+14     	; 0x2b64 <alarm+0x188>
    2b56:	8f 3f       	cpi	r24, 0xFF	; 255
    2b58:	49 f0       	breq	.+18     	; 0x2b6c <alarm+0x190>
    2b5a:	f1 cf       	rjmp	.-30     	; 0x2b3e <alarm+0x162>
		{
		case UP:if(index>0)index--;
    2b5c:	11 23       	and	r17, r17
    2b5e:	79 f3       	breq	.-34     	; 0x2b3e <alarm+0x162>
    2b60:	11 50       	subi	r17, 0x01	; 1
    2b62:	ed cf       	rjmp	.-38     	; 0x2b3e <alarm+0x162>
		break;
		case DOWN:if(index<31)index++;
    2b64:	1f 31       	cpi	r17, 0x1F	; 31
    2b66:	58 f7       	brcc	.-42     	; 0x2b3e <alarm+0x162>
    2b68:	1f 5f       	subi	r17, 0xFF	; 255
    2b6a:	e9 cf       	rjmp	.-46     	; 0x2b3e <alarm+0x162>
		break;
		default:continue;	//любая другая клавиша
		break;
		}
	}
}
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	ff 90       	pop	r15
    2b80:	ef 90       	pop	r14
    2b82:	df 90       	pop	r13
    2b84:	cf 90       	pop	r12
    2b86:	bf 90       	pop	r11
    2b88:	af 90       	pop	r10
    2b8a:	9f 90       	pop	r9
    2b8c:	8f 90       	pop	r8
    2b8e:	08 95       	ret

00002b90 <naviMenu>:
		LCD_puts(lowerCase,19);	//прорисовали пункты меню:
	}
}

void naviMenu(struct menu *level)
{
    2b90:	7f 92       	push	r7
    2b92:	8f 92       	push	r8
    2b94:	9f 92       	push	r9
    2b96:	af 92       	push	r10
    2b98:	bf 92       	push	r11
    2b9a:	cf 92       	push	r12
    2b9c:	df 92       	push	r13
    2b9e:	ef 92       	push	r14
    2ba0:	ff 92       	push	r15
    2ba2:	0f 93       	push	r16
    2ba4:	1f 93       	push	r17
    2ba6:	cf 93       	push	r28
    2ba8:	df 93       	push	r29
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    2bae:	64 97       	sbiw	r28, 0x14	; 20
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	f8 94       	cli
    2bb4:	de bf       	out	0x3e, r29	; 62
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	cd bf       	out	0x3d, r28	; 61
    2bba:	5c 01       	movw	r10, r24
	unsigned char cursorPos=1;			//указатель на текущий пункт
	unsigned char screenPos=0;			//указатель на текущий пункт
	unsigned char numPunkt,currPunkt=1;	//счетчик пунктов меню,

	for(numPunkt=0;(level+1+numPunkt)->name != NULL;numPunkt++);	//считаем кол-во пунктов в подменю (level -заголовок; level+1  -первый пункт)
    2bbc:	e1 2c       	mov	r14, r1
    2bbe:	f5 01       	movw	r30, r10
    2bc0:	24 e0       	ldi	r18, 0x04	; 4
    2bc2:	e2 9e       	mul	r14, r18
    2bc4:	e0 0d       	add	r30, r0
    2bc6:	f1 1d       	adc	r31, r1
    2bc8:	11 24       	eor	r1, r1
    2bca:	84 81       	ldd	r24, Z+4	; 0x04
    2bcc:	95 81       	ldd	r25, Z+5	; 0x05
    2bce:	89 2b       	or	r24, r25
    2bd0:	11 f0       	breq	.+4      	; 0x2bd6 <naviMenu+0x46>
    2bd2:	e3 94       	inc	r14
    2bd4:	f4 cf       	rjmp	.-24     	; 0x2bbe <naviMenu+0x2e>
    2bd6:	01 e0       	ldi	r16, 0x01	; 1
    2bd8:	f1 2c       	mov	r15, r1
    2bda:	11 e0       	ldi	r17, 0x01	; 1

	while(1)
	{
		printMenuHeader(level->name);		//рисуем заголовок
    2bdc:	f5 01       	movw	r30, r10
    2bde:	80 81       	ld	r24, Z
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	0e 94 71 06 	call	0xce2	; 0xce2 <printMenuHeader>
    2be6:	c5 01       	movw	r24, r10
    2be8:	f4 e0       	ldi	r31, 0x04	; 4
    2bea:	ff 9e       	mul	r15, r31
    2bec:	80 0d       	add	r24, r0
    2bee:	91 1d       	adc	r25, r1
    2bf0:	11 24       	eor	r1, r1
    2bf2:	9c 01       	movw	r18, r24
    2bf4:	2c 5f       	subi	r18, 0xFC	; 252
    2bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf8:	69 01       	movw	r12, r18

static inline void printMenuPunkt(struct menu *level)
{
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
    2bfa:	91 2c       	mov	r9, r1
	{
		if((level+i)->name == NULL)return;	//если вместо имени заглушка(пункта не существует)
    2bfc:	f6 01       	movw	r30, r12
    2bfe:	20 81       	ld	r18, Z
    2c00:	31 81       	ldd	r19, Z+1	; 0x01
    2c02:	21 15       	cp	r18, r1
    2c04:	31 05       	cpc	r19, r1
    2c06:	29 f1       	breq	.+74     	; 0x2c52 <naviMenu+0xc2>
    2c08:	de 01       	movw	r26, r28
    2c0a:	11 96       	adiw	r26, 0x01	; 1
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	7a 2e       	mov	r7, r26
    2c12:	8b 2e       	mov	r8, r27
    2c14:	f9 01       	movw	r30, r18
    2c16:	e8 0f       	add	r30, r24
    2c18:	f9 1f       	adc	r31, r25
		for(unsigned char j=0;j<19;j++)		//преобразуем названия пунктов меню в нижний регистр
		{
			lowerCase[j]=(pgm_read_byte(&(level+i)->name[j]) >= 0xC0)?( pgm_read_byte(&(level+i)->name[j])+0x20 ):(pgm_read_byte(&(level+i)->name[j]));
    2c1a:	44 91       	lpm	r20, Z
    2c1c:	40 3c       	cpi	r20, 0xC0	; 192
    2c1e:	18 f0       	brcs	.+6      	; 0x2c26 <naviMenu+0x96>
    2c20:	e4 91       	lpm	r30, Z
    2c22:	e0 5e       	subi	r30, 0xE0	; 224
    2c24:	01 c0       	rjmp	.+2      	; 0x2c28 <naviMenu+0x98>
    2c26:	e4 91       	lpm	r30, Z
    2c28:	ed 93       	st	X+, r30
    2c2a:	01 96       	adiw	r24, 0x01	; 1
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
	{
		if((level+i)->name == NULL)return;	//если вместо имени заглушка(пункта не существует)
		for(unsigned char j=0;j<19;j++)		//преобразуем названия пунктов меню в нижний регистр
    2c2c:	83 31       	cpi	r24, 0x13	; 19
    2c2e:	91 05       	cpc	r25, r1
    2c30:	89 f7       	brne	.-30     	; 0x2c14 <naviMenu+0x84>
		{
			lowerCase[j]=(pgm_read_byte(&(level+i)->name[j]) >= 0xC0)?( pgm_read_byte(&(level+i)->name[j])+0x20 ):(pgm_read_byte(&(level+i)->name[j]));
		}
		LCD_gotoXY(1,i+1);
    2c32:	93 94       	inc	r9
    2c34:	69 2d       	mov	r22, r9
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		LCD_puts(lowerCase,19);	//прорисовали пункты меню:
    2c3c:	63 e1       	ldi	r22, 0x13	; 19
    2c3e:	87 2d       	mov	r24, r7
    2c40:	98 2d       	mov	r25, r8
    2c42:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
    2c46:	f4 e0       	ldi	r31, 0x04	; 4
    2c48:	cf 0e       	add	r12, r31
    2c4a:	d1 1c       	adc	r13, r1

static inline void printMenuPunkt(struct menu *level)
{
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
    2c4c:	23 e0       	ldi	r18, 0x03	; 3
    2c4e:	92 12       	cpse	r9, r18
    2c50:	d5 cf       	rjmp	.-86     	; 0x2bfc <naviMenu+0x6c>

	while(1)
	{
		printMenuHeader(level->name);		//рисуем заголовок
		printMenuPunkt(level+screenPos+1);	//пункты меню
		LCD_gotoXY(0,cursorPos);			//и курсор (символ >)
    2c52:	61 2f       	mov	r22, r17
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		LCD_putchar(0x84);
    2c5a:	84 e8       	ldi	r24, 0x84	; 132
    2c5c:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2c60:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    2c64:	85 30       	cpi	r24, 0x05	; 5
    2c66:	61 f1       	breq	.+88     	; 0x2cc0 <naviMenu+0x130>
    2c68:	c8 f4       	brcc	.+50     	; 0x2c9c <naviMenu+0x10c>
    2c6a:	82 30       	cpi	r24, 0x02	; 2
    2c6c:	99 f1       	breq	.+102    	; 0x2cd4 <naviMenu+0x144>
    2c6e:	83 30       	cpi	r24, 0x03	; 3
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <naviMenu+0xe4>
    2c72:	b4 cf       	rjmp	.-152    	; 0x2bdc <naviMenu+0x4c>
		break;
		case NOKEY:asm("jmp 0");	//автовыход
		break;
		}
	}
}
    2c74:	64 96       	adiw	r28, 0x14	; 20
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	ff 90       	pop	r15
    2c8a:	ef 90       	pop	r14
    2c8c:	df 90       	pop	r13
    2c8e:	cf 90       	pop	r12
    2c90:	bf 90       	pop	r11
    2c92:	af 90       	pop	r10
    2c94:	9f 90       	pop	r9
    2c96:	8f 90       	pop	r8
    2c98:	7f 90       	pop	r7
    2c9a:	08 95       	ret
		printMenuHeader(level->name);		//рисуем заголовок
		printMenuPunkt(level+screenPos+1);	//пункты меню
		LCD_gotoXY(0,cursorPos);			//и курсор (символ >)
		LCD_putchar(0x84);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2c9c:	86 30       	cpi	r24, 0x06	; 6
    2c9e:	31 f0       	breq	.+12     	; 0x2cac <naviMenu+0x11c>
    2ca0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ca2:	09 f0       	breq	.+2      	; 0x2ca6 <naviMenu+0x116>
    2ca4:	9b cf       	rjmp	.-202    	; 0x2bdc <naviMenu+0x4c>
		break;
		case ENT:(level+currPunkt)->pFunc();	//-запускаем функцию выбранного пункта	(она также может вызвать naviMenu -следующий подуровень)
		break;
		case ESC:return;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    2ca6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    2caa:	98 cf       	rjmp	.-208    	; 0x2bdc <naviMenu+0x4c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt)
    2cac:	0e 15       	cp	r16, r14
    2cae:	08 f0       	brcs	.+2      	; 0x2cb2 <naviMenu+0x122>
    2cb0:	95 cf       	rjmp	.-214    	; 0x2bdc <naviMenu+0x4c>
			{
				++currPunkt;
    2cb2:	0f 5f       	subi	r16, 0xFF	; 255
				(cursorPos < NUMOFMENUSTRING)?(cursorPos++):(screenPos++);
    2cb4:	13 30       	cpi	r17, 0x03	; 3
    2cb6:	10 f4       	brcc	.+4      	; 0x2cbc <naviMenu+0x12c>
    2cb8:	1f 5f       	subi	r17, 0xFF	; 255
    2cba:	90 cf       	rjmp	.-224    	; 0x2bdc <naviMenu+0x4c>
    2cbc:	f3 94       	inc	r15
    2cbe:	8e cf       	rjmp	.-228    	; 0x2bdc <naviMenu+0x4c>
			}
		}
		break;
		case UP:
		{
			if(currPunkt > 1 )
    2cc0:	02 30       	cpi	r16, 0x02	; 2
    2cc2:	08 f4       	brcc	.+2      	; 0x2cc6 <naviMenu+0x136>
    2cc4:	8b cf       	rjmp	.-234    	; 0x2bdc <naviMenu+0x4c>
			{
				--currPunkt;
    2cc6:	01 50       	subi	r16, 0x01	; 1
				(cursorPos > 1)?(cursorPos--):(screenPos--);
    2cc8:	11 30       	cpi	r17, 0x01	; 1
    2cca:	11 f0       	breq	.+4      	; 0x2cd0 <naviMenu+0x140>
    2ccc:	11 50       	subi	r17, 0x01	; 1
    2cce:	86 cf       	rjmp	.-244    	; 0x2bdc <naviMenu+0x4c>
    2cd0:	fa 94       	dec	r15
    2cd2:	84 cf       	rjmp	.-248    	; 0x2bdc <naviMenu+0x4c>
			}
		}
		break;
		case ENT:(level+currPunkt)->pFunc();	//-запускаем функцию выбранного пункта	(она также может вызвать naviMenu -следующий подуровень)
    2cd4:	f5 01       	movw	r30, r10
    2cd6:	34 e0       	ldi	r19, 0x04	; 4
    2cd8:	03 9f       	mul	r16, r19
    2cda:	e0 0d       	add	r30, r0
    2cdc:	f1 1d       	adc	r31, r1
    2cde:	11 24       	eor	r1, r1
    2ce0:	02 80       	ldd	r0, Z+2	; 0x02
    2ce2:	f3 81       	ldd	r31, Z+3	; 0x03
    2ce4:	e0 2d       	mov	r30, r0
    2ce6:	09 95       	icall
		break;
    2ce8:	79 cf       	rjmp	.-270    	; 0x2bdc <naviMenu+0x4c>

00002cea <change_logic>:
	}
}


static void change_logic(void)
{
    2cea:	ff 92       	push	r15
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <change_logic+0xc>
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <change_logic+0xe>
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <change_logic+0x10>
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	01 e0       	ldi	r16, 0x01	; 1
    2d00:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char numBDZ=0;
	//scansys();//сканируем сеть
	//считаем кол-во БДЗ инлайн(в сети)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) numBDZ++;
    2d02:	89 e0       	ldi	r24, 0x09	; 9
    2d04:	f8 2e       	mov	r15, r24
    2d06:	c8 01       	movw	r24, r16
    2d08:	87 5f       	subi	r24, 0xF7	; 247
    2d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0c:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    2d10:	80 13       	cpse	r24, r16
    2d12:	08 c0       	rjmp	.+16     	; 0x2d24 <change_logic+0x3a>
    2d14:	f0 9e       	mul	r15, r16
    2d16:	f0 01       	movw	r30, r0
    2d18:	f1 9e       	mul	r15, r17
    2d1a:	f0 0d       	add	r31, r0
    2d1c:	11 24       	eor	r1, r1
    2d1e:	ef 59       	subi	r30, 0x9F	; 159
    2d20:	fe 4f       	sbci	r31, 0xFE	; 254
    2d22:	80 85       	ldd	r24, Z+8	; 0x08
    2d24:	0f 5f       	subi	r16, 0xFF	; 255
    2d26:	1f 4f       	sbci	r17, 0xFF	; 255
    2d28:	03 36       	cpi	r16, 0x63	; 99
    2d2a:	11 05       	cpc	r17, r1
    2d2c:	61 f7       	brne	.-40     	; 0x2d06 <change_logic+0x1c>
	//if (numBDZ>1)
	*&adress=numm();//если бдз в сети >1 то запрашиваем адрес БДЗ в котором будем менять п-тры
    2d2e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <numm>
    2d32:	48 2f       	mov	r20, r24
    2d34:	50 e0       	ldi	r21, 0x00	; 0
    2d36:	50 93 79 05 	sts	0x0579, r21	; 0x800579 <adress+0x1>
    2d3a:	40 93 78 05 	sts	0x0578, r20	; 0x800578 <adress>
	//addr=*&adress;
	if (*&adress!=0) //если запрос не широковещательный(адресс не 0), то считываем показания БДЗ под № "addr"
    2d3e:	41 15       	cp	r20, r1
    2d40:	51 05       	cpc	r21, r1
    2d42:	e1 f1       	breq	.+120    	; 0x2dbc <change_logic+0xd2>
		{
			unsigned char data[6]={PROG};
    2d44:	96 e0       	ldi	r25, 0x06	; 6
    2d46:	9e 01       	movw	r18, r28
    2d48:	2f 5f       	subi	r18, 0xFF	; 255
    2d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4c:	f9 01       	movw	r30, r18
    2d4e:	69 2f       	mov	r22, r25
    2d50:	11 92       	st	Z+, r1
    2d52:	6a 95       	dec	r22
    2d54:	e9 f7       	brne	.-6      	; 0x2d50 <change_logic+0x66>
    2d56:	99 83       	std	Y+1, r25	; 0x01
			inSysBDZ[*&adress].flags=1<<FLT;
    2d58:	19 e0       	ldi	r17, 0x09	; 9
    2d5a:	14 9f       	mul	r17, r20
    2d5c:	f0 01       	movw	r30, r0
    2d5e:	15 9f       	mul	r17, r21
    2d60:	f0 0d       	add	r31, r0
    2d62:	11 24       	eor	r1, r1
    2d64:	ef 59       	subi	r30, 0x9F	; 159
    2d66:	fe 4f       	sbci	r31, 0xFE	; 254
    2d68:	92 e0       	ldi	r25, 0x02	; 2
    2d6a:	90 87       	std	Z+8, r25	; 0x08
			CAN_loadTXbuf((unsigned long int)*&adress,2,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    2d6c:	68 2f       	mov	r22, r24
    2d6e:	70 e0       	ldi	r23, 0x00	; 0
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	07 ef       	ldi	r16, 0xF7	; 247
    2d76:	42 e0       	ldi	r20, 0x02	; 2
    2d78:	0e 94 7d 07 	call	0xefa	; 0xefa <CAN_loadTXbuf>
			if((checkTOUT(*&adress) <0)||(inSysBDZ[*&adress].data[0] !=PROG)){printTOUT();_delay_ms(2000);return;}
    2d7c:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <adress>
    2d80:	0e 94 62 01 	call	0x2c4	; 0x2c4 <checkTOUT>
    2d84:	87 fd       	sbrc	r24, 7
    2d86:	0e c0       	rjmp	.+28     	; 0x2da4 <change_logic+0xba>
    2d88:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <adress>
    2d8c:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <adress+0x1>
    2d90:	18 9f       	mul	r17, r24
    2d92:	f0 01       	movw	r30, r0
    2d94:	19 9f       	mul	r17, r25
    2d96:	f0 0d       	add	r31, r0
    2d98:	11 24       	eor	r1, r1
    2d9a:	ef 59       	subi	r30, 0x9F	; 159
    2d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d9e:	80 81       	ld	r24, Z
    2da0:	86 30       	cpi	r24, 0x06	; 6
    2da2:	61 f0       	breq	.+24     	; 0x2dbc <change_logic+0xd2>
    2da4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printTOUT>
    2da8:	8f ef       	ldi	r24, 0xFF	; 255
    2daa:	97 ea       	ldi	r25, 0xA7	; 167
    2dac:	e1 e6       	ldi	r30, 0x61	; 97
    2dae:	81 50       	subi	r24, 0x01	; 1
    2db0:	90 40       	sbci	r25, 0x00	; 0
    2db2:	e0 40       	sbci	r30, 0x00	; 0
    2db4:	e1 f7       	brne	.-8      	; 0x2dae <change_logic+0xc4>
    2db6:	00 c0       	rjmp	.+0      	; 0x2db8 <change_logic+0xce>
    2db8:	00 00       	nop
    2dba:	04 c0       	rjmp	.+8      	; 0x2dc4 <change_logic+0xda>
		}
	naviMenu(LVL_in);
    2dbc:	8c e7       	ldi	r24, 0x7C	; 124
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <naviMenu>
	return;
}
    2dc4:	26 96       	adiw	r28, 0x06	; 6
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	df 91       	pop	r29
    2dd2:	cf 91       	pop	r28
    2dd4:	1f 91       	pop	r17
    2dd6:	0f 91       	pop	r16
    2dd8:	ff 90       	pop	r15
    2dda:	08 95       	ret

00002ddc <svyaz>:
{
	change_param(0);
}

static void svyaz(void)
{
    2ddc:	cf 92       	push	r12
    2dde:	df 92       	push	r13
    2de0:	ef 92       	push	r14
    2de2:	ff 92       	push	r15
    2de4:	cf 93       	push	r28
	naviMenu(LVL_svyaz);
    2de6:	80 ea       	ldi	r24, 0xA0	; 160
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <naviMenu>
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    2dee:	82 e0       	ldi	r24, 0x02	; 2
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 14 20 	call	0x4028	; 0x4028 <eeprom_read_dword>
    2df6:	6b 01       	movw	r12, r22
    2df8:	7c 01       	movw	r14, r24
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    2e02:	c8 2f       	mov	r28, r24
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    2e0c:	a7 01       	movw	r20, r14
    2e0e:	96 01       	movw	r18, r12
    2e10:	6c 2f       	mov	r22, r28
}
    2e12:	cf 91       	pop	r28
    2e14:	ff 90       	pop	r15
    2e16:	ef 90       	pop	r14
    2e18:	df 90       	pop	r13
    2e1a:	cf 90       	pop	r12
}

static void svyaz(void)
{
	naviMenu(LVL_svyaz);
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    2e1c:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <MODB_init>

00002e20 <progsys>:
	return ;
}

static void progsys(void)
{
	scansys();
    2e20:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <scansys>
	naviMenu(LVL_prog);
    2e24:	8c ec       	ldi	r24, 0xCC	; 204
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <naviMenu>

00002e2c <nastroyka>:
		}
	}
}

static void nastroyka(void)
{
    2e2c:	6f 92       	push	r6
    2e2e:	7f 92       	push	r7
    2e30:	8f 92       	push	r8
    2e32:	9f 92       	push	r9
    2e34:	af 92       	push	r10
    2e36:	bf 92       	push	r11
    2e38:	cf 92       	push	r12
    2e3a:	df 92       	push	r13
    2e3c:	ef 92       	push	r14
    2e3e:	ff 92       	push	r15
    2e40:	0f 93       	push	r16
    2e42:	1f 93       	push	r17
    2e44:	cf 93       	push	r28
    2e46:	df 93       	push	r29
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <nastroyka+0x1e>
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <nastroyka+0x20>
    2e4c:	1f 92       	push	r1
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62

static unsigned char passwd(void)
{
	signed int currPasswd=0,step=1;
	char str[5];
	unsigned char cursorPos=3;
    2e52:	33 e0       	ldi	r19, 0x03	; 3
    2e54:	73 2e       	mov	r7, r19
	LCD_gotoXY(0,2);LCD_puts_P(NEDOSTUPNO,20);
}

static unsigned char passwd(void)
{
	signed int currPasswd=0,step=1;
    2e56:	ee 24       	eor	r14, r14
    2e58:	e3 94       	inc	r14
    2e5a:	f1 2c       	mov	r15, r1
    2e5c:	00 e0       	ldi	r16, 0x00	; 0
    2e5e:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		printMenuHeader(PAROL);	//прорисовываем заголовок
		LCD_gotoXY(0,2);
		sprintf(str,"%04d",currPasswd);
    2e60:	5e e3       	ldi	r21, 0x3E	; 62
    2e62:	c5 2e       	mov	r12, r21
    2e64:	51 e0       	ldi	r21, 0x01	; 1
    2e66:	d5 2e       	mov	r13, r21
    2e68:	ce 01       	movw	r24, r28
    2e6a:	01 96       	adiw	r24, 0x01	; 1
    2e6c:	5c 01       	movw	r10, r24
			(cursorPos>0)?(cursorPos--):(cursorPos=3);
		}
		break;
		case RIGHT:
		{
			(step > 1)?(step /= 10):(step=1000);
    2e6e:	6a e0       	ldi	r22, 0x0A	; 10
    2e70:	86 2e       	mov	r8, r22
    2e72:	91 2c       	mov	r9, r1
			currPasswd=((currPasswd + step)>=9999)?(0):(currPasswd+step);
		}
		break;
		case LEFT:
		{
			(step < 1000)?(step *= 10):(step=1);
    2e74:	7a e0       	ldi	r23, 0x0A	; 10
    2e76:	67 2e       	mov	r6, r23
	char str[5];
	unsigned char cursorPos=3;

	while(1)
	{
		printMenuHeader(PAROL);	//прорисовываем заголовок
    2e78:	8e e6       	ldi	r24, 0x6E	; 110
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 71 06 	call	0xce2	; 0xce2 <printMenuHeader>
		LCD_gotoXY(0,2);
    2e80:	62 e0       	ldi	r22, 0x02	; 2
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		sprintf(str,"%04d",currPasswd);
    2e88:	1f 93       	push	r17
    2e8a:	0f 93       	push	r16
    2e8c:	df 92       	push	r13
    2e8e:	cf 92       	push	r12
    2e90:	bf 92       	push	r11
    2e92:	af 92       	push	r10
    2e94:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <sprintf>
		LCD_puts(str,4);
    2e98:	64 e0       	ldi	r22, 0x04	; 4
    2e9a:	c5 01       	movw	r24, r10
    2e9c:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
		LCD_gotoXY(cursorPos,2);
    2ea0:	62 e0       	ldi	r22, 0x02	; 2
    2ea2:	87 2d       	mov	r24, r7
    2ea4:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		LCD_cursorBlink();
    2ea8:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_cursorBlink>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2eac:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <whileKey>
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	85 30       	cpi	r24, 0x05	; 5
    2ebe:	c1 f0       	breq	.+48     	; 0x2ef0 <nastroyka+0xc4>
    2ec0:	40 f4       	brcc	.+16     	; 0x2ed2 <nastroyka+0xa6>
    2ec2:	83 30       	cpi	r24, 0x03	; 3
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <nastroyka+0x9c>
    2ec6:	57 c0       	rjmp	.+174    	; 0x2f76 <nastroyka+0x14a>
    2ec8:	e8 f4       	brcc	.+58     	; 0x2f04 <nastroyka+0xd8>
    2eca:	82 30       	cpi	r24, 0x02	; 2
    2ecc:	09 f4       	brne	.+2      	; 0x2ed0 <nastroyka+0xa4>
    2ece:	45 c0       	rjmp	.+138    	; 0x2f5a <nastroyka+0x12e>
    2ed0:	d3 cf       	rjmp	.-90     	; 0x2e78 <nastroyka+0x4c>
    2ed2:	87 30       	cpi	r24, 0x07	; 7
    2ed4:	69 f1       	breq	.+90     	; 0x2f30 <nastroyka+0x104>
    2ed6:	28 f0       	brcs	.+10     	; 0x2ee2 <nastroyka+0xb6>
    2ed8:	8f 3f       	cpi	r24, 0xFF	; 255
    2eda:	71 f6       	brne	.-100    	; 0x2e78 <nastroyka+0x4c>
			else return 0;
		}
		break;
		case ESC:{LCD_cursorOff();return 0;}	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    2edc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2ee0:	cb cf       	rjmp	.-106    	; 0x2e78 <nastroyka+0x4c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			currPasswd=((currPasswd - step)>=0)?(currPasswd-step):(9999);
    2ee2:	0e 19       	sub	r16, r14
    2ee4:	1f 09       	sbc	r17, r15
    2ee6:	17 ff       	sbrs	r17, 7
    2ee8:	c7 cf       	rjmp	.-114    	; 0x2e78 <nastroyka+0x4c>
    2eea:	0f e0       	ldi	r16, 0x0F	; 15
    2eec:	17 e2       	ldi	r17, 0x27	; 39
    2eee:	c4 cf       	rjmp	.-120    	; 0x2e78 <nastroyka+0x4c>
		}
		break;
		case UP:
		{
			currPasswd=((currPasswd + step)>=9999)?(0):(currPasswd+step);
    2ef0:	0e 0d       	add	r16, r14
    2ef2:	1f 1d       	adc	r17, r15
    2ef4:	0f 30       	cpi	r16, 0x0F	; 15
    2ef6:	97 e2       	ldi	r25, 0x27	; 39
    2ef8:	19 07       	cpc	r17, r25
    2efa:	0c f4       	brge	.+2      	; 0x2efe <nastroyka+0xd2>
    2efc:	bd cf       	rjmp	.-134    	; 0x2e78 <nastroyka+0x4c>
    2efe:	00 e0       	ldi	r16, 0x00	; 0
    2f00:	10 e0       	ldi	r17, 0x00	; 0
    2f02:	ba cf       	rjmp	.-140    	; 0x2e78 <nastroyka+0x4c>
		}
		break;
		case LEFT:
		{
			(step < 1000)?(step *= 10):(step=1);
    2f04:	88 ee       	ldi	r24, 0xE8	; 232
    2f06:	e8 16       	cp	r14, r24
    2f08:	83 e0       	ldi	r24, 0x03	; 3
    2f0a:	f8 06       	cpc	r15, r24
    2f0c:	3c f4       	brge	.+14     	; 0x2f1c <nastroyka+0xf0>
    2f0e:	c7 01       	movw	r24, r14
    2f10:	68 9e       	mul	r6, r24
    2f12:	70 01       	movw	r14, r0
    2f14:	69 9e       	mul	r6, r25
    2f16:	f0 0c       	add	r15, r0
    2f18:	11 24       	eor	r1, r1
    2f1a:	03 c0       	rjmp	.+6      	; 0x2f22 <nastroyka+0xf6>
    2f1c:	ee 24       	eor	r14, r14
    2f1e:	e3 94       	inc	r14
    2f20:	f1 2c       	mov	r15, r1
			(cursorPos>0)?(cursorPos--):(cursorPos=3);
    2f22:	71 10       	cpse	r7, r1
    2f24:	03 c0       	rjmp	.+6      	; 0x2f2c <nastroyka+0x100>
    2f26:	23 e0       	ldi	r18, 0x03	; 3
    2f28:	72 2e       	mov	r7, r18
    2f2a:	a6 cf       	rjmp	.-180    	; 0x2e78 <nastroyka+0x4c>
    2f2c:	7a 94       	dec	r7
    2f2e:	a4 cf       	rjmp	.-184    	; 0x2e78 <nastroyka+0x4c>
		}
		break;
		case RIGHT:
		{
			(step > 1)?(step /= 10):(step=1000);
    2f30:	92 e0       	ldi	r25, 0x02	; 2
    2f32:	e9 16       	cp	r14, r25
    2f34:	f1 04       	cpc	r15, r1
    2f36:	34 f0       	brlt	.+12     	; 0x2f44 <nastroyka+0x118>
    2f38:	c7 01       	movw	r24, r14
    2f3a:	b4 01       	movw	r22, r8
    2f3c:	0e 94 83 1c 	call	0x3906	; 0x3906 <__divmodhi4>
    2f40:	7b 01       	movw	r14, r22
    2f42:	04 c0       	rjmp	.+8      	; 0x2f4c <nastroyka+0x120>
    2f44:	88 ee       	ldi	r24, 0xE8	; 232
    2f46:	e8 2e       	mov	r14, r24
    2f48:	83 e0       	ldi	r24, 0x03	; 3
    2f4a:	f8 2e       	mov	r15, r24
			(cursorPos<3)?(cursorPos++):(cursorPos=0);
    2f4c:	83 e0       	ldi	r24, 0x03	; 3
    2f4e:	78 12       	cpse	r7, r24
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <nastroyka+0x12a>
    2f52:	71 2c       	mov	r7, r1
    2f54:	91 cf       	rjmp	.-222    	; 0x2e78 <nastroyka+0x4c>
    2f56:	73 94       	inc	r7
    2f58:	8f cf       	rjmp	.-226    	; 0x2e78 <nastroyka+0x4c>
		}
		break;
		case ENT:
		{
			LCD_cursorOff();
    2f5a:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_visible>
			if(eeprom_read_word(&password) == currPasswd)return 1;	//
    2f5e:	87 e0       	ldi	r24, 0x07	; 7
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	0e 94 1a 20 	call	0x4034	; 0x4034 <eeprom_read_word>
    2f66:	08 17       	cp	r16, r24
    2f68:	19 07       	cpc	r17, r25
    2f6a:	39 f4       	brne	.+14     	; 0x2f7a <nastroyka+0x14e>
	}
}

static void nastroyka(void)
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
    2f6c:	84 eb       	ldi	r24, 0xB4	; 180
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <naviMenu>
}
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <nastroyka+0x14e>
			LCD_cursorOff();
			if(eeprom_read_word(&password) == currPasswd)return 1;	//
			else return 0;
		}
		break;
		case ESC:{LCD_cursorOff();return 0;}	//выход по ESC
    2f76:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_visible>
}

static void nastroyka(void)
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	1f 91       	pop	r17
    2f8a:	0f 91       	pop	r16
    2f8c:	ff 90       	pop	r15
    2f8e:	ef 90       	pop	r14
    2f90:	df 90       	pop	r13
    2f92:	cf 90       	pop	r12
    2f94:	bf 90       	pop	r11
    2f96:	af 90       	pop	r10
    2f98:	9f 90       	pop	r9
    2f9a:	8f 90       	pop	r8
    2f9c:	7f 90       	pop	r7
    2f9e:	6f 90       	pop	r6
    2fa0:	08 95       	ret

00002fa2 <main>:
#include "menu.c"



int main(void)
{
    2fa2:	cf 93       	push	r28
    2fa4:	df 93       	push	r29
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	64 97       	sbiw	r28, 0x14	; 20
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	cd bf       	out	0x3d, r28	; 61
	bki_init();
    2fb6:	0e 94 48 0a 	call	0x1490	; 0x1490 <bki_init>
		//PGM_P title=RABOTA;
		PGM_P title;

		if(!(chkBit(sys_state,ALM))&&!(chkBit(sys_state,FLT))) title=RABOTA;
		//заголовок
		(ind_state==0)?(ind_state++):(ind_state=0);
    2fba:	33 24       	eor	r3, r3
    2fbc:	33 94       	inc	r3
		if(chkBit(sys_state,ERR))                  title=NET_GOTOVNOSTI;
		LCD_gotoXY(0,0);LCD_puts_P(title,20);

		//читаем время
		rtc_get(&rtc);
		sprintf(buffer,"%02u.%02u.%02u %02u:%02u:%02u",rtc.day,rtc.month,rtc.year,rtc.hours,rtc.minutes,rtc.seconds);
    2fbe:	e0 e2       	ldi	r30, 0x20	; 32
    2fc0:	6e 2e       	mov	r6, r30
    2fc2:	e1 e0       	ldi	r30, 0x01	; 1
    2fc4:	7e 2e       	mov	r7, r30
    2fc6:	ce 01       	movw	r24, r28
    2fc8:	01 96       	adiw	r24, 0x01	; 1
    2fca:	6c 01       	movw	r12, r24
		{
			LCD_puts(buffer,20);
		}


		sprintf(buffer, "%u", sys_state);
    2fcc:	f3 e4       	ldi	r31, 0x43	; 67
    2fce:	af 2e       	mov	r10, r31
    2fd0:	f1 e0       	ldi	r31, 0x01	; 1
    2fd2:	bf 2e       	mov	r11, r31
		/*sprintf(buffer, "%u", inSysBDZ[13].data[0]);
		LCD_gotoXY(0,2);
		LCD_puts(buffer,20);*/

		//новое в версии
		if(TWI_ERR)ERROR=RTC;
    2fd4:	a2 e0       	ldi	r26, 0x02	; 2
    2fd6:	4a 2e       	mov	r4, r26
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
		{
			if(readID(i)==i)	//если блок есть в списке
			{
				modbusRegisters[BDZ_INSYS]++;																//счетчик инлайн блоков
				if(chkBit(inSysBDZ[i].flags,CONF)) setBit(sys_state,CONF);
    2fd8:	b9 e0       	ldi	r27, 0x09	; 9
    2fda:	5b 2e       	mov	r5, r27

		//здесь можно пингануть.После пинга пройдет "пауза со сканированием"-за это время должны прийти все отклики
		if(pingTime ==0)
		{
			ping();
			pingTime=PINGTIME;
    2fdc:	18 e8       	ldi	r17, 0x88	; 136
    2fde:	81 2e       	mov	r8, r17
    2fe0:	13 e1       	ldi	r17, 0x13	; 19
    2fe2:	91 2e       	mov	r9, r17
	{
		char buffer[20];
		//PGM_P title=RABOTA;
		PGM_P title;

		if(!(chkBit(sys_state,ALM))&&!(chkBit(sys_state,FLT))) title=RABOTA;
    2fe4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    2fe8:	98 2f       	mov	r25, r24
    2fea:	92 70       	andi	r25, 0x02	; 2
    2fec:	28 2f       	mov	r18, r24
    2fee:	21 70       	andi	r18, 0x01	; 1
    2ff0:	80 fd       	sbrc	r24, 0
    2ff2:	06 c0       	rjmp	.+12     	; 0x3000 <main+0x5e>
    2ff4:	91 11       	cpse	r25, r1
    2ff6:	04 c0       	rjmp	.+8      	; 0x3000 <main+0x5e>
    2ff8:	72 eb       	ldi	r23, 0xB2	; 178
    2ffa:	e7 2e       	mov	r14, r23
    2ffc:	71 e0       	ldi	r23, 0x01	; 1
    2ffe:	f7 2e       	mov	r15, r23
		//заголовок
		(ind_state==0)?(ind_state++):(ind_state=0);
    3000:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <ind_state>
    3004:	31 11       	cpse	r19, r1
    3006:	03 c0       	rjmp	.+6      	; 0x300e <main+0x6c>
    3008:	30 92 4c 01 	sts	0x014C, r3	; 0x80014c <ind_state>
    300c:	08 c0       	rjmp	.+16     	; 0x301e <main+0x7c>
    300e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <ind_state>
		if(chkBit(sys_state,ALM) && ind_state==0)  title=AVARIYA;
    3012:	22 23       	and	r18, r18
    3014:	21 f0       	breq	.+8      	; 0x301e <main+0x7c>
    3016:	6b ea       	ldi	r22, 0xAB	; 171
    3018:	e6 2e       	mov	r14, r22
    301a:	61 e0       	ldi	r22, 0x01	; 1
    301c:	f6 2e       	mov	r15, r22
		if(chkBit(sys_state,FLT) && ind_state==1)  title=NEISPRAVNOST;
    301e:	99 23       	and	r25, r25
    3020:	41 f0       	breq	.+16     	; 0x3032 <main+0x90>
    3022:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <ind_state>
    3026:	91 30       	cpi	r25, 0x01	; 1
    3028:	21 f4       	brne	.+8      	; 0x3032 <main+0x90>
    302a:	5d e9       	ldi	r21, 0x9D	; 157
    302c:	e5 2e       	mov	r14, r21
    302e:	51 e0       	ldi	r21, 0x01	; 1
    3030:	f5 2e       	mov	r15, r21
		if(chkBit(sys_state,ERR))                  title=NET_GOTOVNOSTI;
    3032:	83 ff       	sbrs	r24, 3
    3034:	04 c0       	rjmp	.+8      	; 0x303e <main+0x9c>
    3036:	4c ec       	ldi	r20, 0xCC	; 204
    3038:	e4 2e       	mov	r14, r20
    303a:	40 e0       	ldi	r20, 0x00	; 0
    303c:	f4 2e       	mov	r15, r20
		LCD_gotoXY(0,0);LCD_puts_P(title,20);
    303e:	60 e0       	ldi	r22, 0x00	; 0
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
    3046:	64 e1       	ldi	r22, 0x14	; 20
    3048:	c7 01       	movw	r24, r14
    304a:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>

		//читаем время
		rtc_get(&rtc);
    304e:	80 ef       	ldi	r24, 0xF0	; 240
    3050:	94 e0       	ldi	r25, 0x04	; 4
    3052:	0e 94 c8 02 	call	0x590	; 0x590 <rtc_get>
		sprintf(buffer,"%02u.%02u.%02u %02u:%02u:%02u",rtc.day,rtc.month,rtc.year,rtc.hours,rtc.minutes,rtc.seconds);
    3056:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <rtc+0x5>
    305a:	1f 92       	push	r1
    305c:	8f 93       	push	r24
    305e:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <rtc+0x4>
    3062:	1f 92       	push	r1
    3064:	8f 93       	push	r24
    3066:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <rtc+0x3>
    306a:	1f 92       	push	r1
    306c:	8f 93       	push	r24
    306e:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <rtc>
    3072:	1f 92       	push	r1
    3074:	8f 93       	push	r24
    3076:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <rtc+0x1>
    307a:	1f 92       	push	r1
    307c:	8f 93       	push	r24
    307e:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <rtc+0x2>
    3082:	1f 92       	push	r1
    3084:	8f 93       	push	r24
    3086:	7f 92       	push	r7
    3088:	6f 92       	push	r6
    308a:	df 92       	push	r13
    308c:	cf 92       	push	r12
    308e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <sprintf>
		//обновляем модбас
		modbusRegisters[TIME_YYMM]=(unsigned int)rtc.year<<8 | rtc.month;
    3092:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <rtc>
    3096:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <rtc+0x1>
    309a:	98 27       	eor	r25, r24
    309c:	89 27       	eor	r24, r25
    309e:	98 27       	eor	r25, r24
    30a0:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <modbusRegisters+0xb>
    30a4:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <modbusRegisters+0xa>
		modbusRegisters[TIME_DDHH]=(unsigned int)rtc.day<<8 | rtc.hours;
    30a8:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <rtc+0x2>
    30ac:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <rtc+0x3>
    30b0:	98 27       	eor	r25, r24
    30b2:	89 27       	eor	r24, r25
    30b4:	98 27       	eor	r25, r24
    30b6:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <modbusRegisters+0xd>
    30ba:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <modbusRegisters+0xc>
		modbusRegisters[TIME_MMSS]=(unsigned int)rtc.minutes<<8 | rtc.seconds;
    30be:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <rtc+0x4>
    30c2:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <rtc+0x5>
    30c6:	98 27       	eor	r25, r24
    30c8:	89 27       	eor	r24, r25
    30ca:	98 27       	eor	r25, r24
    30cc:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <modbusRegisters+0xf>
    30d0:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <modbusRegisters+0xe>

		//экран:код ошибки или строка RTC
		LCD_gotoXY(0,3);
    30d4:	63 e0       	ldi	r22, 0x03	; 3
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		if(ERROR)
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	f8 94       	cli
    30e0:	de bf       	out	0x3e, r29	; 62
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	cd bf       	out	0x3d, r28	; 61
    30e6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    30ea:	88 23       	and	r24, r24
    30ec:	a1 f0       	breq	.+40     	; 0x3116 <main+0x174>
		{
			setBit(sys_state,ERR);
    30ee:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    30f2:	88 60       	ori	r24, 0x08	; 8
    30f4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <sys_state>
			LCD_puts_P(OSHIBKA,20);
    30f8:	64 e1       	ldi	r22, 0x14	; 20
    30fa:	85 ec       	ldi	r24, 0xC5	; 197
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_puts_P>
			LCD_gotoXY(7,3);
    3102:	63 e0       	ldi	r22, 0x03	; 3
    3104:	87 e0       	ldi	r24, 0x07	; 7
    3106:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
			LCD_putchar(ERROR+'0');
    310a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    310e:	80 5d       	subi	r24, 0xD0	; 208
    3110:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>
    3114:	04 c0       	rjmp	.+8      	; 0x311e <main+0x17c>
		}
		else
		{
			LCD_puts(buffer,20);
    3116:	64 e1       	ldi	r22, 0x14	; 20
    3118:	c6 01       	movw	r24, r12
    311a:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
		}


		sprintf(buffer, "%u", sys_state);
    311e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    3122:	1f 92       	push	r1
    3124:	8f 93       	push	r24
    3126:	bf 92       	push	r11
    3128:	af 92       	push	r10
    312a:	df 92       	push	r13
    312c:	cf 92       	push	r12
    312e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <sprintf>
		LCD_gotoXY(0,1);
    3132:	61 e0       	ldi	r22, 0x01	; 1
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
		LCD_puts(buffer,20);
    313a:	64 e1       	ldi	r22, 0x14	; 20
    313c:	c6 01       	movw	r24, r12
    313e:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_puts>
		/*sprintf(buffer, "%u", inSysBDZ[13].data[0]);
		LCD_gotoXY(0,2);
		LCD_puts(buffer,20);*/

		//новое в версии
		if(TWI_ERR)ERROR=RTC;
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <TWI_ERR>
    3152:	81 11       	cpse	r24, r1
    3154:	40 92 4b 01 	sts	0x014B, r4	; 0x80014b <ERROR>
		if(MODB_ERR)ERROR=MODB;
    3158:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <MODB_ERR>
    315c:	88 23       	and	r24, r24
    315e:	19 f0       	breq	.+6      	; 0x3166 <main+0x1c4>
    3160:	85 e0       	ldi	r24, 0x05	; 5
    3162:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>
		if(CAN_ERR)ERROR=CAN;
    3166:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <CAN_ERR>
    316a:	88 23       	and	r24, r24
    316c:	19 f0       	breq	.+6      	; 0x3174 <main+0x1d2>
    316e:	83 e0       	ldi	r24, 0x03	; 3
    3170:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>



		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
    3174:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sys_state>
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
    3178:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <modbusRegisters+0x9>
    317c:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <modbusRegisters+0x8>
    3180:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <modbusRegisters+0x7>
    3184:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <modbusRegisters+0x6>
    3188:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <modbusRegisters+0x5>
    318c:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <modbusRegisters+0x4>
    3190:	01 e0       	ldi	r16, 0x01	; 1
    3192:	10 e0       	ldi	r17, 0x00	; 0
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
		{
			if(readID(i)==i)	//если блок есть в списке
    3194:	c8 01       	movw	r24, r16
    3196:	87 5f       	subi	r24, 0xF7	; 247
    3198:	9f 4f       	sbci	r25, 0xFF	; 255
    319a:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    319e:	80 13       	cpse	r24, r16
    31a0:	53 c0       	rjmp	.+166    	; 0x3248 <main+0x2a6>
			{
				modbusRegisters[BDZ_INSYS]++;																//счетчик инлайн блоков
    31a2:	20 91 e4 04 	lds	r18, 0x04E4	; 0x8004e4 <modbusRegisters+0x4>
    31a6:	30 91 e5 04 	lds	r19, 0x04E5	; 0x8004e5 <modbusRegisters+0x5>
    31aa:	2f 5f       	subi	r18, 0xFF	; 255
    31ac:	3f 4f       	sbci	r19, 0xFF	; 255
    31ae:	30 93 e5 04 	sts	0x04E5, r19	; 0x8004e5 <modbusRegisters+0x5>
    31b2:	20 93 e4 04 	sts	0x04E4, r18	; 0x8004e4 <modbusRegisters+0x4>
				if(chkBit(inSysBDZ[i].flags,CONF)) setBit(sys_state,CONF);
    31b6:	50 9e       	mul	r5, r16
    31b8:	f0 01       	movw	r30, r0
    31ba:	51 9e       	mul	r5, r17
    31bc:	f0 0d       	add	r31, r0
    31be:	11 24       	eor	r1, r1
    31c0:	ef 59       	subi	r30, 0x9F	; 159
    31c2:	fe 4f       	sbci	r31, 0xFE	; 254
    31c4:	90 85       	ldd	r25, Z+8	; 0x08
    31c6:	95 ff       	sbrs	r25, 5
    31c8:	05 c0       	rjmp	.+10     	; 0x31d4 <main+0x232>
    31ca:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sys_state>
    31ce:	90 62       	ori	r25, 0x20	; 32
    31d0:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sys_state>
				if(chkBit(inSysBDZ[i].flags,ALM))
    31d4:	50 9e       	mul	r5, r16
    31d6:	f0 01       	movw	r30, r0
    31d8:	51 9e       	mul	r5, r17
    31da:	f0 0d       	add	r31, r0
    31dc:	11 24       	eor	r1, r1
    31de:	ef 59       	subi	r30, 0x9F	; 159
    31e0:	fe 4f       	sbci	r31, 0xFE	; 254
    31e2:	90 85       	ldd	r25, Z+8	; 0x08
    31e4:	90 ff       	sbrs	r25, 0
    31e6:	18 c0       	rjmp	.+48     	; 0x3218 <main+0x276>
				{
					modbusRegisters[BDZ_ALARM]++;
    31e8:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <modbusRegisters+0x8>
    31ec:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <modbusRegisters+0x9>
    31f0:	2f 5f       	subi	r18, 0xFF	; 255
    31f2:	3f 4f       	sbci	r19, 0xFF	; 255
    31f4:	30 93 e9 04 	sts	0x04E9, r19	; 0x8004e9 <modbusRegisters+0x9>
    31f8:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <modbusRegisters+0x8>
					setBit(sys_state,ALM);
    31fc:	20 90 4d 01 	lds	r2, 0x014D	; 0x80014d <sys_state>
    3200:	92 2d       	mov	r25, r2
    3202:	91 60       	ori	r25, 0x01	; 1
    3204:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sys_state>
					if (scanID(i)) setBit(sys_state,NEW);
    3208:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <scanID>
    320c:	88 23       	and	r24, r24
    320e:	21 f0       	breq	.+8      	; 0x3218 <main+0x276>
    3210:	82 2d       	mov	r24, r2
    3212:	81 64       	ori	r24, 0x41	; 65
    3214:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <sys_state>
				}	//счетчик аварийных блоков и установка флага общей аварии
				if(chkBit(inSysBDZ[i].flags,FLT)) {modbusRegisters[BDZ_FAULT]++; setBit(sys_state,FLT);}	//счетчик неисправный блоков и установка флага общей неисправности
    3218:	50 9e       	mul	r5, r16
    321a:	f0 01       	movw	r30, r0
    321c:	51 9e       	mul	r5, r17
    321e:	f0 0d       	add	r31, r0
    3220:	11 24       	eor	r1, r1
    3222:	ef 59       	subi	r30, 0x9F	; 159
    3224:	fe 4f       	sbci	r31, 0xFE	; 254
    3226:	80 85       	ldd	r24, Z+8	; 0x08
    3228:	81 ff       	sbrs	r24, 1
    322a:	0e c0       	rjmp	.+28     	; 0x3248 <main+0x2a6>
    322c:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <modbusRegisters+0x6>
    3230:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <modbusRegisters+0x7>
    3234:	01 96       	adiw	r24, 0x01	; 1
    3236:	90 93 e7 04 	sts	0x04E7, r25	; 0x8004e7 <modbusRegisters+0x7>
    323a:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <modbusRegisters+0x6>
    323e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    3242:	82 60       	ori	r24, 0x02	; 2
    3244:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <sys_state>
				//if(new==i) setBit(sys_state,NEW);
				//sys_state |= inSysBDZ[i].flags & 0x03;				//два мл.бита-это флаги аварии и неисправности
			}

			(chkBit(sys_state,CONF))?(PORTA|=1<<OUT2):(PORTA &= ~(1<<OUT2));
    3248:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    324c:	85 ff       	sbrs	r24, 5
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <main+0x2b2>
    3250:	da 9a       	sbi	0x1b, 2	; 27
    3252:	01 c0       	rjmp	.+2      	; 0x3256 <main+0x2b4>
    3254:	da 98       	cbi	0x1b, 2	; 27
			(chkBit(sys_state,ALM))?(PORTA|=1<<OUT1):(PORTA &= ~(1<<OUT1));	//обнаружили аварию ОТКЛЮЧАЕМ
    3256:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    325a:	80 ff       	sbrs	r24, 0
    325c:	02 c0       	rjmp	.+4      	; 0x3262 <main+0x2c0>
    325e:	db 9a       	sbi	0x1b, 3	; 27
    3260:	01 c0       	rjmp	.+2      	; 0x3264 <main+0x2c2>
    3262:	db 98       	cbi	0x1b, 3	; 27
			(chkBit(sys_state,NEW))?(PORTA|=1<<OUT3):(PORTA &= ~(1<<OUT3));
    3264:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    3268:	86 ff       	sbrs	r24, 6
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <main+0x2ce>
    326c:	d9 9a       	sbi	0x1b, 1	; 27
    326e:	01 c0       	rjmp	.+2      	; 0x3272 <main+0x2d0>
    3270:	d9 98       	cbi	0x1b, 1	; 27
			(chkBit(sys_state,FLT) || ERROR)?(clrBit(PORTA,OUT4)):(setBit(PORTA,OUT4));
    3272:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sys_state>
    3276:	81 fd       	sbrc	r24, 1
    3278:	04 c0       	rjmp	.+8      	; 0x3282 <main+0x2e0>
    327a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    327e:	88 23       	and	r24, r24
    3280:	11 f0       	breq	.+4      	; 0x3286 <main+0x2e4>
    3282:	d8 98       	cbi	0x1b, 0	; 27
    3284:	01 c0       	rjmp	.+2      	; 0x3288 <main+0x2e6>
    3286:	d8 9a       	sbi	0x1b, 0	; 27
    3288:	0f 5f       	subi	r16, 0xFF	; 255
    328a:	1f 4f       	sbci	r17, 0xFF	; 255


		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
    328c:	03 36       	cpi	r16, 0x63	; 99
    328e:	11 05       	cpc	r17, r1
    3290:	09 f0       	breq	.+2      	; 0x3294 <main+0x2f2>
    3292:	80 cf       	rjmp	.-256    	; 0x3194 <main+0x1f2>
			(chkBit(sys_state,ALM))?(PORTA|=1<<OUT1):(PORTA &= ~(1<<OUT1));	//обнаружили аварию ОТКЛЮЧАЕМ
			(chkBit(sys_state,NEW))?(PORTA|=1<<OUT3):(PORTA &= ~(1<<OUT3));
			(chkBit(sys_state,FLT) || ERROR)?(clrBit(PORTA,OUT4)):(setBit(PORTA,OUT4));
		}
		//сохраняем ошибку, статус системы и состояния выходов
		modbusRegisters[BKI_STATE]=(unsigned int)ERROR<<8 | sys_state;
    3294:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	98 2f       	mov	r25, r24
    329c:	88 27       	eor	r24, r24
    329e:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <sys_state>
    32a2:	82 2b       	or	r24, r18
    32a4:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <modbusRegisters+0x1>
    32a8:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <modbusRegisters>
		modbusRegisters[BKI_OUTS]= PINA & 0x0F;
    32ac:	89 b3       	in	r24, 0x19	; 25
    32ae:	8f 70       	andi	r24, 0x0F	; 15
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <modbusRegisters+0x3>
    32b6:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <modbusRegisters+0x2>

		//здесь можно пингануть.После пинга пройдет "пауза со сканированием"-за это время должны прийти все отклики
		if(pingTime ==0)
    32ba:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pingTime>
    32be:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <pingTime+0x1>
    32c2:	89 2b       	or	r24, r25
    32c4:	69 f4       	brne	.+26     	; 0x32e0 <main+0x33e>
		{
			ping();
    32c6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <ping>
			pingTime=PINGTIME;
    32ca:	90 92 5d 01 	sts	0x015D, r9	; 0x80015d <pingTime+0x1>
    32ce:	80 92 5c 01 	sts	0x015C, r8	; 0x80015c <pingTime>
			LCD_gotoXY(19,0);
    32d2:	60 e0       	ldi	r22, 0x00	; 0
    32d4:	83 e1       	ldi	r24, 0x13	; 19
    32d6:	0e 94 20 04 	call	0x840	; 0x840 <LCD_gotoXY>
			LCD_putchar('*');
    32da:	8a e2       	ldi	r24, 0x2A	; 42
    32dc:	0e 94 33 04 	call	0x866	; 0x866 <LCD_putchar>



		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
    32e0:	08 ee       	ldi	r16, 0xE8	; 232
    32e2:	13 e0       	ldi	r17, 0x03	; 3
		}



		//пауза со сканированием клавы.Если появился RX прерываемся
		for(unsigned int i=0;(i<1000) && (!rx_counter);i++)
    32e4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_counter>
    32e8:	81 11       	cpse	r24, r1
    32ea:	19 c0       	rjmp	.+50     	; 0x331e <main+0x37c>
    32ec:	8f e9       	ldi	r24, 0x9F	; 159
    32ee:	9f e0       	ldi	r25, 0x0F	; 15
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <main+0x34e>
    32f4:	00 c0       	rjmp	.+0      	; 0x32f6 <main+0x354>
    32f6:	00 00       	nop
		{
			_delay_ms(1);
			//нажат ENT-висим пока не отпустят-по выходу из меню очищаем экран,обнуляем статус
			if(scanKBD()==ENT){while(scanKBD()!=NOKEY);naviMenu(LVL_main);LCD_clr();sys_state=0;}
    32f8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <scanKBD>
    32fc:	82 30       	cpi	r24, 0x02	; 2
    32fe:	61 f4       	brne	.+24     	; 0x3318 <main+0x376>
    3300:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <scanKBD>
    3304:	8f 3f       	cpi	r24, 0xFF	; 255
    3306:	e1 f7       	brne	.-8      	; 0x3300 <main+0x35e>
    3308:	80 e6       	ldi	r24, 0x60	; 96
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <naviMenu>
    3310:	0e 94 12 04 	call	0x824	; 0x824 <LCD_clr>
    3314:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sys_state>
    3318:	01 50       	subi	r16, 0x01	; 1
    331a:	11 09       	sbc	r17, r1
		}



		//пауза со сканированием клавы.Если появился RX прерываемся
		for(unsigned int i=0;(i<1000) && (!rx_counter);i++)
    331c:	19 f7       	brne	.-58     	; 0x32e4 <main+0x342>
			//нажат ENT-висим пока не отпустят-по выходу из меню очищаем экран,обнуляем статус
			if(scanKBD()==ENT){while(scanKBD()!=NOKEY);naviMenu(LVL_main);LCD_clr();sys_state=0;}
		}

		//отработка модбаса.если что то есть в буфере читаем сообщение
		if(rx_counter)
    331e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_counter>
    3322:	88 23       	and	r24, r24
    3324:	09 f4       	brne	.+2      	; 0x3328 <main+0x386>
    3326:	5e ce       	rjmp	.-836    	; 0x2fe4 <main+0x42>
		{
			signed char a=getModbMsg();
    3328:	0e 94 aa 1b 	call	0x3754	; 0x3754 <getModbMsg>
			if(a<1)ERROR=MODB;
    332c:	18 16       	cp	r1, r24
    332e:	24 f0       	brlt	.+8      	; 0x3338 <main+0x396>
    3330:	85 e0       	ldi	r24, 0x05	; 5
    3332:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ERROR>
    3336:	56 ce       	rjmp	.-852    	; 0x2fe4 <main+0x42>
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
    3338:	dd 98       	cbi	0x1b, 5	; 27
				if(ERROR==MODB)ERROR=0;
    333a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ERROR>
    333e:	85 30       	cpi	r24, 0x05	; 5
    3340:	11 f4       	brne	.+4      	; 0x3346 <main+0x3a4>
    3342:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <ERROR>


static signed char modbDecoder(void)
{
	//адрес не наш
	if(MODB_ADDR != eeprom_read_byte(&bki_addr)) return -1;
    3346:	10 91 a4 05 	lds	r17, 0x05A4	; 0x8005a4 <modb_message>
    334a:	86 e0       	ldi	r24, 0x06	; 6
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	0e 94 0c 20 	call	0x4018	; 0x4018 <eeprom_read_byte>
    3352:	18 13       	cpse	r17, r24
    3354:	41 c0       	rjmp	.+130    	; 0x33d8 <main+0x436>
    3356:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <modb_message+0x2>
    335a:	f0 91 a7 05 	lds	r31, 0x05A7	; 0x8005a7 <modb_message+0x3>
    335e:	fe 27       	eor	r31, r30
    3360:	ef 27       	eor	r30, r31
    3362:	fe 27       	eor	r31, r30
    3364:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <modb_message+0x4>
    3368:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <modb_message+0x5>
    336c:	98 27       	eor	r25, r24
    336e:	89 27       	eor	r24, r25
    3370:	98 27       	eor	r25, r24
	//неправильный регистр или их кол-во
	if((MODB_START_REG+MODB_QUANT_REG) > MAX_QUANT_MODB_REG) return modbErr(ILLEGAL_DATA_ADDR);
    3372:	af 01       	movw	r20, r30
    3374:	48 0f       	add	r20, r24
    3376:	59 1f       	adc	r21, r25
    3378:	20 91 a5 05 	lds	r18, 0x05A5	; 0x8005a5 <modb_message+0x1>
    337c:	49 30       	cpi	r20, 0x09	; 9
    337e:	51 05       	cpc	r21, r1
    3380:	38 f0       	brcs	.+14     	; 0x3390 <main+0x3ee>
	return 0;
}

static unsigned char modbErr(unsigned char errCode)
{
	MODB_FUNC |= 0x80;			//установили флаг ошибки
    3382:	20 68       	ori	r18, 0x80	; 128
    3384:	20 93 a5 05 	sts	0x05A5, r18	; 0x8005a5 <modb_message+0x1>
	MOBD_ERROR_CODE = errCode; 	//код ошибки
    3388:	40 92 a6 05 	sts	0x05A6, r4	; 0x8005a6 <modb_message+0x2>
static signed char modbDecoder(void)
{
	//адрес не наш
	if(MODB_ADDR != eeprom_read_byte(&bki_addr)) return -1;
	//неправильный регистр или их кол-во
	if((MODB_START_REG+MODB_QUANT_REG) > MAX_QUANT_MODB_REG) return modbErr(ILLEGAL_DATA_ADDR);
    338c:	83 e0       	ldi	r24, 0x03	; 3
    338e:	26 c0       	rjmp	.+76     	; 0x33dc <main+0x43a>
	//обрабатываем функцию
	switch(MODB_FUNC)
    3390:	23 30       	cpi	r18, 0x03	; 3
    3392:	e9 f4       	brne	.+58     	; 0x33ce <main+0x42c>
    3394:	ee 0f       	add	r30, r30
    3396:	ff 1f       	adc	r31, r31
    3398:	e0 52       	subi	r30, 0x20	; 32
    339a:	fb 4f       	sbci	r31, 0xFB	; 251
    339c:	a4 ea       	ldi	r26, 0xA4	; 164
    339e:	b5 e0       	ldi	r27, 0x05	; 5
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	12 96       	adiw	r26, 0x02	; 2
	{
		unsigned char j=MOBD_START_DATA;
		unsigned int  s=MODB_START_REG;
		unsigned int  e=MODB_QUANT_REG;

		for(unsigned int i=0; i<e; i++)
    33a6:	82 17       	cp	r24, r18
    33a8:	93 07       	cpc	r25, r19
    33aa:	61 f0       	breq	.+24     	; 0x33c4 <main+0x422>
		{
			modb_message[j++] =modbusRegisters[i+s] >>8;		//старший байт данных
    33ac:	40 81       	ld	r20, Z
    33ae:	51 81       	ldd	r21, Z+1	; 0x01
    33b0:	32 96       	adiw	r30, 0x02	; 2
    33b2:	11 96       	adiw	r26, 0x01	; 1
    33b4:	5c 93       	st	X, r21
    33b6:	11 97       	sbiw	r26, 0x01	; 1
			modb_message[j++] =modbusRegisters[i+s] & 0x00FF;	//младший
    33b8:	12 96       	adiw	r26, 0x02	; 2
    33ba:	4c 93       	st	X, r20
    33bc:	12 97       	sbiw	r26, 0x02	; 2
	{
		unsigned char j=MOBD_START_DATA;
		unsigned int  s=MODB_START_REG;
		unsigned int  e=MODB_QUANT_REG;

		for(unsigned int i=0; i<e; i++)
    33be:	2f 5f       	subi	r18, 0xFF	; 255
    33c0:	3f 4f       	sbci	r19, 0xFF	; 255
    33c2:	f0 cf       	rjmp	.-32     	; 0x33a4 <main+0x402>
    33c4:	88 0f       	add	r24, r24
		{
			modb_message[j++] =modbusRegisters[i+s] >>8;		//старший байт данных
			modb_message[j++] =modbusRegisters[i+s] & 0x00FF;	//младший
		}
		MOBD_BYTE_COUNT = j-MOBD_START_DATA;				//счетчик байт в сообщении
    33c6:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <modb_message+0x2>
		return MOBD_BYTE_COUNT+3;
    33ca:	8d 5f       	subi	r24, 0xFD	; 253
    33cc:	07 c0       	rjmp	.+14     	; 0x33dc <main+0x43a>
	return 0;
}

static unsigned char modbErr(unsigned char errCode)
{
	MODB_FUNC |= 0x80;			//установили флаг ошибки
    33ce:	20 68       	ori	r18, 0x80	; 128
    33d0:	20 93 a5 05 	sts	0x05A5, r18	; 0x8005a5 <modb_message+0x1>
	MOBD_ERROR_CODE = errCode; 	//код ошибки
    33d4:	30 92 a6 05 	sts	0x05A6, r3	; 0x8005a6 <modb_message+0x2>
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
				if(ERROR==MODB)ERROR=0;
				if((a=modbDecoder()) >0)putModbMsg(a);
				PORTA |= 1<<5;	//зажигаем СД
    33d8:	dd 9a       	sbi	0x1b, 5	; 27
			}
		}


	}
    33da:	04 ce       	rjmp	.-1016   	; 0x2fe4 <main+0x42>
			if(a<1)ERROR=MODB;
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
				if(ERROR==MODB)ERROR=0;
				if((a=modbDecoder()) >0)putModbMsg(a);
    33dc:	0e 94 07 1b 	call	0x360e	; 0x360e <putModbMsg>
    33e0:	fb cf       	rjmp	.-10     	; 0x33d8 <main+0x436>

000033e2 <__vector_7>:
	clrBit(PORTA,BEEP);
}

//таймер 1ms
ISR(TIMER1_COMPA_vect)
{
    33e2:	1f 92       	push	r1
    33e4:	0f 92       	push	r0
    33e6:	0f b6       	in	r0, 0x3f	; 63
    33e8:	0f 92       	push	r0
    33ea:	11 24       	eor	r1, r1
    33ec:	8f 93       	push	r24
    33ee:	9f 93       	push	r25
    33f0:	af 93       	push	r26
    33f2:	bf 93       	push	r27
	if(CAN_timeout)CAN_timeout--;
    33f4:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <CAN_timeout>
    33f8:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <CAN_timeout+0x1>
    33fc:	89 2b       	or	r24, r25
    33fe:	49 f0       	breq	.+18     	; 0x3412 <__vector_7+0x30>
    3400:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <CAN_timeout>
    3404:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <CAN_timeout+0x1>
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <CAN_timeout+0x1>
    340e:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <CAN_timeout>
	if(SPI_timeout)SPI_timeout--;
    3412:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <SPI_timeout>
    3416:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <SPI_timeout+0x1>
    341a:	89 2b       	or	r24, r25
    341c:	49 f0       	breq	.+18     	; 0x3430 <__vector_7+0x4e>
    341e:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <SPI_timeout>
    3422:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <SPI_timeout+0x1>
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <SPI_timeout+0x1>
    342c:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <SPI_timeout>
	if(menuExit)menuExit--;
    3430:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <menuExit>
    3434:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <menuExit+0x1>
    3438:	89 2b       	or	r24, r25
    343a:	49 f0       	breq	.+18     	; 0x344e <__vector_7+0x6c>
    343c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <menuExit>
    3440:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <menuExit+0x1>
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <menuExit+0x1>
    344a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <menuExit>
	if(pingTime)pingTime--;
    344e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pingTime>
    3452:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <pingTime+0x1>
    3456:	89 2b       	or	r24, r25
    3458:	49 f0       	breq	.+18     	; 0x346c <__vector_7+0x8a>
    345a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pingTime>
    345e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <pingTime+0x1>
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <pingTime+0x1>
    3468:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <pingTime>

	if(MODB_timeout)MODB_timeout--;
    346c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <MODB_timeout>
    3470:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <MODB_timeout+0x1>
    3474:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <MODB_timeout+0x2>
    3478:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <MODB_timeout+0x3>
    347c:	89 2b       	or	r24, r25
    347e:	8a 2b       	or	r24, r26
    3480:	8b 2b       	or	r24, r27
    3482:	99 f0       	breq	.+38     	; 0x34aa <__vector_7+0xc8>
    3484:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <MODB_timeout>
    3488:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <MODB_timeout+0x1>
    348c:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <MODB_timeout+0x2>
    3490:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <MODB_timeout+0x3>
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	a1 09       	sbc	r26, r1
    3498:	b1 09       	sbc	r27, r1
    349a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <MODB_timeout>
    349e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <MODB_timeout+0x1>
    34a2:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <MODB_timeout+0x2>
    34a6:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <MODB_timeout+0x3>

}
    34aa:	bf 91       	pop	r27
    34ac:	af 91       	pop	r26
    34ae:	9f 91       	pop	r25
    34b0:	8f 91       	pop	r24
    34b2:	0f 90       	pop	r0
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	0f 90       	pop	r0
    34b8:	1f 90       	pop	r1
    34ba:	18 95       	reti

000034bc <__vector_13>:

//чтение данный UART
ISR(USART_RXC_vect)
{
    34bc:	1f 92       	push	r1
    34be:	0f 92       	push	r0
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	0f 92       	push	r0
    34c4:	11 24       	eor	r1, r1
    34c6:	8f 93       	push	r24
    34c8:	9f 93       	push	r25
    34ca:	ef 93       	push	r30
    34cc:	ff 93       	push	r31
//отправить сообщение из модбас буфера. На входе RTU сообщение, передаем его длину
extern void putModbMsg(unsigned char lenght);
//прием символа и помещение в приемный буфер. Вставляется,например в прерывание
inline void read_raw_data(void)
{
	char status=UCSRA,data=UDR;
    34ce:	8b b1       	in	r24, 0x0b	; 11
    34d0:	9c b1       	in	r25, 0x0c	; 12

	if ((status & (1<<FE | 1<<PE | 1<<DOR))!=0) {MODB_ERR=MODBHW;return;}
    34d2:	8c 71       	andi	r24, 0x1C	; 28
    34d4:	11 f0       	breq	.+4      	; 0x34da <__vector_13+0x1e>
    34d6:	83 e0       	ldi	r24, 0x03	; 3
    34d8:	19 c0       	rjmp	.+50     	; 0x350c <__vector_13+0x50>
	rx_buffer[wr_index]=data;
    34da:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <wr_index>
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	e4 58       	subi	r30, 0x84	; 132
    34e2:	fa 4f       	sbci	r31, 0xFA	; 250
    34e4:	90 83       	st	Z, r25
	if (++wr_index == MODB_MESSSIZE) wr_index=0;
    34e6:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <wr_index>
    34ea:	8f 5f       	subi	r24, 0xFF	; 255
    34ec:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <wr_index>
    34f0:	88 32       	cpi	r24, 0x28	; 40
    34f2:	11 f4       	brne	.+4      	; 0x34f8 <__vector_13+0x3c>
    34f4:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <wr_index>
	if (++rx_counter == MODB_MESSSIZE) {rx_counter=0;MODB_ERR=MODBBUFOVF;return;}
    34f8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_counter>
    34fc:	8f 5f       	subi	r24, 0xFF	; 255
    34fe:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_counter>
    3502:	88 32       	cpi	r24, 0x28	; 40
    3504:	29 f4       	brne	.+10     	; 0x3510 <__vector_13+0x54>
    3506:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_counter>
    350a:	82 e0       	ldi	r24, 0x02	; 2
    350c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <MODB_ERR>
	read_raw_data();
}
    3510:	ff 91       	pop	r31
    3512:	ef 91       	pop	r30
    3514:	9f 91       	pop	r25
    3516:	8f 91       	pop	r24
    3518:	0f 90       	pop	r0
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	0f 90       	pop	r0
    351e:	1f 90       	pop	r1
    3520:	18 95       	reti

00003522 <modb_putchar>:
}

//отсылка символа по УАРТу
static void modb_putchar(char c)
{
	while((UCSRA&(1<<UDRE))==0);
    3522:	5d 9b       	sbis	0x0b, 5	; 11
    3524:	fe cf       	rjmp	.-4      	; 0x3522 <modb_putchar>
	UDR=c;
    3526:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<TXC))==0);	//ждем окончания передачи
    3528:	5e 9b       	sbis	0x0b, 6	; 11
    352a:	fe cf       	rjmp	.-4      	; 0x3528 <modb_putchar+0x6>
	UCSRA |= 1<<TXC;			//сброс флага окончания передачи
    352c:	5e 9a       	sbi	0x0b, 6	; 11
    352e:	08 95       	ret

00003530 <CRC.constprop.0>:
  while(lenght--) {lrc+=*data++;}
  return ((unsigned char) (-(signed char) lrc));
}

//вычисление CRC
static unsigned int CRC(volatile unsigned char *data, unsigned char lenght)
    3530:	28 2f       	mov	r18, r24
{
  unsigned int crc=0xFFFF;
    3532:	8f ef       	ldi	r24, 0xFF	; 255
    3534:	9f ef       	ldi	r25, 0xFF	; 255
    3536:	e4 ea       	ldi	r30, 0xA4	; 164
    3538:	f5 e0       	ldi	r31, 0x05	; 5

  while(lenght--)
    353a:	21 50       	subi	r18, 0x01	; 1
    353c:	b0 f0       	brcs	.+44     	; 0x356a <CRC.constprop.0+0x3a>
  {
    crc ^= *data++;
    353e:	bf 01       	movw	r22, r30
    3540:	6f 5f       	subi	r22, 0xFF	; 255
    3542:	7f 4f       	sbci	r23, 0xFF	; 255
    3544:	30 81       	ld	r19, Z
    3546:	83 27       	eor	r24, r19
    3548:	38 e0       	ldi	r19, 0x08	; 8
    354a:	ac 01       	movw	r20, r24
    354c:	56 95       	lsr	r21
    354e:	47 95       	ror	r20
    for (unsigned char i = 0; i < 8; ++i)
    {
	if (crc & 1) crc = (crc >> 1) ^ 0xA001;
    3550:	80 ff       	sbrs	r24, 0
    3552:	06 c0       	rjmp	.+12     	; 0x3560 <CRC.constprop.0+0x30>
    3554:	ca 01       	movw	r24, r20
    3556:	e1 e0       	ldi	r30, 0x01	; 1
    3558:	8e 27       	eor	r24, r30
    355a:	e0 ea       	ldi	r30, 0xA0	; 160
    355c:	9e 27       	eor	r25, r30
    355e:	01 c0       	rjmp	.+2      	; 0x3562 <CRC.constprop.0+0x32>
	else crc = (crc >> 1);
    3560:	ca 01       	movw	r24, r20
    3562:	31 50       	subi	r19, 0x01	; 1
  unsigned int crc=0xFFFF;

  while(lenght--)
  {
    crc ^= *data++;
    for (unsigned char i = 0; i < 8; ++i)
    3564:	91 f7       	brne	.-28     	; 0x354a <CRC.constprop.0+0x1a>
{
  unsigned int crc=0xFFFF;

  while(lenght--)
  {
    crc ^= *data++;
    3566:	fb 01       	movw	r30, r22
    3568:	e8 cf       	rjmp	.-48     	; 0x353a <CRC.constprop.0+0xa>
	else crc = (crc >> 1);
    }
  }

  return crc;
}
    356a:	08 95       	ret

0000356c <MODB_init>:
static void modb_putchar(char);


//Инициализация.Выглядит примерно так:  MODB_init(RTU,EVEN,9600);
void MODB_init(unsigned char type,unsigned char parity,unsigned long int speed)
{
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	18 2f       	mov	r17, r24
    3576:	c6 2f       	mov	r28, r22
  unsigned char stop=(parity ==NONE)?(2):(1);	//1 стоп бит если есть паритет; 2 бита если нет паритета
    3578:	66 23       	and	r22, r22
    357a:	11 f0       	breq	.+4      	; 0x3580 <MODB_init+0x14>
    357c:	01 e0       	ldi	r16, 0x01	; 1
    357e:	01 c0       	rjmp	.+2      	; 0x3582 <MODB_init+0x16>
    3580:	02 e0       	ldi	r16, 0x02	; 2
  unsigned char size=(type ==ASCII)?(7):(8);	//если ASCII-7 бит данных MSB, если RTU-8 бит данных MSB
    3582:	11 30       	cpi	r17, 0x01	; 1
    3584:	11 f0       	breq	.+4      	; 0x358a <MODB_init+0x1e>
    3586:	d8 e0       	ldi	r29, 0x08	; 8
    3588:	01 c0       	rjmp	.+2      	; 0x358c <MODB_init+0x20>
    358a:	d7 e0       	ldi	r29, 0x07	; 7
  unsigned int baud=0x7F & (unsigned int)((F_CPU/(16*speed))-1);
    358c:	84 e0       	ldi	r24, 0x04	; 4
    358e:	22 0f       	add	r18, r18
    3590:	33 1f       	adc	r19, r19
    3592:	44 1f       	adc	r20, r20
    3594:	55 1f       	adc	r21, r21
    3596:	8a 95       	dec	r24
    3598:	d1 f7       	brne	.-12     	; 0x358e <MODB_init+0x22>
    359a:	60 e0       	ldi	r22, 0x00	; 0
    359c:	74 e2       	ldi	r23, 0x24	; 36
    359e:	84 ef       	ldi	r24, 0xF4	; 244
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	0e 94 97 1c 	call	0x392e	; 0x392e <__udivmodsi4>
    35a6:	21 50       	subi	r18, 0x01	; 1
    35a8:	31 09       	sbc	r19, r1
    35aa:	2f 77       	andi	r18, 0x7F	; 127
    35ac:	33 27       	eor	r19, r19


  size-=5;
    35ae:	d5 50       	subi	r29, 0x05	; 5
  TXENDDR |= 1<<TXENPIN;
    35b0:	8e 9a       	sbi	0x11, 6	; 17
  TXDISABLE;
    35b2:	96 98       	cbi	0x12, 6	; 18

  modb_type=type;
    35b4:	10 93 53 01 	sts	0x0153, r17	; 0x800153 <modb_type>
  //длительность передачи одного бита == кол-во бит-в-символе(ASCII==10, RTU==11)/скорость
  //таймаут д.б. RTU>=3.5 символа (>38,5 бит), ASCII <=1000ms;
  //RTU = с запасом 40 бит=> 40/speed ==пауза, сек *1000 ==ms
//  val_timeout=(type ==ASCII)?(1000000):(40000000/speed);
  val_timeout=(type ==ASCII)?(1000):(2);	//при скоростях больше 19200 таймаут можно принять 2мс
    35b8:	11 30       	cpi	r17, 0x01	; 1
    35ba:	29 f0       	breq	.+10     	; 0x35c6 <MODB_init+0x5a>
    35bc:	82 e0       	ldi	r24, 0x02	; 2
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	a0 e0       	ldi	r26, 0x00	; 0
    35c2:	b0 e0       	ldi	r27, 0x00	; 0
    35c4:	04 c0       	rjmp	.+8      	; 0x35ce <MODB_init+0x62>
    35c6:	88 ee       	ldi	r24, 0xE8	; 232
    35c8:	93 e0       	ldi	r25, 0x03	; 3
    35ca:	a0 e0       	ldi	r26, 0x00	; 0
    35cc:	b0 e0       	ldi	r27, 0x00	; 0
    35ce:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <val_timeout>
    35d2:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <val_timeout+0x1>
    35d6:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <val_timeout+0x2>
    35da:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <val_timeout+0x3>

  //нога ТХ
  //When the USART Transmitter is enabled, this pin is configured as an output regardless of the value of DDD1.
  PORTD |= (1<<PORTD1);//PORTD.1=1 выход с "1"
    35de:	91 9a       	sbi	0x12, 1	; 18
  DDRD |= (1<<DDD1);  //DDRD.1=1 выход
    35e0:	89 9a       	sbi	0x11, 1	; 17

  //нога RX
  PORTD |= (1<<PORTD0);//PORTD.1=1 вход с притяжкой
    35e2:	90 9a       	sbi	0x12, 0	; 18
  DDRD &= ~(1<<DDD0);  //DDD.1=0 вход
    35e4:	88 98       	cbi	0x11, 0	; 17

  UCSRA=0x00;
    35e6:	1b b8       	out	0x0b, r1	; 11
  //(7)вкл.прер.по приему, (6)откл.прер.по передаче, (5)откл.прер.по опустошению UDR, (4)вкл.передатчик и (3)приемник, (2)9бит откл.
  UCSRB=0b10011000;
    35e8:	88 e9       	ldi	r24, 0x98	; 152
    35ea:	8a b9       	out	0x0a, r24	; 10
  //(7)?, (6)асинхронный режим, (5:4)четность(none), (3)1стоп, (2:1)8бит, (0)=0
  //	UCSRC=0b10000110;

  UCSRC=(1<<7) | parity | ((stop==2)?(1):(0) << 3) | (size<<1);
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	02 30       	cpi	r16, 0x02	; 2
    35f0:	09 f0       	breq	.+2      	; 0x35f4 <MODB_init+0x88>
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	c0 68       	ori	r28, 0x80	; 128
    35f6:	8c 2b       	or	r24, r28
    35f8:	cd 2f       	mov	r28, r29
    35fa:	cc 0f       	add	r28, r28
    35fc:	c8 2b       	or	r28, r24
    35fe:	c0 bd       	out	0x20, r28	; 32
//	//(7)?, (6)асинхронный режим, (5:4)четность(EVEN), (3)1стоп, (2:1)8бит, (0)=0
//	UCSRC=0b10100110;
  UBRRH=baud << 8;
    3600:	10 bc       	out	0x20, r1	; 32
  UBRRL=baud & 0x00FF;
    3602:	29 b9       	out	0x09, r18	; 9
//	//9600 bps
//	UBRRH=0x00;
//	UBRRL=0x67;

}
    3604:	df 91       	pop	r29
    3606:	cf 91       	pop	r28
    3608:	1f 91       	pop	r17
    360a:	0f 91       	pop	r16
    360c:	08 95       	ret

0000360e <putModbMsg>:

//отправить сообщение из модбас буфера. На входе RTU сообщение, передаем его длину
void putModbMsg(unsigned char lenght)
{
    360e:	ef 92       	push	r14
    3610:	ff 92       	push	r15
    3612:	0f 93       	push	r16
    3614:	1f 93       	push	r17
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	c8 2f       	mov	r28, r24
  switch(modb_type)
    361c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <modb_type>
    3620:	88 23       	and	r24, r24
    3622:	41 f0       	breq	.+16     	; 0x3634 <putModbMsg+0x26>
    3624:	81 30       	cpi	r24, 0x01	; 1
    3626:	09 f0       	breq	.+2      	; 0x362a <putModbMsg+0x1c>
    3628:	8e c0       	rjmp	.+284    	; 0x3746 <putModbMsg+0x138>
    362a:	9c 2f       	mov	r25, r28
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	e4 ea       	ldi	r30, 0xA4	; 164
    3630:	f5 e0       	ldi	r31, 0x05	; 5
    3632:	35 c0       	rjmp	.+106    	; 0x369e <putModbMsg+0x90>
  {
  case(RTU):
    {
    unsigned int crc=CRC(modb_message,lenght);
    3634:	8c 2f       	mov	r24, r28
    3636:	0e 94 98 1a 	call	0x3530	; 0x3530 <CRC.constprop.0>
    363a:	f8 2e       	mov	r15, r24
    363c:	d9 2f       	mov	r29, r25
    unsigned char index=0;

    TXENABLE;
    363e:	96 9a       	sbi	0x12, 6	; 18
    3640:	04 ea       	ldi	r16, 0xA4	; 164
    3642:	15 e0       	ldi	r17, 0x05	; 5
    while(lenght--) modb_putchar(modb_message[index++]);
    3644:	cc 23       	and	r28, r28
    3646:	39 f0       	breq	.+14     	; 0x3656 <putModbMsg+0x48>
    3648:	f8 01       	movw	r30, r16
    364a:	81 91       	ld	r24, Z+
    364c:	8f 01       	movw	r16, r30
    364e:	0e 94 91 1a 	call	0x3522	; 0x3522 <modb_putchar>
    3652:	c1 50       	subi	r28, 0x01	; 1
    3654:	f7 cf       	rjmp	.-18     	; 0x3644 <putModbMsg+0x36>
    modb_putchar(crc & 0x00FF);	//младшим байтом вперед
    3656:	8f 2d       	mov	r24, r15
    3658:	0e 94 91 1a 	call	0x3522	; 0x3522 <modb_putchar>
    modb_putchar(crc>>8);
    365c:	8d 2f       	mov	r24, r29
    365e:	0e 94 91 1a 	call	0x3522	; 0x3522 <modb_putchar>
    TXDISABLE;
    3662:	96 98       	cbi	0x12, 6	; 18
    MODB_timeout=val_timeout;
    3664:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <val_timeout>
    3668:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <val_timeout+0x1>
    366c:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <val_timeout+0x2>
    3670:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <val_timeout+0x3>
    3674:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <MODB_timeout>
    3678:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <MODB_timeout+0x1>
    367c:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <MODB_timeout+0x2>
    3680:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <MODB_timeout+0x3>
    while(MODB_timeout);
    3684:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <MODB_timeout>
    3688:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <MODB_timeout+0x1>
    368c:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <MODB_timeout+0x2>
    3690:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <MODB_timeout+0x3>
    3694:	89 2b       	or	r24, r25
    3696:	8a 2b       	or	r24, r26
    3698:	8b 2b       	or	r24, r27
    369a:	a1 f7       	brne	.-24     	; 0x3684 <putModbMsg+0x76>
    369c:	54 c0       	rjmp	.+168    	; 0x3746 <putModbMsg+0x138>
//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;

  while(lenght--) {lrc+=*data++;}
    369e:	91 50       	subi	r25, 0x01	; 1
    36a0:	20 f0       	brcs	.+8      	; 0x36aa <putModbMsg+0x9c>
    36a2:	20 81       	ld	r18, Z
    36a4:	82 0f       	add	r24, r18
    36a6:	31 96       	adiw	r30, 0x01	; 1
    36a8:	fa cf       	rjmp	.-12     	; 0x369e <putModbMsg+0x90>
  return ((unsigned char) (-(signed char) lrc));
    36aa:	d8 2f       	mov	r29, r24
    36ac:	d1 95       	neg	r29
  case(ASCII):
    {
    unsigned char lrc=LRC(modb_message,lenght);
    unsigned char index=0;

    TXENABLE;
    36ae:	96 9a       	sbi	0x12, 6	; 18
    36b0:	ff ef       	ldi	r31, 0xFF	; 255
    36b2:	29 ef       	ldi	r18, 0xF9	; 249
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	f1 50       	subi	r31, 0x01	; 1
    36b8:	20 40       	sbci	r18, 0x00	; 0
    36ba:	80 40       	sbci	r24, 0x00	; 0
    36bc:	e1 f7       	brne	.-8      	; 0x36b6 <putModbMsg+0xa8>
    36be:	00 c0       	rjmp	.+0      	; 0x36c0 <putModbMsg+0xb2>
    36c0:	00 00       	nop
    _delay_ms(20);
    modb_putchar(':');
    36c2:	8a e3       	ldi	r24, 0x3A	; 58
    36c4:	0e 94 91 1a 	call	0x3522	; 0x3522 <modb_putchar>
    36c8:	04 ea       	ldi	r16, 0xA4	; 164
    36ca:	15 e0       	ldi	r17, 0x05	; 5

    while(lenght--)
    36cc:	cc 23       	and	r28, r28
    36ce:	f1 f0       	breq	.+60     	; 0x370c <putModbMsg+0xfe>
    36d0:	78 01       	movw	r14, r16
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
    36d2:	f8 01       	movw	r30, r16
    36d4:	80 81       	ld	r24, Z
    36d6:	82 95       	swap	r24
    36d8:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    36da:	90 e3       	ldi	r25, 0x30	; 48
    36dc:	98 0f       	add	r25, r24
  if(num>57)return num+7;
    36de:	9a 33       	cpi	r25, 0x3A	; 58
    36e0:	10 f0       	brcs	.+4      	; 0x36e6 <putModbMsg+0xd8>
    36e2:	89 5c       	subi	r24, 0xC9	; 201
    36e4:	01 c0       	rjmp	.+2      	; 0x36e8 <putModbMsg+0xda>
    36e6:	89 2f       	mov	r24, r25
    _delay_ms(20);
    modb_putchar(':');

    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
    36e8:	0e 94 91 1a 	call	0x3522	; 0x3522 <modb_putchar>
    36ec:	0f 5f       	subi	r16, 0xFF	; 255
    36ee:	1f 4f       	sbci	r17, 0xFF	; 255
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
    36f0:	f7 01       	movw	r30, r14
    36f2:	80 81       	ld	r24, Z
    36f4:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    36f6:	90 e3       	ldi	r25, 0x30	; 48
    36f8:	98 0f       	add	r25, r24
  if(num>57)return num+7;
    36fa:	9a 33       	cpi	r25, 0x3A	; 58
    36fc:	10 f0       	brcs	.+4      	; 0x3702 <putModbMsg+0xf4>
    36fe:	89 5c       	subi	r24, 0xC9	; 201
    3700:	01 c0       	rjmp	.+2      	; 0x3704 <putModbMsg+0xf6>
    3702:	89 2f       	mov	r24, r25
    modb_putchar(':');

    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
    3704:	0e 94 91 1a 	call	0x3522	; 0x3522 <modb_putchar>
    3708:	c1 50       	subi	r28, 0x01	; 1
    370a:	e0 cf       	rjmp	.-64     	; 0x36cc <putModbMsg+0xbe>
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    370c:	9d 2f       	mov	r25, r29
    370e:	92 95       	swap	r25
    3710:	9f 70       	andi	r25, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    3712:	80 e3       	ldi	r24, 0x30	; 48
    3714:	89 0f       	add	r24, r25
  if(num>57)return num+7;
    3716:	8a 33       	cpi	r24, 0x3A	; 58
    3718:	10 f0       	brcs	.+4      	; 0x371e <putModbMsg+0x110>
    371a:	87 e3       	ldi	r24, 0x37	; 55
    371c:	89 0f       	add	r24, r25
    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    371e:	0e 94 91 1a 	call	0x3522	; 0x3522 <modb_putchar>
    modb_putchar( dig_to_char(lrc& 0x0F) );
    3722:	8d 2f       	mov	r24, r29
    3724:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    3726:	d0 e3       	ldi	r29, 0x30	; 48
    3728:	d8 0f       	add	r29, r24
  if(num>57)return num+7;
    372a:	da 33       	cpi	r29, 0x3A	; 58
    372c:	10 f0       	brcs	.+4      	; 0x3732 <putModbMsg+0x124>
    372e:	89 5c       	subi	r24, 0xC9	; 201
    3730:	01 c0       	rjmp	.+2      	; 0x3734 <putModbMsg+0x126>
    3732:	8d 2f       	mov	r24, r29
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    modb_putchar( dig_to_char(lrc& 0x0F) );
    3734:	0e 94 91 1a 	call	0x3522	; 0x3522 <modb_putchar>
    modb_putchar(0x0D);
    3738:	8d e0       	ldi	r24, 0x0D	; 13
    373a:	0e 94 91 1a 	call	0x3522	; 0x3522 <modb_putchar>
    modb_putchar(0x0A);
    373e:	8a e0       	ldi	r24, 0x0A	; 10
    3740:	0e 94 91 1a 	call	0x3522	; 0x3522 <modb_putchar>
    TXDISABLE;
    3744:	96 98       	cbi	0x12, 6	; 18
    }
   break;
  }
}
    3746:	df 91       	pop	r29
    3748:	cf 91       	pop	r28
    374a:	1f 91       	pop	r17
    374c:	0f 91       	pop	r16
    374e:	ff 90       	pop	r15
    3750:	ef 90       	pop	r14
    3752:	08 95       	ret

00003754 <getModbMsg>:

//получить сообщение из приемного буфера УАРТа. В итоге-в буфере RTU сообщение,вернули длину полученного сообщения или -1 (ошибка)
signed char getModbMsg(void)
{
    3754:	8f 92       	push	r8
    3756:	9f 92       	push	r9
    3758:	af 92       	push	r10
    375a:	bf 92       	push	r11
    375c:	cf 92       	push	r12
    375e:	df 92       	push	r13
    3760:	ef 92       	push	r14
    3762:	ff 92       	push	r15
    3764:	0f 93       	push	r16
    3766:	1f 93       	push	r17
    3768:	cf 93       	push	r28
	unsigned char flag_tout=0,index=0,pass=0;

	while(1)																		//пока не дочитаем до конца сообщения или до ошибки крутимся тут
	{
		MODB_timeout=val_timeout;
    376a:	c0 90 4f 01 	lds	r12, 0x014F	; 0x80014f <val_timeout>
    376e:	d0 90 50 01 	lds	r13, 0x0150	; 0x800150 <val_timeout+0x1>
    3772:	e0 90 51 01 	lds	r14, 0x0151	; 0x800151 <val_timeout+0x2>
    3776:	f0 90 52 01 	lds	r15, 0x0152	; 0x800152 <val_timeout+0x3>
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    377a:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <modb_type>
    377e:	90 91 cc 05 	lds	r25, 0x05CC	; 0x8005cc <rd_index>
}

//получить сообщение из приемного буфера УАРТа. В итоге-в буфере RTU сообщение,вернули длину полученного сообщения или -1 (ошибка)
signed char getModbMsg(void)
{
	unsigned char flag_tout=0,index=0,pass=0;
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	80 e0       	ldi	r24, 0x00	; 0

	while(1)																		//пока не дочитаем до конца сообщения или до ошибки крутимся тут
	{
		MODB_timeout=val_timeout;
    3786:	c0 92 56 01 	sts	0x0156, r12	; 0x800156 <MODB_timeout>
    378a:	d0 92 57 01 	sts	0x0157, r13	; 0x800157 <MODB_timeout+0x1>
    378e:	e0 92 58 01 	sts	0x0158, r14	; 0x800158 <MODB_timeout+0x2>
    3792:	f0 92 59 01 	sts	0x0159, r15	; 0x800159 <MODB_timeout+0x3>
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут
    3796:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <rx_counter>
    379a:	31 11       	cpse	r19, r1
    379c:	0d c0       	rjmp	.+26     	; 0x37b8 <getModbMsg+0x64>
    379e:	80 90 56 01 	lds	r8, 0x0156	; 0x800156 <MODB_timeout>
    37a2:	90 90 57 01 	lds	r9, 0x0157	; 0x800157 <MODB_timeout+0x1>
    37a6:	a0 90 58 01 	lds	r10, 0x0158	; 0x800158 <MODB_timeout+0x2>
    37aa:	b0 90 59 01 	lds	r11, 0x0159	; 0x800159 <MODB_timeout+0x3>
    37ae:	89 28       	or	r8, r9
    37b0:	8a 28       	or	r8, r10
    37b2:	8b 28       	or	r8, r11
    37b4:	81 f7       	brne	.-32     	; 0x3796 <getModbMsg+0x42>
    37b6:	34 c0       	rjmp	.+104    	; 0x3820 <getModbMsg+0xcc>
    37b8:	e9 2f       	mov	r30, r25
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	9f 5f       	subi	r25, 0xFF	; 255

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    37be:	61 11       	cpse	r22, r1
    37c0:	0a c0       	rjmp	.+20     	; 0x37d6 <getModbMsg+0x82>
			{
				unsigned int crc= modb_message[index-1] <<8 | modb_message[index-2];//полученная CRC
				if(crc !=CRC(modb_message,index-2))	{MODB_ERR=MODBXRC;return -1;}	//сравниваем с фактической
				return index-2;														//длина сообщения минус 2 символа CRC
			}
			modb_message[index++]=rx_buffer[rd_index];								//если не таймаут принимаем след. символ
    37c2:	e4 58       	subi	r30, 0x84	; 132
    37c4:	fa 4f       	sbci	r31, 0xFA	; 250
    37c6:	30 81       	ld	r19, Z
    37c8:	e8 2f       	mov	r30, r24
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	ec 55       	subi	r30, 0x5C	; 92
    37ce:	fa 4f       	sbci	r31, 0xFA	; 250
    37d0:	30 83       	st	Z, r19
    37d2:	8f 5f       	subi	r24, 0xFF	; 255
    37d4:	1a c0       	rjmp	.+52     	; 0x380a <getModbMsg+0xb6>

//////////////////////////////////если работаем в режиме ASCII
		else
		{
			if(flag_tout) {MODB_ERR=MODBTOUT;return -1;}							//таймаут в случае ASCII это ошибка
			switch(rx_buffer[rd_index])
    37d6:	e4 58       	subi	r30, 0x84	; 132
    37d8:	fa 4f       	sbci	r31, 0xFA	; 250
    37da:	30 81       	ld	r19, Z
    37dc:	3d 30       	cpi	r19, 0x0D	; 13
    37de:	09 f4       	brne	.+2      	; 0x37e2 <getModbMsg+0x8e>
    37e0:	3c c0       	rjmp	.+120    	; 0x385a <getModbMsg+0x106>
    37e2:	3a 33       	cpi	r19, 0x3A	; 58
    37e4:	91 f0       	breq	.+36     	; 0x380a <getModbMsg+0xb6>
    37e6:	48 2f       	mov	r20, r24
    37e8:	50 e0       	ldi	r21, 0x00	; 0
					return index-1;													// а возвращем длину без учета ЛРЦ
				}
				break;
				default:															//сборка ASCII-to-RTU
				{
					if(pass==0)														//первый проход- в буфер сообщения пишем первую тетраду
    37ea:	21 11       	cpse	r18, r1
    37ec:	58 c0       	rjmp	.+176    	; 0x389e <getModbMsg+0x14a>
					{
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
    37ee:	20 81       	ld	r18, Z
}

//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
    37f0:	30 ed       	ldi	r19, 0xD0	; 208
    37f2:	32 0f       	add	r19, r18
  if(sym>41) return sym-39;	/* a .. f */
    37f4:	3a 32       	cpi	r19, 0x2A	; 42
    37f6:	08 f4       	brcc	.+2      	; 0x37fa <getModbMsg+0xa6>
    37f8:	4c c0       	rjmp	.+152    	; 0x3892 <getModbMsg+0x13e>
    37fa:	27 55       	subi	r18, 0x57	; 87
				break;
				default:															//сборка ASCII-to-RTU
				{
					if(pass==0)														//первый проход- в буфер сообщения пишем первую тетраду
					{
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
    37fc:	fa 01       	movw	r30, r20
    37fe:	ec 55       	subi	r30, 0x5C	; 92
    3800:	fa 4f       	sbci	r31, 0xFA	; 250
    3802:	22 95       	swap	r18
    3804:	20 7f       	andi	r18, 0xF0	; 240
    3806:	20 83       	st	Z, r18
						pass=1;
    3808:	21 e0       	ldi	r18, 0x01	; 1
				}
				break;
			}
		}

		if (++rd_index == MODB_MESSSIZE) rd_index=0;
    380a:	98 32       	cpi	r25, 0x28	; 40
    380c:	09 f4       	brne	.+2      	; 0x3810 <getModbMsg+0xbc>
    380e:	90 e0       	ldi	r25, 0x00	; 0
		asm("cli");
    3810:	f8 94       	cli
		--rx_counter;
    3812:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <rx_counter>
    3816:	31 50       	subi	r19, 0x01	; 1
    3818:	30 93 54 01 	sts	0x0154, r19	; 0x800154 <rx_counter>
		asm("sei");
    381c:	78 94       	sei
	}
    381e:	b3 cf       	rjmp	.-154    	; 0x3786 <getModbMsg+0x32>
	{
		MODB_timeout=val_timeout;
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    3820:	61 11       	cpse	r22, r1
    3822:	53 c0       	rjmp	.+166    	; 0x38ca <getModbMsg+0x176>
    3824:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <rd_index>
		{
			if(flag_tout)															//таймаут в случае RTU -это конец сообщения.Проверяем CRC
			{
				unsigned int crc= modb_message[index-1] <<8 | modb_message[index-2];//полученная CRC
    3828:	28 2f       	mov	r18, r24
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	2c 55       	subi	r18, 0x5C	; 92
    382e:	3a 4f       	sbci	r19, 0xFA	; 250
    3830:	f9 01       	movw	r30, r18
    3832:	31 97       	sbiw	r30, 0x01	; 1
    3834:	00 81       	ld	r16, Z
    3836:	10 e0       	ldi	r17, 0x00	; 0
    3838:	10 2f       	mov	r17, r16
    383a:	00 27       	eor	r16, r16
    383c:	31 97       	sbiw	r30, 0x01	; 1
    383e:	90 81       	ld	r25, Z
    3840:	09 2b       	or	r16, r25
				if(crc !=CRC(modb_message,index-2))	{MODB_ERR=MODBXRC;return -1;}	//сравниваем с фактической
    3842:	ce ef       	ldi	r28, 0xFE	; 254
    3844:	c8 0f       	add	r28, r24
    3846:	8c 2f       	mov	r24, r28
    3848:	0e 94 98 1a 	call	0x3530	; 0x3530 <CRC.constprop.0>
    384c:	08 17       	cp	r16, r24
    384e:	19 07       	cpc	r17, r25
    3850:	11 f4       	brne	.+4      	; 0x3856 <getModbMsg+0x102>
				return index-2;														//длина сообщения минус 2 символа CRC
    3852:	8c 2f       	mov	r24, r28
    3854:	40 c0       	rjmp	.+128    	; 0x38d6 <getModbMsg+0x182>
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
					if(LRC(modb_message,index) !=0){MODB_ERR=MODBXRC;return -1;}	//для проверки ЛРЦ посылаем сообщение без ':' но с ЛРЦ
    3856:	85 e0       	ldi	r24, 0x05	; 5
    3858:	3b c0       	rjmp	.+118    	; 0x38d0 <getModbMsg+0x17c>
					;
				}
				break;
				case(0x0D):															//конец сообщения. Проверяем LRC и вываливаемся
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
    385a:	98 32       	cpi	r25, 0x28	; 40
    385c:	19 f0       	breq	.+6      	; 0x3864 <getModbMsg+0x110>
    385e:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <rd_index>
    3862:	02 c0       	rjmp	.+4      	; 0x3868 <getModbMsg+0x114>
    3864:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <rd_index>
					asm("cli");
    3868:	f8 94       	cli
					--rx_counter;
    386a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <rx_counter>
    386e:	91 50       	subi	r25, 0x01	; 1
    3870:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <rx_counter>
					asm("sei");
    3874:	78 94       	sei
    3876:	28 2f       	mov	r18, r24
}

//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;
    3878:	90 e0       	ldi	r25, 0x00	; 0
				case(0x0D):															//конец сообщения. Проверяем LRC и вываливаемся
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
    387a:	e4 ea       	ldi	r30, 0xA4	; 164
    387c:	f5 e0       	ldi	r31, 0x05	; 5
//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;

  while(lenght--) {lrc+=*data++;}
    387e:	21 50       	subi	r18, 0x01	; 1
    3880:	20 f0       	brcs	.+8      	; 0x388a <getModbMsg+0x136>
    3882:	30 81       	ld	r19, Z
    3884:	93 0f       	add	r25, r19
    3886:	31 96       	adiw	r30, 0x01	; 1
    3888:	fa cf       	rjmp	.-12     	; 0x387e <getModbMsg+0x12a>
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
					if(LRC(modb_message,index) !=0){MODB_ERR=MODBXRC;return -1;}	//для проверки ЛРЦ посылаем сообщение без ':' но с ЛРЦ
    388a:	91 11       	cpse	r25, r1
    388c:	e4 cf       	rjmp	.-56     	; 0x3856 <getModbMsg+0x102>
					return index-1;													// а возвращем длину без учета ЛРЦ
    388e:	81 50       	subi	r24, 0x01	; 1
    3890:	22 c0       	rjmp	.+68     	; 0x38d6 <getModbMsg+0x182>
//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
  if(sym>41) return sym-39;	/* a .. f */
  if(sym>9) return sym-7;   	/* A .. F */
    3892:	3a 30       	cpi	r19, 0x0A	; 10
    3894:	10 f0       	brcs	.+4      	; 0x389a <getModbMsg+0x146>
    3896:	27 53       	subi	r18, 0x37	; 55
    3898:	b1 cf       	rjmp	.-158    	; 0x37fc <getModbMsg+0xa8>
    389a:	23 2f       	mov	r18, r19
    389c:	af cf       	rjmp	.-162    	; 0x37fc <getModbMsg+0xa8>
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
						pass=1;
					}
					else															//второй проход- в буфер сообщения пишем вторую тетраду
					{
						modb_message[index++] |= char_to_dig(rx_buffer[rd_index]) & 0x0F;
    389e:	20 81       	ld	r18, Z
}

//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
    38a0:	30 ed       	ldi	r19, 0xD0	; 208
    38a2:	32 0f       	add	r19, r18
  if(sym>41) return sym-39;	/* a .. f */
    38a4:	3a 32       	cpi	r19, 0x2A	; 42
    38a6:	10 f0       	brcs	.+4      	; 0x38ac <getModbMsg+0x158>
    38a8:	27 55       	subi	r18, 0x57	; 87
    38aa:	05 c0       	rjmp	.+10     	; 0x38b6 <getModbMsg+0x162>
  if(sym>9) return sym-7;   	/* A .. F */
    38ac:	3a 30       	cpi	r19, 0x0A	; 10
    38ae:	10 f0       	brcs	.+4      	; 0x38b4 <getModbMsg+0x160>
    38b0:	27 53       	subi	r18, 0x37	; 55
    38b2:	01 c0       	rjmp	.+2      	; 0x38b6 <getModbMsg+0x162>
    38b4:	23 2f       	mov	r18, r19
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
						pass=1;
					}
					else															//второй проход- в буфер сообщения пишем вторую тетраду
					{
						modb_message[index++] |= char_to_dig(rx_buffer[rd_index]) & 0x0F;
    38b6:	fa 01       	movw	r30, r20
    38b8:	ec 55       	subi	r30, 0x5C	; 92
    38ba:	fa 4f       	sbci	r31, 0xFA	; 250
    38bc:	2f 70       	andi	r18, 0x0F	; 15
    38be:	30 81       	ld	r19, Z
    38c0:	23 2b       	or	r18, r19
    38c2:	20 83       	st	Z, r18
    38c4:	8f 5f       	subi	r24, 0xFF	; 255
						pass=0;
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	a0 cf       	rjmp	.-192    	; 0x380a <getModbMsg+0xb6>
    38ca:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <rd_index>
		}

//////////////////////////////////если работаем в режиме ASCII
		else
		{
			if(flag_tout) {MODB_ERR=MODBTOUT;return -1;}							//таймаут в случае ASCII это ошибка
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <MODB_ERR>
    38d4:	8f ef       	ldi	r24, 0xFF	; 255
		asm("cli");
		--rx_counter;
		asm("sei");
	}
	return -1;	//что то ваще пошло не так
}
    38d6:	cf 91       	pop	r28
    38d8:	1f 91       	pop	r17
    38da:	0f 91       	pop	r16
    38dc:	ff 90       	pop	r15
    38de:	ef 90       	pop	r14
    38e0:	df 90       	pop	r13
    38e2:	cf 90       	pop	r12
    38e4:	bf 90       	pop	r11
    38e6:	af 90       	pop	r10
    38e8:	9f 90       	pop	r9
    38ea:	8f 90       	pop	r8
    38ec:	08 95       	ret

000038ee <__udivmodqi4>:
    38ee:	99 1b       	sub	r25, r25
    38f0:	79 e0       	ldi	r23, 0x09	; 9
    38f2:	04 c0       	rjmp	.+8      	; 0x38fc <__udivmodqi4_ep>

000038f4 <__udivmodqi4_loop>:
    38f4:	99 1f       	adc	r25, r25
    38f6:	96 17       	cp	r25, r22
    38f8:	08 f0       	brcs	.+2      	; 0x38fc <__udivmodqi4_ep>
    38fa:	96 1b       	sub	r25, r22

000038fc <__udivmodqi4_ep>:
    38fc:	88 1f       	adc	r24, r24
    38fe:	7a 95       	dec	r23
    3900:	c9 f7       	brne	.-14     	; 0x38f4 <__udivmodqi4_loop>
    3902:	80 95       	com	r24
    3904:	08 95       	ret

00003906 <__divmodhi4>:
    3906:	97 fb       	bst	r25, 7
    3908:	07 2e       	mov	r0, r23
    390a:	16 f4       	brtc	.+4      	; 0x3910 <__divmodhi4+0xa>
    390c:	00 94       	com	r0
    390e:	07 d0       	rcall	.+14     	; 0x391e <__divmodhi4_neg1>
    3910:	77 fd       	sbrc	r23, 7
    3912:	09 d0       	rcall	.+18     	; 0x3926 <__divmodhi4_neg2>
    3914:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__udivmodhi4>
    3918:	07 fc       	sbrc	r0, 7
    391a:	05 d0       	rcall	.+10     	; 0x3926 <__divmodhi4_neg2>
    391c:	3e f4       	brtc	.+14     	; 0x392c <__divmodhi4_exit>

0000391e <__divmodhi4_neg1>:
    391e:	90 95       	com	r25
    3920:	81 95       	neg	r24
    3922:	9f 4f       	sbci	r25, 0xFF	; 255
    3924:	08 95       	ret

00003926 <__divmodhi4_neg2>:
    3926:	70 95       	com	r23
    3928:	61 95       	neg	r22
    392a:	7f 4f       	sbci	r23, 0xFF	; 255

0000392c <__divmodhi4_exit>:
    392c:	08 95       	ret

0000392e <__udivmodsi4>:
    392e:	a1 e2       	ldi	r26, 0x21	; 33
    3930:	1a 2e       	mov	r1, r26
    3932:	aa 1b       	sub	r26, r26
    3934:	bb 1b       	sub	r27, r27
    3936:	fd 01       	movw	r30, r26
    3938:	0d c0       	rjmp	.+26     	; 0x3954 <__udivmodsi4_ep>

0000393a <__udivmodsi4_loop>:
    393a:	aa 1f       	adc	r26, r26
    393c:	bb 1f       	adc	r27, r27
    393e:	ee 1f       	adc	r30, r30
    3940:	ff 1f       	adc	r31, r31
    3942:	a2 17       	cp	r26, r18
    3944:	b3 07       	cpc	r27, r19
    3946:	e4 07       	cpc	r30, r20
    3948:	f5 07       	cpc	r31, r21
    394a:	20 f0       	brcs	.+8      	; 0x3954 <__udivmodsi4_ep>
    394c:	a2 1b       	sub	r26, r18
    394e:	b3 0b       	sbc	r27, r19
    3950:	e4 0b       	sbc	r30, r20
    3952:	f5 0b       	sbc	r31, r21

00003954 <__udivmodsi4_ep>:
    3954:	66 1f       	adc	r22, r22
    3956:	77 1f       	adc	r23, r23
    3958:	88 1f       	adc	r24, r24
    395a:	99 1f       	adc	r25, r25
    395c:	1a 94       	dec	r1
    395e:	69 f7       	brne	.-38     	; 0x393a <__udivmodsi4_loop>
    3960:	60 95       	com	r22
    3962:	70 95       	com	r23
    3964:	80 95       	com	r24
    3966:	90 95       	com	r25
    3968:	9b 01       	movw	r18, r22
    396a:	ac 01       	movw	r20, r24
    396c:	bd 01       	movw	r22, r26
    396e:	cf 01       	movw	r24, r30
    3970:	08 95       	ret

00003972 <__udivmodhi4>:
    3972:	aa 1b       	sub	r26, r26
    3974:	bb 1b       	sub	r27, r27
    3976:	51 e1       	ldi	r21, 0x11	; 17
    3978:	07 c0       	rjmp	.+14     	; 0x3988 <__udivmodhi4_ep>

0000397a <__udivmodhi4_loop>:
    397a:	aa 1f       	adc	r26, r26
    397c:	bb 1f       	adc	r27, r27
    397e:	a6 17       	cp	r26, r22
    3980:	b7 07       	cpc	r27, r23
    3982:	10 f0       	brcs	.+4      	; 0x3988 <__udivmodhi4_ep>
    3984:	a6 1b       	sub	r26, r22
    3986:	b7 0b       	sbc	r27, r23

00003988 <__udivmodhi4_ep>:
    3988:	88 1f       	adc	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	5a 95       	dec	r21
    398e:	a9 f7       	brne	.-22     	; 0x397a <__udivmodhi4_loop>
    3990:	80 95       	com	r24
    3992:	90 95       	com	r25
    3994:	bc 01       	movw	r22, r24
    3996:	cd 01       	movw	r24, r26
    3998:	08 95       	ret

0000399a <strcat_P>:
    399a:	fb 01       	movw	r30, r22
    399c:	dc 01       	movw	r26, r24
    399e:	0d 90       	ld	r0, X+
    39a0:	00 20       	and	r0, r0
    39a2:	e9 f7       	brne	.-6      	; 0x399e <strcat_P+0x4>
    39a4:	11 97       	sbiw	r26, 0x01	; 1
    39a6:	05 90       	lpm	r0, Z+
    39a8:	0d 92       	st	X+, r0
    39aa:	00 20       	and	r0, r0
    39ac:	e1 f7       	brne	.-8      	; 0x39a6 <strcat_P+0xc>
    39ae:	08 95       	ret

000039b0 <strcpy_P>:
    39b0:	fb 01       	movw	r30, r22
    39b2:	dc 01       	movw	r26, r24
    39b4:	05 90       	lpm	r0, Z+
    39b6:	0d 92       	st	X+, r0
    39b8:	00 20       	and	r0, r0
    39ba:	e1 f7       	brne	.-8      	; 0x39b4 <strcpy_P+0x4>
    39bc:	08 95       	ret

000039be <__strlen_P>:
    39be:	fc 01       	movw	r30, r24
    39c0:	05 90       	lpm	r0, Z+
    39c2:	00 20       	and	r0, r0
    39c4:	e9 f7       	brne	.-6      	; 0x39c0 <__strlen_P+0x2>
    39c6:	80 95       	com	r24
    39c8:	90 95       	com	r25
    39ca:	8e 0f       	add	r24, r30
    39cc:	9f 1f       	adc	r25, r31
    39ce:	08 95       	ret

000039d0 <strcat>:
    39d0:	fb 01       	movw	r30, r22
    39d2:	dc 01       	movw	r26, r24
    39d4:	0d 90       	ld	r0, X+
    39d6:	00 20       	and	r0, r0
    39d8:	e9 f7       	brne	.-6      	; 0x39d4 <strcat+0x4>
    39da:	11 97       	sbiw	r26, 0x01	; 1
    39dc:	01 90       	ld	r0, Z+
    39de:	0d 92       	st	X+, r0
    39e0:	00 20       	and	r0, r0
    39e2:	e1 f7       	brne	.-8      	; 0x39dc <strcat+0xc>
    39e4:	08 95       	ret

000039e6 <__itoa_ncheck>:
    39e6:	bb 27       	eor	r27, r27
    39e8:	4a 30       	cpi	r20, 0x0A	; 10
    39ea:	31 f4       	brne	.+12     	; 0x39f8 <__itoa_ncheck+0x12>
    39ec:	99 23       	and	r25, r25
    39ee:	22 f4       	brpl	.+8      	; 0x39f8 <__itoa_ncheck+0x12>
    39f0:	bd e2       	ldi	r27, 0x2D	; 45
    39f2:	90 95       	com	r25
    39f4:	81 95       	neg	r24
    39f6:	9f 4f       	sbci	r25, 0xFF	; 255
    39f8:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__utoa_common>

000039fc <__ltoa_ncheck>:
    39fc:	bb 27       	eor	r27, r27
    39fe:	2a 30       	cpi	r18, 0x0A	; 10
    3a00:	51 f4       	brne	.+20     	; 0x3a16 <__ltoa_ncheck+0x1a>
    3a02:	99 23       	and	r25, r25
    3a04:	42 f4       	brpl	.+16     	; 0x3a16 <__ltoa_ncheck+0x1a>
    3a06:	bd e2       	ldi	r27, 0x2D	; 45
    3a08:	90 95       	com	r25
    3a0a:	80 95       	com	r24
    3a0c:	70 95       	com	r23
    3a0e:	61 95       	neg	r22
    3a10:	7f 4f       	sbci	r23, 0xFF	; 255
    3a12:	8f 4f       	sbci	r24, 0xFF	; 255
    3a14:	9f 4f       	sbci	r25, 0xFF	; 255
    3a16:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__ultoa_common>

00003a1a <__ultoa_ncheck>:
    3a1a:	bb 27       	eor	r27, r27

00003a1c <__ultoa_common>:
    3a1c:	fa 01       	movw	r30, r20
    3a1e:	a6 2f       	mov	r26, r22
    3a20:	62 17       	cp	r22, r18
    3a22:	71 05       	cpc	r23, r1
    3a24:	81 05       	cpc	r24, r1
    3a26:	91 05       	cpc	r25, r1
    3a28:	33 0b       	sbc	r19, r19
    3a2a:	30 fb       	bst	r19, 0
    3a2c:	66 f0       	brts	.+24     	; 0x3a46 <__ultoa_common+0x2a>
    3a2e:	aa 27       	eor	r26, r26
    3a30:	66 0f       	add	r22, r22
    3a32:	77 1f       	adc	r23, r23
    3a34:	88 1f       	adc	r24, r24
    3a36:	99 1f       	adc	r25, r25
    3a38:	aa 1f       	adc	r26, r26
    3a3a:	a2 17       	cp	r26, r18
    3a3c:	10 f0       	brcs	.+4      	; 0x3a42 <__ultoa_common+0x26>
    3a3e:	a2 1b       	sub	r26, r18
    3a40:	63 95       	inc	r22
    3a42:	38 50       	subi	r19, 0x08	; 8
    3a44:	a9 f7       	brne	.-22     	; 0x3a30 <__ultoa_common+0x14>
    3a46:	a0 5d       	subi	r26, 0xD0	; 208
    3a48:	aa 33       	cpi	r26, 0x3A	; 58
    3a4a:	08 f0       	brcs	.+2      	; 0x3a4e <__ultoa_common+0x32>
    3a4c:	a9 5d       	subi	r26, 0xD9	; 217
    3a4e:	a1 93       	st	Z+, r26
    3a50:	36 f7       	brtc	.-52     	; 0x3a1e <__ultoa_common+0x2>
    3a52:	b1 11       	cpse	r27, r1
    3a54:	b1 93       	st	Z+, r27
    3a56:	10 82       	st	Z, r1
    3a58:	ca 01       	movw	r24, r20
    3a5a:	0c 94 62 1f 	jmp	0x3ec4	; 0x3ec4 <strrev>

00003a5e <__utoa_ncheck>:
    3a5e:	bb 27       	eor	r27, r27

00003a60 <__utoa_common>:
    3a60:	fb 01       	movw	r30, r22
    3a62:	55 27       	eor	r21, r21
    3a64:	aa 27       	eor	r26, r26
    3a66:	88 0f       	add	r24, r24
    3a68:	99 1f       	adc	r25, r25
    3a6a:	aa 1f       	adc	r26, r26
    3a6c:	a4 17       	cp	r26, r20
    3a6e:	10 f0       	brcs	.+4      	; 0x3a74 <__utoa_common+0x14>
    3a70:	a4 1b       	sub	r26, r20
    3a72:	83 95       	inc	r24
    3a74:	50 51       	subi	r21, 0x10	; 16
    3a76:	b9 f7       	brne	.-18     	; 0x3a66 <__utoa_common+0x6>
    3a78:	a0 5d       	subi	r26, 0xD0	; 208
    3a7a:	aa 33       	cpi	r26, 0x3A	; 58
    3a7c:	08 f0       	brcs	.+2      	; 0x3a80 <__utoa_common+0x20>
    3a7e:	a9 5d       	subi	r26, 0xD9	; 217
    3a80:	a1 93       	st	Z+, r26
    3a82:	00 97       	sbiw	r24, 0x00	; 0
    3a84:	79 f7       	brne	.-34     	; 0x3a64 <__utoa_common+0x4>
    3a86:	b1 11       	cpse	r27, r1
    3a88:	b1 93       	st	Z+, r27
    3a8a:	11 92       	st	Z+, r1
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	0c 94 62 1f 	jmp	0x3ec4	; 0x3ec4 <strrev>

00003a92 <sprintf>:
    3a92:	ae e0       	ldi	r26, 0x0E	; 14
    3a94:	b0 e0       	ldi	r27, 0x00	; 0
    3a96:	ef e4       	ldi	r30, 0x4F	; 79
    3a98:	fd e1       	ldi	r31, 0x1D	; 29
    3a9a:	0c 94 58 20 	jmp	0x40b0	; 0x40b0 <__prologue_saves__+0x1c>
    3a9e:	0d 89       	ldd	r16, Y+21	; 0x15
    3aa0:	1e 89       	ldd	r17, Y+22	; 0x16
    3aa2:	86 e0       	ldi	r24, 0x06	; 6
    3aa4:	8c 83       	std	Y+4, r24	; 0x04
    3aa6:	1a 83       	std	Y+2, r17	; 0x02
    3aa8:	09 83       	std	Y+1, r16	; 0x01
    3aaa:	8f ef       	ldi	r24, 0xFF	; 255
    3aac:	9f e7       	ldi	r25, 0x7F	; 127
    3aae:	9e 83       	std	Y+6, r25	; 0x06
    3ab0:	8d 83       	std	Y+5, r24	; 0x05
    3ab2:	ae 01       	movw	r20, r28
    3ab4:	47 5e       	subi	r20, 0xE7	; 231
    3ab6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ab8:	6f 89       	ldd	r22, Y+23	; 0x17
    3aba:	78 8d       	ldd	r23, Y+24	; 0x18
    3abc:	ce 01       	movw	r24, r28
    3abe:	01 96       	adiw	r24, 0x01	; 1
    3ac0:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <vfprintf>
    3ac4:	ef 81       	ldd	r30, Y+7	; 0x07
    3ac6:	f8 85       	ldd	r31, Y+8	; 0x08
    3ac8:	e0 0f       	add	r30, r16
    3aca:	f1 1f       	adc	r31, r17
    3acc:	10 82       	st	Z, r1
    3ace:	2e 96       	adiw	r28, 0x0e	; 14
    3ad0:	e4 e0       	ldi	r30, 0x04	; 4
    3ad2:	0c 94 74 20 	jmp	0x40e8	; 0x40e8 <__epilogue_restores__+0x1c>

00003ad6 <vfprintf>:
    3ad6:	ab e0       	ldi	r26, 0x0B	; 11
    3ad8:	b0 e0       	ldi	r27, 0x00	; 0
    3ada:	e1 e7       	ldi	r30, 0x71	; 113
    3adc:	fd e1       	ldi	r31, 0x1D	; 29
    3ade:	0c 94 4a 20 	jmp	0x4094	; 0x4094 <__prologue_saves__>
    3ae2:	6c 01       	movw	r12, r24
    3ae4:	7b 01       	movw	r14, r22
    3ae6:	8a 01       	movw	r16, r20
    3ae8:	fc 01       	movw	r30, r24
    3aea:	17 82       	std	Z+7, r1	; 0x07
    3aec:	16 82       	std	Z+6, r1	; 0x06
    3aee:	83 81       	ldd	r24, Z+3	; 0x03
    3af0:	81 ff       	sbrs	r24, 1
    3af2:	cc c1       	rjmp	.+920    	; 0x3e8c <vfprintf+0x3b6>
    3af4:	ce 01       	movw	r24, r28
    3af6:	01 96       	adiw	r24, 0x01	; 1
    3af8:	3c 01       	movw	r6, r24
    3afa:	f6 01       	movw	r30, r12
    3afc:	93 81       	ldd	r25, Z+3	; 0x03
    3afe:	f7 01       	movw	r30, r14
    3b00:	93 fd       	sbrc	r25, 3
    3b02:	85 91       	lpm	r24, Z+
    3b04:	93 ff       	sbrs	r25, 3
    3b06:	81 91       	ld	r24, Z+
    3b08:	7f 01       	movw	r14, r30
    3b0a:	88 23       	and	r24, r24
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <vfprintf+0x3a>
    3b0e:	ba c1       	rjmp	.+884    	; 0x3e84 <vfprintf+0x3ae>
    3b10:	85 32       	cpi	r24, 0x25	; 37
    3b12:	39 f4       	brne	.+14     	; 0x3b22 <vfprintf+0x4c>
    3b14:	93 fd       	sbrc	r25, 3
    3b16:	85 91       	lpm	r24, Z+
    3b18:	93 ff       	sbrs	r25, 3
    3b1a:	81 91       	ld	r24, Z+
    3b1c:	7f 01       	movw	r14, r30
    3b1e:	85 32       	cpi	r24, 0x25	; 37
    3b20:	29 f4       	brne	.+10     	; 0x3b2c <vfprintf+0x56>
    3b22:	b6 01       	movw	r22, r12
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <fputc>
    3b2a:	e7 cf       	rjmp	.-50     	; 0x3afa <vfprintf+0x24>
    3b2c:	91 2c       	mov	r9, r1
    3b2e:	21 2c       	mov	r2, r1
    3b30:	31 2c       	mov	r3, r1
    3b32:	ff e1       	ldi	r31, 0x1F	; 31
    3b34:	f3 15       	cp	r31, r3
    3b36:	d8 f0       	brcs	.+54     	; 0x3b6e <vfprintf+0x98>
    3b38:	8b 32       	cpi	r24, 0x2B	; 43
    3b3a:	79 f0       	breq	.+30     	; 0x3b5a <vfprintf+0x84>
    3b3c:	38 f4       	brcc	.+14     	; 0x3b4c <vfprintf+0x76>
    3b3e:	80 32       	cpi	r24, 0x20	; 32
    3b40:	79 f0       	breq	.+30     	; 0x3b60 <vfprintf+0x8a>
    3b42:	83 32       	cpi	r24, 0x23	; 35
    3b44:	a1 f4       	brne	.+40     	; 0x3b6e <vfprintf+0x98>
    3b46:	23 2d       	mov	r18, r3
    3b48:	20 61       	ori	r18, 0x10	; 16
    3b4a:	1d c0       	rjmp	.+58     	; 0x3b86 <vfprintf+0xb0>
    3b4c:	8d 32       	cpi	r24, 0x2D	; 45
    3b4e:	61 f0       	breq	.+24     	; 0x3b68 <vfprintf+0x92>
    3b50:	80 33       	cpi	r24, 0x30	; 48
    3b52:	69 f4       	brne	.+26     	; 0x3b6e <vfprintf+0x98>
    3b54:	23 2d       	mov	r18, r3
    3b56:	21 60       	ori	r18, 0x01	; 1
    3b58:	16 c0       	rjmp	.+44     	; 0x3b86 <vfprintf+0xb0>
    3b5a:	83 2d       	mov	r24, r3
    3b5c:	82 60       	ori	r24, 0x02	; 2
    3b5e:	38 2e       	mov	r3, r24
    3b60:	e3 2d       	mov	r30, r3
    3b62:	e4 60       	ori	r30, 0x04	; 4
    3b64:	3e 2e       	mov	r3, r30
    3b66:	2a c0       	rjmp	.+84     	; 0x3bbc <vfprintf+0xe6>
    3b68:	f3 2d       	mov	r31, r3
    3b6a:	f8 60       	ori	r31, 0x08	; 8
    3b6c:	1d c0       	rjmp	.+58     	; 0x3ba8 <vfprintf+0xd2>
    3b6e:	37 fc       	sbrc	r3, 7
    3b70:	2d c0       	rjmp	.+90     	; 0x3bcc <vfprintf+0xf6>
    3b72:	20 ed       	ldi	r18, 0xD0	; 208
    3b74:	28 0f       	add	r18, r24
    3b76:	2a 30       	cpi	r18, 0x0A	; 10
    3b78:	40 f0       	brcs	.+16     	; 0x3b8a <vfprintf+0xb4>
    3b7a:	8e 32       	cpi	r24, 0x2E	; 46
    3b7c:	b9 f4       	brne	.+46     	; 0x3bac <vfprintf+0xd6>
    3b7e:	36 fc       	sbrc	r3, 6
    3b80:	81 c1       	rjmp	.+770    	; 0x3e84 <vfprintf+0x3ae>
    3b82:	23 2d       	mov	r18, r3
    3b84:	20 64       	ori	r18, 0x40	; 64
    3b86:	32 2e       	mov	r3, r18
    3b88:	19 c0       	rjmp	.+50     	; 0x3bbc <vfprintf+0xe6>
    3b8a:	36 fe       	sbrs	r3, 6
    3b8c:	06 c0       	rjmp	.+12     	; 0x3b9a <vfprintf+0xc4>
    3b8e:	8a e0       	ldi	r24, 0x0A	; 10
    3b90:	98 9e       	mul	r9, r24
    3b92:	20 0d       	add	r18, r0
    3b94:	11 24       	eor	r1, r1
    3b96:	92 2e       	mov	r9, r18
    3b98:	11 c0       	rjmp	.+34     	; 0x3bbc <vfprintf+0xe6>
    3b9a:	ea e0       	ldi	r30, 0x0A	; 10
    3b9c:	2e 9e       	mul	r2, r30
    3b9e:	20 0d       	add	r18, r0
    3ba0:	11 24       	eor	r1, r1
    3ba2:	22 2e       	mov	r2, r18
    3ba4:	f3 2d       	mov	r31, r3
    3ba6:	f0 62       	ori	r31, 0x20	; 32
    3ba8:	3f 2e       	mov	r3, r31
    3baa:	08 c0       	rjmp	.+16     	; 0x3bbc <vfprintf+0xe6>
    3bac:	8c 36       	cpi	r24, 0x6C	; 108
    3bae:	21 f4       	brne	.+8      	; 0x3bb8 <vfprintf+0xe2>
    3bb0:	83 2d       	mov	r24, r3
    3bb2:	80 68       	ori	r24, 0x80	; 128
    3bb4:	38 2e       	mov	r3, r24
    3bb6:	02 c0       	rjmp	.+4      	; 0x3bbc <vfprintf+0xe6>
    3bb8:	88 36       	cpi	r24, 0x68	; 104
    3bba:	41 f4       	brne	.+16     	; 0x3bcc <vfprintf+0xf6>
    3bbc:	f7 01       	movw	r30, r14
    3bbe:	93 fd       	sbrc	r25, 3
    3bc0:	85 91       	lpm	r24, Z+
    3bc2:	93 ff       	sbrs	r25, 3
    3bc4:	81 91       	ld	r24, Z+
    3bc6:	7f 01       	movw	r14, r30
    3bc8:	81 11       	cpse	r24, r1
    3bca:	b3 cf       	rjmp	.-154    	; 0x3b32 <vfprintf+0x5c>
    3bcc:	98 2f       	mov	r25, r24
    3bce:	9f 7d       	andi	r25, 0xDF	; 223
    3bd0:	95 54       	subi	r25, 0x45	; 69
    3bd2:	93 30       	cpi	r25, 0x03	; 3
    3bd4:	28 f4       	brcc	.+10     	; 0x3be0 <vfprintf+0x10a>
    3bd6:	0c 5f       	subi	r16, 0xFC	; 252
    3bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bda:	9f e3       	ldi	r25, 0x3F	; 63
    3bdc:	99 83       	std	Y+1, r25	; 0x01
    3bde:	0d c0       	rjmp	.+26     	; 0x3bfa <vfprintf+0x124>
    3be0:	83 36       	cpi	r24, 0x63	; 99
    3be2:	31 f0       	breq	.+12     	; 0x3bf0 <vfprintf+0x11a>
    3be4:	83 37       	cpi	r24, 0x73	; 115
    3be6:	71 f0       	breq	.+28     	; 0x3c04 <vfprintf+0x12e>
    3be8:	83 35       	cpi	r24, 0x53	; 83
    3bea:	09 f0       	breq	.+2      	; 0x3bee <vfprintf+0x118>
    3bec:	59 c0       	rjmp	.+178    	; 0x3ca0 <vfprintf+0x1ca>
    3bee:	21 c0       	rjmp	.+66     	; 0x3c32 <vfprintf+0x15c>
    3bf0:	f8 01       	movw	r30, r16
    3bf2:	80 81       	ld	r24, Z
    3bf4:	89 83       	std	Y+1, r24	; 0x01
    3bf6:	0e 5f       	subi	r16, 0xFE	; 254
    3bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bfa:	88 24       	eor	r8, r8
    3bfc:	83 94       	inc	r8
    3bfe:	91 2c       	mov	r9, r1
    3c00:	53 01       	movw	r10, r6
    3c02:	13 c0       	rjmp	.+38     	; 0x3c2a <vfprintf+0x154>
    3c04:	28 01       	movw	r4, r16
    3c06:	f2 e0       	ldi	r31, 0x02	; 2
    3c08:	4f 0e       	add	r4, r31
    3c0a:	51 1c       	adc	r5, r1
    3c0c:	f8 01       	movw	r30, r16
    3c0e:	a0 80       	ld	r10, Z
    3c10:	b1 80       	ldd	r11, Z+1	; 0x01
    3c12:	36 fe       	sbrs	r3, 6
    3c14:	03 c0       	rjmp	.+6      	; 0x3c1c <vfprintf+0x146>
    3c16:	69 2d       	mov	r22, r9
    3c18:	70 e0       	ldi	r23, 0x00	; 0
    3c1a:	02 c0       	rjmp	.+4      	; 0x3c20 <vfprintf+0x14a>
    3c1c:	6f ef       	ldi	r22, 0xFF	; 255
    3c1e:	7f ef       	ldi	r23, 0xFF	; 255
    3c20:	c5 01       	movw	r24, r10
    3c22:	0e 94 57 1f 	call	0x3eae	; 0x3eae <strnlen>
    3c26:	4c 01       	movw	r8, r24
    3c28:	82 01       	movw	r16, r4
    3c2a:	f3 2d       	mov	r31, r3
    3c2c:	ff 77       	andi	r31, 0x7F	; 127
    3c2e:	3f 2e       	mov	r3, r31
    3c30:	16 c0       	rjmp	.+44     	; 0x3c5e <vfprintf+0x188>
    3c32:	28 01       	movw	r4, r16
    3c34:	22 e0       	ldi	r18, 0x02	; 2
    3c36:	42 0e       	add	r4, r18
    3c38:	51 1c       	adc	r5, r1
    3c3a:	f8 01       	movw	r30, r16
    3c3c:	a0 80       	ld	r10, Z
    3c3e:	b1 80       	ldd	r11, Z+1	; 0x01
    3c40:	36 fe       	sbrs	r3, 6
    3c42:	03 c0       	rjmp	.+6      	; 0x3c4a <vfprintf+0x174>
    3c44:	69 2d       	mov	r22, r9
    3c46:	70 e0       	ldi	r23, 0x00	; 0
    3c48:	02 c0       	rjmp	.+4      	; 0x3c4e <vfprintf+0x178>
    3c4a:	6f ef       	ldi	r22, 0xFF	; 255
    3c4c:	7f ef       	ldi	r23, 0xFF	; 255
    3c4e:	c5 01       	movw	r24, r10
    3c50:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <strnlen_P>
    3c54:	4c 01       	movw	r8, r24
    3c56:	f3 2d       	mov	r31, r3
    3c58:	f0 68       	ori	r31, 0x80	; 128
    3c5a:	3f 2e       	mov	r3, r31
    3c5c:	82 01       	movw	r16, r4
    3c5e:	33 fc       	sbrc	r3, 3
    3c60:	1b c0       	rjmp	.+54     	; 0x3c98 <vfprintf+0x1c2>
    3c62:	82 2d       	mov	r24, r2
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	88 16       	cp	r8, r24
    3c68:	99 06       	cpc	r9, r25
    3c6a:	b0 f4       	brcc	.+44     	; 0x3c98 <vfprintf+0x1c2>
    3c6c:	b6 01       	movw	r22, r12
    3c6e:	80 e2       	ldi	r24, 0x20	; 32
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <fputc>
    3c76:	2a 94       	dec	r2
    3c78:	f4 cf       	rjmp	.-24     	; 0x3c62 <vfprintf+0x18c>
    3c7a:	f5 01       	movw	r30, r10
    3c7c:	37 fc       	sbrc	r3, 7
    3c7e:	85 91       	lpm	r24, Z+
    3c80:	37 fe       	sbrs	r3, 7
    3c82:	81 91       	ld	r24, Z+
    3c84:	5f 01       	movw	r10, r30
    3c86:	b6 01       	movw	r22, r12
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <fputc>
    3c8e:	21 10       	cpse	r2, r1
    3c90:	2a 94       	dec	r2
    3c92:	21 e0       	ldi	r18, 0x01	; 1
    3c94:	82 1a       	sub	r8, r18
    3c96:	91 08       	sbc	r9, r1
    3c98:	81 14       	cp	r8, r1
    3c9a:	91 04       	cpc	r9, r1
    3c9c:	71 f7       	brne	.-36     	; 0x3c7a <vfprintf+0x1a4>
    3c9e:	e8 c0       	rjmp	.+464    	; 0x3e70 <vfprintf+0x39a>
    3ca0:	84 36       	cpi	r24, 0x64	; 100
    3ca2:	11 f0       	breq	.+4      	; 0x3ca8 <vfprintf+0x1d2>
    3ca4:	89 36       	cpi	r24, 0x69	; 105
    3ca6:	41 f5       	brne	.+80     	; 0x3cf8 <vfprintf+0x222>
    3ca8:	f8 01       	movw	r30, r16
    3caa:	37 fe       	sbrs	r3, 7
    3cac:	07 c0       	rjmp	.+14     	; 0x3cbc <vfprintf+0x1e6>
    3cae:	60 81       	ld	r22, Z
    3cb0:	71 81       	ldd	r23, Z+1	; 0x01
    3cb2:	82 81       	ldd	r24, Z+2	; 0x02
    3cb4:	93 81       	ldd	r25, Z+3	; 0x03
    3cb6:	0c 5f       	subi	r16, 0xFC	; 252
    3cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cba:	08 c0       	rjmp	.+16     	; 0x3ccc <vfprintf+0x1f6>
    3cbc:	60 81       	ld	r22, Z
    3cbe:	71 81       	ldd	r23, Z+1	; 0x01
    3cc0:	07 2e       	mov	r0, r23
    3cc2:	00 0c       	add	r0, r0
    3cc4:	88 0b       	sbc	r24, r24
    3cc6:	99 0b       	sbc	r25, r25
    3cc8:	0e 5f       	subi	r16, 0xFE	; 254
    3cca:	1f 4f       	sbci	r17, 0xFF	; 255
    3ccc:	f3 2d       	mov	r31, r3
    3cce:	ff 76       	andi	r31, 0x6F	; 111
    3cd0:	3f 2e       	mov	r3, r31
    3cd2:	97 ff       	sbrs	r25, 7
    3cd4:	09 c0       	rjmp	.+18     	; 0x3ce8 <vfprintf+0x212>
    3cd6:	90 95       	com	r25
    3cd8:	80 95       	com	r24
    3cda:	70 95       	com	r23
    3cdc:	61 95       	neg	r22
    3cde:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce4:	f0 68       	ori	r31, 0x80	; 128
    3ce6:	3f 2e       	mov	r3, r31
    3ce8:	2a e0       	ldi	r18, 0x0A	; 10
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	a3 01       	movw	r20, r6
    3cee:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__ultoa_invert>
    3cf2:	88 2e       	mov	r8, r24
    3cf4:	86 18       	sub	r8, r6
    3cf6:	45 c0       	rjmp	.+138    	; 0x3d82 <vfprintf+0x2ac>
    3cf8:	85 37       	cpi	r24, 0x75	; 117
    3cfa:	31 f4       	brne	.+12     	; 0x3d08 <vfprintf+0x232>
    3cfc:	23 2d       	mov	r18, r3
    3cfe:	2f 7e       	andi	r18, 0xEF	; 239
    3d00:	b2 2e       	mov	r11, r18
    3d02:	2a e0       	ldi	r18, 0x0A	; 10
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	25 c0       	rjmp	.+74     	; 0x3d52 <vfprintf+0x27c>
    3d08:	93 2d       	mov	r25, r3
    3d0a:	99 7f       	andi	r25, 0xF9	; 249
    3d0c:	b9 2e       	mov	r11, r25
    3d0e:	8f 36       	cpi	r24, 0x6F	; 111
    3d10:	c1 f0       	breq	.+48     	; 0x3d42 <vfprintf+0x26c>
    3d12:	18 f4       	brcc	.+6      	; 0x3d1a <vfprintf+0x244>
    3d14:	88 35       	cpi	r24, 0x58	; 88
    3d16:	79 f0       	breq	.+30     	; 0x3d36 <vfprintf+0x260>
    3d18:	b5 c0       	rjmp	.+362    	; 0x3e84 <vfprintf+0x3ae>
    3d1a:	80 37       	cpi	r24, 0x70	; 112
    3d1c:	19 f0       	breq	.+6      	; 0x3d24 <vfprintf+0x24e>
    3d1e:	88 37       	cpi	r24, 0x78	; 120
    3d20:	21 f0       	breq	.+8      	; 0x3d2a <vfprintf+0x254>
    3d22:	b0 c0       	rjmp	.+352    	; 0x3e84 <vfprintf+0x3ae>
    3d24:	e9 2f       	mov	r30, r25
    3d26:	e0 61       	ori	r30, 0x10	; 16
    3d28:	be 2e       	mov	r11, r30
    3d2a:	b4 fe       	sbrs	r11, 4
    3d2c:	0d c0       	rjmp	.+26     	; 0x3d48 <vfprintf+0x272>
    3d2e:	fb 2d       	mov	r31, r11
    3d30:	f4 60       	ori	r31, 0x04	; 4
    3d32:	bf 2e       	mov	r11, r31
    3d34:	09 c0       	rjmp	.+18     	; 0x3d48 <vfprintf+0x272>
    3d36:	34 fe       	sbrs	r3, 4
    3d38:	0a c0       	rjmp	.+20     	; 0x3d4e <vfprintf+0x278>
    3d3a:	29 2f       	mov	r18, r25
    3d3c:	26 60       	ori	r18, 0x06	; 6
    3d3e:	b2 2e       	mov	r11, r18
    3d40:	06 c0       	rjmp	.+12     	; 0x3d4e <vfprintf+0x278>
    3d42:	28 e0       	ldi	r18, 0x08	; 8
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	05 c0       	rjmp	.+10     	; 0x3d52 <vfprintf+0x27c>
    3d48:	20 e1       	ldi	r18, 0x10	; 16
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	02 c0       	rjmp	.+4      	; 0x3d52 <vfprintf+0x27c>
    3d4e:	20 e1       	ldi	r18, 0x10	; 16
    3d50:	32 e0       	ldi	r19, 0x02	; 2
    3d52:	f8 01       	movw	r30, r16
    3d54:	b7 fe       	sbrs	r11, 7
    3d56:	07 c0       	rjmp	.+14     	; 0x3d66 <vfprintf+0x290>
    3d58:	60 81       	ld	r22, Z
    3d5a:	71 81       	ldd	r23, Z+1	; 0x01
    3d5c:	82 81       	ldd	r24, Z+2	; 0x02
    3d5e:	93 81       	ldd	r25, Z+3	; 0x03
    3d60:	0c 5f       	subi	r16, 0xFC	; 252
    3d62:	1f 4f       	sbci	r17, 0xFF	; 255
    3d64:	06 c0       	rjmp	.+12     	; 0x3d72 <vfprintf+0x29c>
    3d66:	60 81       	ld	r22, Z
    3d68:	71 81       	ldd	r23, Z+1	; 0x01
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	0e 5f       	subi	r16, 0xFE	; 254
    3d70:	1f 4f       	sbci	r17, 0xFF	; 255
    3d72:	a3 01       	movw	r20, r6
    3d74:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__ultoa_invert>
    3d78:	88 2e       	mov	r8, r24
    3d7a:	86 18       	sub	r8, r6
    3d7c:	fb 2d       	mov	r31, r11
    3d7e:	ff 77       	andi	r31, 0x7F	; 127
    3d80:	3f 2e       	mov	r3, r31
    3d82:	36 fe       	sbrs	r3, 6
    3d84:	0d c0       	rjmp	.+26     	; 0x3da0 <vfprintf+0x2ca>
    3d86:	23 2d       	mov	r18, r3
    3d88:	2e 7f       	andi	r18, 0xFE	; 254
    3d8a:	a2 2e       	mov	r10, r18
    3d8c:	89 14       	cp	r8, r9
    3d8e:	58 f4       	brcc	.+22     	; 0x3da6 <vfprintf+0x2d0>
    3d90:	34 fe       	sbrs	r3, 4
    3d92:	0b c0       	rjmp	.+22     	; 0x3daa <vfprintf+0x2d4>
    3d94:	32 fc       	sbrc	r3, 2
    3d96:	09 c0       	rjmp	.+18     	; 0x3daa <vfprintf+0x2d4>
    3d98:	83 2d       	mov	r24, r3
    3d9a:	8e 7e       	andi	r24, 0xEE	; 238
    3d9c:	a8 2e       	mov	r10, r24
    3d9e:	05 c0       	rjmp	.+10     	; 0x3daa <vfprintf+0x2d4>
    3da0:	b8 2c       	mov	r11, r8
    3da2:	a3 2c       	mov	r10, r3
    3da4:	03 c0       	rjmp	.+6      	; 0x3dac <vfprintf+0x2d6>
    3da6:	b8 2c       	mov	r11, r8
    3da8:	01 c0       	rjmp	.+2      	; 0x3dac <vfprintf+0x2d6>
    3daa:	b9 2c       	mov	r11, r9
    3dac:	a4 fe       	sbrs	r10, 4
    3dae:	0f c0       	rjmp	.+30     	; 0x3dce <vfprintf+0x2f8>
    3db0:	fe 01       	movw	r30, r28
    3db2:	e8 0d       	add	r30, r8
    3db4:	f1 1d       	adc	r31, r1
    3db6:	80 81       	ld	r24, Z
    3db8:	80 33       	cpi	r24, 0x30	; 48
    3dba:	21 f4       	brne	.+8      	; 0x3dc4 <vfprintf+0x2ee>
    3dbc:	9a 2d       	mov	r25, r10
    3dbe:	99 7e       	andi	r25, 0xE9	; 233
    3dc0:	a9 2e       	mov	r10, r25
    3dc2:	09 c0       	rjmp	.+18     	; 0x3dd6 <vfprintf+0x300>
    3dc4:	a2 fe       	sbrs	r10, 2
    3dc6:	06 c0       	rjmp	.+12     	; 0x3dd4 <vfprintf+0x2fe>
    3dc8:	b3 94       	inc	r11
    3dca:	b3 94       	inc	r11
    3dcc:	04 c0       	rjmp	.+8      	; 0x3dd6 <vfprintf+0x300>
    3dce:	8a 2d       	mov	r24, r10
    3dd0:	86 78       	andi	r24, 0x86	; 134
    3dd2:	09 f0       	breq	.+2      	; 0x3dd6 <vfprintf+0x300>
    3dd4:	b3 94       	inc	r11
    3dd6:	a3 fc       	sbrc	r10, 3
    3dd8:	11 c0       	rjmp	.+34     	; 0x3dfc <vfprintf+0x326>
    3dda:	a0 fe       	sbrs	r10, 0
    3ddc:	06 c0       	rjmp	.+12     	; 0x3dea <vfprintf+0x314>
    3dde:	b2 14       	cp	r11, r2
    3de0:	88 f4       	brcc	.+34     	; 0x3e04 <vfprintf+0x32e>
    3de2:	28 0c       	add	r2, r8
    3de4:	92 2c       	mov	r9, r2
    3de6:	9b 18       	sub	r9, r11
    3de8:	0e c0       	rjmp	.+28     	; 0x3e06 <vfprintf+0x330>
    3dea:	b2 14       	cp	r11, r2
    3dec:	60 f4       	brcc	.+24     	; 0x3e06 <vfprintf+0x330>
    3dee:	b6 01       	movw	r22, r12
    3df0:	80 e2       	ldi	r24, 0x20	; 32
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <fputc>
    3df8:	b3 94       	inc	r11
    3dfa:	f7 cf       	rjmp	.-18     	; 0x3dea <vfprintf+0x314>
    3dfc:	b2 14       	cp	r11, r2
    3dfe:	18 f4       	brcc	.+6      	; 0x3e06 <vfprintf+0x330>
    3e00:	2b 18       	sub	r2, r11
    3e02:	02 c0       	rjmp	.+4      	; 0x3e08 <vfprintf+0x332>
    3e04:	98 2c       	mov	r9, r8
    3e06:	21 2c       	mov	r2, r1
    3e08:	a4 fe       	sbrs	r10, 4
    3e0a:	10 c0       	rjmp	.+32     	; 0x3e2c <vfprintf+0x356>
    3e0c:	b6 01       	movw	r22, r12
    3e0e:	80 e3       	ldi	r24, 0x30	; 48
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <fputc>
    3e16:	a2 fe       	sbrs	r10, 2
    3e18:	17 c0       	rjmp	.+46     	; 0x3e48 <vfprintf+0x372>
    3e1a:	a1 fc       	sbrc	r10, 1
    3e1c:	03 c0       	rjmp	.+6      	; 0x3e24 <vfprintf+0x34e>
    3e1e:	88 e7       	ldi	r24, 0x78	; 120
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	02 c0       	rjmp	.+4      	; 0x3e28 <vfprintf+0x352>
    3e24:	88 e5       	ldi	r24, 0x58	; 88
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	b6 01       	movw	r22, r12
    3e2a:	0c c0       	rjmp	.+24     	; 0x3e44 <vfprintf+0x36e>
    3e2c:	8a 2d       	mov	r24, r10
    3e2e:	86 78       	andi	r24, 0x86	; 134
    3e30:	59 f0       	breq	.+22     	; 0x3e48 <vfprintf+0x372>
    3e32:	a1 fe       	sbrs	r10, 1
    3e34:	02 c0       	rjmp	.+4      	; 0x3e3a <vfprintf+0x364>
    3e36:	8b e2       	ldi	r24, 0x2B	; 43
    3e38:	01 c0       	rjmp	.+2      	; 0x3e3c <vfprintf+0x366>
    3e3a:	80 e2       	ldi	r24, 0x20	; 32
    3e3c:	a7 fc       	sbrc	r10, 7
    3e3e:	8d e2       	ldi	r24, 0x2D	; 45
    3e40:	b6 01       	movw	r22, r12
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <fputc>
    3e48:	89 14       	cp	r8, r9
    3e4a:	38 f4       	brcc	.+14     	; 0x3e5a <vfprintf+0x384>
    3e4c:	b6 01       	movw	r22, r12
    3e4e:	80 e3       	ldi	r24, 0x30	; 48
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <fputc>
    3e56:	9a 94       	dec	r9
    3e58:	f7 cf       	rjmp	.-18     	; 0x3e48 <vfprintf+0x372>
    3e5a:	8a 94       	dec	r8
    3e5c:	f3 01       	movw	r30, r6
    3e5e:	e8 0d       	add	r30, r8
    3e60:	f1 1d       	adc	r31, r1
    3e62:	80 81       	ld	r24, Z
    3e64:	b6 01       	movw	r22, r12
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <fputc>
    3e6c:	81 10       	cpse	r8, r1
    3e6e:	f5 cf       	rjmp	.-22     	; 0x3e5a <vfprintf+0x384>
    3e70:	22 20       	and	r2, r2
    3e72:	09 f4       	brne	.+2      	; 0x3e76 <vfprintf+0x3a0>
    3e74:	42 ce       	rjmp	.-892    	; 0x3afa <vfprintf+0x24>
    3e76:	b6 01       	movw	r22, r12
    3e78:	80 e2       	ldi	r24, 0x20	; 32
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <fputc>
    3e80:	2a 94       	dec	r2
    3e82:	f6 cf       	rjmp	.-20     	; 0x3e70 <vfprintf+0x39a>
    3e84:	f6 01       	movw	r30, r12
    3e86:	86 81       	ldd	r24, Z+6	; 0x06
    3e88:	97 81       	ldd	r25, Z+7	; 0x07
    3e8a:	02 c0       	rjmp	.+4      	; 0x3e90 <vfprintf+0x3ba>
    3e8c:	8f ef       	ldi	r24, 0xFF	; 255
    3e8e:	9f ef       	ldi	r25, 0xFF	; 255
    3e90:	2b 96       	adiw	r28, 0x0b	; 11
    3e92:	e2 e1       	ldi	r30, 0x12	; 18
    3e94:	0c 94 66 20 	jmp	0x40cc	; 0x40cc <__epilogue_restores__>

00003e98 <strnlen_P>:
    3e98:	fc 01       	movw	r30, r24
    3e9a:	05 90       	lpm	r0, Z+
    3e9c:	61 50       	subi	r22, 0x01	; 1
    3e9e:	70 40       	sbci	r23, 0x00	; 0
    3ea0:	01 10       	cpse	r0, r1
    3ea2:	d8 f7       	brcc	.-10     	; 0x3e9a <strnlen_P+0x2>
    3ea4:	80 95       	com	r24
    3ea6:	90 95       	com	r25
    3ea8:	8e 0f       	add	r24, r30
    3eaa:	9f 1f       	adc	r25, r31
    3eac:	08 95       	ret

00003eae <strnlen>:
    3eae:	fc 01       	movw	r30, r24
    3eb0:	61 50       	subi	r22, 0x01	; 1
    3eb2:	70 40       	sbci	r23, 0x00	; 0
    3eb4:	01 90       	ld	r0, Z+
    3eb6:	01 10       	cpse	r0, r1
    3eb8:	d8 f7       	brcc	.-10     	; 0x3eb0 <strnlen+0x2>
    3eba:	80 95       	com	r24
    3ebc:	90 95       	com	r25
    3ebe:	8e 0f       	add	r24, r30
    3ec0:	9f 1f       	adc	r25, r31
    3ec2:	08 95       	ret

00003ec4 <strrev>:
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	fc 01       	movw	r30, r24
    3ec8:	67 2f       	mov	r22, r23
    3eca:	71 91       	ld	r23, Z+
    3ecc:	77 23       	and	r23, r23
    3ece:	e1 f7       	brne	.-8      	; 0x3ec8 <strrev+0x4>
    3ed0:	32 97       	sbiw	r30, 0x02	; 2
    3ed2:	04 c0       	rjmp	.+8      	; 0x3edc <strrev+0x18>
    3ed4:	7c 91       	ld	r23, X
    3ed6:	6d 93       	st	X+, r22
    3ed8:	70 83       	st	Z, r23
    3eda:	62 91       	ld	r22, -Z
    3edc:	ae 17       	cp	r26, r30
    3ede:	bf 07       	cpc	r27, r31
    3ee0:	c8 f3       	brcs	.-14     	; 0x3ed4 <strrev+0x10>
    3ee2:	08 95       	ret

00003ee4 <fputc>:
    3ee4:	0f 93       	push	r16
    3ee6:	1f 93       	push	r17
    3ee8:	cf 93       	push	r28
    3eea:	df 93       	push	r29
    3eec:	fb 01       	movw	r30, r22
    3eee:	23 81       	ldd	r18, Z+3	; 0x03
    3ef0:	21 fd       	sbrc	r18, 1
    3ef2:	03 c0       	rjmp	.+6      	; 0x3efa <fputc+0x16>
    3ef4:	8f ef       	ldi	r24, 0xFF	; 255
    3ef6:	9f ef       	ldi	r25, 0xFF	; 255
    3ef8:	2c c0       	rjmp	.+88     	; 0x3f52 <fputc+0x6e>
    3efa:	22 ff       	sbrs	r18, 2
    3efc:	16 c0       	rjmp	.+44     	; 0x3f2a <fputc+0x46>
    3efe:	46 81       	ldd	r20, Z+6	; 0x06
    3f00:	57 81       	ldd	r21, Z+7	; 0x07
    3f02:	24 81       	ldd	r18, Z+4	; 0x04
    3f04:	35 81       	ldd	r19, Z+5	; 0x05
    3f06:	42 17       	cp	r20, r18
    3f08:	53 07       	cpc	r21, r19
    3f0a:	44 f4       	brge	.+16     	; 0x3f1c <fputc+0x38>
    3f0c:	a0 81       	ld	r26, Z
    3f0e:	b1 81       	ldd	r27, Z+1	; 0x01
    3f10:	9d 01       	movw	r18, r26
    3f12:	2f 5f       	subi	r18, 0xFF	; 255
    3f14:	3f 4f       	sbci	r19, 0xFF	; 255
    3f16:	31 83       	std	Z+1, r19	; 0x01
    3f18:	20 83       	st	Z, r18
    3f1a:	8c 93       	st	X, r24
    3f1c:	26 81       	ldd	r18, Z+6	; 0x06
    3f1e:	37 81       	ldd	r19, Z+7	; 0x07
    3f20:	2f 5f       	subi	r18, 0xFF	; 255
    3f22:	3f 4f       	sbci	r19, 0xFF	; 255
    3f24:	37 83       	std	Z+7, r19	; 0x07
    3f26:	26 83       	std	Z+6, r18	; 0x06
    3f28:	14 c0       	rjmp	.+40     	; 0x3f52 <fputc+0x6e>
    3f2a:	8b 01       	movw	r16, r22
    3f2c:	ec 01       	movw	r28, r24
    3f2e:	fb 01       	movw	r30, r22
    3f30:	00 84       	ldd	r0, Z+8	; 0x08
    3f32:	f1 85       	ldd	r31, Z+9	; 0x09
    3f34:	e0 2d       	mov	r30, r0
    3f36:	09 95       	icall
    3f38:	89 2b       	or	r24, r25
    3f3a:	e1 f6       	brne	.-72     	; 0x3ef4 <fputc+0x10>
    3f3c:	d8 01       	movw	r26, r16
    3f3e:	16 96       	adiw	r26, 0x06	; 6
    3f40:	8d 91       	ld	r24, X+
    3f42:	9c 91       	ld	r25, X
    3f44:	17 97       	sbiw	r26, 0x07	; 7
    3f46:	01 96       	adiw	r24, 0x01	; 1
    3f48:	17 96       	adiw	r26, 0x07	; 7
    3f4a:	9c 93       	st	X, r25
    3f4c:	8e 93       	st	-X, r24
    3f4e:	16 97       	sbiw	r26, 0x06	; 6
    3f50:	ce 01       	movw	r24, r28
    3f52:	df 91       	pop	r29
    3f54:	cf 91       	pop	r28
    3f56:	1f 91       	pop	r17
    3f58:	0f 91       	pop	r16
    3f5a:	08 95       	ret

00003f5c <__ultoa_invert>:
    3f5c:	fa 01       	movw	r30, r20
    3f5e:	aa 27       	eor	r26, r26
    3f60:	28 30       	cpi	r18, 0x08	; 8
    3f62:	51 f1       	breq	.+84     	; 0x3fb8 <__ultoa_invert+0x5c>
    3f64:	20 31       	cpi	r18, 0x10	; 16
    3f66:	81 f1       	breq	.+96     	; 0x3fc8 <__ultoa_invert+0x6c>
    3f68:	e8 94       	clt
    3f6a:	6f 93       	push	r22
    3f6c:	6e 7f       	andi	r22, 0xFE	; 254
    3f6e:	6e 5f       	subi	r22, 0xFE	; 254
    3f70:	7f 4f       	sbci	r23, 0xFF	; 255
    3f72:	8f 4f       	sbci	r24, 0xFF	; 255
    3f74:	9f 4f       	sbci	r25, 0xFF	; 255
    3f76:	af 4f       	sbci	r26, 0xFF	; 255
    3f78:	b1 e0       	ldi	r27, 0x01	; 1
    3f7a:	3e d0       	rcall	.+124    	; 0x3ff8 <__ultoa_invert+0x9c>
    3f7c:	b4 e0       	ldi	r27, 0x04	; 4
    3f7e:	3c d0       	rcall	.+120    	; 0x3ff8 <__ultoa_invert+0x9c>
    3f80:	67 0f       	add	r22, r23
    3f82:	78 1f       	adc	r23, r24
    3f84:	89 1f       	adc	r24, r25
    3f86:	9a 1f       	adc	r25, r26
    3f88:	a1 1d       	adc	r26, r1
    3f8a:	68 0f       	add	r22, r24
    3f8c:	79 1f       	adc	r23, r25
    3f8e:	8a 1f       	adc	r24, r26
    3f90:	91 1d       	adc	r25, r1
    3f92:	a1 1d       	adc	r26, r1
    3f94:	6a 0f       	add	r22, r26
    3f96:	71 1d       	adc	r23, r1
    3f98:	81 1d       	adc	r24, r1
    3f9a:	91 1d       	adc	r25, r1
    3f9c:	a1 1d       	adc	r26, r1
    3f9e:	20 d0       	rcall	.+64     	; 0x3fe0 <__ultoa_invert+0x84>
    3fa0:	09 f4       	brne	.+2      	; 0x3fa4 <__ultoa_invert+0x48>
    3fa2:	68 94       	set
    3fa4:	3f 91       	pop	r19
    3fa6:	2a e0       	ldi	r18, 0x0A	; 10
    3fa8:	26 9f       	mul	r18, r22
    3faa:	11 24       	eor	r1, r1
    3fac:	30 19       	sub	r19, r0
    3fae:	30 5d       	subi	r19, 0xD0	; 208
    3fb0:	31 93       	st	Z+, r19
    3fb2:	de f6       	brtc	.-74     	; 0x3f6a <__ultoa_invert+0xe>
    3fb4:	cf 01       	movw	r24, r30
    3fb6:	08 95       	ret
    3fb8:	46 2f       	mov	r20, r22
    3fba:	47 70       	andi	r20, 0x07	; 7
    3fbc:	40 5d       	subi	r20, 0xD0	; 208
    3fbe:	41 93       	st	Z+, r20
    3fc0:	b3 e0       	ldi	r27, 0x03	; 3
    3fc2:	0f d0       	rcall	.+30     	; 0x3fe2 <__ultoa_invert+0x86>
    3fc4:	c9 f7       	brne	.-14     	; 0x3fb8 <__ultoa_invert+0x5c>
    3fc6:	f6 cf       	rjmp	.-20     	; 0x3fb4 <__ultoa_invert+0x58>
    3fc8:	46 2f       	mov	r20, r22
    3fca:	4f 70       	andi	r20, 0x0F	; 15
    3fcc:	40 5d       	subi	r20, 0xD0	; 208
    3fce:	4a 33       	cpi	r20, 0x3A	; 58
    3fd0:	18 f0       	brcs	.+6      	; 0x3fd8 <__ultoa_invert+0x7c>
    3fd2:	49 5d       	subi	r20, 0xD9	; 217
    3fd4:	31 fd       	sbrc	r19, 1
    3fd6:	40 52       	subi	r20, 0x20	; 32
    3fd8:	41 93       	st	Z+, r20
    3fda:	02 d0       	rcall	.+4      	; 0x3fe0 <__ultoa_invert+0x84>
    3fdc:	a9 f7       	brne	.-22     	; 0x3fc8 <__ultoa_invert+0x6c>
    3fde:	ea cf       	rjmp	.-44     	; 0x3fb4 <__ultoa_invert+0x58>
    3fe0:	b4 e0       	ldi	r27, 0x04	; 4
    3fe2:	a6 95       	lsr	r26
    3fe4:	97 95       	ror	r25
    3fe6:	87 95       	ror	r24
    3fe8:	77 95       	ror	r23
    3fea:	67 95       	ror	r22
    3fec:	ba 95       	dec	r27
    3fee:	c9 f7       	brne	.-14     	; 0x3fe2 <__ultoa_invert+0x86>
    3ff0:	00 97       	sbiw	r24, 0x00	; 0
    3ff2:	61 05       	cpc	r22, r1
    3ff4:	71 05       	cpc	r23, r1
    3ff6:	08 95       	ret
    3ff8:	9b 01       	movw	r18, r22
    3ffa:	ac 01       	movw	r20, r24
    3ffc:	0a 2e       	mov	r0, r26
    3ffe:	06 94       	lsr	r0
    4000:	57 95       	ror	r21
    4002:	47 95       	ror	r20
    4004:	37 95       	ror	r19
    4006:	27 95       	ror	r18
    4008:	ba 95       	dec	r27
    400a:	c9 f7       	brne	.-14     	; 0x3ffe <__ultoa_invert+0xa2>
    400c:	62 0f       	add	r22, r18
    400e:	73 1f       	adc	r23, r19
    4010:	84 1f       	adc	r24, r20
    4012:	95 1f       	adc	r25, r21
    4014:	a0 1d       	adc	r26, r0
    4016:	08 95       	ret

00004018 <eeprom_read_byte>:
    4018:	e1 99       	sbic	0x1c, 1	; 28
    401a:	fe cf       	rjmp	.-4      	; 0x4018 <eeprom_read_byte>
    401c:	9f bb       	out	0x1f, r25	; 31
    401e:	8e bb       	out	0x1e, r24	; 30
    4020:	e0 9a       	sbi	0x1c, 0	; 28
    4022:	99 27       	eor	r25, r25
    4024:	8d b3       	in	r24, 0x1d	; 29
    4026:	08 95       	ret

00004028 <eeprom_read_dword>:
    4028:	a6 e1       	ldi	r26, 0x16	; 22
    402a:	b0 e0       	ldi	r27, 0x00	; 0
    402c:	44 e0       	ldi	r20, 0x04	; 4
    402e:	50 e0       	ldi	r21, 0x00	; 0
    4030:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <eeprom_read_blraw>

00004034 <eeprom_read_word>:
    4034:	a8 e1       	ldi	r26, 0x18	; 24
    4036:	b0 e0       	ldi	r27, 0x00	; 0
    4038:	42 e0       	ldi	r20, 0x02	; 2
    403a:	50 e0       	ldi	r21, 0x00	; 0
    403c:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <eeprom_read_blraw>

00004040 <eeprom_write_byte>:
    4040:	26 2f       	mov	r18, r22

00004042 <eeprom_write_r18>:
    4042:	e1 99       	sbic	0x1c, 1	; 28
    4044:	fe cf       	rjmp	.-4      	; 0x4042 <eeprom_write_r18>
    4046:	9f bb       	out	0x1f, r25	; 31
    4048:	8e bb       	out	0x1e, r24	; 30
    404a:	2d bb       	out	0x1d, r18	; 29
    404c:	0f b6       	in	r0, 0x3f	; 63
    404e:	f8 94       	cli
    4050:	e2 9a       	sbi	0x1c, 2	; 28
    4052:	e1 9a       	sbi	0x1c, 1	; 28
    4054:	0f be       	out	0x3f, r0	; 63
    4056:	01 96       	adiw	r24, 0x01	; 1
    4058:	08 95       	ret

0000405a <eeprom_write_dword>:
    405a:	24 2f       	mov	r18, r20
    405c:	0e 94 21 20 	call	0x4042	; 0x4042 <eeprom_write_r18>
    4060:	25 2f       	mov	r18, r21
    4062:	0e 94 21 20 	call	0x4042	; 0x4042 <eeprom_write_r18>
    4066:	0c 94 35 20 	jmp	0x406a	; 0x406a <eeprom_write_word>

0000406a <eeprom_write_word>:
    406a:	0e 94 20 20 	call	0x4040	; 0x4040 <eeprom_write_byte>
    406e:	27 2f       	mov	r18, r23
    4070:	0c 94 21 20 	jmp	0x4042	; 0x4042 <eeprom_write_r18>

00004074 <eeprom_read_block>:
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22

00004078 <eeprom_read_blraw>:
    4078:	fc 01       	movw	r30, r24
    407a:	e1 99       	sbic	0x1c, 1	; 28
    407c:	fe cf       	rjmp	.-4      	; 0x407a <eeprom_read_blraw+0x2>
    407e:	06 c0       	rjmp	.+12     	; 0x408c <eeprom_read_blraw+0x14>
    4080:	ff bb       	out	0x1f, r31	; 31
    4082:	ee bb       	out	0x1e, r30	; 30
    4084:	e0 9a       	sbi	0x1c, 0	; 28
    4086:	31 96       	adiw	r30, 0x01	; 1
    4088:	0d b2       	in	r0, 0x1d	; 29
    408a:	0d 92       	st	X+, r0
    408c:	41 50       	subi	r20, 0x01	; 1
    408e:	50 40       	sbci	r21, 0x00	; 0
    4090:	b8 f7       	brcc	.-18     	; 0x4080 <eeprom_read_blraw+0x8>
    4092:	08 95       	ret

00004094 <__prologue_saves__>:
    4094:	2f 92       	push	r2
    4096:	3f 92       	push	r3
    4098:	4f 92       	push	r4
    409a:	5f 92       	push	r5
    409c:	6f 92       	push	r6
    409e:	7f 92       	push	r7
    40a0:	8f 92       	push	r8
    40a2:	9f 92       	push	r9
    40a4:	af 92       	push	r10
    40a6:	bf 92       	push	r11
    40a8:	cf 92       	push	r12
    40aa:	df 92       	push	r13
    40ac:	ef 92       	push	r14
    40ae:	ff 92       	push	r15
    40b0:	0f 93       	push	r16
    40b2:	1f 93       	push	r17
    40b4:	cf 93       	push	r28
    40b6:	df 93       	push	r29
    40b8:	cd b7       	in	r28, 0x3d	; 61
    40ba:	de b7       	in	r29, 0x3e	; 62
    40bc:	ca 1b       	sub	r28, r26
    40be:	db 0b       	sbc	r29, r27
    40c0:	0f b6       	in	r0, 0x3f	; 63
    40c2:	f8 94       	cli
    40c4:	de bf       	out	0x3e, r29	; 62
    40c6:	0f be       	out	0x3f, r0	; 63
    40c8:	cd bf       	out	0x3d, r28	; 61
    40ca:	09 94       	ijmp

000040cc <__epilogue_restores__>:
    40cc:	2a 88       	ldd	r2, Y+18	; 0x12
    40ce:	39 88       	ldd	r3, Y+17	; 0x11
    40d0:	48 88       	ldd	r4, Y+16	; 0x10
    40d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    40d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    40d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    40d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    40da:	9b 84       	ldd	r9, Y+11	; 0x0b
    40dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    40de:	b9 84       	ldd	r11, Y+9	; 0x09
    40e0:	c8 84       	ldd	r12, Y+8	; 0x08
    40e2:	df 80       	ldd	r13, Y+7	; 0x07
    40e4:	ee 80       	ldd	r14, Y+6	; 0x06
    40e6:	fd 80       	ldd	r15, Y+5	; 0x05
    40e8:	0c 81       	ldd	r16, Y+4	; 0x04
    40ea:	1b 81       	ldd	r17, Y+3	; 0x03
    40ec:	aa 81       	ldd	r26, Y+2	; 0x02
    40ee:	b9 81       	ldd	r27, Y+1	; 0x01
    40f0:	ce 0f       	add	r28, r30
    40f2:	d1 1d       	adc	r29, r1
    40f4:	0f b6       	in	r0, 0x3f	; 63
    40f6:	f8 94       	cli
    40f8:	de bf       	out	0x3e, r29	; 62
    40fa:	0f be       	out	0x3f, r0	; 63
    40fc:	cd bf       	out	0x3d, r28	; 61
    40fe:	ed 01       	movw	r28, r26
    4100:	08 95       	ret

00004102 <_exit>:
    4102:	f8 94       	cli

00004104 <__stop_program>:
    4104:	ff cf       	rjmp	.-2      	; 0x4104 <__stop_program>
