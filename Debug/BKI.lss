
BKI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c24  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  00003c24  00003cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000485  00800122  00800122  00003d9a  2**0
                  ALLOC
  3 .eeprom       000000cf  00810000  00810000  00003d9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00005bec  00000000  00000000  00003e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00002823  00000000  00000000  00009a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000005c  00000000  00000000  0000c27b  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000c2d8  2**2
                  CONTENTS, READONLY
  8 .debug_info   000004e6  00000000  00000000  0000c314  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004a3  00000000  00000000  0000c7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0000cc9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000196  00000000  00000000  0000ccb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__ctors_end>
       4:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__vector_1>
       8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
       c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      10:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      14:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      18:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      1c:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__vector_7>
      20:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      24:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      28:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      2c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      30:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      34:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <__vector_13>
      38:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      3c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      40:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      44:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      48:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      4c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      50:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>

00000054 <NEDOSTUPNO>:
      54:	ed e5 e4 ee f1 f2 f3 ef ed ee 00                    ...........

0000005f <NOVOE_ZNACHENIE>:
      5f:	cd ce c2 ce c5 20 c7 cd c0 d7 c5 cd c8 c5 00        ..... .........

0000006e <PAROL>:
      6e:	cf c0 d0 ce cb dc 00                                .......

00000075 <MS>:
      75:	ec f1 00                                            ...

00000078 <OTKL_MTZ>:
      78:	ee f2 ea eb 2e cc d2 c7 3a 00                       ........:.

00000082 <VKL_MTZ>:
      82:	e2 ea eb 2e cc d2 c7 3a 00                          .......:.

0000008b <PUSTO>:
      8b:	3c ef f3 f1 f2 ee 3e 00                             <.....>.

00000093 <OBNARUZHENO>:
      93:	ee e1 ed e0 f0 f3 e6 e5 ed ee 20 c1 c4 c7 3a 00     .......... ...:.

000000a3 <SBROSIT>:
      a3:	d1 e1 f0 ee f1 e8 f2 fc 3f 20 e4 e0 2d 22 c2 c2     ........? ..-"..
      b3:	ce c4 22 00                                         ..".

000000b7 <NET>:
      b7:	ed e5 f2 00                                         ....

000000bb <NET_SVYAZI>:
      bb:	ed e5 f2 20 f1 e2 ff e7 e8 00                       ... ......

000000c5 <OSHIBKA>:
      c5:	ee f8 e8 e1 ea e0 00                                .......

000000cc <NET_GOTOVNOSTI>:
      cc:	cd c5 d2 20 c3 ce d2 ce c2 cd ce d1 d2 c8 00        ... ...........

000000db <VREMYA_UROV>:
      db:	c2 d0 c5 cc df 20 d3 d0 ce c2 00                    ..... .....

000000e6 <VREMYA_MTZ>:
      e6:	c2 d0 c5 cc df 20 cc d2 c7 00                       ..... ....

000000f0 <ADRES>:
      f0:	c0 c4 d0 c5 d1 00                                   ......

000000f6 <PO_ODNOMU>:
      f6:	cf ce 20 ce c4 cd ce cc d3 00                       .. .......

00000100 <DLYA_VSEH>:
     100:	c4 cb df 20 c2 d1 c5 d5 00                          ... .....

00000109 <C_NONE>:
     109:	4e 4f 4e 45 00                                      NONE.

0000010e <C_EVEN>:
     10e:	45 56 45 4e 00                                      EVEN.

00000113 <C_ODD>:
     113:	4f 44 44 00                                         ODD.

00000117 <CHETNOST>:
     117:	d7 c5 d2 cd ce d1 d2 dc 00                          .........

00000120 <SKOROST>:
     120:	d1 ca ce d0 ce d1 d2 dc 00                          .........

00000129 <ASCII_M>:
     129:	41 53 43 49 49 00                                   ASCII.

0000012f <RTU_M>:
     12f:	52 54 55 00                                         RTU.

00000133 <REZHIM>:
     133:	d0 c5 c6 c8 cc 00                                   ......

00000139 <SVYAZ>:
     139:	d1 c2 df c7 dc 20 52 53 34 38 35 00                 ..... RS485.

00000145 <PROGRAMMIROVANIE>:
     145:	cf d0 ce c3 d0 c0 cc cc c8 d0 ce c2 c0 cd c8 c5     ................
	...

00000156 <SCANIROVANIE>:
     156:	d1 ca c0 cd c8 d0 ce c2 c0 cd c8 c5 00              .............

00000163 <DATAVREMYA>:
     163:	c4 c0 d2 c0 2f c2 d0 c5 cc df 00                    ..../......

0000016e <RELE>:
     16e:	d0 c5 cb c5 00                                      .....

00000173 <DVX>:
     173:	c4 c2 d5 00                                         ....

00000177 <VOD>:
     177:	c2 ce c4 00                                         ....

0000017b <BDZ>:
     17b:	c1 c4 c7 00                                         ....

0000017f <NASTROYKA>:
     17f:	cd c0 d1 d2 d0 ce c9 ca c0 00                       ..........

00000189 <ARHIV>:
     189:	c0 d0 d5 c8 c2 00                                   ......

0000018f <NA_SVYAZI>:
     18f:	cd c0 20 d1 c2 df c7 c8 00                          .. ......

00000198 <MENU>:
     198:	cc c5 cd de 00                                      .....

0000019d <NEISPRAVNOST>:
     19d:	cd c5 c8 d1 cf d0 c0 c2 cd ce d1 d2 dc 00           ..............

000001ab <AVARIYA>:
     1ab:	c0 c2 c0 d0 c8 df 00                                .......

000001b2 <RABOTA>:
     1b2:	d0 c0 c1 ce d2 c0 31 00                             ......1.

000001ba <NUMM>:
     1ba:	cd ce cc c5 d0 20 c1 c4 c7 00                       ..... ....

000001c4 <NOVOE>:
     1c4:	cd ce c2 ce c5 00                                   ......

000001ca <lcd_codepage>:
     1ca:	41 a0 42 a1 e0 45 a3 a4 a5 a6 4b a7 4d 48 4f a8     A.B..E....K.MHO.
     1da:	50 43 54 a9 aa 58 e1 ab ac e2 ad ae 62 af b0 b1     PCT..X......b...
     1ea:	61 b2 b3 b4 e3 65 b6 b7 b8 b9 ba bb bc bd 6f be     a....e........o.
     1fa:	70 63 bf 79 e4 78 e5 c0 c1 e6 c2 c3 c4 c5 c6 c7     pc.y.x..........

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf e5       	ldi	r28, 0x5F	; 95
     210:	d8 e0       	ldi	r29, 0x08	; 8
     212:	de bf       	out	0x3e, r29	; 62
     214:	cd bf       	out	0x3d, r28	; 61

00000216 <__do_copy_data>:
     216:	11 e0       	ldi	r17, 0x01	; 1
     218:	a0 e6       	ldi	r26, 0x60	; 96
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	e4 e2       	ldi	r30, 0x24	; 36
     21e:	fc e3       	ldi	r31, 0x3C	; 60
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	a2 32       	cpi	r26, 0x22	; 34
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	25 e0       	ldi	r18, 0x05	; 5
     22e:	a2 e2       	ldi	r26, 0x22	; 34
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	a7 3a       	cpi	r26, 0xA7	; 167
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <main>
     240:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <_exit>

00000244 <__bad_interrupt>:
     244:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000248 <checkTOUT>:
	return 	checkTOUT(addr);
}

static inline signed char checkTOUT(unsigned char addr)
{
	CAN_timeout=CAN_TOUT;
     248:	28 ee       	ldi	r18, 0xE8	; 232
     24a:	33 e0       	ldi	r19, 0x03	; 3
     24c:	30 93 b9 04 	sts	0x04B9, r19	; 0x8004b9 <CAN_timeout+0x1>
     250:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <CAN_timeout>
	while(chkBit(inSysBDZ[addr].flags,INL)==0 && (CAN_timeout !=0));	//ждем ответа
     254:	29 e0       	ldi	r18, 0x09	; 9
     256:	82 9f       	mul	r24, r18
     258:	c0 01       	movw	r24, r0
     25a:	11 24       	eor	r1, r1
     25c:	fc 01       	movw	r30, r24
     25e:	eb 5b       	subi	r30, 0xBB	; 187
     260:	fe 4f       	sbci	r31, 0xFE	; 254
     262:	80 81       	ld	r24, Z
     264:	82 fd       	sbrc	r24, 2
     266:	06 c0       	rjmp	.+12     	; 0x274 <checkTOUT+0x2c>
     268:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <CAN_timeout>
     26c:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <CAN_timeout+0x1>
     270:	89 2b       	or	r24, r25
     272:	b9 f7       	brne	.-18     	; 0x262 <checkTOUT+0x1a>
	return (CAN_timeout ==0 || CAN_ERR !=0)?(-1):(1);					//дождались таймаута или ошибки CAN вернули -1
     274:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <CAN_timeout>
     278:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <CAN_timeout+0x1>
     27c:	89 2b       	or	r24, r25
     27e:	31 f0       	breq	.+12     	; 0x28c <checkTOUT+0x44>
     280:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <CAN_ERR>
     284:	81 11       	cpse	r24, r1
     286:	02 c0       	rjmp	.+4      	; 0x28c <checkTOUT+0x44>
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	08 95       	ret
     28c:	8f ef       	ldi	r24, 0xFF	; 255
}
     28e:	08 95       	ret

00000290 <novoe>:
	{ARHIV,archieve},
	{NASTROYKA,nastroyka},
	{NULL,NULL}	//затычка
};
static void novoe(void)
{
     290:	08 95       	ret

00000292 <LCD_strob>:
}


static inline void LCD_strob(void)
{
	LCP |= 1<<LCD_E;
     292:	ac 9a       	sbi	0x15, 4	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     294:	8f e9       	ldi	r24, 0x9F	; 159
     296:	9f e0       	ldi	r25, 0x0F	; 15
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <LCD_strob+0x6>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <LCD_strob+0xc>
     29e:	00 00       	nop
	_delay_ms(1);
	LCP &= ~(1<<LCD_E);
     2a0:	ac 98       	cbi	0x15, 4	; 21
     2a2:	8f e9       	ldi	r24, 0x9F	; 159
     2a4:	9f e0       	ldi	r25, 0x0F	; 15
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_strob+0x14>
     2aa:	00 c0       	rjmp	.+0      	; 0x2ac <LCD_strob+0x1a>
     2ac:	00 00       	nop
     2ae:	08 95       	ret

000002b0 <TWI_init>:
#define MR_DATA_NACK 0x58	//данные пришли, ACK не отправлен

void TWI_init(void)
{
//скорость 100 kHz
TWBR=72;
     2b0:	88 e4       	ldi	r24, 0x48	; 72
     2b2:	80 b9       	out	0x00, r24	; 0
//TWEA разрешение бита подтверждения,TWEN разрешение работы TWI модуля,
TWCR |= (1<<TWEA | 1<<TWEN);
     2b4:	86 b7       	in	r24, 0x36	; 54
     2b6:	84 64       	ori	r24, 0x44	; 68
     2b8:	86 bf       	out	0x36, r24	; 54
TWSR &=~(1<<TWPS0) | (1<<TWPS1);
     2ba:	08 98       	cbi	0x01, 0	; 1
     2bc:	08 95       	ret

000002be <twi_write>:
}

unsigned char twi_write(unsigned char addr,unsigned char *data,unsigned char len)
{
TWI_timeout=T_TOUT;
     2be:	28 ee       	ldi	r18, 0xE8	; 232
     2c0:	33 e0       	ldi	r19, 0x03	; 3
     2c2:	30 93 55 05 	sts	0x0555, r19	; 0x800555 <TWI_timeout+0x1>
     2c6:	20 93 54 05 	sts	0x0554, r18	; 0x800554 <TWI_timeout>

//TWI_ERR=0;

TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);										//Send START condition
     2ca:	94 ea       	ldi	r25, 0xA4	; 164
     2cc:	96 bf       	out	0x36, r25	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//флаг TWINT говорит о том,что текущее задание выполнено
     2ce:	06 b6       	in	r0, 0x36	; 54
     2d0:	07 fc       	sbrc	r0, 7
     2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <twi_write+0x26>
     2d4:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <TWI_timeout>
     2d8:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <TWI_timeout+0x1>
     2dc:	23 2b       	or	r18, r19
     2de:	b9 f7       	brne	.-18     	; 0x2ce <twi_write+0x10>
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	2d c0       	rjmp	.+90     	; 0x33e <twi_write+0x80>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел
     2e4:	91 b1       	in	r25, 0x01	; 1
     2e6:	98 7f       	andi	r25, 0xF8	; 248
     2e8:	98 30       	cpi	r25, 0x08	; 8
     2ea:	11 f0       	breq	.+4      	; 0x2f0 <twi_write+0x32>
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	27 c0       	rjmp	.+78     	; 0x33e <twi_write+0x80>



TWDR = addr & 0xFE;													//грузим адпес и флаг записи (SLA+W)
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
     2f4:	84 e8       	ldi	r24, 0x84	; 132
     2f6:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
     2f8:	06 b6       	in	r0, 0x36	; 54
     2fa:	07 fc       	sbrc	r0, 7
     2fc:	07 c0       	rjmp	.+14     	; 0x30c <twi_write+0x4e>
     2fe:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <TWI_timeout>
     302:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <TWI_timeout+0x1>
     306:	89 2b       	or	r24, r25
     308:	b9 f7       	brne	.-18     	; 0x2f8 <twi_write+0x3a>
     30a:	ea cf       	rjmp	.-44     	; 0x2e0 <twi_write+0x22>
if ((TWSR & 0xF8) != MT_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     30c:	81 b1       	in	r24, 0x01	; 1
     30e:	88 7f       	andi	r24, 0xF8	; 248
     310:	88 31       	cpi	r24, 0x18	; 24
     312:	21 f4       	brne	.+8      	; 0x31c <twi_write+0x5e>
     314:	96 2f       	mov	r25, r22
     316:	fb 01       	movw	r30, r22


for(unsigned char i=0;i<len;i++)											//данные пошли
{
	TWDR = *(data+i);
	TWCR = (1<<TWINT) | (1<<TWEN);
     318:	24 e8       	ldi	r18, 0x84	; 132
     31a:	02 c0       	rjmp	.+4      	; 0x320 <twi_write+0x62>


TWDR = addr & 0xFE;													//грузим адпес и флаг записи (SLA+W)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MT_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	0f c0       	rjmp	.+30     	; 0x33e <twi_write+0x80>



for(unsigned char i=0;i<len;i++)											//данные пошли
     320:	8e 2f       	mov	r24, r30
     322:	89 1b       	sub	r24, r25
     324:	84 17       	cp	r24, r20
     326:	a8 f4       	brcc	.+42     	; 0x352 <twi_write+0x94>
{
	TWDR = *(data+i);
     328:	81 91       	ld	r24, Z+
     32a:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     32c:	26 bf       	out	0x36, r18	; 54
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}
     32e:	06 b6       	in	r0, 0x36	; 54
     330:	07 fe       	sbrs	r0, 7
     332:	08 c0       	rjmp	.+16     	; 0x344 <twi_write+0x86>
	if ((TWSR & 0xF8) != MT_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}
     334:	81 b1       	in	r24, 0x01	; 1
     336:	88 7f       	andi	r24, 0xF8	; 248
     338:	88 32       	cpi	r24, 0x28	; 40
     33a:	91 f3       	breq	.-28     	; 0x320 <twi_write+0x62>
     33c:	84 e0       	ldi	r24, 0x04	; 4
     33e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TWI_ERR>
     342:	07 c0       	rjmp	.+14     	; 0x352 <twi_write+0x94>

for(unsigned char i=0;i<len;i++)											//данные пошли
{
	TWDR = *(data+i);
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}
     344:	60 91 54 05 	lds	r22, 0x0554	; 0x800554 <TWI_timeout>
     348:	70 91 55 05 	lds	r23, 0x0555	; 0x800555 <TWI_timeout+0x1>
     34c:	67 2b       	or	r22, r23
     34e:	79 f7       	brne	.-34     	; 0x32e <twi_write+0x70>
     350:	c7 cf       	rjmp	.-114    	; 0x2e0 <twi_write+0x22>


ERROR:


TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);										//Transmit STOP condition
     352:	84 e9       	ldi	r24, 0x94	; 148
     354:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     356:	8f e8       	ldi	r24, 0x8F	; 143
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <twi_write+0x9c>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <twi_write+0xa2>
     360:	00 00       	nop
_delay_us(100);	//ждем прохождения стопа
#ifdef DEBUG
if(TWI_ERR)uart_puts("writeErr");
#endif
return TWI_ERR;	//возвращаем код ошибки
}
     362:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <TWI_ERR>
     366:	08 95       	ret

00000368 <twi_read>:

unsigned char twi_read(unsigned char addr,unsigned char *data,unsigned char len)
{
     368:	98 2f       	mov	r25, r24
unsigned char i=0;

TWI_timeout=T_TOUT;
     36a:	28 ee       	ldi	r18, 0xE8	; 232
     36c:	33 e0       	ldi	r19, 0x03	; 3
     36e:	30 93 55 05 	sts	0x0555, r19	; 0x800555 <TWI_timeout+0x1>
     372:	20 93 54 05 	sts	0x0554, r18	; 0x800554 <TWI_timeout>

TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);										//Send START condition
     376:	84 ea       	ldi	r24, 0xA4	; 164
     378:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//флаг TWINT говорит о том,что текущее задание выполнено
     37a:	06 b6       	in	r0, 0x36	; 54
     37c:	07 fc       	sbrc	r0, 7
     37e:	08 c0       	rjmp	.+16     	; 0x390 <twi_read+0x28>
     380:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <TWI_timeout>
     384:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <TWI_timeout+0x1>
     388:	23 2b       	or	r18, r19
     38a:	b9 f7       	brne	.-18     	; 0x37a <twi_read+0x12>
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	34 c0       	rjmp	.+104    	; 0x3f8 <twi_read+0x90>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел
     390:	81 b1       	in	r24, 0x01	; 1
     392:	88 7f       	andi	r24, 0xF8	; 248
     394:	88 30       	cpi	r24, 0x08	; 8
     396:	11 f0       	breq	.+4      	; 0x39c <twi_read+0x34>
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	2e c0       	rjmp	.+92     	; 0x3f8 <twi_read+0x90>

TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
     39c:	91 60       	ori	r25, 0x01	; 1
     39e:	93 b9       	out	0x03, r25	; 3
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
     3a0:	84 e8       	ldi	r24, 0x84	; 132
     3a2:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
     3a4:	06 b6       	in	r0, 0x36	; 54
     3a6:	07 fc       	sbrc	r0, 7
     3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <twi_read+0x50>
     3aa:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <TWI_timeout>
     3ae:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <TWI_timeout+0x1>
     3b2:	89 2b       	or	r24, r25
     3b4:	b9 f7       	brne	.-18     	; 0x3a4 <twi_read+0x3c>
     3b6:	ea cf       	rjmp	.-44     	; 0x38c <twi_read+0x24>
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     3b8:	91 b1       	in	r25, 0x01	; 1
     3ba:	98 7f       	andi	r25, 0xF8	; 248
     3bc:	90 34       	cpi	r25, 0x40	; 64
     3be:	31 f4       	brne	.+12     	; 0x3cc <twi_read+0x64>
     3c0:	20 e0       	ldi	r18, 0x00	; 0

for(i=0;i<len-1;i++)												//данные пошли
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	41 50       	subi	r20, 0x01	; 1
     3c6:	51 09       	sbc	r21, r1
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
     3c8:	e4 ec       	ldi	r30, 0xC4	; 196
     3ca:	08 c0       	rjmp	.+16     	; 0x3dc <twi_read+0x74>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел

TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     3cc:	83 e0       	ldi	r24, 0x03	; 3
     3ce:	14 c0       	rjmp	.+40     	; 0x3f8 <twi_read+0x90>
for(i=0;i<len-1;i++)												//данные пошли
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
	*(data+i)=TWDR;
     3d0:	33 b1       	in	r19, 0x03	; 3
     3d2:	db 01       	movw	r26, r22
     3d4:	a8 0f       	add	r26, r24
     3d6:	b9 1f       	adc	r27, r25
     3d8:	3c 93       	st	X, r19
TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел

for(i=0;i<len-1;i++)												//данные пошли
     3da:	2f 5f       	subi	r18, 0xFF	; 255
     3dc:	82 2f       	mov	r24, r18
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	84 17       	cp	r24, r20
     3e2:	95 07       	cpc	r25, r21
     3e4:	9c f4       	brge	.+38     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
     3e6:	e6 bf       	out	0x36, r30	; 54
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
     3e8:	06 b6       	in	r0, 0x36	; 54
     3ea:	07 fe       	sbrs	r0, 7
     3ec:	08 c0       	rjmp	.+16     	; 0x3fe <twi_read+0x96>
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
     3ee:	31 b1       	in	r19, 0x01	; 1
     3f0:	38 7f       	andi	r19, 0xF8	; 248
     3f2:	30 35       	cpi	r19, 0x50	; 80
     3f4:	69 f3       	breq	.-38     	; 0x3d0 <twi_read+0x68>
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TWI_ERR>
     3fc:	1c c0       	rjmp	.+56     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел

for(i=0;i<len-1;i++)												//данные пошли
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
     3fe:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <TWI_timeout>
     402:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <TWI_timeout+0x1>
     406:	ab 2b       	or	r26, r27
     408:	79 f7       	brne	.-34     	; 0x3e8 <twi_read+0x80>
     40a:	c0 cf       	rjmp	.-128    	; 0x38c <twi_read+0x24>
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
	*(data+i)=TWDR;
}
TWCR = (1<<TWINT) | (1<<TWEN);													//запускаем прием последнего байта без подтверждения
     40c:	24 e8       	ldi	r18, 0x84	; 132
     40e:	26 bf       	out	0x36, r18	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}		//ждем пока прилетит
     410:	06 b6       	in	r0, 0x36	; 54
     412:	07 fc       	sbrc	r0, 7
     414:	07 c0       	rjmp	.+14     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     416:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <TWI_timeout>
     41a:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <TWI_timeout+0x1>
     41e:	23 2b       	or	r18, r19
     420:	b9 f7       	brne	.-18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     422:	b4 cf       	rjmp	.-152    	; 0x38c <twi_read+0x24>
if ((TWSR & 0xF8) != MR_DATA_NACK){TWI_ERR=TWIDATA;goto ERROR;}					//данные не прошли
     424:	21 b1       	in	r18, 0x01	; 1
     426:	28 7f       	andi	r18, 0xF8	; 248
     428:	28 35       	cpi	r18, 0x58	; 88
     42a:	29 f7       	brne	.-54     	; 0x3f6 <twi_read+0x8e>
*(data+i)=TWDR;
     42c:	23 b1       	in	r18, 0x03	; 3
     42e:	fb 01       	movw	r30, r22
     430:	e8 0f       	add	r30, r24
     432:	f9 1f       	adc	r31, r25
     434:	20 83       	st	Z, r18

ERROR:
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWEA);											//Transmit STOP condition
     436:	84 ed       	ldi	r24, 0xD4	; 212
     438:	86 bf       	out	0x36, r24	; 54
     43a:	8f e8       	ldi	r24, 0x8F	; 143
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     442:	00 c0       	rjmp	.+0      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     444:	00 00       	nop
#ifdef DEBUG
if(TWI_ERR){uart_puts("readErr");}
#endif

return TWI_ERR;	//возвращаем код ошибки
}
     446:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <TWI_ERR>
     44a:	08 95       	ret

0000044c <rtc_set>:
signed char rtc_check(void);
static inline unsigned char bcd2dec(unsigned char n);
static inline unsigned char dec2bcd(unsigned char n);

signed char rtc_set(struct RTC *rtc)
{
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	2a 97       	sbiw	r28, 0x0a	; 10
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
     460:	fc 01       	movw	r30, r24
	unsigned char data[10];

	data[0]=0;									//начальный регистр
     462:	19 82       	std	Y+1, r1	; 0x01
	data[1]=(dec2bcd(rtc->seconds) & ~(1<<CH));	//секунды с запуском тактового
     464:	85 81       	ldd	r24, Z+5	; 0x05
     466:	2a e0       	ldi	r18, 0x0A	; 10
     468:	62 2f       	mov	r22, r18
     46a:	0e 94 06 1a 	call	0x340c	; 0x340c <__udivmodqi4>
     46e:	39 2f       	mov	r19, r25
     470:	40 e1       	ldi	r20, 0x10	; 16
     472:	84 9f       	mul	r24, r20
     474:	c0 01       	movw	r24, r0
     476:	11 24       	eor	r1, r1
     478:	83 2b       	or	r24, r19
     47a:	8f 77       	andi	r24, 0x7F	; 127
     47c:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=dec2bcd(rtc->minutes);
     47e:	84 81       	ldd	r24, Z+4	; 0x04
     480:	0e 94 06 1a 	call	0x340c	; 0x340c <__udivmodqi4>
     484:	39 2f       	mov	r19, r25
     486:	40 e1       	ldi	r20, 0x10	; 16
     488:	84 9f       	mul	r24, r20
     48a:	c0 01       	movw	r24, r0
     48c:	11 24       	eor	r1, r1
     48e:	83 2b       	or	r24, r19
     490:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=dec2bcd(rtc->hours);
     492:	83 81       	ldd	r24, Z+3	; 0x03
     494:	0e 94 06 1a 	call	0x340c	; 0x340c <__udivmodqi4>
     498:	39 2f       	mov	r19, r25
     49a:	40 e1       	ldi	r20, 0x10	; 16
     49c:	84 9f       	mul	r24, r20
     49e:	c0 01       	movw	r24, r0
     4a0:	11 24       	eor	r1, r1
     4a2:	83 2b       	or	r24, r19
     4a4:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=0;									//день недели
     4a6:	1d 82       	std	Y+5, r1	; 0x05
	data[5]=dec2bcd(rtc->day);
     4a8:	82 81       	ldd	r24, Z+2	; 0x02
     4aa:	0e 94 06 1a 	call	0x340c	; 0x340c <__udivmodqi4>
     4ae:	39 2f       	mov	r19, r25
     4b0:	40 e1       	ldi	r20, 0x10	; 16
     4b2:	84 9f       	mul	r24, r20
     4b4:	c0 01       	movw	r24, r0
     4b6:	11 24       	eor	r1, r1
     4b8:	83 2b       	or	r24, r19
     4ba:	8e 83       	std	Y+6, r24	; 0x06
	data[6]=dec2bcd(rtc->month);
     4bc:	81 81       	ldd	r24, Z+1	; 0x01
     4be:	0e 94 06 1a 	call	0x340c	; 0x340c <__udivmodqi4>
     4c2:	39 2f       	mov	r19, r25
     4c4:	40 e1       	ldi	r20, 0x10	; 16
     4c6:	84 9f       	mul	r24, r20
     4c8:	c0 01       	movw	r24, r0
     4ca:	11 24       	eor	r1, r1
     4cc:	83 2b       	or	r24, r19
     4ce:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=dec2bcd(rtc->year);
     4d0:	80 81       	ld	r24, Z
     4d2:	0e 94 06 1a 	call	0x340c	; 0x340c <__udivmodqi4>
     4d6:	29 2f       	mov	r18, r25
     4d8:	30 e1       	ldi	r19, 0x10	; 16
     4da:	83 9f       	mul	r24, r19
     4dc:	c0 01       	movw	r24, r0
     4de:	11 24       	eor	r1, r1
     4e0:	82 2b       	or	r24, r18
     4e2:	88 87       	std	Y+8, r24	; 0x08
	data[8]=0;									//управляющий регистр
     4e4:	19 86       	std	Y+9, r1	; 0x09
	data[9]=STRT;								//первый регистр ОЗУ(часы работают)
     4e6:	8a ea       	ldi	r24, 0xAA	; 170
     4e8:	8a 87       	std	Y+10, r24	; 0x0a
	if(twi_write(DS1307ADDR,data,10) !=0) return -1;//посыл
     4ea:	4a e0       	ldi	r20, 0x0A	; 10
     4ec:	be 01       	movw	r22, r28
     4ee:	6f 5f       	subi	r22, 0xFF	; 255
     4f0:	7f 4f       	sbci	r23, 0xFF	; 255
     4f2:	80 ed       	ldi	r24, 0xD0	; 208
     4f4:	0e 94 5f 01 	call	0x2be	; 0x2be <twi_write>
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	81 11       	cpse	r24, r1
     4fc:	01 c0       	rjmp	.+2      	; 0x500 <rtc_set+0xb4>
     4fe:	90 e0       	ldi	r25, 0x00	; 0

	return 0;
}
     500:	89 2f       	mov	r24, r25
     502:	81 95       	neg	r24
     504:	2a 96       	adiw	r28, 0x0a	; 10
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <rtc_get>:

signed char rtc_get(struct RTC *rtc)
{
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	28 97       	sbiw	r28, 0x08	; 8
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	8c 01       	movw	r16, r24
	unsigned char data[7]={0},startreg=0;
     534:	ce 01       	movw	r24, r28
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	7c 01       	movw	r14, r24
     53a:	87 e0       	ldi	r24, 0x07	; 7
     53c:	f7 01       	movw	r30, r14
     53e:	11 92       	st	Z+, r1
     540:	8a 95       	dec	r24
     542:	e9 f7       	brne	.-6      	; 0x53e <rtc_get+0x28>
     544:	18 86       	std	Y+8, r1	; 0x08

	twi_write(DS1307ADDR,&startreg,1);							//посыл начальнОго регистра
     546:	41 e0       	ldi	r20, 0x01	; 1
     548:	be 01       	movw	r22, r28
     54a:	68 5f       	subi	r22, 0xF8	; 248
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	80 ed       	ldi	r24, 0xD0	; 208
     550:	0e 94 5f 01 	call	0x2be	; 0x2be <twi_write>
	if(twi_read(DS1307ADDR,data,7) !=0)return -1;	//читаем
     554:	47 e0       	ldi	r20, 0x07	; 7
     556:	b7 01       	movw	r22, r14
     558:	80 ed       	ldi	r24, 0xD0	; 208
     55a:	0e 94 b4 01 	call	0x368	; 0x368 <twi_read>
     55e:	81 11       	cpse	r24, r1
     560:	44 c0       	rjmp	.+136    	; 0x5ea <rtc_get+0xd4>

	rtc->seconds=bcd2dec(data[0]);
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	98 2f       	mov	r25, r24
     566:	92 95       	swap	r25
     568:	9f 70       	andi	r25, 0x0F	; 15
     56a:	8f 70       	andi	r24, 0x0F	; 15
     56c:	fa e0       	ldi	r31, 0x0A	; 10
     56e:	9f 9f       	mul	r25, r31
     570:	80 0d       	add	r24, r0
     572:	11 24       	eor	r1, r1
     574:	f8 01       	movw	r30, r16
     576:	85 83       	std	Z+5, r24	; 0x05
	rtc->minutes=bcd2dec(data[1]);
     578:	8a 81       	ldd	r24, Y+2	; 0x02
     57a:	98 2f       	mov	r25, r24
     57c:	92 95       	swap	r25
     57e:	9f 70       	andi	r25, 0x0F	; 15
     580:	8f 70       	andi	r24, 0x0F	; 15
     582:	fa e0       	ldi	r31, 0x0A	; 10
     584:	9f 9f       	mul	r25, r31
     586:	80 0d       	add	r24, r0
     588:	11 24       	eor	r1, r1
     58a:	f8 01       	movw	r30, r16
     58c:	84 83       	std	Z+4, r24	; 0x04
	rtc->hours  =bcd2dec(data[2]);
     58e:	8b 81       	ldd	r24, Y+3	; 0x03
     590:	98 2f       	mov	r25, r24
     592:	92 95       	swap	r25
     594:	9f 70       	andi	r25, 0x0F	; 15
     596:	8f 70       	andi	r24, 0x0F	; 15
     598:	fa e0       	ldi	r31, 0x0A	; 10
     59a:	9f 9f       	mul	r25, r31
     59c:	80 0d       	add	r24, r0
     59e:	11 24       	eor	r1, r1
     5a0:	f8 01       	movw	r30, r16
     5a2:	83 83       	std	Z+3, r24	; 0x03
	rtc->day    =bcd2dec(data[4]);			//дни недели пропускаем
     5a4:	8d 81       	ldd	r24, Y+5	; 0x05
     5a6:	98 2f       	mov	r25, r24
     5a8:	92 95       	swap	r25
     5aa:	9f 70       	andi	r25, 0x0F	; 15
     5ac:	8f 70       	andi	r24, 0x0F	; 15
     5ae:	fa e0       	ldi	r31, 0x0A	; 10
     5b0:	9f 9f       	mul	r25, r31
     5b2:	80 0d       	add	r24, r0
     5b4:	11 24       	eor	r1, r1
     5b6:	f8 01       	movw	r30, r16
     5b8:	82 83       	std	Z+2, r24	; 0x02
	rtc->month  =bcd2dec(data[5]);
     5ba:	8e 81       	ldd	r24, Y+6	; 0x06
     5bc:	98 2f       	mov	r25, r24
     5be:	92 95       	swap	r25
     5c0:	9f 70       	andi	r25, 0x0F	; 15
     5c2:	8f 70       	andi	r24, 0x0F	; 15
     5c4:	fa e0       	ldi	r31, 0x0A	; 10
     5c6:	9f 9f       	mul	r25, r31
     5c8:	80 0d       	add	r24, r0
     5ca:	11 24       	eor	r1, r1
     5cc:	f8 01       	movw	r30, r16
     5ce:	81 83       	std	Z+1, r24	; 0x01
	rtc->year   =bcd2dec(data[6]);	//год без десятков
     5d0:	8f 81       	ldd	r24, Y+7	; 0x07
     5d2:	98 2f       	mov	r25, r24
     5d4:	92 95       	swap	r25
     5d6:	9f 70       	andi	r25, 0x0F	; 15
     5d8:	8f 70       	andi	r24, 0x0F	; 15
     5da:	fa e0       	ldi	r31, 0x0A	; 10
     5dc:	9f 9f       	mul	r25, r31
     5de:	80 0d       	add	r24, r0
     5e0:	11 24       	eor	r1, r1
     5e2:	f8 01       	movw	r30, r16
     5e4:	80 83       	st	Z, r24

	return 0;
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <rtc_get+0xd6>
signed char rtc_get(struct RTC *rtc)
{
	unsigned char data[7]={0},startreg=0;

	twi_write(DS1307ADDR,&startreg,1);							//посыл начальнОго регистра
	if(twi_read(DS1307ADDR,data,7) !=0)return -1;	//читаем
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
	rtc->day    =bcd2dec(data[4]);			//дни недели пропускаем
	rtc->month  =bcd2dec(data[5]);
	rtc->year   =bcd2dec(data[6]);	//год без десятков

	return 0;
}
     5ec:	28 96       	adiw	r28, 0x08	; 8
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	08 95       	ret

00000606 <rtc_check>:

signed char rtc_check(void)
{
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	00 d0       	rcall	.+0      	; 0x60c <rtc_check+0x6>
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
	unsigned char result=0,startreg=8;
     610:	1a 82       	std	Y+2, r1	; 0x02
     612:	88 e0       	ldi	r24, 0x08	; 8
     614:	89 83       	std	Y+1, r24	; 0x01

	twi_write(DS1307ADDR,&startreg,1);								//посыл начальнОго регистра
     616:	41 e0       	ldi	r20, 0x01	; 1
     618:	be 01       	movw	r22, r28
     61a:	6f 5f       	subi	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	80 ed       	ldi	r24, 0xD0	; 208
     620:	0e 94 5f 01 	call	0x2be	; 0x2be <twi_write>
	if(twi_read(DS1307ADDR,&result,1) !=0)return -1;	//читаем
     624:	41 e0       	ldi	r20, 0x01	; 1
     626:	be 01       	movw	r22, r28
     628:	6e 5f       	subi	r22, 0xFE	; 254
     62a:	7f 4f       	sbci	r23, 0xFF	; 255
     62c:	80 ed       	ldi	r24, 0xD0	; 208
     62e:	0e 94 b4 01 	call	0x368	; 0x368 <twi_read>
     632:	81 11       	cpse	r24, r1
     634:	07 c0       	rjmp	.+14     	; 0x644 <rtc_check+0x3e>

	if(result==STRT) return 0;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	9a 81       	ldd	r25, Y+2	; 0x02
     63a:	9a 3a       	cpi	r25, 0xAA	; 170
     63c:	09 f4       	brne	.+2      	; 0x640 <rtc_check+0x3a>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	81 95       	neg	r24
     642:	01 c0       	rjmp	.+2      	; 0x646 <rtc_check+0x40>
signed char rtc_check(void)
{
	unsigned char result=0,startreg=8;

	twi_write(DS1307ADDR,&startreg,1);								//посыл начальнОго регистра
	if(twi_read(DS1307ADDR,&result,1) !=0)return -1;	//читаем
     644:	8f ef       	ldi	r24, 0xFF	; 255

	if(result==STRT) return 0;
	return -1;
}
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <LCD_sendCmd>:
	_delay_ms(1);
}

void LCD_sendCmd(unsigned char cmd)	//Sends Command to LCD
{
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	c8 2f       	mov	r28, r24
	//старшие полбайта команды
	LDP |= ((cmd>>7 & 0x01)<<LCD_DB7) | ((cmd>>6 & 0x01)<<LCD_DB6) | ((cmd>>5 & 0x01)<<LCD_DB5) | ((cmd>>4 & 0x01)<<LCD_DB4);
     660:	88 b3       	in	r24, 0x18	; 24
     662:	c6 fb       	bst	r28, 6
     664:	66 27       	eor	r22, r22
     666:	60 f9       	bld	r22, 0
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	66 0f       	add	r22, r22
     66c:	77 1f       	adc	r23, r23
     66e:	9c 2f       	mov	r25, r28
     670:	99 1f       	adc	r25, r25
     672:	99 27       	eor	r25, r25
     674:	99 1f       	adc	r25, r25
     676:	89 2b       	or	r24, r25
     678:	68 2b       	or	r22, r24
     67a:	c5 fb       	bst	r28, 5
     67c:	44 27       	eor	r20, r20
     67e:	40 f9       	bld	r20, 0
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	44 0f       	add	r20, r20
     684:	55 1f       	adc	r21, r21
     686:	44 0f       	add	r20, r20
     688:	55 1f       	adc	r21, r21
     68a:	46 2b       	or	r20, r22
     68c:	c4 fb       	bst	r28, 4
     68e:	22 27       	eor	r18, r18
     690:	20 f9       	bld	r18, 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	53 e0       	ldi	r21, 0x03	; 3
     696:	22 0f       	add	r18, r18
     698:	33 1f       	adc	r19, r19
     69a:	5a 95       	dec	r21
     69c:	e1 f7       	brne	.-8      	; 0x696 <LCD_sendCmd+0x46>
     69e:	24 2b       	or	r18, r20
     6a0:	28 bb       	out	0x18, r18	; 24
	LCD_strob();
     6a2:	0e 94 49 01 	call	0x292	; 0x292 <LCD_strob>
	//младшие полбайта команды
	CLRLDP;
     6a6:	88 b3       	in	r24, 0x18	; 24
     6a8:	80 7f       	andi	r24, 0xF0	; 240
     6aa:	88 bb       	out	0x18, r24	; 24
	LDP = ((cmd>>3 & 0x01)<<LCD_DB7) | ((cmd>>2 & 0x01)<<LCD_DB6) | ((cmd>>1 & 0x01)<<LCD_DB5) | ((cmd>>0 & 0x01)<<LCD_DB4);
     6ac:	c3 fb       	bst	r28, 3
     6ae:	88 27       	eor	r24, r24
     6b0:	80 f9       	bld	r24, 0
     6b2:	c0 fb       	bst	r28, 0
     6b4:	cc 24       	eor	r12, r12
     6b6:	c0 f8       	bld	r12, 0
     6b8:	d1 2c       	mov	r13, r1
     6ba:	63 e0       	ldi	r22, 0x03	; 3
     6bc:	cc 0c       	add	r12, r12
     6be:	dd 1c       	adc	r13, r13
     6c0:	6a 95       	dec	r22
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <LCD_sendCmd+0x6c>
     6c4:	c8 2a       	or	r12, r24
     6c6:	c2 fb       	bst	r28, 2
     6c8:	ee 24       	eor	r14, r14
     6ca:	e0 f8       	bld	r14, 0
     6cc:	f1 2c       	mov	r15, r1
     6ce:	ee 0c       	add	r14, r14
     6d0:	ff 1c       	adc	r15, r15
     6d2:	ec 28       	or	r14, r12
     6d4:	c1 fb       	bst	r28, 1
     6d6:	00 27       	eor	r16, r16
     6d8:	00 f9       	bld	r16, 0
     6da:	10 e0       	ldi	r17, 0x00	; 0
     6dc:	00 0f       	add	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	00 0f       	add	r16, r16
     6e2:	11 1f       	adc	r17, r17
     6e4:	0e 29       	or	r16, r14
     6e6:	08 bb       	out	0x18, r16	; 24
	LCD_strob();
     6e8:	0e 94 49 01 	call	0x292	; 0x292 <LCD_strob>
	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины
     6ec:	85 b3       	in	r24, 0x15	; 21
     6ee:	83 7e       	andi	r24, 0xE3	; 227
     6f0:	85 bb       	out	0x15, r24	; 21
     6f2:	88 b3       	in	r24, 0x18	; 24
     6f4:	80 7f       	andi	r24, 0xF0	; 240
     6f6:	88 bb       	out	0x18, r24	; 24
}
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	df 90       	pop	r13
     704:	cf 90       	pop	r12
     706:	08 95       	ret

00000708 <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	89 ef       	ldi	r24, 0xF9	; 249
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	21 50       	subi	r18, 0x01	; 1
     710:	80 40       	sbci	r24, 0x00	; 0
     712:	90 40       	sbci	r25, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <LCD_init+0x6>
     716:	00 c0       	rjmp	.+0      	; 0x718 <LCD_init+0x10>
     718:	00 00       	nop

void LCD_init(void)//Initializes LCD
{
	//инициализация портов
	_delay_ms(20);								//Wait for more than 15 ms after VCC rises to 4.5 V
	CLRLDP; 								//пины порта данных =0
     71a:	88 b3       	in	r24, 0x18	; 24
     71c:	80 7f       	andi	r24, 0xF0	; 240
     71e:	88 bb       	out	0x18, r24	; 24
	LDDR |= (1<<LCD_DB7) | (1<<LCD_DB6) | (1<<LCD_DB5) | (1<<LCD_DB4);	//пины порта данных =выходы
     720:	87 b3       	in	r24, 0x17	; 23
     722:	8f 60       	ori	r24, 0x0F	; 15
     724:	87 bb       	out	0x17, r24	; 23
	CLRLCP;									//пины порта управляющих сигналов =0
     726:	85 b3       	in	r24, 0x15	; 21
     728:	83 7e       	andi	r24, 0xE3	; 227
     72a:	85 bb       	out	0x15, r24	; 21
	LCDR |= (1<<LCD_E) | (1<<LCD_RW) | (1<<LCD_RS);				//пины порта управляющих сигналов =выходы
     72c:	84 b3       	in	r24, 0x14	; 20
     72e:	8c 61       	ori	r24, 0x1C	; 28
     730:	84 bb       	out	0x14, r24	; 20

//	LDP |= convert(0b00110000);		//1
//	CLRLDP;								//обнулили пины DB
	LDP |= (1<<LCD_DB4) | (1<<LCD_DB5);	//step1
     732:	88 b3       	in	r24, 0x18	; 24
     734:	8c 60       	ori	r24, 0x0C	; 12
     736:	88 bb       	out	0x18, r24	; 24
	LCD_strob();
     738:	0e 94 49 01 	call	0x292	; 0x292 <LCD_strob>
     73c:	8f e1       	ldi	r24, 0x1F	; 31
     73e:	9e e4       	ldi	r25, 0x4E	; 78
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <LCD_init+0x38>
     744:	00 c0       	rjmp	.+0      	; 0x746 <LCD_init+0x3e>
     746:	00 00       	nop
	_delay_ms(5);						//Wait for more than 4.1 m
	LCD_strob();						//step2
     748:	0e 94 49 01 	call	0x292	; 0x292 <LCD_strob>
     74c:	8f e1       	ldi	r24, 0x1F	; 31
     74e:	9e e4       	ldi	r25, 0x4E	; 78
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <LCD_init+0x48>
     754:	00 c0       	rjmp	.+0      	; 0x756 <LCD_init+0x4e>
     756:	00 00       	nop
	_delay_ms(5);
	LCD_strob();						//step3
     758:	0e 94 49 01 	call	0x292	; 0x292 <LCD_strob>
	LDP &= ~(1<<LCD_DB4);				//step4 обнулили DB4
     75c:	c3 98       	cbi	0x18, 3	; 24
	LCD_strob();
     75e:	0e 94 49 01 	call	0x292	; 0x292 <LCD_strob>
     762:	8f e3       	ldi	r24, 0x3F	; 63
     764:	9f e1       	ldi	r25, 0x1F	; 31
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <LCD_init+0x5e>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <LCD_init+0x64>
     76c:	00 00       	nop
	_delay_ms(2);
	LCD_sendCmd(0b00101000);	//4х разрядный режим(4);страница знакогенератора(1)
     76e:	88 e2       	ldi	r24, 0x28	; 40
     770:	0e 94 28 03 	call	0x650	; 0x650 <LCD_sendCmd>
   	LCD_sendCmd(0b00001000);	//дисплей откл(2);курсор выкл(1);мигание курсора выкл(0)
     774:	88 e0       	ldi	r24, 0x08	; 8
     776:	0e 94 28 03 	call	0x650	; 0x650 <LCD_sendCmd>
   	LCD_sendCmd(0b00000001);	//очистка дисплея
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	0e 94 28 03 	call	0x650	; 0x650 <LCD_sendCmd>
   	LCD_sendCmd(0b00000110);	//сдвиг курсора вправо(1)
     780:	86 e0       	ldi	r24, 0x06	; 6
     782:	0e 94 28 03 	call	0x650	; 0x650 <LCD_sendCmd>

   	CLRLDP; CLRLCP;
     786:	88 b3       	in	r24, 0x18	; 24
     788:	80 7f       	andi	r24, 0xF0	; 240
     78a:	88 bb       	out	0x18, r24	; 24
     78c:	85 b3       	in	r24, 0x15	; 21
     78e:	83 7e       	andi	r24, 0xE3	; 227
     790:	85 bb       	out	0x15, r24	; 21
     792:	08 95       	ret

00000794 <LCD_cursorOn>:
}

void LCD_cursorOn(void) //displays LCD cursor
{
	LCD_sendCmd(0x0E);
     794:	8e e0       	ldi	r24, 0x0E	; 14
     796:	0c 94 28 03 	jmp	0x650	; 0x650 <LCD_sendCmd>

0000079a <LCD_cursorBlink>:
}

void LCD_cursorBlink(void)	//displays LCD blinking cursor
{
	LCD_sendCmd(0x0F);
     79a:	8f e0       	ldi	r24, 0x0F	; 15
     79c:	0c 94 28 03 	jmp	0x650	; 0x650 <LCD_sendCmd>

000007a0 <LCD_visible>:
	LCD_sendCmd(0x0C);
}

void LCD_visible(void)		//Shows LCD
{
	LCD_sendCmd(0x0C);
     7a0:	8c e0       	ldi	r24, 0x0C	; 12
     7a2:	0c 94 28 03 	jmp	0x650	; 0x650 <LCD_sendCmd>

000007a6 <LCD_cursorOff>:
     7a6:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <LCD_visible>

000007aa <LCD_clr>:
}

void LCD_clr(void)				//Clears LCD
{
	LCD_sendCmd(0x01);x=0;y=0;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	0e 94 28 03 	call	0x650	; 0x650 <LCD_sendCmd>
     7b0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <x>
     7b4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <y>
     7b8:	8f e1       	ldi	r24, 0x1F	; 31
     7ba:	9e e4       	ldi	r25, 0x4E	; 78
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <LCD_clr+0x12>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <LCD_clr+0x18>
     7c2:	00 00       	nop
     7c4:	08 95       	ret

000007c6 <LCD_gotoXY>:
	_delay_ms(5);
}

void LCD_gotoXY(char cx, char cy)	//Cursor to X Y position
{
	x=cx;y=cy;
     7c6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <x>
     7ca:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <y>
	// remap lines into proper order
	switch(y)
     7ce:	61 30       	cpi	r22, 0x01	; 1
     7d0:	39 f0       	breq	.+14     	; 0x7e0 <LCD_gotoXY+0x1a>
     7d2:	48 f0       	brcs	.+18     	; 0x7e6 <LCD_gotoXY+0x20>
     7d4:	62 30       	cpi	r22, 0x02	; 2
     7d6:	31 f0       	breq	.+12     	; 0x7e4 <LCD_gotoXY+0x1e>
     7d8:	63 30       	cpi	r22, 0x03	; 3
     7da:	29 f4       	brne	.+10     	; 0x7e6 <LCD_gotoXY+0x20>
	{
	case 0: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
	case 1: LCD_sendCmd(0x80 | (LCD_LINE1_DDRAMADDR+x)); break;
	case 2: LCD_sendCmd(0x80 | (LCD_LINE2_DDRAMADDR+x)); break;
	case 3: LCD_sendCmd(0x80 | (LCD_LINE3_DDRAMADDR+x)); break;
     7dc:	8c 5a       	subi	r24, 0xAC	; 172
     7de:	03 c0       	rjmp	.+6      	; 0x7e6 <LCD_gotoXY+0x20>
	x=cx;y=cy;
	// remap lines into proper order
	switch(y)
	{
	case 0: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
	case 1: LCD_sendCmd(0x80 | (LCD_LINE1_DDRAMADDR+x)); break;
     7e0:	80 5c       	subi	r24, 0xC0	; 192
     7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <LCD_gotoXY+0x20>
	case 2: LCD_sendCmd(0x80 | (LCD_LINE2_DDRAMADDR+x)); break;
     7e4:	8c 5e       	subi	r24, 0xEC	; 236
	case 3: LCD_sendCmd(0x80 | (LCD_LINE3_DDRAMADDR+x)); break;
	default: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
     7e6:	80 68       	ori	r24, 0x80	; 128
     7e8:	0c 94 28 03 	jmp	0x650	; 0x650 <LCD_sendCmd>

000007ec <LCD_putchar>:
	}

}

void LCD_putchar(char ch)
{
     7ec:	cf 92       	push	r12
     7ee:	df 92       	push	r13
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	c8 2f       	mov	r28, r24
	if ( ch >= 0xC0 ) ch = (char)pgm_read_byte(&lcd_codepage[ch - 0xC0]); //преобразование СР1251 в коды LCD
     7fe:	80 3c       	cpi	r24, 0xC0	; 192
     800:	28 f0       	brcs	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     802:	d0 e0       	ldi	r29, 0x00	; 0
     804:	fe 01       	movw	r30, r28
     806:	e6 5f       	subi	r30, 0xF6	; 246
     808:	fe 4f       	sbci	r31, 0xFE	; 254
     80a:	c4 91       	lpm	r28, Z

	//4 bit part
	LCP |= 1<<LCD_RS; 	//установили RS
     80c:	aa 9a       	sbi	0x15, 2	; 21

	//старшие полбайта символа
	LDP |= ((ch>>7 & 0x01)<<LCD_DB7) | ((ch>>6 & 0x01)<<LCD_DB6) | ((ch>>5 & 0x01)<<LCD_DB5) | ((ch>>4 & 0x01)<<LCD_DB4);
     80e:	88 b3       	in	r24, 0x18	; 24
     810:	c6 fb       	bst	r28, 6
     812:	66 27       	eor	r22, r22
     814:	60 f9       	bld	r22, 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	66 0f       	add	r22, r22
     81a:	77 1f       	adc	r23, r23
     81c:	9c 2f       	mov	r25, r28
     81e:	99 1f       	adc	r25, r25
     820:	99 27       	eor	r25, r25
     822:	99 1f       	adc	r25, r25
     824:	89 2b       	or	r24, r25
     826:	68 2b       	or	r22, r24
     828:	c5 fb       	bst	r28, 5
     82a:	44 27       	eor	r20, r20
     82c:	40 f9       	bld	r20, 0
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	44 0f       	add	r20, r20
     832:	55 1f       	adc	r21, r21
     834:	44 0f       	add	r20, r20
     836:	55 1f       	adc	r21, r21
     838:	46 2b       	or	r20, r22
     83a:	c4 fb       	bst	r28, 4
     83c:	22 27       	eor	r18, r18
     83e:	20 f9       	bld	r18, 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	53 e0       	ldi	r21, 0x03	; 3
     844:	22 0f       	add	r18, r18
     846:	33 1f       	adc	r19, r19
     848:	5a 95       	dec	r21
     84a:	e1 f7       	brne	.-8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     84c:	24 2b       	or	r18, r20
     84e:	28 bb       	out	0x18, r18	; 24
	LCD_strob();
     850:	0e 94 49 01 	call	0x292	; 0x292 <LCD_strob>

	//младшие полбайта символа
	CLRLDP;
     854:	88 b3       	in	r24, 0x18	; 24
     856:	80 7f       	andi	r24, 0xF0	; 240
     858:	88 bb       	out	0x18, r24	; 24
	LDP |= ((ch>>3 & 0x01)<<LCD_DB7) | ((ch>>2 & 0x01)<<LCD_DB6) | ((ch>>1 & 0x01)<<LCD_DB5) | ((ch>>0 & 0x01)<<LCD_DB4);
     85a:	88 b3       	in	r24, 0x18	; 24
     85c:	c3 fb       	bst	r28, 3
     85e:	99 27       	eor	r25, r25
     860:	90 f9       	bld	r25, 0
     862:	89 2b       	or	r24, r25
     864:	c0 fb       	bst	r28, 0
     866:	cc 24       	eor	r12, r12
     868:	c0 f8       	bld	r12, 0
     86a:	d1 2c       	mov	r13, r1
     86c:	63 e0       	ldi	r22, 0x03	; 3
     86e:	cc 0c       	add	r12, r12
     870:	dd 1c       	adc	r13, r13
     872:	6a 95       	dec	r22
     874:	e1 f7       	brne	.-8      	; 0x86e <__stack+0xf>
     876:	c8 2a       	or	r12, r24
     878:	c2 fb       	bst	r28, 2
     87a:	ee 24       	eor	r14, r14
     87c:	e0 f8       	bld	r14, 0
     87e:	f1 2c       	mov	r15, r1
     880:	ee 0c       	add	r14, r14
     882:	ff 1c       	adc	r15, r15
     884:	ec 28       	or	r14, r12
     886:	c1 fb       	bst	r28, 1
     888:	00 27       	eor	r16, r16
     88a:	00 f9       	bld	r16, 0
     88c:	10 e0       	ldi	r17, 0x00	; 0
     88e:	00 0f       	add	r16, r16
     890:	11 1f       	adc	r17, r17
     892:	00 0f       	add	r16, r16
     894:	11 1f       	adc	r17, r17
     896:	0e 29       	or	r16, r14
     898:	08 bb       	out	0x18, r16	; 24
	LCD_strob();
     89a:	0e 94 49 01 	call	0x292	; 0x292 <LCD_strob>

	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины
     89e:	85 b3       	in	r24, 0x15	; 21
     8a0:	83 7e       	andi	r24, 0xE3	; 227
     8a2:	85 bb       	out	0x15, r24	; 21
     8a4:	88 b3       	in	r24, 0x18	; 24
     8a6:	80 7f       	andi	r24, 0xF0	; 240
     8a8:	88 bb       	out	0x18, r24	; 24

	if(++x >= LCD_MAXX)
     8aa:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <x>
     8ae:	8f 5f       	subi	r24, 0xFF	; 255
     8b0:	84 31       	cpi	r24, 0x14	; 20
     8b2:	58 f4       	brcc	.+22     	; 0x8ca <__stack+0x6b>
     8b4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <x>
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
		}
	}
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	08 95       	ret

	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины

	if(++x >= LCD_MAXX)
	{
		x=0;y++;
     8ca:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <x>
     8ce:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <y>
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <y>
		switch (y)
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	39 f0       	breq	.+14     	; 0x8ea <__stack+0x8b>
     8dc:	50 f0       	brcs	.+20     	; 0x8f2 <__stack+0x93>
     8de:	82 30       	cpi	r24, 0x02	; 2
     8e0:	31 f0       	breq	.+12     	; 0x8ee <__stack+0x8f>
     8e2:	83 30       	cpi	r24, 0x03	; 3
     8e4:	31 f4       	brne	.+12     	; 0x8f2 <__stack+0x93>
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
     8e6:	84 ed       	ldi	r24, 0xD4	; 212
     8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <__stack+0x95>
	{
		x=0;y++;
		switch (y)
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
     8ea:	80 ec       	ldi	r24, 0xC0	; 192
     8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <__stack+0x95>
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
     8ee:	84 e9       	ldi	r24, 0x94	; 148
     8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <__stack+0x95>
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
     8f2:	80 e8       	ldi	r24, 0x80	; 128
		}
	}
}
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	df 90       	pop	r13
     902:	cf 90       	pop	r12
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
     904:	0c 94 28 03 	jmp	0x650	; 0x650 <LCD_sendCmd>

00000908 <LCD_puts>:
		}
	}
}

void LCD_puts(char* data, char nBytes)	//Outputs string to LCD с автоматической перекодировкой с СР1251
{
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	d6 2f       	mov	r29, r22
     912:	8c 01       	movw	r16, r24
	// print data
	for(unsigned char i=0; i<nBytes; i++)
     914:	c0 e0       	ldi	r28, 0x00	; 0
     916:	cd 17       	cp	r28, r29
     918:	81 f0       	breq	.+32     	; 0x93a <LCD_puts+0x32>
	{
		if(data[i]==0)								//если дошли до конца строки
     91a:	f8 01       	movw	r30, r16
     91c:	81 91       	ld	r24, Z+
     91e:	8f 01       	movw	r16, r30
     920:	81 11       	cpse	r24, r1
     922:	07 c0       	rjmp	.+14     	; 0x932 <LCD_puts+0x2a>
		{
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
     924:	80 e2       	ldi	r24, 0x20	; 32
     926:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_putchar>
     92a:	cf 5f       	subi	r28, 0xFF	; 255
     92c:	cd 17       	cp	r28, r29
     92e:	d0 f3       	brcs	.-12     	; 0x924 <LCD_puts+0x1c>
     930:	04 c0       	rjmp	.+8      	; 0x93a <LCD_puts+0x32>
			return;
		}
		else LCD_putchar(data[i]);
     932:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_putchar>
}

void LCD_puts(char* data, char nBytes)	//Outputs string to LCD с автоматической перекодировкой с СР1251
{
	// print data
	for(unsigned char i=0; i<nBytes; i++)
     936:	cf 5f       	subi	r28, 0xFF	; 255
     938:	ee cf       	rjmp	.-36     	; 0x916 <LCD_puts+0xe>
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
			return;
		}
		else LCD_putchar(data[i]);
	}
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	08 95       	ret

00000944 <printIOStr>:
	LCD_gotoXY(x,y);
	LCD_puts(buffer,20);
}

static inline void printIOStr(volatile unsigned char *data)
{
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	6b 97       	sbiw	r28, 0x1b	; 27
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	7c 01       	movw	r14, r24
	char buffer[20];
	char tmpStr[7];
	unsigned char i;

	//строка 2 "ВОД:  ДВХ:"
	LCD_gotoXY(0,2);
     966:	62 e0       	ldi	r22, 0x02	; 2
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
	strcpy_P(buffer,VOD);strcat(buffer,":");										//ВОД:
     96e:	67 e7       	ldi	r22, 0x77	; 119
     970:	71 e0       	ldi	r23, 0x01	; 1
     972:	ce 01       	movw	r24, r28
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	0e 94 67 1a 	call	0x34ce	; 0x34ce <strcpy_P>
     97a:	62 ed       	ldi	r22, 0xD2	; 210
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	0e 94 77 1a 	call	0x34ee	; 0x34ee <strcat>
	if((*data & 0x0F) ==0) strcat_P(buffer,NET);									//"нет"
     986:	f7 01       	movw	r30, r14
     988:	80 81       	ld	r24, Z
     98a:	8f 70       	andi	r24, 0x0F	; 15
     98c:	39 f4       	brne	.+14     	; 0x99c <printIOStr+0x58>
     98e:	67 eb       	ldi	r22, 0xB7	; 183
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	ce 01       	movw	r24, r28
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <strcat_P>
     99a:	2d c0       	rjmp	.+90     	; 0x9f6 <printIOStr+0xb2>
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
	else for(i=0;i<4;i++) if( chkBit(*data,i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//или номера
     9a0:	cc 24       	eor	r12, r12
     9a2:	c3 94       	inc	r12
     9a4:	d1 2c       	mov	r13, r1
     9a6:	f7 01       	movw	r30, r14
     9a8:	30 81       	ld	r19, Z
     9aa:	a6 01       	movw	r20, r12
     9ac:	08 2e       	mov	r0, r24
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <printIOStr+0x70>
     9b0:	44 0f       	add	r20, r20
     9b2:	55 1f       	adc	r21, r21
     9b4:	0a 94       	dec	r0
     9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <printIOStr+0x6c>
     9b8:	23 2f       	mov	r18, r19
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	24 23       	and	r18, r20
     9be:	35 23       	and	r19, r21
     9c0:	08 2e       	mov	r0, r24
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <printIOStr+0x84>
     9c4:	35 95       	asr	r19
     9c6:	27 95       	ror	r18
     9c8:	0a 94       	dec	r0
     9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <printIOStr+0x80>
     9cc:	8c 01       	movw	r16, r24
     9ce:	0f 5f       	subi	r16, 0xFF	; 255
     9d0:	1f 4f       	sbci	r17, 0xFF	; 255
     9d2:	23 2b       	or	r18, r19
     9d4:	61 f0       	breq	.+24     	; 0x9ee <printIOStr+0xaa>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9d6:	4a e0       	ldi	r20, 0x0A	; 10
     9d8:	be 01       	movw	r22, r28
     9da:	6b 5e       	subi	r22, 0xEB	; 235
     9dc:	7f 4f       	sbci	r23, 0xFF	; 255
     9de:	c8 01       	movw	r24, r16
     9e0:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
     9e4:	bc 01       	movw	r22, r24
     9e6:	ce 01       	movw	r24, r28
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	0e 94 77 1a 	call	0x34ee	; 0x34ee <strcat>
     9ee:	c8 01       	movw	r24, r16
     9f0:	04 30       	cpi	r16, 0x04	; 4
     9f2:	11 05       	cpc	r17, r1
     9f4:	c1 f6       	brne	.-80     	; 0x9a6 <printIOStr+0x62>
	LCD_puts(buffer,20);
     9f6:	64 e1       	ldi	r22, 0x14	; 20
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
	LCD_gotoXY(9,2);
     a00:	62 e0       	ldi	r22, 0x02	; 2
     a02:	89 e0       	ldi	r24, 0x09	; 9
     a04:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
	strcpy_P(buffer,DVX);strcat(buffer,":");	//ДВХ:
     a08:	63 e7       	ldi	r22, 0x73	; 115
     a0a:	71 e0       	ldi	r23, 0x01	; 1
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	0e 94 67 1a 	call	0x34ce	; 0x34ce <strcpy_P>
     a14:	62 ed       	ldi	r22, 0xD2	; 210
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	ce 01       	movw	r24, r28
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	0e 94 77 1a 	call	0x34ee	; 0x34ee <strcat>
	if((*data & 0xF0) ==0) strcat_P(buffer,NET);	//"нет"
     a20:	f7 01       	movw	r30, r14
     a22:	80 81       	ld	r24, Z
     a24:	80 7f       	andi	r24, 0xF0	; 240
     a26:	39 f4       	brne	.+14     	; 0xa36 <printIOStr+0xf2>
     a28:	67 eb       	ldi	r22, 0xB7	; 183
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	ce 01       	movw	r24, r28
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <strcat_P>
     a34:	2b c0       	rjmp	.+86     	; 0xa8c <printIOStr+0x148>
     a36:	04 e0       	ldi	r16, 0x04	; 4
     a38:	10 e0       	ldi	r17, 0x00	; 0
	else for(i=4;i<8;i++) if( chkBit(*data,i) ) strcat(buffer,itoa(i-4+1,tmpStr,10));	//рисуем номера неисправных
     a3a:	cc 24       	eor	r12, r12
     a3c:	c3 94       	inc	r12
     a3e:	d1 2c       	mov	r13, r1
     a40:	f7 01       	movw	r30, r14
     a42:	80 81       	ld	r24, Z
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	96 01       	movw	r18, r12
     a48:	00 2e       	mov	r0, r16
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <printIOStr+0x10c>
     a4c:	22 0f       	add	r18, r18
     a4e:	33 1f       	adc	r19, r19
     a50:	0a 94       	dec	r0
     a52:	e2 f7       	brpl	.-8      	; 0xa4c <printIOStr+0x108>
     a54:	82 23       	and	r24, r18
     a56:	93 23       	and	r25, r19
     a58:	00 2e       	mov	r0, r16
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <printIOStr+0x11c>
     a5c:	95 95       	asr	r25
     a5e:	87 95       	ror	r24
     a60:	0a 94       	dec	r0
     a62:	e2 f7       	brpl	.-8      	; 0xa5c <printIOStr+0x118>
     a64:	89 2b       	or	r24, r25
     a66:	69 f0       	breq	.+26     	; 0xa82 <printIOStr+0x13e>
     a68:	4a e0       	ldi	r20, 0x0A	; 10
     a6a:	be 01       	movw	r22, r28
     a6c:	6b 5e       	subi	r22, 0xEB	; 235
     a6e:	7f 4f       	sbci	r23, 0xFF	; 255
     a70:	c8 01       	movw	r24, r16
     a72:	03 97       	sbiw	r24, 0x03	; 3
     a74:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
     a78:	bc 01       	movw	r22, r24
     a7a:	ce 01       	movw	r24, r28
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	0e 94 77 1a 	call	0x34ee	; 0x34ee <strcat>
     a82:	0f 5f       	subi	r16, 0xFF	; 255
     a84:	1f 4f       	sbci	r17, 0xFF	; 255
     a86:	08 30       	cpi	r16, 0x08	; 8
     a88:	11 05       	cpc	r17, r1
     a8a:	d1 f6       	brne	.-76     	; 0xa40 <printIOStr+0xfc>
	LCD_puts(buffer,20);
     a8c:	64 e1       	ldi	r22, 0x14	; 20
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
}
     a96:	6b 96       	adiw	r28, 0x1b	; 27
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	08 95       	ret

00000ab4 <printMTZStr>:

static inline void printMTZStr(unsigned int MTZon,unsigned int MTZoff)
{
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	6b 97       	sbiw	r28, 0x1b	; 27
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	7c 01       	movw	r14, r24
     ad2:	8b 01       	movw	r16, r22
	char buffer[20];
	char tmpStr[7];
	//строка 2 "вкл.МТЗ"
	LCD_gotoXY(0,2);
     ad4:	62 e0       	ldi	r22, 0x02	; 2
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
	strcpy_P(buffer,VKL_MTZ);
     adc:	62 e8       	ldi	r22, 0x82	; 130
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 67 1a 	call	0x34ce	; 0x34ce <strcpy_P>
	if(MTZon==0xFFFF)strcat_P(buffer,NET);
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	e8 16       	cp	r14, r24
     aec:	f8 06       	cpc	r15, r24
     aee:	19 f4       	brne	.+6      	; 0xaf6 <printMTZStr+0x42>
     af0:	67 eb       	ldi	r22, 0xB7	; 183
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	0e c0       	rjmp	.+28     	; 0xb12 <printMTZStr+0x5e>
     af6:	4a e0       	ldi	r20, 0x0A	; 10
     af8:	be 01       	movw	r22, r28
     afa:	6b 5e       	subi	r22, 0xEB	; 235
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	c7 01       	movw	r24, r14
     b00:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
	else {strcat(buffer,itoa(MTZon,tmpStr,10));strcat_P(buffer,MS);}
     b04:	bc 01       	movw	r22, r24
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	0e 94 77 1a 	call	0x34ee	; 0x34ee <strcat>
     b0e:	65 e7       	ldi	r22, 0x75	; 117
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	ce 01       	movw	r24, r28
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <strcat_P>
	LCD_puts(buffer,20);
     b1a:	64 e1       	ldi	r22, 0x14	; 20
     b1c:	ce 01       	movw	r24, r28
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>

	//строка 3 "откл.МТЗ"
	LCD_gotoXY(0,3);
     b24:	63 e0       	ldi	r22, 0x03	; 3
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
	strcpy_P(buffer,OTKL_MTZ);
     b2c:	68 e7       	ldi	r22, 0x78	; 120
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	0e 94 67 1a 	call	0x34ce	; 0x34ce <strcpy_P>
	if(MTZoff==0xFFFF)strcat_P(buffer,NET);
     b38:	0f 3f       	cpi	r16, 0xFF	; 255
     b3a:	8f ef       	ldi	r24, 0xFF	; 255
     b3c:	18 07       	cpc	r17, r24
     b3e:	19 f4       	brne	.+6      	; 0xb46 <printMTZStr+0x92>
     b40:	67 eb       	ldi	r22, 0xB7	; 183
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	0e c0       	rjmp	.+28     	; 0xb62 <printMTZStr+0xae>
     b46:	4a e0       	ldi	r20, 0x0A	; 10
     b48:	be 01       	movw	r22, r28
     b4a:	6b 5e       	subi	r22, 0xEB	; 235
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	c8 01       	movw	r24, r16
     b50:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
	else{strcat(buffer,itoa(MTZoff,tmpStr,10));strcat_P(buffer,MS);}
     b54:	bc 01       	movw	r22, r24
     b56:	ce 01       	movw	r24, r28
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	0e 94 77 1a 	call	0x34ee	; 0x34ee <strcat>
     b5e:	65 e7       	ldi	r22, 0x75	; 117
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	ce 01       	movw	r24, r28
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <strcat_P>
	LCD_puts(buffer,20);
     b6a:	64 e1       	ldi	r22, 0x14	; 20
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>

}
     b74:	6b 96       	adiw	r28, 0x1b	; 27
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <printTimeStr.constprop.2>:
		}
	}
	return 0;
}

static inline void printTimeStr(volatile unsigned char *data, unsigned char x,unsigned char y)
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	64 97       	sbiw	r28, 0x14	; 20
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	fc 01       	movw	r30, r24
{
	char buffer[20];

	sprintf(buffer,"%02u.%02u.%02u  %02u:%02u:%02u",*data,*(data+1),*(data+2),*(data+3),*(data+4),*(data+5));
     ba8:	55 81       	ldd	r21, Z+5	; 0x05
     baa:	44 81       	ldd	r20, Z+4	; 0x04
     bac:	33 81       	ldd	r19, Z+3	; 0x03
     bae:	22 81       	ldd	r18, Z+2	; 0x02
     bb0:	91 81       	ldd	r25, Z+1	; 0x01
     bb2:	80 81       	ld	r24, Z
     bb4:	1f 92       	push	r1
     bb6:	5f 93       	push	r21
     bb8:	1f 92       	push	r1
     bba:	4f 93       	push	r20
     bbc:	1f 92       	push	r1
     bbe:	3f 93       	push	r19
     bc0:	1f 92       	push	r1
     bc2:	2f 93       	push	r18
     bc4:	1f 92       	push	r1
     bc6:	9f 93       	push	r25
     bc8:	1f 92       	push	r1
     bca:	8f 93       	push	r24
     bcc:	84 ed       	ldi	r24, 0xD4	; 212
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	9f 93       	push	r25
     bd2:	8f 93       	push	r24
     bd4:	8e 01       	movw	r16, r28
     bd6:	0f 5f       	subi	r16, 0xFF	; 255
     bd8:	1f 4f       	sbci	r17, 0xFF	; 255
     bda:	1f 93       	push	r17
     bdc:	0f 93       	push	r16
     bde:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <sprintf>
	LCD_gotoXY(x,y);
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
	LCD_puts(buffer,20);
     bea:	64 e1       	ldi	r22, 0x14	; 20
     bec:	c8 01       	movw	r24, r16
     bee:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
}
     bfc:	64 96       	adiw	r28, 0x14	; 20
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	08 95       	ret

00000c12 <LCD_puts_P>:

void LCD_puts_P(const char *FlashLoc, char nBytes)
{
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	d6 2f       	mov	r29, r22

	for(unsigned char i=0; i<nBytes; i++)
     c1c:	c0 e0       	ldi	r28, 0x00	; 0
     c1e:	cd 17       	cp	r28, r29
     c20:	a9 f0       	breq	.+42     	; 0xc4c <LCD_puts_P+0x3a>
	{
		if(pgm_read_byte(&FlashLoc[i])==0)			//если дошли до конца строки
     c22:	fc 01       	movw	r30, r24
     c24:	24 91       	lpm	r18, Z
     c26:	8c 01       	movw	r16, r24
     c28:	0f 5f       	subi	r16, 0xFF	; 255
     c2a:	1f 4f       	sbci	r17, 0xFF	; 255
     c2c:	21 11       	cpse	r18, r1
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <LCD_puts_P+0x2c>
		{
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
     c30:	80 e2       	ldi	r24, 0x20	; 32
     c32:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_putchar>
     c36:	cf 5f       	subi	r28, 0xFF	; 255
     c38:	cd 17       	cp	r28, r29
     c3a:	d0 f3       	brcs	.-12     	; 0xc30 <LCD_puts_P+0x1e>
     c3c:	07 c0       	rjmp	.+14     	; 0xc4c <LCD_puts_P+0x3a>
			return;
		}
		else LCD_putchar(pgm_read_byte(&FlashLoc[i]));
     c3e:	fc 01       	movw	r30, r24
     c40:	84 91       	lpm	r24, Z
     c42:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_putchar>
}

void LCD_puts_P(const char *FlashLoc, char nBytes)
{

	for(unsigned char i=0; i<nBytes; i++)
     c46:	cf 5f       	subi	r28, 0xFF	; 255
     c48:	c8 01       	movw	r24, r16
     c4a:	e9 cf       	rjmp	.-46     	; 0xc1e <LCD_puts_P+0xc>
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
			return;
		}
		else LCD_putchar(pgm_read_byte(&FlashLoc[i]));
	}
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	08 95       	ret

00000c56 <printTOUT>:
	return tmpKey;
}

static inline void printTOUT(void)
{
	LCD_gotoXY(0,2);LCD_puts_P(NET_SVYAZI,20);
     c56:	62 e0       	ldi	r22, 0x02	; 2
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
     c5e:	64 e1       	ldi	r22, 0x14	; 20
     c60:	8b eb       	ldi	r24, 0xBB	; 187
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0c 94 09 06 	jmp	0xc12	; 0xc12 <LCD_puts_P>

00000c68 <printMenuHeader>:


}

static inline void printMenuHeader(PGM_P name)
{
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
	//прорисовываем заголовок "NAME:"
	LCD_clr();
     c6e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_clr>
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
     c72:	ce 01       	movw	r24, r28
     c74:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__strlen_P>
	LCD_puts_P(name,strlen_P(name));
     c78:	68 2f       	mov	r22, r24
     c7a:	ce 01       	movw	r24, r28
     c7c:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
	LCD_putchar(0x3A);
     c80:	8a e3       	ldi	r24, 0x3A	; 58
}
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
static inline void printMenuHeader(PGM_P name)
{
	//прорисовываем заголовок "NAME:"
	LCD_clr();
	LCD_puts_P(name,strlen_P(name));
	LCD_putchar(0x3A);
     c86:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <LCD_putchar>

00000c8a <SPI_init>:
#define DD_MOSI DDB5
#define DD_SCK  DDB7
#define DD_CS DDB4

/* Set MOSI and SCK and CS output, all others input */
DDRB |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     c8a:	87 b3       	in	r24, 0x17	; 23
     c8c:	80 6b       	ori	r24, 0xB0	; 176
     c8e:	87 bb       	out	0x17, r24	; 23
//все выходы pullup
PORTB |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     c90:	88 b3       	in	r24, 0x18	; 24
     c92:	80 6b       	ori	r24, 0xB0	; 176
     c94:	88 bb       	out	0x18, r24	; 24
/* Enable SPI, Master, set clock rate fck/64 (250kHz) SCK в покое=hi, выборка по зад. фронту CPHA=1*/
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<CPOL)|(1<<CPHA);//
     c96:	8e e5       	ldi	r24, 0x5E	; 94
     c98:	8d b9       	out	0x0d, r24	; 13
     c9a:	08 95       	ret

00000c9c <SPI_transmit>:

unsigned char SPI_transmit(char cData)
{

/* Start transmission */
SPDR = cData;
     c9c:	8f b9       	out	0x0f, r24	; 15
SPI_timeout=S_TOUT;
     c9e:	88 ee       	ldi	r24, 0xE8	; 232
     ca0:	93 e0       	ldi	r25, 0x03	; 3
     ca2:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <SPI_timeout+0x1>
     ca6:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <SPI_timeout>

/* Wait for transmission complete */
#warning НЕКОРРЕКТНАЯ ОТРАБОТКА ОШИБКИ (spi.h)

while(!(SPSR & (1<<SPIF))) if(SPI_timeout==0){CAN_ERR=SPI;return -1;}
     caa:	77 99       	sbic	0x0e, 7	; 14
     cac:	0b c0       	rjmp	.+22     	; 0xcc4 <SPI_transmit+0x28>
     cae:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <SPI_timeout>
     cb2:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <SPI_timeout+0x1>
     cb6:	89 2b       	or	r24, r25
     cb8:	c1 f7       	brne	.-16     	; 0xcaa <SPI_transmit+0xe>
     cba:	86 e0       	ldi	r24, 0x06	; 6
     cbc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <CAN_ERR>
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	08 95       	ret

return SPDR;
     cc4:	8f b1       	in	r24, 0x0f	; 15
}
     cc6:	08 95       	ret

00000cc8 <CAN_getStatus>:
}

static unsigned char CAN_getStatus(void)
{
unsigned char data;
clrBit(CSPINPORT,CSPIN);
     cc8:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0xA0);
     cca:	80 ea       	ldi	r24, 0xA0	; 160
     ccc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
//SPI_transmit(0x00);
data=SPI_transmit(0x00);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     cd6:	c4 9a       	sbi	0x18, 4	; 24
return data;
}
     cd8:	08 95       	ret

00000cda <CAN_read>:
	setBit(CSPINPORT,CSPIN);
}
}

static unsigned char CAN_read(unsigned char numOfReg)
{
     cda:	cf 93       	push	r28
     cdc:	c8 2f       	mov	r28, r24
unsigned char data;

clrBit(CSPINPORT,CSPIN);
     cde:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x03);  //команда чтения
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(numOfReg);
     ce6:	8c 2f       	mov	r24, r28
     ce8:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
data=SPI_transmit(0x00);
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     cf2:	c4 9a       	sbi	0x18, 4	; 24
return data;
}
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <CAN_bitModify>:
SPI_transmit(data);
setBit(CSPINPORT,CSPIN);
}

static void CAN_bitModify(unsigned char numOfReg, unsigned char MASK, unsigned char DATA)
{
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	18 2f       	mov	r17, r24
     d00:	d6 2f       	mov	r29, r22
     d02:	c4 2f       	mov	r28, r20
clrBit(CSPINPORT,CSPIN);
     d04:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x05);//Команда модификации
     d06:	85 e0       	ldi	r24, 0x05	; 5
     d08:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(numOfReg);
     d0c:	81 2f       	mov	r24, r17
     d0e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(MASK);
     d12:	8d 2f       	mov	r24, r29
     d14:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(DATA);
     d18:	8c 2f       	mov	r24, r28
     d1a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     d1e:	c4 9a       	sbi	0x18, 4	; 24
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	08 95       	ret

00000d28 <CAN_write>:
setBit(CSPINPORT,CSPIN);
return data;
}

static void CAN_write(unsigned char numOfReg, unsigned char data)
{
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	d8 2f       	mov	r29, r24
     d2e:	c6 2f       	mov	r28, r22
clrBit(CSPINPORT,CSPIN);
     d30:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);  //команда записи
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(numOfReg);
     d38:	8d 2f       	mov	r24, r29
     d3a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(data);
     d3e:	8c 2f       	mov	r24, r28
     d40:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     d44:	c4 9a       	sbi	0x18, 4	; 24
}
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <CANgetPosition>:

signed char CANgetPosition(void)
{
	signed char index;

	CAN_timeout=CAN_TOUT;
     d4c:	88 ee       	ldi	r24, 0xE8	; 232
     d4e:	93 e0       	ldi	r25, 0x03	; 3
     d50:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <CAN_timeout+0x1>
     d54:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <CAN_timeout>
	while(CANRXcounter==0)
     d58:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <CANRXcounter>
     d5c:	81 11       	cpse	r24, r1
     d5e:	0b c0       	rjmp	.+22     	; 0xd76 <CANgetPosition+0x2a>
	{
		if(CAN_timeout==0) {CAN_ERR=CANTOUT;return -1;};
     d60:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <CAN_timeout>
     d64:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <CAN_timeout+0x1>
     d68:	89 2b       	or	r24, r25
     d6a:	b1 f7       	brne	.-20     	; 0xd58 <CANgetPosition+0xc>
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <CAN_ERR>
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	08 95       	ret
	}
	asm ("cli");
     d76:	f8 94       	cli
	CANRXcounter--;
     d78:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <CANRXcounter>
     d7c:	81 50       	subi	r24, 0x01	; 1
     d7e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <CANRXcounter>
	asm ("sei");
     d82:	78 94       	sei
	index=CANRDindex;
     d84:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <CANRDindex>
	if(++CANRDindex == CAN_RX_BUFFER_SIZE)CANRDindex=0;
     d88:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <CANRDindex>
     d8c:	9f 5f       	subi	r25, 0xFF	; 255
     d8e:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <CANRDindex>
     d92:	9a 30       	cpi	r25, 0x0A	; 10
     d94:	11 f4       	brne	.+4      	; 0xd9a <CANgetPosition+0x4e>
     d96:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <CANRDindex>
	return index;
}
     d9a:	08 95       	ret

00000d9c <CAN_gets>:
	if(CAN_ERR)return -1;
	return 1;
}
//получить строку
char *CAN_gets(char *str,unsigned char length)
{
     d9c:	9f 92       	push	r9
     d9e:	af 92       	push	r10
     da0:	bf 92       	push	r11
     da2:	cf 92       	push	r12
     da4:	df 92       	push	r13
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	d8 2f       	mov	r29, r24
     db4:	c9 2f       	mov	r28, r25
     db6:	b6 2e       	mov	r11, r22
	unsigned char i=CANgetPosition(),j;
     db8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <CANgetPosition>
	unsigned long int ID=CANRXbuf[i].ID;
     dbc:	9d e0       	ldi	r25, 0x0D	; 13
     dbe:	89 9f       	mul	r24, r25
     dc0:	f0 01       	movw	r30, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	ee 52       	subi	r30, 0x2E	; 46
     dc6:	fb 4f       	sbci	r31, 0xFB	; 251
     dc8:	c0 80       	ld	r12, Z
     dca:	d1 80       	ldd	r13, Z+1	; 0x01
     dcc:	e2 80       	ldd	r14, Z+2	; 0x02
     dce:	f3 80       	ldd	r15, Z+3	; 0x03
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
     dd0:	0d 2f       	mov	r16, r29
     dd2:	1c 2f       	mov	r17, r28
	{
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
     dd4:	9d e0       	ldi	r25, 0x0D	; 13
     dd6:	a9 2e       	mov	r10, r25
     dd8:	2d e0       	ldi	r18, 0x0D	; 13
     dda:	92 2e       	mov	r9, r18
	unsigned char i=CANgetPosition(),j;
	unsigned long int ID=CANRXbuf[i].ID;
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
     ddc:	b1 10       	cpse	r11, r1
     dde:	03 c0       	rjmp	.+6      	; 0xde6 <CAN_gets+0x4a>
			str+=CANRXbuf[i].dataLength;
			i=CANgetPosition();
			if(CAN_ERR) return NULL;
			if(CANRXbuf[i].ID != ID){CAN_ERR=CANID;return NULL;}//LCDsendChar('e')
		}
		else return tmp;
     de0:	8d 2f       	mov	r24, r29
     de2:	9c 2f       	mov	r25, r28
     de4:	41 c0       	rjmp	.+130    	; 0xe68 <CAN_gets+0xcc>
     de6:	40 e0       	ldi	r20, 0x00	; 0
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
	{
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
     de8:	a8 9e       	mul	r10, r24
     dea:	f0 01       	movw	r30, r0
     dec:	11 24       	eor	r1, r1
     dee:	ee 52       	subi	r30, 0x2E	; 46
     df0:	fb 4f       	sbci	r31, 0xFB	; 251
     df2:	bf 01       	movw	r22, r30
     df4:	6c 5f       	subi	r22, 0xFC	; 252
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	db 01       	movw	r26, r22
     dfa:	8c 91       	ld	r24, X
     dfc:	24 2f       	mov	r18, r20
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	48 17       	cp	r20, r24
     e02:	60 f4       	brcc	.+24     	; 0xe1c <CAN_gets+0x80>
     e04:	cf 01       	movw	r24, r30
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	dc 01       	movw	r26, r24
     e0c:	15 96       	adiw	r26, 0x05	; 5
     e0e:	8c 91       	ld	r24, X
     e10:	20 0f       	add	r18, r16
     e12:	31 1f       	adc	r19, r17
     e14:	d9 01       	movw	r26, r18
     e16:	8c 93       	st	X, r24
     e18:	4f 5f       	subi	r20, 0xFF	; 255
     e1a:	ee cf       	rjmp	.-36     	; 0xdf8 <CAN_gets+0x5c>
		if(str[j-1] !=0)	//последний принятый символ не \0
     e1c:	20 0f       	add	r18, r16
     e1e:	31 1f       	adc	r19, r17
     e20:	d9 01       	movw	r26, r18
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	8c 91       	ld	r24, X
     e26:	88 23       	and	r24, r24
     e28:	d9 f2       	breq	.-74     	; 0xde0 <CAN_gets+0x44>
		{
			str+=CANRXbuf[i].dataLength;
     e2a:	84 81       	ldd	r24, Z+4	; 0x04
     e2c:	08 0f       	add	r16, r24
     e2e:	11 1d       	adc	r17, r1
			i=CANgetPosition();
     e30:	0e 94 a6 06 	call	0xd4c	; 0xd4c <CANgetPosition>
			if(CAN_ERR) return NULL;
     e34:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <CAN_ERR>
     e38:	91 11       	cpse	r25, r1
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <CAN_gets+0xc8>
			if(CANRXbuf[i].ID != ID){CAN_ERR=CANID;return NULL;}//LCDsendChar('e')
     e3c:	98 9e       	mul	r9, r24
     e3e:	f0 01       	movw	r30, r0
     e40:	11 24       	eor	r1, r1
     e42:	ee 52       	subi	r30, 0x2E	; 46
     e44:	fb 4f       	sbci	r31, 0xFB	; 251
     e46:	40 81       	ld	r20, Z
     e48:	51 81       	ldd	r21, Z+1	; 0x01
     e4a:	62 81       	ldd	r22, Z+2	; 0x02
     e4c:	73 81       	ldd	r23, Z+3	; 0x03
     e4e:	ba 94       	dec	r11
     e50:	c4 16       	cp	r12, r20
     e52:	d5 06       	cpc	r13, r21
     e54:	e6 06       	cpc	r14, r22
     e56:	f7 06       	cpc	r15, r23
     e58:	09 f2       	breq	.-126    	; 0xddc <CAN_gets+0x40>
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <CAN_ERR>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <CAN_gets+0xcc>
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
		if(str[j-1] !=0)	//последний принятый символ не \0
		{
			str+=CANRXbuf[i].dataLength;
			i=CANgetPosition();
			if(CAN_ERR) return NULL;
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
		}
		else return tmp;
	}
	if(length==0){CAN_ERR=CANSTROVF;return NULL;}
	return tmp;
}
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	9f 90       	pop	r9
     e7e:	08 95       	ret

00000e80 <CAN_loadTXbuf>:
	CAN_ERR=0;
}


signed char CAN_loadTXbuf(unsigned long int ID, unsigned char dataLenght, unsigned char *data, unsigned char CAN_TX_MSG_SETTING)
{//ID==EID<28:11> SID<10:0>
     e80:	af 92       	push	r10
     e82:	bf 92       	push	r11
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	6b 01       	movw	r12, r22
     e96:	7c 01       	movw	r14, r24
     e98:	14 2f       	mov	r17, r20
     e9a:	59 01       	movw	r10, r18
#define EIDFLG  CAN_TX_MSG_SETTING & 0x08 //флаг расширенного идентификатора

unsigned char i,j;
unsigned char SIDL = 0;
unsigned char status=CAN_getStatus();
     e9c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <CAN_getStatus>


//SID<2:0> == ID & 0x00000007
//EID<17:16> == (ID >> 27) & 0x00000003
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);
     ea0:	dc 2d       	mov	r29, r12
     ea2:	d2 95       	swap	r29
     ea4:	dd 0f       	add	r29, r29
     ea6:	d0 7e       	andi	r29, 0xE0	; 224
     ea8:	90 2f       	mov	r25, r16
     eaa:	98 70       	andi	r25, 0x08	; 8
     eac:	d9 2b       	or	r29, r25
     eae:	b7 01       	movw	r22, r14
     eb0:	a6 01       	movw	r20, r12
     eb2:	eb e1       	ldi	r30, 0x1B	; 27
     eb4:	76 95       	lsr	r23
     eb6:	67 95       	ror	r22
     eb8:	57 95       	ror	r21
     eba:	47 95       	ror	r20
     ebc:	ea 95       	dec	r30
     ebe:	d1 f7       	brne	.-12     	; 0xeb4 <CAN_loadTXbuf+0x34>
     ec0:	43 70       	andi	r20, 0x03	; 3
     ec2:	d4 2b       	or	r29, r20


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
  {
  if( chkBit(status,(i*2)) )continue; //если установлен флаг TXREQ -значить буфер занят
     ec4:	86 ff       	sbrs	r24, 6
     ec6:	0b c0       	rjmp	.+22     	; 0xede <CAN_loadTXbuf+0x5e>
     ec8:	84 ff       	sbrs	r24, 4
     eca:	0b c0       	rjmp	.+22     	; 0xee2 <CAN_loadTXbuf+0x62>
     ecc:	82 fd       	sbrc	r24, 2
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <CAN_loadTXbuf+0x54>
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
     ed0:	c1 e0       	ldi	r28, 0x01	; 1
     ed2:	08 c0       	rjmp	.+16     	; 0xee4 <CAN_loadTXbuf+0x64>
  {
  if( chkBit(status,(i*2)) )continue; //если установлен флаг TXREQ -значить буфер занят
  else break;
  }

if(i==0) {CAN_ERR=CANBUFOVF;return -1;} //всё занято
     ed4:	85 e0       	ldi	r24, 0x05	; 5
     ed6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <CAN_ERR>
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	58 c0       	rjmp	.+176    	; 0xf8e <CAN_loadTXbuf+0x10e>
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
     ede:	c3 e0       	ldi	r28, 0x03	; 3
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <CAN_loadTXbuf+0x64>
     ee2:	c2 e0       	ldi	r28, 0x02	; 2
  }

if(i==0) {CAN_ERR=CANBUFOVF;return -1;} //всё занято
//в результате i-это номер свободного буфера с более высоким приоритетом

asm("cli");
     ee4:	f8 94       	cli
clrBit(CSPINPORT,CSPIN);
     ee6:	c4 98       	cbi	0x18, 4	; 24
//запись регистров командой write
SPI_transmit(0x02);                   	//Команда записи
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(i*0x10+0x20);             	//начало записи(TXBnCTRL)-регистр конфигурации
     eee:	8c 2f       	mov	r24, r28
     ef0:	82 95       	swap	r24
     ef2:	80 7f       	andi	r24, 0xF0	; 240
     ef4:	80 5e       	subi	r24, 0xE0	; 224
     ef6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(CAN_TX_MSG_SETTING & 0x03);//приоритет сообщения
     efa:	80 2f       	mov	r24, r16
     efc:	83 70       	andi	r24, 0x03	; 3
     efe:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
//запись ID
SPI_transmit((ID >> 3)  & 0x000000FF); 	//SIDH
     f02:	d7 01       	movw	r26, r14
     f04:	c6 01       	movw	r24, r12
     f06:	23 e0       	ldi	r18, 0x03	; 3
     f08:	b6 95       	lsr	r27
     f0a:	a7 95       	ror	r26
     f0c:	97 95       	ror	r25
     f0e:	87 95       	ror	r24
     f10:	2a 95       	dec	r18
     f12:	d1 f7       	brne	.-12     	; 0xf08 <CAN_loadTXbuf+0x88>
     f14:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(SIDL);
     f18:	8d 2f       	mov	r24, r29
     f1a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
if(1/*EIDFLG*/)	//EID пишем палюбому(запись по регистрам идет подряд)
{
	SPI_transmit((ID >> 19) & 0x000000FF);	//EID
     f1e:	d7 01       	movw	r26, r14
     f20:	c6 01       	movw	r24, r12
     f22:	33 e1       	ldi	r19, 0x13	; 19
     f24:	b6 95       	lsr	r27
     f26:	a7 95       	ror	r26
     f28:	97 95       	ror	r25
     f2a:	87 95       	ror	r24
     f2c:	3a 95       	dec	r19
     f2e:	d1 f7       	brne	.-12     	; 0xf24 <CAN_loadTXbuf+0xa4>
     f30:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
	SPI_transmit((ID >> 11) & 0x000000FF);
     f34:	d7 01       	movw	r26, r14
     f36:	c6 01       	movw	r24, r12
     f38:	4b e0       	ldi	r20, 0x0B	; 11
     f3a:	b6 95       	lsr	r27
     f3c:	a7 95       	ror	r26
     f3e:	97 95       	ror	r25
     f40:	87 95       	ror	r24
     f42:	4a 95       	dec	r20
     f44:	d1 f7       	brne	.-12     	; 0xf3a <CAN_loadTXbuf+0xba>
     f46:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
}

//запись количества байт в сообщении
SPI_transmit(dataLenght);
     f4a:	81 2f       	mov	r24, r17
     f4c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
     f50:	75 01       	movw	r14, r10
//запись данных(не более 8 байт)
for(j=0;(j<dataLenght) && j<8;j++) SPI_transmit(*(data+j));
     f52:	d0 e0       	ldi	r29, 0x00	; 0
     f54:	d1 17       	cp	r29, r17
     f56:	49 f0       	breq	.+18     	; 0xf6a <CAN_loadTXbuf+0xea>
     f58:	d8 30       	cpi	r29, 0x08	; 8
     f5a:	39 f0       	breq	.+14     	; 0xf6a <CAN_loadTXbuf+0xea>
     f5c:	f7 01       	movw	r30, r14
     f5e:	81 91       	ld	r24, Z+
     f60:	7f 01       	movw	r14, r30
     f62:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
     f66:	df 5f       	subi	r29, 0xFF	; 255
     f68:	f5 cf       	rjmp	.-22     	; 0xf54 <CAN_loadTXbuf+0xd4>
setBit(CSPINPORT,CSPIN);
     f6a:	c4 9a       	sbi	0x18, 4	; 24

//автоматический запрос на передачу
if(CAN_TX_MSG_SETTING & 0x04) CAN_RTS(i-1);
     f6c:	02 ff       	sbrs	r16, 2
     f6e:	0d c0       	rjmp	.+26     	; 0xf8a <CAN_loadTXbuf+0x10a>

static void CAN_RTS(unsigned char numOfBuf) //request to send
{
if(numOfBuf < 3)
{
	clrBit(CSPINPORT,CSPIN);
     f70:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(0x80 | (1<<numOfBuf));
     f72:	2f ef       	ldi	r18, 0xFF	; 255
     f74:	2c 0f       	add	r18, r28
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	01 c0       	rjmp	.+2      	; 0xf7e <CAN_loadTXbuf+0xfe>
     f7c:	88 0f       	add	r24, r24
     f7e:	2a 95       	dec	r18
     f80:	ea f7       	brpl	.-6      	; 0xf7c <CAN_loadTXbuf+0xfc>
     f82:	80 68       	ori	r24, 0x80	; 128
     f84:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
	setBit(CSPINPORT,CSPIN);
     f88:	c4 9a       	sbi	0x18, 4	; 24
for(j=0;(j<dataLenght) && j<8;j++) SPI_transmit(*(data+j));
setBit(CSPINPORT,CSPIN);

//автоматический запрос на передачу
if(CAN_TX_MSG_SETTING & 0x04) CAN_RTS(i-1);
asm("sei");
     f8a:	78 94       	sei
return i; //если все ОК возвращаем номер буфера
     f8c:	8c 2f       	mov	r24, r28
}
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ff 90       	pop	r15
     f98:	ef 90       	pop	r14
     f9a:	df 90       	pop	r13
     f9c:	cf 90       	pop	r12
     f9e:	bf 90       	pop	r11
     fa0:	af 90       	pop	r10
     fa2:	08 95       	ret

00000fa4 <CAN_puts>:
	return 1;
}

//отсыл строки
signed char CAN_puts(char *str, unsigned char length, unsigned long int ID)	//посылаем строку с /0 на конце
{
     fa4:	8f 92       	push	r8
     fa6:	9f 92       	push	r9
     fa8:	af 92       	push	r10
     faa:	bf 92       	push	r11
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	7c 01       	movw	r14, r24
     fba:	c6 2f       	mov	r28, r22
     fbc:	49 01       	movw	r8, r18
     fbe:	5a 01       	movw	r10, r20
	for(unsigned char i=0;i<length/8;i++)
     fc0:	16 2f       	mov	r17, r22
     fc2:	16 95       	lsr	r17
     fc4:	16 95       	lsr	r17
     fc6:	16 95       	lsr	r17
     fc8:	d0 e0       	ldi	r29, 0x00	; 0
     fca:	d1 17       	cp	r29, r17
     fcc:	91 f0       	breq	.+36     	; 0xff2 <CAN_puts+0x4e>
	{
		CAN_loadTXbuf(ID,8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME );//LCDsendChar+'0'& CAN_TX_NO_RTS
     fce:	0f ef       	ldi	r16, 0xFF	; 255
     fd0:	97 01       	movw	r18, r14
     fd2:	48 e0       	ldi	r20, 0x08	; 8
     fd4:	c5 01       	movw	r24, r10
     fd6:	b4 01       	movw	r22, r8
     fd8:	0e 94 40 07 	call	0xe80	; 0xe80 <CAN_loadTXbuf>
		if(CAN_ERR)return -1;
     fdc:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <CAN_ERR>
     fe0:	88 23       	and	r24, r24
     fe2:	11 f0       	breq	.+4      	; 0xfe8 <CAN_puts+0x44>
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	13 c0       	rjmp	.+38     	; 0x100e <CAN_puts+0x6a>
		str+=8;
     fe8:	88 e0       	ldi	r24, 0x08	; 8
     fea:	e8 0e       	add	r14, r24
     fec:	f1 1c       	adc	r15, r1
}

//отсыл строки
signed char CAN_puts(char *str, unsigned char length, unsigned long int ID)	//посылаем строку с /0 на конце
{
	for(unsigned char i=0;i<length/8;i++)
     fee:	df 5f       	subi	r29, 0xFF	; 255
     ff0:	ec cf       	rjmp	.-40     	; 0xfca <CAN_puts+0x26>
	{
		CAN_loadTXbuf(ID,8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME );//LCDsendChar+'0'& CAN_TX_NO_RTS
		if(CAN_ERR)return -1;
		str+=8;
	}
	if(length%8)CAN_loadTXbuf(ID,length%8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME);
     ff2:	4c 2f       	mov	r20, r28
     ff4:	47 70       	andi	r20, 0x07	; 7
     ff6:	31 f0       	breq	.+12     	; 0x1004 <CAN_puts+0x60>
     ff8:	0f ef       	ldi	r16, 0xFF	; 255
     ffa:	97 01       	movw	r18, r14
     ffc:	c5 01       	movw	r24, r10
     ffe:	b4 01       	movw	r22, r8
    1000:	0e 94 40 07 	call	0xe80	; 0xe80 <CAN_loadTXbuf>
	if(CAN_ERR)return -1;
    1004:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <CAN_ERR>
    1008:	81 11       	cpse	r24, r1
    100a:	ec cf       	rjmp	.-40     	; 0xfe4 <CAN_puts+0x40>
	return 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
}
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	bf 90       	pop	r11
    101c:	af 90       	pop	r10
    101e:	9f 90       	pop	r9
    1020:	8f 90       	pop	r8
    1022:	08 95       	ret

00001024 <CAN_readRXbuf>:
asm("sei");
return i; //если все ОК возвращаем номер буфера
}

volatile unsigned char *CAN_readRXbuf(volatile unsigned long int *ID, volatile unsigned char *data, volatile unsigned char *dataLen, unsigned char *CAN_RX_MSG_FLAGS)
{
    1024:	2f 92       	push	r2
    1026:	3f 92       	push	r3
    1028:	4f 92       	push	r4
    102a:	5f 92       	push	r5
    102c:	6f 92       	push	r6
    102e:	7f 92       	push	r7
    1030:	8f 92       	push	r8
    1032:	9f 92       	push	r9
    1034:	af 92       	push	r10
    1036:	bf 92       	push	r11
    1038:	cf 92       	push	r12
    103a:	df 92       	push	r13
    103c:	ef 92       	push	r14
    103e:	ff 92       	push	r15
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	00 d0       	rcall	.+0      	; 0x104a <CAN_readRXbuf+0x26>
    104a:	00 d0       	rcall	.+0      	; 0x104c <CAN_readRXbuf+0x28>
    104c:	1f 92       	push	r1
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	1c 01       	movw	r2, r24
    1054:	8b 01       	movw	r16, r22
    1056:	5d 83       	std	Y+5, r21	; 0x05
    1058:	4c 83       	std	Y+4, r20	; 0x04
    105a:	79 01       	movw	r14, r18
#define EID ( EID0 | EID8<<8 | (SIDL&0x03)<<16 )

//поиск заполненного буфера
for(i=0;i<2;i++)
  {
  if( CAN_getStatus() & (1<<i)  ) break;
    105c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <CAN_getStatus>
    1060:	80 fd       	sbrc	r24, 0
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <CAN_readRXbuf+0x4e>
    1064:	0e 94 64 06 	call	0xcc8	; 0xcc8 <CAN_getStatus>
    1068:	81 fd       	sbrc	r24, 1
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <CAN_readRXbuf+0x52>
  }
// i-содержит номер буфера
if(i==2)return 0;//если все буферы пусты возвращаем 0
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	91 c0       	rjmp	.+290    	; 0x1194 <CAN_readRXbuf+0x170>

#define SID ( SIDL>>5 | SIDH<<3 )
#define EID ( EID0 | EID8<<8 | (SIDL&0x03)<<16 )

//поиск заполненного буфера
for(i=0;i<2;i++)
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <CAN_readRXbuf+0x54>
    1076:	81 e0       	ldi	r24, 0x01	; 1
  if( CAN_getStatus() & (1<<i)  ) break;
  }
// i-содержит номер буфера
if(i==2)return 0;//если все буферы пусты возвращаем 0

clrBit(CSPINPORT,CSPIN);
    1078:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit( 0x90 | (i<<2) );// команда чтения с SIDH
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	80 69       	ori	r24, 0x90	; 144
    1086:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SIDH = SPI_transmit(0x00);
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
    1090:	88 2e       	mov	r8, r24
    1092:	91 2c       	mov	r9, r1
    1094:	a1 2c       	mov	r10, r1
    1096:	b1 2c       	mov	r11, r1
SIDL = SPI_transmit(0x00);
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	48 2e       	mov	r4, r24
    10a2:	51 2c       	mov	r5, r1
    10a4:	61 2c       	mov	r6, r1
    10a6:	71 2c       	mov	r7, r1

EID8 = SPI_transmit(0x00);
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
    10ae:	8a 83       	std	Y+2, r24	; 0x02
EID0 = SPI_transmit(0x00);
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
    10b6:	8b 83       	std	Y+3, r24	; 0x03
*dataLen = SPI_transmit(0x00);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
    10be:	ec 81       	ldd	r30, Y+4	; 0x04
    10c0:	fd 81       	ldd	r31, Y+5	; 0x05
    10c2:	80 83       	st	Z, r24
    10c4:	1d 82       	std	Y+5, r1	; 0x05
    10c6:	1c 82       	std	Y+4, r1	; 0x04
    10c8:	cc 80       	ldd	r12, Y+4	; 0x04
    10ca:	dd 80       	ldd	r13, Y+5	; 0x05
    10cc:	c0 0e       	add	r12, r16
    10ce:	d1 1e       	adc	r13, r17

for(i=0;i<8;i++) *(data+i) = SPI_transmit(0x00);
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
    10d6:	f6 01       	movw	r30, r12
    10d8:	80 83       	st	Z, r24
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	9d 81       	ldd	r25, Y+5	; 0x05
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	9d 83       	std	Y+5, r25	; 0x05
    10e2:	8c 83       	std	Y+4, r24	; 0x04
    10e4:	08 97       	sbiw	r24, 0x08	; 8
    10e6:	81 f7       	brne	.-32     	; 0x10c8 <CAN_readRXbuf+0xa4>
setBit(CSPINPORT,CSPIN);
    10e8:	c4 9a       	sbi	0x18, 4	; 24

if((SIDL & 0x08) ==0) EID8=EID0=0;	//если идентификатор не расширенный обнуляем EID
    10ea:	99 81       	ldd	r25, Y+1	; 0x01
    10ec:	93 ff       	sbrs	r25, 3
    10ee:	0b c0       	rjmp	.+22     	; 0x1106 <CAN_readRXbuf+0xe2>
clrBit(CSPINPORT,CSPIN);
SPI_transmit( 0x90 | (i<<2) );// команда чтения с SIDH
SIDH = SPI_transmit(0x00);
SIDL = SPI_transmit(0x00);

EID8 = SPI_transmit(0x00);
    10f0:	ea 81       	ldd	r30, Y+2	; 0x02
    10f2:	4e 2f       	mov	r20, r30
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	70 e0       	ldi	r23, 0x00	; 0
EID0 = SPI_transmit(0x00);
    10fa:	fb 81       	ldd	r31, Y+3	; 0x03
    10fc:	8f 2f       	mov	r24, r31
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a0 e0       	ldi	r26, 0x00	; 0
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <CAN_readRXbuf+0xee>
*dataLen = SPI_transmit(0x00);

for(i=0;i<8;i++) *(data+i) = SPI_transmit(0x00);
setBit(CSPINPORT,CSPIN);

if((SIDL & 0x08) ==0) EID8=EID0=0;	//если идентификатор не расширенный обнуляем EID
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	dc 01       	movw	r26, r24
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	ba 01       	movw	r22, r20

*ID=0;
    1112:	f1 01       	movw	r30, r2
    1114:	10 82       	st	Z, r1
    1116:	11 82       	std	Z+1, r1	; 0x01
    1118:	12 82       	std	Z+2, r1	; 0x02
    111a:	13 82       	std	Z+3, r1	; 0x03
*ID= EID<<11 | SID;
    111c:	29 81       	ldd	r18, Y+1	; 0x01
    111e:	23 70       	andi	r18, 0x03	; 3
    1120:	a2 2b       	or	r26, r18
    1122:	76 2f       	mov	r23, r22
    1124:	65 2f       	mov	r22, r21
    1126:	54 2f       	mov	r21, r20
    1128:	44 27       	eor	r20, r20
    112a:	48 2b       	or	r20, r24
    112c:	59 2b       	or	r21, r25
    112e:	6a 2b       	or	r22, r26
    1130:	7b 2b       	or	r23, r27
    1132:	ab e0       	ldi	r26, 0x0B	; 11
    1134:	44 0f       	add	r20, r20
    1136:	55 1f       	adc	r21, r21
    1138:	66 1f       	adc	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	aa 95       	dec	r26
    113e:	d1 f7       	brne	.-12     	; 0x1134 <CAN_readRXbuf+0x110>
    1140:	b5 e0       	ldi	r27, 0x05	; 5
    1142:	76 94       	lsr	r7
    1144:	67 94       	ror	r6
    1146:	57 94       	ror	r5
    1148:	47 94       	ror	r4
    114a:	ba 95       	dec	r27
    114c:	d1 f7       	brne	.-12     	; 0x1142 <CAN_readRXbuf+0x11e>
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	88 0c       	add	r8, r8
    1152:	99 1c       	adc	r9, r9
    1154:	aa 1c       	adc	r10, r10
    1156:	bb 1c       	adc	r11, r11
    1158:	8a 95       	dec	r24
    115a:	d1 f7       	brne	.-12     	; 0x1150 <CAN_readRXbuf+0x12c>
    115c:	84 28       	or	r8, r4
    115e:	95 28       	or	r9, r5
    1160:	a6 28       	or	r10, r6
    1162:	b7 28       	or	r11, r7
    1164:	48 29       	or	r20, r8
    1166:	59 29       	or	r21, r9
    1168:	6a 29       	or	r22, r10
    116a:	7b 29       	or	r23, r11
    116c:	40 83       	st	Z, r20
    116e:	51 83       	std	Z+1, r21	; 0x01
    1170:	62 83       	std	Z+2, r22	; 0x02
    1172:	73 83       	std	Z+3, r23	; 0x03

*CAN_RX_MSG_FLAGS=0;
    1174:	f7 01       	movw	r30, r14
    1176:	10 82       	st	Z, r1
*CAN_RX_MSG_FLAGS|=CAN_read(0x2D) & CAN_RX_OVF; //ошибка переполнения
    1178:	8d e2       	ldi	r24, 0x2D	; 45
    117a:	0e 94 6d 06 	call	0xcda	; 0xcda <CAN_read>
    117e:	80 7c       	andi	r24, 0xC0	; 192
    1180:	f7 01       	movw	r30, r14
    1182:	90 81       	ld	r25, Z
    1184:	89 2b       	or	r24, r25
    1186:	80 83       	st	Z, r24

if(*CAN_RX_MSG_FLAGS & CAN_RX_OVF );//PORTC |= 1<<3;

CAN_bitModify(0x2D,0xC0,0x00);            //сброс флага переполнения
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	60 ec       	ldi	r22, 0xC0	; 192
    118c:	8d e2       	ldi	r24, 0x2D	; 45
    118e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <CAN_bitModify>
return data;
    1192:	c8 01       	movw	r24, r16
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	cf 90       	pop	r12
    11ae:	bf 90       	pop	r11
    11b0:	af 90       	pop	r10
    11b2:	9f 90       	pop	r9
    11b4:	8f 90       	pop	r8
    11b6:	7f 90       	pop	r7
    11b8:	6f 90       	pop	r6
    11ba:	5f 90       	pop	r5
    11bc:	4f 90       	pop	r4
    11be:	3f 90       	pop	r3
    11c0:	2f 90       	pop	r2
    11c2:	08 95       	ret

000011c4 <CAN_readMessage>:



//чтение сообщения из "железного" буфера в программный
signed char CAN_readMessage(void)
{
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	1f 92       	push	r1
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
	unsigned char msg_flags=0;
    11ce:	19 82       	std	Y+1, r1	; 0x01

	CAN_readRXbuf(&CANRXbuf[CANRWindex].ID, CANRXbuf[CANRWindex].data, &CANRXbuf[CANRWindex].dataLength, &msg_flags);
    11d0:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <CANRWindex>
    11d4:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <CANRWindex>
    11d8:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <CANRWindex>
    11dc:	8d e0       	ldi	r24, 0x0D	; 13
    11de:	84 9f       	mul	r24, r20
    11e0:	a0 01       	movw	r20, r0
    11e2:	11 24       	eor	r1, r1
    11e4:	4a 52       	subi	r20, 0x2A	; 42
    11e6:	5b 4f       	sbci	r21, 0xFB	; 251
    11e8:	86 9f       	mul	r24, r22
    11ea:	b0 01       	movw	r22, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	69 52       	subi	r22, 0x29	; 41
    11f0:	7b 4f       	sbci	r23, 0xFB	; 251
    11f2:	89 9f       	mul	r24, r25
    11f4:	c0 01       	movw	r24, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	9e 01       	movw	r18, r28
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	8e 52       	subi	r24, 0x2E	; 46
    1200:	9b 4f       	sbci	r25, 0xFB	; 251
    1202:	0e 94 12 08 	call	0x1024	; 0x1024 <CAN_readRXbuf>

	if(++CANRWindex==CAN_RX_BUFFER_SIZE)   CANRWindex=0;
    1206:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <CANRWindex>
    120a:	8f 5f       	subi	r24, 0xFF	; 255
    120c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <CANRWindex>
    1210:	8a 30       	cpi	r24, 0x0A	; 10
    1212:	11 f4       	brne	.+4      	; 0x1218 <CAN_readMessage+0x54>
    1214:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <CANRWindex>
	if((++CANRXcounter==CAN_RX_BUFFER_SIZE)) {CANRXcounter=0;CAN_ERR=CANBUFOVF;return -1;}	//переполнение программного буфера
    1218:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <CANRXcounter>
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <CANRXcounter>
    1222:	8a 30       	cpi	r24, 0x0A	; 10
    1224:	19 f4       	brne	.+6      	; 0x122c <CAN_readMessage+0x68>
    1226:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <CANRXcounter>
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <CAN_readMessage+0x6e>
	if(msg_flags & CAN_RX_OVF){CAN_ERR=CANBUFOVF;return -1;}								//переполнение аппаратног буфера
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	80 7c       	andi	r24, 0xC0	; 192
    1230:	29 f0       	breq	.+10     	; 0x123c <CAN_readMessage+0x78>
    1232:	85 e0       	ldi	r24, 0x05	; 5
    1234:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <CAN_ERR>
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	01 c0       	rjmp	.+2      	; 0x123e <CAN_readMessage+0x7a>
	return 1;
    123c:	81 e0       	ldi	r24, 0x01	; 1
}
    123e:	0f 90       	pop	r0
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	08 95       	ret

00001246 <CAN_setMask>:
CAN_bitModify(0x2D,0xC0,0x00);            //сброс флага переполнения
return data;
}

void CAN_setMask(unsigned char addrOfMask,unsigned long int MASK)
{//MASK==EID<28:11> SID<10:0>
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	d8 2f       	mov	r29, r24
    1254:	6a 01       	movw	r12, r20
    1256:	7b 01       	movw	r14, r22
unsigned char RXM_SIDL = ((MASK & 0x00000007) << 5) | ((MASK >> 27) & 0x00000003);
    1258:	db 01       	movw	r26, r22
    125a:	ca 01       	movw	r24, r20
    125c:	2b e1       	ldi	r18, 0x1B	; 27
    125e:	b6 95       	lsr	r27
    1260:	a7 95       	ror	r26
    1262:	97 95       	ror	r25
    1264:	87 95       	ror	r24
    1266:	2a 95       	dec	r18
    1268:	d1 f7       	brne	.-12     	; 0x125e <CAN_setMask+0x18>
    126a:	c8 2f       	mov	r28, r24
    126c:	c3 70       	andi	r28, 0x03	; 3
    126e:	84 2f       	mov	r24, r20
    1270:	82 95       	swap	r24
    1272:	88 0f       	add	r24, r24
    1274:	80 7e       	andi	r24, 0xE0	; 224
    1276:	c8 2b       	or	r28, r24
//unsigned char i=0;

//if(addrOfMask>0x24)return;

clrBit(CSPINPORT,CSPIN);
    1278:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);        //команда записи
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(addrOfMask);   //начальная ячейка
    1280:	8d 2f       	mov	r24, r29
    1282:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit((MASK >> 3)  & 0x000000FF);
    1286:	d7 01       	movw	r26, r14
    1288:	c6 01       	movw	r24, r12
    128a:	33 e0       	ldi	r19, 0x03	; 3
    128c:	b6 95       	lsr	r27
    128e:	a7 95       	ror	r26
    1290:	97 95       	ror	r25
    1292:	87 95       	ror	r24
    1294:	3a 95       	dec	r19
    1296:	d1 f7       	brne	.-12     	; 0x128c <CAN_setMask+0x46>
    1298:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(RXM_SIDL);
    129c:	8c 2f       	mov	r24, r28
    129e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit((MASK >> 19) & 0x000000FF);
    12a2:	d7 01       	movw	r26, r14
    12a4:	c6 01       	movw	r24, r12
    12a6:	43 e1       	ldi	r20, 0x13	; 19
    12a8:	b6 95       	lsr	r27
    12aa:	a7 95       	ror	r26
    12ac:	97 95       	ror	r25
    12ae:	87 95       	ror	r24
    12b0:	4a 95       	dec	r20
    12b2:	d1 f7       	brne	.-12     	; 0x12a8 <CAN_setMask+0x62>
    12b4:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit((MASK >> 11) & 0x000000FF);
    12b8:	d7 01       	movw	r26, r14
    12ba:	c6 01       	movw	r24, r12
    12bc:	5b e0       	ldi	r21, 0x0B	; 11
    12be:	b6 95       	lsr	r27
    12c0:	a7 95       	ror	r26
    12c2:	97 95       	ror	r25
    12c4:	87 95       	ror	r24
    12c6:	5a 95       	dec	r21
    12c8:	d1 f7       	brne	.-12     	; 0x12be <CAN_setMask+0x78>
    12ca:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    12ce:	c4 9a       	sbi	0x18, 4	; 24
}
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	df 90       	pop	r13
    12da:	cf 90       	pop	r12
    12dc:	08 95       	ret

000012de <CAN_setFilter>:

void CAN_setFilter(unsigned char addrOfFilter, unsigned long int FILTER, unsigned char CAN_TYPE_FRAME)
{//FILTER==EID<28:11> SID<10:0>
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	d8 2f       	mov	r29, r24
    12ec:	6a 01       	movw	r12, r20
    12ee:	7b 01       	movw	r14, r22
unsigned char RXF_SIDL = ((FILTER & 0x00000007) << 5) | ((FILTER >> 27) & 0x00000003) | (CAN_TYPE_FRAME & 0x08);
    12f0:	c4 2f       	mov	r28, r20
    12f2:	c2 95       	swap	r28
    12f4:	cc 0f       	add	r28, r28
    12f6:	c0 7e       	andi	r28, 0xE0	; 224
    12f8:	28 70       	andi	r18, 0x08	; 8
    12fa:	c2 2b       	or	r28, r18
    12fc:	8b e1       	ldi	r24, 0x1B	; 27
    12fe:	76 95       	lsr	r23
    1300:	67 95       	ror	r22
    1302:	57 95       	ror	r21
    1304:	47 95       	ror	r20
    1306:	8a 95       	dec	r24
    1308:	d1 f7       	brne	.-12     	; 0x12fe <CAN_setFilter+0x20>
    130a:	43 70       	andi	r20, 0x03	; 3
    130c:	c4 2b       	or	r28, r20
//unsigned char i=0;

//if(addrOfFilter>0x18)return;

clrBit(CSPINPORT,CSPIN);
    130e:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);        //команда записи
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(addrOfFilter); //начальная ячейка
    1316:	8d 2f       	mov	r24, r29
    1318:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit((FILTER >> 3)  & 0x000000FF);  //RXF_SIDH
    131c:	d7 01       	movw	r26, r14
    131e:	c6 01       	movw	r24, r12
    1320:	23 e0       	ldi	r18, 0x03	; 3
    1322:	b6 95       	lsr	r27
    1324:	a7 95       	ror	r26
    1326:	97 95       	ror	r25
    1328:	87 95       	ror	r24
    132a:	2a 95       	dec	r18
    132c:	d1 f7       	brne	.-12     	; 0x1322 <CAN_setFilter+0x44>
    132e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit(RXF_SIDL);
    1332:	8c 2f       	mov	r24, r28
    1334:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit((FILTER >> 19) & 0x000000FF);  //RXF_EID8
    1338:	d7 01       	movw	r26, r14
    133a:	c6 01       	movw	r24, r12
    133c:	33 e1       	ldi	r19, 0x13	; 19
    133e:	b6 95       	lsr	r27
    1340:	a7 95       	ror	r26
    1342:	97 95       	ror	r25
    1344:	87 95       	ror	r24
    1346:	3a 95       	dec	r19
    1348:	d1 f7       	brne	.-12     	; 0x133e <CAN_setFilter+0x60>
    134a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
SPI_transmit((FILTER >> 11) & 0x000000FF);  //RXF_EID0
    134e:	d7 01       	movw	r26, r14
    1350:	c6 01       	movw	r24, r12
    1352:	4b e0       	ldi	r20, 0x0B	; 11
    1354:	b6 95       	lsr	r27
    1356:	a7 95       	ror	r26
    1358:	97 95       	ror	r25
    135a:	87 95       	ror	r24
    135c:	4a 95       	dec	r20
    135e:	d1 f7       	brne	.-12     	; 0x1354 <CAN_setFilter+0x76>
    1360:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    1364:	c4 9a       	sbi	0x18, 4	; 24
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	08 95       	ret

00001374 <interrupt_init>:


void interrupt_init(void)
{
	//���� ��� ���������� �� CAN
	DDRD &= ~(1<<DDD2);	//PORTD.2 ����
    1374:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= 1<<DDD2;	//pull up
    1376:	92 9a       	sbi	0x12, 2	; 18

	MCUCR &= 0xFC;	//���������� �� ������� ������
    1378:	85 b7       	in	r24, 0x35	; 53
    137a:	8c 7f       	andi	r24, 0xFC	; 252
    137c:	85 bf       	out	0x35, r24	; 53
	GICR |= 0x40;	//INT0 ���
    137e:	8b b7       	in	r24, 0x3b	; 59
    1380:	80 64       	ori	r24, 0x40	; 64
    1382:	8b bf       	out	0x3b, r24	; 59
    1384:	08 95       	ret

00001386 <timers_init>:
	// Input Capture on Falling Edge
	// Timer 1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=0x00;
    1386:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x0A; 	// Clock value: 2000 kHz
    1388:	8a e0       	ldi	r24, 0x0A	; 10
    138a:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
    138c:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
    138e:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
    1390:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
    1392:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x07;	//���������� 1 ��
    1394:	87 e0       	ldi	r24, 0x07	; 7
    1396:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0xD0;
    1398:	80 ed       	ldi	r24, 0xD0	; 208
    139a:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;	//
    139c:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
    139e:	18 bc       	out	0x28, r1	; 40

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK |= 1<<OCIE1A;// | 1<<OCIE1B;
    13a0:	89 b7       	in	r24, 0x39	; 57
    13a2:	80 61       	ori	r24, 0x10	; 16
    13a4:	89 bf       	out	0x39, r24	; 57
    13a6:	08 95       	ret

000013a8 <CAN_init>:
}

signed char CAN_init(unsigned char mode)
  {
    13a8:	cf 93       	push	r28
    13aa:	c8 2f       	mov	r28, r24
  signed char result;

  SPI_init();
    13ac:	0e 94 45 06 	call	0xc8a	; 0xc8a <SPI_init>
  //��������� ����������
  //DDRB &= ~(1<<2);	//PORTB.2 ����
  //PORTB |= 1<<2;		//pull up
  //GICR=0x00;	//���������� �� ������� ������

  CSPINDDR |= 1<<CSPIN; 	//��� CS �����
    13b0:	bc 9a       	sbi	0x17, 4	; 23
  CSPINPORT |= 1<<CSPIN;	// Hi-level
    13b2:	c4 9a       	sbi	0x18, 4	; 24

static void CAN_reset(void)
{
clrBit(CSPINPORT,CSPIN);
    13b4:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0xC0);
    13b6:	80 ec       	ldi	r24, 0xC0	; 192
    13b8:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    13bc:	c4 9a       	sbi	0x18, 4	; 24

  CAN_reset();

  //��������� �������� (125 kib/s)
    CAN_bitModify(CNF2,0x80,0x80); //���������� ���������� ���������������� PHSEG2 (BTLMODE==1)
    13be:	40 e8       	ldi	r20, 0x80	; 128
    13c0:	60 e8       	ldi	r22, 0x80	; 128
    13c2:	89 e2       	ldi	r24, 0x29	; 41
    13c4:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <CAN_bitModify>
    CAN_write(CNF1,0x05);// SJW==1Tq, BRP==6;
    13c8:	65 e0       	ldi	r22, 0x05	; 5
    13ca:	8a e2       	ldi	r24, 0x2A	; 42
    13cc:	0e 94 94 06 	call	0xd28	; 0xd28 <CAN_write>
    CAN_write(CNF2,0x89);// BTLMODE==1,SAM==0,PRSEG2==2Tq,PHSEG1==2Tq ;
    13d0:	69 e8       	ldi	r22, 0x89	; 137
    13d2:	89 e2       	ldi	r24, 0x29	; 41
    13d4:	0e 94 94 06 	call	0xd28	; 0xd28 <CAN_write>
    CAN_write(CNF3,0x02);// PHSEG2==3Tq ;
    13d8:	62 e0       	ldi	r22, 0x02	; 2
    13da:	88 e2       	ldi	r24, 0x28	; 40
    13dc:	0e 94 94 06 	call	0xd28	; 0xd28 <CAN_write>
  //��������� ������� 5 ��� SID
  CAN_bitModify(RXB1CTRL,0b01100111,0b00100101);
  #endif

  //��������� ���������� �� ������ ����� �������
  CAN_bitModify(CANINTE,0x03,0x03);
    13e0:	43 e0       	ldi	r20, 0x03	; 3
    13e2:	63 e0       	ldi	r22, 0x03	; 3
    13e4:	8b e2       	ldi	r24, 0x2B	; 43
    13e6:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <CAN_bitModify>
return (CAN_read(CANSTAT) & 0xE0);
}

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0
    13ea:	4c 2f       	mov	r20, r28
    13ec:	6f ef       	ldi	r22, 0xFF	; 255
    13ee:	8f e0       	ldi	r24, 0x0F	; 15
    13f0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <CAN_bitModify>
return data;
}

static unsigned char CAN_getOpMode(void)
{
return (CAN_read(CANSTAT) & 0xE0);
    13f4:	8e e0       	ldi	r24, 0x0E	; 14
    13f6:	0e 94 6d 06 	call	0xcda	; 0xcda <CAN_read>

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0

if( (CAN_getOpMode() )!=CAN_MODE ) return -1;
    13fa:	80 7e       	andi	r24, 0xE0	; 224
    13fc:	c8 13       	cpse	r28, r24
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <CAN_init+0x5c>
else return 1;//
    1400:	c1 e0       	ldi	r28, 0x01	; 1
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <CAN_init+0x5e>

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0

if( (CAN_getOpMode() )!=CAN_MODE ) return -1;
    1404:	cf ef       	ldi	r28, 0xFF	; 255
//  will not occur and the new message will be moved into
//  RXB1, regardless of the acceptance criteria of RXB1.


  //set rollover-mode
  CAN_bitModify(RXB0CTRL,0x04,0x04);
    1406:	44 e0       	ldi	r20, 0x04	; 4
    1408:	64 e0       	ldi	r22, 0x04	; 4
    140a:	80 e6       	ldi	r24, 0x60	; 96
    140c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <CAN_bitModify>

  //set one-shot-mode
  //CAN_bitModify(CANCTRL,0x08,0x08);

  return result;
  }
    1410:	8c 2f       	mov	r24, r28
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <bki_init>:

void bki_init(void)
{
    1416:	cf 92       	push	r12
    1418:	df 92       	push	r13
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	cf 93       	push	r28
	asm("cli");
    1420:	f8 94       	cli
	//������������� ����������
	DDRC &= ~((1<<7) | (1<<6) | (1<<5));//�����
    1422:	84 b3       	in	r24, 0x14	; 20
    1424:	8f 71       	andi	r24, 0x1F	; 31
    1426:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<7) | (1<<6) | (1<<5);	//Pull Up
    1428:	85 b3       	in	r24, 0x15	; 21
    142a:	80 6e       	ori	r24, 0xE0	; 224
    142c:	85 bb       	out	0x15, r24	; 21
	DDRD &= ~((1<<5) | (1<<4) | (1<<3));//�����
    142e:	81 b3       	in	r24, 0x11	; 17
    1430:	87 7c       	andi	r24, 0xC7	; 199
    1432:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<5) | (1<<4) | (1<<3);	//Pull Up
    1434:	82 b3       	in	r24, 0x12	; 18
    1436:	88 63       	ori	r24, 0x38	; 56
    1438:	82 bb       	out	0x12, r24	; 18
	DDRA |= (1<<BEEP);					//�������
    143a:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1<<BEEP);
    143c:	dc 98       	cbi	0x1b, 4	; 27
	DDRA |= 1<<5;						//��� ����������
    143e:	d5 9a       	sbi	0x1a, 5	; 26
	PORTA |= 1<<5;
    1440:	dd 9a       	sbi	0x1b, 5	; 27
	DDRA |= (1<<OUT1) | (1<<OUT2) | (1<<OUT3) | (1<<OUT4);	//����
    1442:	8a b3       	in	r24, 0x1a	; 26
    1444:	8f 60       	ori	r24, 0x0F	; 15
    1446:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<OUT1) | (1<<OUT2) | (1<<OUT3) | (1<<OUT4);	//��������
    1448:	8b b3       	in	r24, 0x1b	; 27
    144a:	8f 60       	ori	r24, 0x0F	; 15
    144c:	8b bb       	out	0x1b, r24	; 27

	//������������� LCD
	LCD_init();
    144e:	0e 94 84 03 	call	0x708	; 0x708 <LCD_init>
	LCD_visible();
    1452:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <LCD_visible>
	LCD_clr();
    1456:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_clr>

	//����
	TWI_init();
    145a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <TWI_init>
	rtc_get(&rtc);
    145e:	8c ec       	ldi	r24, 0xCC	; 204
    1460:	94 e0       	ldi	r25, 0x04	; 4
    1462:	0e 94 8b 02 	call	0x516	; 0x516 <rtc_get>
	if(rtc_check()<0){ERROR=RTC;/*return;*/}
    1466:	0e 94 03 03 	call	0x606	; 0x606 <rtc_check>
    146a:	87 ff       	sbrs	r24, 7
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <bki_init+0x5e>
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>

	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <eeprom_read_dword>
    147c:	6b 01       	movw	r12, r22
    147e:	7c 01       	movw	r14, r24
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    1488:	c8 2f       	mov	r28, r24
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    1492:	a7 01       	movw	r20, r14
    1494:	96 01       	movw	r18, r12
    1496:	6c 2f       	mov	r22, r28
    1498:	0e 94 45 18 	call	0x308a	; 0x308a <MODB_init>

UCSRB |= 1<<RXCIE;	//���������� UARTRX
    149c:	57 9a       	sbi	0x0a, 7	; 10

	interrupt_init();
    149e:	0e 94 ba 09 	call	0x1374	; 0x1374 <interrupt_init>
	timers_init();
    14a2:	0e 94 c3 09 	call	0x1386	; 0x1386 <timers_init>
	asm("sei");
    14a6:	78 94       	sei
    14a8:	2f ef       	ldi	r18, 0xFF	; 255
    14aa:	89 e6       	ldi	r24, 0x69	; 105
    14ac:	98 e1       	ldi	r25, 0x18	; 24
    14ae:	21 50       	subi	r18, 0x01	; 1
    14b0:	80 40       	sbci	r24, 0x00	; 0
    14b2:	90 40       	sbci	r25, 0x00	; 0
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <bki_init+0x98>
    14b6:	00 c0       	rjmp	.+0      	; 0x14b8 <bki_init+0xa2>
    14b8:	00 00       	nop

	_delay_ms(500);
	if(CAN_init(CAN_MODE_NORMAL)<1){ERROR=CAN;return;}
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <CAN_init>
    14c0:	18 16       	cp	r1, r24
    14c2:	1c f0       	brlt	.+6      	; 0x14ca <bki_init+0xb4>
    14c4:	83 e0       	ldi	r24, 0x03	; 3
    14c6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>

//	_
//_delay_ms(500);


}
    14ca:	cf 91       	pop	r28
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	08 95       	ret

000014d6 <ping>:
signed char send_cmd(unsigned char addr,unsigned char cmd);
signed char send_read_arch(unsigned char part,unsigned char addr,unsigned char index);
static inline signed char checkTOUT(unsigned char addr);

void ping(void)
{
    14d6:	0f 93       	push	r16
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	27 97       	sbiw	r28, 0x07	; 7
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char data[7];

	for(unsigned char i=1;i<MAXQDEV;i++) inSysBDZ[i].flags=1<<FLT;	//перед посылкой команды обнуляем все флаги.Установленный флаг INL будет говорить о том,что ответ принят
    14f0:	39 e0       	ldi	r19, 0x09	; 9
    14f2:	22 e0       	ldi	r18, 0x02	; 2
    14f4:	38 9f       	mul	r19, r24
    14f6:	f0 01       	movw	r30, r0
    14f8:	39 9f       	mul	r19, r25
    14fa:	f0 0d       	add	r31, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	e3 5c       	subi	r30, 0xC3	; 195
    1500:	fe 4f       	sbci	r31, 0xFE	; 254
    1502:	20 87       	std	Z+8, r18	; 0x08
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	83 36       	cpi	r24, 0x63	; 99
    1508:	91 05       	cpc	r25, r1
    150a:	a1 f7       	brne	.-24     	; 0x14f4 <ping+0x1e>
	data[0]=PING;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	89 83       	std	Y+1, r24	; 0x01
	//синхронизация времени для БДЗ
	data[1]=rtc.day;
    1510:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <rtc+0x2>
    1514:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=rtc.month;
    1516:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <rtc+0x1>
    151a:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=rtc.year;
    151c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <rtc>
    1520:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=rtc.hours;
    1522:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <rtc+0x3>
    1526:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=rtc.minutes;
    1528:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <rtc+0x4>
    152c:	8e 83       	std	Y+6, r24	; 0x06
	data[6]=rtc.seconds;
    152e:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <rtc+0x5>
    1532:	8f 83       	std	Y+7, r24	; 0x07

	CAN_loadTXbuf(0,7,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    1534:	07 ef       	ldi	r16, 0xF7	; 247
    1536:	9e 01       	movw	r18, r28
    1538:	2f 5f       	subi	r18, 0xFF	; 255
    153a:	3f 4f       	sbci	r19, 0xFF	; 255
    153c:	47 e0       	ldi	r20, 0x07	; 7
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	cb 01       	movw	r24, r22
    1544:	0e 94 40 07 	call	0xe80	; 0xe80 <CAN_loadTXbuf>
}
    1548:	27 96       	adiw	r28, 0x07	; 7
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	0f 91       	pop	r16
    155a:	08 95       	ret

0000155c <scansys>:


}

static void scansys(void)
{
    155c:	ef 92       	push	r14
    155e:	ff 92       	push	r15
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	00 d0       	rcall	.+0      	; 0x156a <scansys+0xe>
    156a:	00 d0       	rcall	.+0      	; 0x156c <scansys+0x10>
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
	unsigned char i,j=0;
	char tmpStr[4];

	sys_state |= 1<<SCAN;
    1570:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    1574:	80 61       	ori	r24, 0x10	; 16
    1576:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <sys_state>
    157a:	01 e0       	ldi	r16, 0x01	; 1
    157c:	10 e0       	ldi	r17, 0x00	; 0
	for(i=1;i<MAXQDEV;i++) {eeprom_write_byte(&inSysBDZaddr[i],0);inSysBDZ[i].data[7]=0;}
    157e:	99 e0       	ldi	r25, 0x09	; 9
    1580:	f9 2e       	mov	r15, r25
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	c8 01       	movw	r24, r16
    1586:	87 5f       	subi	r24, 0xF7	; 247
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <eeprom_write_byte>
    158e:	f0 9e       	mul	r15, r16
    1590:	f0 01       	movw	r30, r0
    1592:	f1 9e       	mul	r15, r17
    1594:	f0 0d       	add	r31, r0
    1596:	11 24       	eor	r1, r1
    1598:	e3 5c       	subi	r30, 0xC3	; 195
    159a:	fe 4f       	sbci	r31, 0xFE	; 254
    159c:	17 82       	std	Z+7, r1	; 0x07
    159e:	0f 5f       	subi	r16, 0xFF	; 255
    15a0:	1f 4f       	sbci	r17, 0xFF	; 255
    15a2:	03 36       	cpi	r16, 0x63	; 99
    15a4:	11 05       	cpc	r17, r1
    15a6:	69 f7       	brne	.-38     	; 0x1582 <scansys+0x26>
	while(!eeprom_is_ready());
    15a8:	e1 99       	sbic	0x1c, 1	; 28
    15aa:	fe cf       	rjmp	.-4      	; 0x15a8 <scansys+0x4c>
	ping();
    15ac:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <ping>
    15b0:	2f ef       	ldi	r18, 0xFF	; 255
    15b2:	81 ee       	ldi	r24, 0xE1	; 225
    15b4:	94 e0       	ldi	r25, 0x04	; 4
    15b6:	21 50       	subi	r18, 0x01	; 1
    15b8:	80 40       	sbci	r24, 0x00	; 0
    15ba:	90 40       	sbci	r25, 0x00	; 0
    15bc:	e1 f7       	brne	.-8      	; 0x15b6 <scansys+0x5a>
    15be:	00 c0       	rjmp	.+0      	; 0x15c0 <scansys+0x64>
    15c0:	00 00       	nop
	_delay_ms(100);
	LCD_clr();
    15c2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_clr>
	LCD_puts_P(SCANIROVANIE,12);
    15c6:	6c e0       	ldi	r22, 0x0C	; 12
    15c8:	86 e5       	ldi	r24, 0x56	; 86
    15ca:	91 e0       	ldi	r25, 0x01	; 1
    15cc:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
    15d0:	18 e0       	ldi	r17, 0x08	; 8
	for(i=0;i<8;i++){LCD_putchar(0x2E);_delay_ms(500);}
    15d2:	8e e2       	ldi	r24, 0x2E	; 46
    15d4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_putchar>
    15d8:	2f ef       	ldi	r18, 0xFF	; 255
    15da:	89 e6       	ldi	r24, 0x69	; 105
    15dc:	98 e1       	ldi	r25, 0x18	; 24
    15de:	21 50       	subi	r18, 0x01	; 1
    15e0:	80 40       	sbci	r24, 0x00	; 0
    15e2:	90 40       	sbci	r25, 0x00	; 0
    15e4:	e1 f7       	brne	.-8      	; 0x15de <scansys+0x82>
    15e6:	00 c0       	rjmp	.+0      	; 0x15e8 <scansys+0x8c>
    15e8:	00 00       	nop
    15ea:	11 50       	subi	r17, 0x01	; 1
    15ec:	91 f7       	brne	.-28     	; 0x15d2 <scansys+0x76>

	sys_state =0;
    15ee:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <sys_state>
    15f2:	01 e0       	ldi	r16, 0x01	; 1
    15f4:	10 e0       	ldi	r17, 0x00	; 0

}

static void scansys(void)
{
	unsigned char i,j=0;
    15f6:	f1 2c       	mov	r15, r1
	LCD_clr();
	LCD_puts_P(SCANIROVANIE,12);
	for(i=0;i<8;i++){LCD_putchar(0x2E);_delay_ms(500);}

	sys_state =0;
	for(i=1;i<MAXQDEV;i++) if(inSysBDZ[i].data[7] == i) {writeID(i);j++;}
    15f8:	89 e0       	ldi	r24, 0x09	; 9
    15fa:	e8 2e       	mov	r14, r24
    15fc:	e0 9e       	mul	r14, r16
    15fe:	f0 01       	movw	r30, r0
    1600:	e1 9e       	mul	r14, r17
    1602:	f0 0d       	add	r31, r0
    1604:	11 24       	eor	r1, r1
    1606:	e3 5c       	subi	r30, 0xC3	; 195
    1608:	fe 4f       	sbci	r31, 0xFE	; 254
    160a:	67 81       	ldd	r22, Z+7	; 0x07
    160c:	60 13       	cpse	r22, r16
    160e:	06 c0       	rjmp	.+12     	; 0x161c <scansys+0xc0>
    1610:	c8 01       	movw	r24, r16
    1612:	87 5f       	subi	r24, 0xF7	; 247
    1614:	9f 4f       	sbci	r25, 0xFF	; 255
    1616:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <eeprom_write_byte>
    161a:	f3 94       	inc	r15
    161c:	0f 5f       	subi	r16, 0xFF	; 255
    161e:	1f 4f       	sbci	r17, 0xFF	; 255
    1620:	03 36       	cpi	r16, 0x63	; 99
    1622:	11 05       	cpc	r17, r1
    1624:	59 f7       	brne	.-42     	; 0x15fc <scansys+0xa0>


	LCD_gotoXY(0,2);
    1626:	62 e0       	ldi	r22, 0x02	; 2
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
	LCD_puts_P(OBNARUZHENO,16);
    162e:	60 e1       	ldi	r22, 0x10	; 16
    1630:	83 e9       	ldi	r24, 0x93	; 147
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
    1638:	4a e0       	ldi	r20, 0x0A	; 10
    163a:	be 01       	movw	r22, r28
    163c:	6f 5f       	subi	r22, 0xFF	; 255
    163e:	7f 4f       	sbci	r23, 0xFF	; 255
    1640:	8f 2d       	mov	r24, r15
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
	LCD_puts(itoa(j,tmpStr,10),3);
    1648:	63 e0       	ldi	r22, 0x03	; 3
    164a:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
	ping();
    164e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <ping>
    1652:	2f ef       	ldi	r18, 0xFF	; 255
    1654:	87 ea       	ldi	r24, 0xA7	; 167
    1656:	91 e6       	ldi	r25, 0x61	; 97
    1658:	21 50       	subi	r18, 0x01	; 1
    165a:	80 40       	sbci	r24, 0x00	; 0
    165c:	90 40       	sbci	r25, 0x00	; 0
    165e:	e1 f7       	brne	.-8      	; 0x1658 <scansys+0xfc>
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <scansys+0x106>
    1662:	00 00       	nop
	_delay_ms(2000);
	menuExit=EXITMENU;
    1664:	80 e3       	ldi	r24, 0x30	; 48
    1666:	95 e7       	ldi	r25, 0x75	; 117
    1668:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <menuExit+0x1>
    166c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <menuExit>
	ERROR=0;
    1670:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <ERROR>

	return ;
}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	08 95       	ret

0000168a <send_read_arch>:

signed char send_read_arch(unsigned char part,unsigned char addr,unsigned char index)
{
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	00 d0       	rcall	.+0      	; 0x1694 <send_read_arch+0xa>
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	16 2f       	mov	r17, r22
	unsigned char data[2]={(part==1)?(RD_ARCH_1):(RD_ARCH_2)};
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	11 f0       	breq	.+4      	; 0x16a2 <send_read_arch+0x18>
    169e:	85 e0       	ldi	r24, 0x05	; 5
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <send_read_arch+0x1a>
    16a2:	84 e0       	ldi	r24, 0x04	; 4
    16a4:	89 83       	std	Y+1, r24	; 0x01

	inSysBDZ[addr].flags=1<<FLT;	//перед посылкой команды обнуляем все флаги.Установленный флаг INL будет говорить о том,что ответ принят
    16a6:	89 e0       	ldi	r24, 0x09	; 9
    16a8:	18 9f       	mul	r17, r24
    16aa:	f0 01       	movw	r30, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	e3 5c       	subi	r30, 0xC3	; 195
    16b0:	fe 4f       	sbci	r31, 0xFE	; 254
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	80 87       	std	Z+8, r24	; 0x08
	data[1]=index;
    16b6:	4a 83       	std	Y+2, r20	; 0x02

	CAN_loadTXbuf((unsigned long int)addr,2,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    16b8:	61 2f       	mov	r22, r17
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	07 ef       	ldi	r16, 0xF7	; 247
    16c2:	9e 01       	movw	r18, r28
    16c4:	2f 5f       	subi	r18, 0xFF	; 255
    16c6:	3f 4f       	sbci	r19, 0xFF	; 255
    16c8:	42 e0       	ldi	r20, 0x02	; 2
    16ca:	0e 94 40 07 	call	0xe80	; 0xe80 <CAN_loadTXbuf>
	return 	checkTOUT(addr);
    16ce:	81 2f       	mov	r24, r17
    16d0:	0e 94 24 01 	call	0x248	; 0x248 <checkTOUT>
}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	08 95       	ret

000016e2 <send_prog>:

signed char send_prog(unsigned char addr,volatile unsigned char *param)
{
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <send_prog+0xa>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <send_prog+0xc>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <send_prog+0xe>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	18 2f       	mov	r17, r24
	unsigned char data[6]={PROG};
    16f6:	86 e0       	ldi	r24, 0x06	; 6
    16f8:	9e 01       	movw	r18, r28
    16fa:	2f 5f       	subi	r18, 0xFF	; 255
    16fc:	3f 4f       	sbci	r19, 0xFF	; 255
    16fe:	f9 01       	movw	r30, r18
    1700:	98 2f       	mov	r25, r24
    1702:	11 92       	st	Z+, r1
    1704:	9a 95       	dec	r25
    1706:	e9 f7       	brne	.-6      	; 0x1702 <send_prog+0x20>
    1708:	89 83       	std	Y+1, r24	; 0x01

	if(param != NULL) for(unsigned char i=0;i<6;i++)  data[i]=*(param+i);
    170a:	61 15       	cp	r22, r1
    170c:	71 05       	cpc	r23, r1
    170e:	61 f4       	brne	.+24     	; 0x1728 <send_prog+0x46>
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    1710:	89 e0       	ldi	r24, 0x09	; 9
    1712:	18 9f       	mul	r17, r24
    1714:	f0 01       	movw	r30, r0
    1716:	11 24       	eor	r1, r1
    1718:	e3 5c       	subi	r30, 0xC3	; 195
    171a:	fe 4f       	sbci	r31, 0xFE	; 254
    171c:	82 e0       	ldi	r24, 0x02	; 2
    171e:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,(param != NULL)?(6):(1),data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    1720:	67 2b       	or	r22, r23
    1722:	79 f4       	brne	.+30     	; 0x1742 <send_prog+0x60>
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e c0       	rjmp	.+28     	; 0x1744 <send_prog+0x62>
    1728:	f9 01       	movw	r30, r18

signed char send_prog(unsigned char addr,volatile unsigned char *param)
{
	unsigned char data[6]={PROG};

	if(param != NULL) for(unsigned char i=0;i<6;i++)  data[i]=*(param+i);
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	db 01       	movw	r26, r22
    1730:	a8 0f       	add	r26, r24
    1732:	b9 1f       	adc	r27, r25
    1734:	4c 91       	ld	r20, X
    1736:	41 93       	st	Z+, r20
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	86 30       	cpi	r24, 0x06	; 6
    173c:	91 05       	cpc	r25, r1
    173e:	b9 f7       	brne	.-18     	; 0x172e <send_prog+0x4c>
    1740:	e7 cf       	rjmp	.-50     	; 0x1710 <send_prog+0x2e>
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
	CAN_loadTXbuf((unsigned long int)addr,(param != NULL)?(6):(1),data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    1742:	46 e0       	ldi	r20, 0x06	; 6
    1744:	81 2f       	mov	r24, r17
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a0 e0       	ldi	r26, 0x00	; 0
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	07 ef       	ldi	r16, 0xF7	; 247
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 40 07 	call	0xe80	; 0xe80 <CAN_loadTXbuf>

	//если программируем широковещательно то ответа не будет
	return (addr==0)?(1):(checkTOUT(addr));
    1756:	11 23       	and	r17, r17
    1758:	21 f0       	breq	.+8      	; 0x1762 <send_prog+0x80>
    175a:	81 2f       	mov	r24, r17
    175c:	0e 94 24 01 	call	0x248	; 0x248 <checkTOUT>
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <send_prog+0x82>
    1762:	81 e0       	ldi	r24, 0x01	; 1
}
    1764:	26 96       	adiw	r28, 0x06	; 6
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	08 95       	ret

0000177a <send_cmd>:

signed char send_cmd(unsigned char addr,unsigned char cmd)
{
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	1f 92       	push	r1
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	18 2f       	mov	r17, r24
    178a:	69 83       	std	Y+1, r22	; 0x01
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    178c:	89 e0       	ldi	r24, 0x09	; 9
    178e:	18 9f       	mul	r17, r24
    1790:	f0 01       	movw	r30, r0
    1792:	11 24       	eor	r1, r1
    1794:	e3 5c       	subi	r30, 0xC3	; 195
    1796:	fe 4f       	sbci	r31, 0xFE	; 254
    1798:	82 e0       	ldi	r24, 0x02	; 2
    179a:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,1,&cmd,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    179c:	61 2f       	mov	r22, r17
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	07 ef       	ldi	r16, 0xF7	; 247
    17a6:	9e 01       	movw	r18, r28
    17a8:	2f 5f       	subi	r18, 0xFF	; 255
    17aa:	3f 4f       	sbci	r19, 0xFF	; 255
    17ac:	41 e0       	ldi	r20, 0x01	; 1
    17ae:	0e 94 40 07 	call	0xe80	; 0xe80 <CAN_loadTXbuf>

	if(cmd==RESET) return 1;	//не требует ответа
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	21 f0       	breq	.+8      	; 0x17c0 <send_cmd+0x46>
	return 	checkTOUT(addr);
    17b8:	81 2f       	mov	r24, r17
    17ba:	0e 94 24 01 	call	0x248	; 0x248 <checkTOUT>
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <send_cmd+0x48>
{
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
	CAN_loadTXbuf((unsigned long int)addr,1,&cmd,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);

	if(cmd==RESET) return 1;	//не требует ответа
    17c0:	81 e0       	ldi	r24, 0x01	; 1
	return 	checkTOUT(addr);
}
    17c2:	0f 90       	pop	r0
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	08 95       	ret

000017ce <__vector_1>:
}


//чтение принятого сообщения из буфера MCP2515 (CAN)
ISR(INT0_vect)
{
    17ce:	1f 92       	push	r1
    17d0:	0f 92       	push	r0
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	0f 92       	push	r0
    17d6:	11 24       	eor	r1, r1
    17d8:	8f 92       	push	r8
    17da:	9f 92       	push	r9
    17dc:	af 92       	push	r10
    17de:	bf 92       	push	r11
    17e0:	cf 92       	push	r12
    17e2:	df 92       	push	r13
    17e4:	ef 92       	push	r14
    17e6:	ff 92       	push	r15
    17e8:	2f 93       	push	r18
    17ea:	3f 93       	push	r19
    17ec:	4f 93       	push	r20
    17ee:	5f 93       	push	r21
    17f0:	6f 93       	push	r22
    17f2:	7f 93       	push	r23
    17f4:	8f 93       	push	r24
    17f6:	9f 93       	push	r25
    17f8:	af 93       	push	r26
    17fa:	bf 93       	push	r27
    17fc:	ef 93       	push	r30
    17fe:	ff 93       	push	r31
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	2e 97       	sbiw	r28, 0x0e	; 14
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	cd bf       	out	0x3d, r28	; 61
		unsigned char dataLength;
		unsigned char data[8];
		unsigned char msg_flags;
	}tmpBuf;

	CAN_readRXbuf(&tmpBuf.ID, tmpBuf.data, &tmpBuf.dataLength, &tmpBuf.msg_flags);
    180e:	9e 01       	movw	r18, r28
    1810:	22 5f       	subi	r18, 0xF2	; 242
    1812:	3f 4f       	sbci	r19, 0xFF	; 255
    1814:	ae 01       	movw	r20, r28
    1816:	4b 5f       	subi	r20, 0xFB	; 251
    1818:	5f 4f       	sbci	r21, 0xFF	; 255
    181a:	be 01       	movw	r22, r28
    181c:	6a 5f       	subi	r22, 0xFA	; 250
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	ce 01       	movw	r24, r28
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	0e 94 12 08 	call	0x1024	; 0x1024 <CAN_readRXbuf>
	if(chkBit(sys_state,SCAN)) inSysBDZ[BDZ_ID].data[7]=BDZ_ID;								//если производится сканирование сохраняем откликнувшиеся ID в inSysBDZ[BDZ_ID].data[7]
    1828:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    182c:	89 80       	ldd	r8, Y+1	; 0x01
    182e:	9a 80       	ldd	r9, Y+2	; 0x02
    1830:	ab 80       	ldd	r10, Y+3	; 0x03
    1832:	bc 80       	ldd	r11, Y+4	; 0x04
    1834:	84 ff       	sbrs	r24, 4
    1836:	11 c0       	rjmp	.+34     	; 0x185a <__vector_1+0x8c>
    1838:	d5 01       	movw	r26, r10
    183a:	c4 01       	movw	r24, r8
    183c:	8f 77       	andi	r24, 0x7F	; 127
    183e:	99 27       	eor	r25, r25
    1840:	aa 27       	eor	r26, r26
    1842:	bb 27       	eor	r27, r27
    1844:	29 e0       	ldi	r18, 0x09	; 9
    1846:	28 9f       	mul	r18, r24
    1848:	f0 01       	movw	r30, r0
    184a:	29 9f       	mul	r18, r25
    184c:	f0 0d       	add	r31, r0
    184e:	11 24       	eor	r1, r1
    1850:	e3 5c       	subi	r30, 0xC3	; 195
    1852:	fe 4f       	sbci	r31, 0xFE	; 254
    1854:	88 2d       	mov	r24, r8
    1856:	8f 77       	andi	r24, 0x7F	; 127
    1858:	87 83       	std	Z+7, r24	; 0x07

	if(readID(BDZ_ID) != BDZ_ID) {ERROR=ID;return;}											//проверка валидности (если ID не зарегистрирован)
    185a:	75 01       	movw	r14, r10
    185c:	64 01       	movw	r12, r8
    185e:	e8 94       	clt
    1860:	c7 f8       	bld	r12, 7
    1862:	dd 24       	eor	r13, r13
    1864:	ee 24       	eor	r14, r14
    1866:	ff 24       	eor	r15, r15
    1868:	c6 01       	movw	r24, r12
    186a:	87 5f       	subi	r24, 0xF7	; 247
    186c:	9f 4f       	sbci	r25, 0xFF	; 255
    186e:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a0 e0       	ldi	r26, 0x00	; 0
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	c8 16       	cp	r12, r24
    187a:	d9 06       	cpc	r13, r25
    187c:	ea 06       	cpc	r14, r26
    187e:	fb 06       	cpc	r15, r27
    1880:	21 f0       	breq	.+8      	; 0x188a <__vector_1+0xbc>
    1882:	84 e0       	ldi	r24, 0x04	; 4
    1884:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>
    1888:	40 c0       	rjmp	.+128    	; 0x190a <__vector_1+0x13c>

	setBit(inSysBDZ[BDZ_ID].flags,INL);														//ставим флаг инлайн
    188a:	89 e0       	ldi	r24, 0x09	; 9
    188c:	8c 9d       	mul	r24, r12
    188e:	f0 01       	movw	r30, r0
    1890:	8d 9d       	mul	r24, r13
    1892:	f0 0d       	add	r31, r0
    1894:	11 24       	eor	r1, r1
    1896:	e3 5c       	subi	r30, 0xC3	; 195
    1898:	fe 4f       	sbci	r31, 0xFE	; 254
    189a:	80 85       	ldd	r24, Z+8	; 0x08
    189c:	84 60       	ori	r24, 0x04	; 4
    189e:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,10)==1) setBit(inSysBDZ[BDZ_ID].flags,CONF);
    18a0:	92 fe       	sbrs	r9, 2
    18a2:	03 c0       	rjmp	.+6      	; 0x18aa <__vector_1+0xdc>
    18a4:	80 85       	ldd	r24, Z+8	; 0x08
    18a6:	80 62       	ori	r24, 0x20	; 32
    18a8:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,9) ==0) setBit(inSysBDZ[BDZ_ID].flags,ALM);							//если есть авариz ставим флаг в БДЗ
    18aa:	91 fc       	sbrc	r9, 1
    18ac:	0b c0       	rjmp	.+22     	; 0x18c4 <__vector_1+0xf6>
    18ae:	89 e0       	ldi	r24, 0x09	; 9
    18b0:	8c 9d       	mul	r24, r12
    18b2:	f0 01       	movw	r30, r0
    18b4:	8d 9d       	mul	r24, r13
    18b6:	f0 0d       	add	r31, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	e3 5c       	subi	r30, 0xC3	; 195
    18bc:	fe 4f       	sbci	r31, 0xFE	; 254
    18be:	80 85       	ldd	r24, Z+8	; 0x08
    18c0:	81 60       	ori	r24, 0x01	; 1
    18c2:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,8) ==1) clrBit(inSysBDZ[BDZ_ID].flags,FLT);							//если нету неисправности обнуляем флаг в БДЗ
    18c4:	90 fe       	sbrs	r9, 0
    18c6:	0b c0       	rjmp	.+22     	; 0x18de <__vector_1+0x110>
    18c8:	89 e0       	ldi	r24, 0x09	; 9
    18ca:	8c 9d       	mul	r24, r12
    18cc:	f0 01       	movw	r30, r0
    18ce:	8d 9d       	mul	r24, r13
    18d0:	f0 0d       	add	r31, r0
    18d2:	11 24       	eor	r1, r1
    18d4:	e3 5c       	subi	r30, 0xC3	; 195
    18d6:	fe 4f       	sbci	r31, 0xFE	; 254
    18d8:	80 85       	ldd	r24, Z+8	; 0x08
    18da:	8d 7f       	andi	r24, 0xFD	; 253
    18dc:	80 87       	std	Z+8, r24	; 0x08
	//inSysBDZ[BDZ_ID].data[0] = tmpBuf.ID>>8;
	for(unsigned char i=0;i<tmpBuf.dataLength;i++)inSysBDZ[BDZ_ID].data[i] = tmpBuf.data[i];//копируем данные
    18de:	4d 81       	ldd	r20, Y+5	; 0x05
    18e0:	fe 01       	movw	r30, r28
    18e2:	36 96       	adiw	r30, 0x06	; 6
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	59 e0       	ldi	r21, 0x09	; 9
    18ea:	5c 9d       	mul	r21, r12
    18ec:	90 01       	movw	r18, r0
    18ee:	5d 9d       	mul	r21, r13
    18f0:	30 0d       	add	r19, r0
    18f2:	11 24       	eor	r1, r1
    18f4:	23 5c       	subi	r18, 0xC3	; 195
    18f6:	3e 4f       	sbci	r19, 0xFE	; 254
    18f8:	84 17       	cp	r24, r20
    18fa:	38 f4       	brcc	.+14     	; 0x190a <__vector_1+0x13c>
    18fc:	51 91       	ld	r21, Z+
    18fe:	d9 01       	movw	r26, r18
    1900:	a8 0f       	add	r26, r24
    1902:	b9 1f       	adc	r27, r25
    1904:	5c 93       	st	X, r21
    1906:	01 96       	adiw	r24, 0x01	; 1
    1908:	f7 cf       	rjmp	.-18     	; 0x18f8 <__vector_1+0x12a>
}
    190a:	2e 96       	adiw	r28, 0x0e	; 14
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	ff 91       	pop	r31
    191c:	ef 91       	pop	r30
    191e:	bf 91       	pop	r27
    1920:	af 91       	pop	r26
    1922:	9f 91       	pop	r25
    1924:	8f 91       	pop	r24
    1926:	7f 91       	pop	r23
    1928:	6f 91       	pop	r22
    192a:	5f 91       	pop	r21
    192c:	4f 91       	pop	r20
    192e:	3f 91       	pop	r19
    1930:	2f 91       	pop	r18
    1932:	ff 90       	pop	r15
    1934:	ef 90       	pop	r14
    1936:	df 90       	pop	r13
    1938:	cf 90       	pop	r12
    193a:	bf 90       	pop	r11
    193c:	af 90       	pop	r10
    193e:	9f 90       	pop	r9
    1940:	8f 90       	pop	r8
    1942:	0f 90       	pop	r0
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	0f 90       	pop	r0
    1948:	1f 90       	pop	r1
    194a:	18 95       	reti

0000194c <scanID>:
//	while(1);
	return 3;					//длина сообщения об ошибке фиксирована
}

unsigned char scanID(unsigned char i)
{
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	18 2f       	mov	r17, r24
    1954:	cc e6       	ldi	r28, 0x6C	; 108
    1956:	d0 e0       	ldi	r29, 0x00	; 0
	for(unsigned char n=0;n<MAXQDEV;n++)
		if(readIDnew(n)==i) return 0;
    1958:	ce 01       	movw	r24, r28
    195a:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    195e:	81 17       	cp	r24, r17
    1960:	39 f0       	breq	.+14     	; 0x1970 <scanID+0x24>
    1962:	21 96       	adiw	r28, 0x01	; 1
	return 3;					//длина сообщения об ошибке фиксирована
}

unsigned char scanID(unsigned char i)
{
	for(unsigned char n=0;n<MAXQDEV;n++)
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	cf 3c       	cpi	r28, 0xCF	; 207
    1968:	d8 07       	cpc	r29, r24
    196a:	b1 f7       	brne	.-20     	; 0x1958 <scanID+0xc>
		if(readIDnew(n)==i) return 0;
	return 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	01 c0       	rjmp	.+2      	; 0x1972 <scanID+0x26>
}

unsigned char scanID(unsigned char i)
{
	for(unsigned char n=0;n<MAXQDEV;n++)
		if(readIDnew(n)==i) return 0;
    1970:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
}
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	08 95       	ret

0000197a <scanKBD>:

unsigned char scanKBD(void)
{
	unsigned char kbd = (((PIND&0x38)>>1) | (PINC&0xE0)) & 0xFC;
    197a:	20 b3       	in	r18, 0x10	; 16
    197c:	83 b3       	in	r24, 0x13	; 19
    197e:	28 73       	andi	r18, 0x38	; 56
    1980:	26 95       	lsr	r18
    1982:	80 7e       	andi	r24, 0xE0	; 224
    1984:	28 2b       	or	r18, r24
	static unsigned char prevkbd;

	if((kbd)==0xFC){prevkbd=0xFC; return NOKEY;}	//клавиша не нажата,вернули FF
    1986:	2c 3f       	cpi	r18, 0xFC	; 252
    1988:	19 f4       	brne	.+6      	; 0x1990 <scanKBD+0x16>
    198a:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <__data_end>
    198e:	32 c0       	rjmp	.+100    	; 0x19f4 <scanKBD+0x7a>
//	beep(10);					//пикалка + антидребезг

	if(prevkbd != kbd)
    1990:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
    1994:	28 17       	cp	r18, r24
    1996:	71 f0       	breq	.+28     	; 0x19b4 <scanKBD+0x3a>
	return NOKEY;						//кнопка не нашлась.типа помеха.
}

static inline void beep(unsigned int lenght)
{
	setBit(PORTA,BEEP);					//пикалка + антидребезг
    1998:	dc 9a       	sbi	0x1b, 4	; 27
    199a:	8a e0       	ldi	r24, 0x0A	; 10
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	ef e9       	ldi	r30, 0x9F	; 159
    19a0:	ff e0       	ldi	r31, 0x0F	; 15
    19a2:	31 97       	sbiw	r30, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <scanKBD+0x28>
    19a6:	00 c0       	rjmp	.+0      	; 0x19a8 <scanKBD+0x2e>
    19a8:	00 00       	nop
    19aa:	01 97       	sbiw	r24, 0x01	; 1
	for(unsigned int i=0;i<lenght;i++)_delay_ms(1);
    19ac:	c1 f7       	brne	.-16     	; 0x199e <scanKBD+0x24>
	clrBit(PORTA,BEEP);
    19ae:	dc 98       	cbi	0x1b, 4	; 27
//	beep(10);					//пикалка + антидребезг

	if(prevkbd != kbd)
	{
		beep(10);					//пикалка + антидребезг
		prevkbd = kbd;
    19b0:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <__data_end>
	}

	menuExit=EXITMENU;						//взводим таймер автовыхода
    19b4:	80 e3       	ldi	r24, 0x30	; 48
    19b6:	95 e7       	ldi	r25, 0x75	; 117
    19b8:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <menuExit+0x1>
    19bc:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <menuExit>
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	90 e0       	ldi	r25, 0x00	; 0
	for(char i=2;i<8;i++)
	{
		if(chkBit(kbd,i) ==0)return i;	//найдена нажатая кнопка.вернули код кнопки
    19c4:	61 e0       	ldi	r22, 0x01	; 1
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	ab 01       	movw	r20, r22
    19cc:	08 2e       	mov	r0, r24
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <scanKBD+0x5a>
    19d0:	44 0f       	add	r20, r20
    19d2:	55 1f       	adc	r21, r21
    19d4:	0a 94       	dec	r0
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <scanKBD+0x56>
    19d8:	42 23       	and	r20, r18
    19da:	53 23       	and	r21, r19
    19dc:	08 2e       	mov	r0, r24
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <scanKBD+0x6a>
    19e0:	55 95       	asr	r21
    19e2:	47 95       	ror	r20
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <scanKBD+0x66>
    19e8:	45 2b       	or	r20, r21
    19ea:	29 f0       	breq	.+10     	; 0x19f6 <scanKBD+0x7c>
    19ec:	01 96       	adiw	r24, 0x01	; 1
		beep(10);					//пикалка + антидребезг
		prevkbd = kbd;
	}

	menuExit=EXITMENU;						//взводим таймер автовыхода
	for(char i=2;i<8;i++)
    19ee:	88 30       	cpi	r24, 0x08	; 8
    19f0:	91 05       	cpc	r25, r1
    19f2:	59 f7       	brne	.-42     	; 0x19ca <scanKBD+0x50>
	{
		if(chkBit(kbd,i) ==0)return i;	//найдена нажатая кнопка.вернули код кнопки
	}
	return NOKEY;						//кнопка не нашлась.типа помеха.
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
}
    19f6:	08 95       	ret

000019f8 <whileKey>:
	LCD_puts(buffer,20);

}

static inline unsigned char whileKey(void)
{
    19f8:	cf 93       	push	r28
	unsigned char tmpKey;

	while((tmpKey=scanKBD())==NOKEY) if(menuExit==0)return NOKEY;	//ждем нажатия кнопки или автовыхода
    19fa:	0e 94 bd 0c 	call	0x197a	; 0x197a <scanKBD>
    19fe:	c8 2f       	mov	r28, r24
    1a00:	8f 3f       	cpi	r24, 0xFF	; 255
    1a02:	41 f4       	brne	.+16     	; 0x1a14 <whileKey+0x1c>
    1a04:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <menuExit>
    1a08:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <menuExit+0x1>
    1a0c:	89 2b       	or	r24, r25
    1a0e:	a9 f7       	brne	.-22     	; 0x19fa <whileKey+0x2>
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <whileKey+0x26>
	while(scanKBD()!=NOKEY);										//...отпускания кнопки
    1a14:	0e 94 bd 0c 	call	0x197a	; 0x197a <scanKBD>
    1a18:	8f 3f       	cpi	r24, 0xFF	; 255
    1a1a:	e1 f7       	brne	.-8      	; 0x1a14 <whileKey+0x1c>

static inline unsigned char whileKey(void)
{
	unsigned char tmpKey;

	while((tmpKey=scanKBD())==NOKEY) if(menuExit==0)return NOKEY;	//ждем нажатия кнопки или автовыхода
    1a1c:	8c 2f       	mov	r24, r28
	while(scanKBD()!=NOKEY);										//...отпускания кнопки

	return tmpKey;
}
    1a1e:	cf 91       	pop	r28
    1a20:	08 95       	ret

00001a22 <change_param>:
		}
	}
}

static void change_param(unsigned char nParam)
{
    1a22:	6f 92       	push	r6
    1a24:	7f 92       	push	r7
    1a26:	8f 92       	push	r8
    1a28:	9f 92       	push	r9
    1a2a:	af 92       	push	r10
    1a2c:	bf 92       	push	r11
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <change_param+0x1e>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <change_param+0x20>
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <change_param+0x22>
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	68 2e       	mov	r6, r24
	signed char numBDZ=0;	//кол-во инлайновых БДЗ;
	unsigned char addr=0xFF,step;
	signed int param,max;

	scansys();
    1a4a:	0e 94 ae 0a 	call	0x155c	; 0x155c <scansys>
	printMenuHeader(NOVOE_ZNACHENIE);
    1a4e:	8f e5       	ldi	r24, 0x5F	; 95
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>
    1a56:	01 e0       	ldi	r16, 0x01	; 1
    1a58:	10 e0       	ldi	r17, 0x00	; 0
	}
}

static void change_param(unsigned char nParam)
{
	signed char numBDZ=0;	//кол-во инлайновых БДЗ;
    1a5a:	b1 2c       	mov	r11, r1
	signed int param,max;

	scansys();
	printMenuHeader(NOVOE_ZNACHENIE);
	//считаем кол-во БДЗ инлайн
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) {numBDZ++;/*addr=readID(i);*/}
    1a5c:	69 e0       	ldi	r22, 0x09	; 9
    1a5e:	f6 2e       	mov	r15, r22
    1a60:	c8 01       	movw	r24, r16
    1a62:	87 5f       	subi	r24, 0xF7	; 247
    1a64:	9f 4f       	sbci	r25, 0xFF	; 255
    1a66:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    1a6a:	80 13       	cpse	r24, r16
    1a6c:	0a c0       	rjmp	.+20     	; 0x1a82 <change_param+0x60>
    1a6e:	f0 9e       	mul	r15, r16
    1a70:	f0 01       	movw	r30, r0
    1a72:	f1 9e       	mul	r15, r17
    1a74:	f0 0d       	add	r31, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	e3 5c       	subi	r30, 0xC3	; 195
    1a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7c:	80 85       	ldd	r24, Z+8	; 0x08
    1a7e:	82 fd       	sbrc	r24, 2
    1a80:	b3 94       	inc	r11
    1a82:	0f 5f       	subi	r16, 0xFF	; 255
    1a84:	1f 4f       	sbci	r17, 0xFF	; 255
    1a86:	03 36       	cpi	r16, 0x63	; 99
    1a88:	11 05       	cpc	r17, r1
    1a8a:	51 f7       	brne	.-44     	; 0x1a60 <change_param+0x3e>
}

static unsigned char numm(void)
{
	unsigned char i=0;
	printMenuHeader(NUMM);	//прорисовываем заголовок
    1a8c:	8a eb       	ldi	r24, 0xBA	; 186
    1a8e:	91 e0       	ldi	r25, 0x01	; 1
    1a90:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>
	return 0;
}

static unsigned char numm(void)
{
	unsigned char i=0;
    1a94:	71 2c       	mov	r7, r1
	printMenuHeader(NUMM);	//прорисовываем заголовок
	while (1)
	{
		char str[2];
		LCD_gotoXY(0,2);
		sprintf(str,"%02d",i);
    1a96:	53 ef       	ldi	r21, 0xF3	; 243
    1a98:	c5 2e       	mov	r12, r21
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	d5 2e       	mov	r13, r21
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	7c 01       	movw	r14, r24
	unsigned char i=0;
	printMenuHeader(NUMM);	//прорисовываем заголовок
	while (1)
	{
		char str[2];
		LCD_gotoXY(0,2);
    1aa4:	62 e0       	ldi	r22, 0x02	; 2
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		sprintf(str,"%02d",i);
    1aac:	07 2d       	mov	r16, r7
    1aae:	10 e0       	ldi	r17, 0x00	; 0
    1ab0:	1f 92       	push	r1
    1ab2:	7f 92       	push	r7
    1ab4:	df 92       	push	r13
    1ab6:	cf 92       	push	r12
    1ab8:	ff 92       	push	r15
    1aba:	ef 92       	push	r14
    1abc:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <sprintf>
		LCD_puts(str,4);
    1ac0:	64 e0       	ldi	r22, 0x04	; 4
    1ac2:	c7 01       	movw	r24, r14
    1ac4:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1ac8:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	85 30       	cpi	r24, 0x05	; 5
    1ada:	79 f0       	breq	.+30     	; 0x1afa <change_param+0xd8>
    1adc:	18 f4       	brcc	.+6      	; 0x1ae4 <change_param+0xc2>
    1ade:	82 30       	cpi	r24, 0x02	; 2
    1ae0:	89 f0       	breq	.+34     	; 0x1b04 <change_param+0xe2>
    1ae2:	e0 cf       	rjmp	.-64     	; 0x1aa4 <change_param+0x82>
    1ae4:	86 30       	cpi	r24, 0x06	; 6
    1ae6:	29 f0       	breq	.+10     	; 0x1af2 <change_param+0xd0>
    1ae8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aea:	e1 f6       	brne	.-72     	; 0x1aa4 <change_param+0x82>
		break;
		case UP:if(i==99) i=0; else i++;
		break;
		case ENT:return i;	//выход по ENT (отсылка новых параметров)
		break;
		case NOKEY:asm("jmp 0");
    1aec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1af0:	d9 cf       	rjmp	.-78     	; 0x1aa4 <change_param+0x82>
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(i==0) i=99; else i--;
    1af2:	77 20       	and	r7, r7
    1af4:	69 f0       	breq	.+26     	; 0x1b10 <change_param+0xee>
    1af6:	7a 94       	dec	r7
    1af8:	d5 cf       	rjmp	.-86     	; 0x1aa4 <change_param+0x82>
		break;
		case UP:if(i==99) i=0; else i++;
    1afa:	93 e6       	ldi	r25, 0x63	; 99
    1afc:	79 16       	cp	r7, r25
    1afe:	59 f0       	breq	.+22     	; 0x1b16 <change_param+0xf4>
    1b00:	73 94       	inc	r7
    1b02:	d0 cf       	rjmp	.-96     	; 0x1aa4 <change_param+0x82>
	//считаем кол-во БДЗ инлайн
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) {numBDZ++;/*addr=readID(i);*/}

	addr=numm();

	switch(numBDZ)
    1b04:	bb 20       	and	r11, r11
    1b06:	e1 f0       	breq	.+56     	; 0x1b40 <change_param+0x11e>
    1b08:	21 e0       	ldi	r18, 0x01	; 1
    1b0a:	b2 16       	cp	r11, r18
    1b0c:	31 f0       	breq	.+12     	; 0x1b1a <change_param+0xf8>
    1b0e:	1b c0       	rjmp	.+54     	; 0x1b46 <change_param+0x124>
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(i==0) i=99; else i--;
    1b10:	43 e6       	ldi	r20, 0x63	; 99
    1b12:	74 2e       	mov	r7, r20
    1b14:	c7 cf       	rjmp	.-114    	; 0x1aa4 <change_param+0x82>
		break;
		case UP:if(i==99) i=0; else i++;
    1b16:	71 2c       	mov	r7, r1
    1b18:	c5 cf       	rjmp	.-118    	; 0x1aa4 <change_param+0x82>
	{
	//если БДЗ не обнаружены
	case 0: {printTOUT();_delay_ms(2000);return;}
	break;
	//если обнаружен один БДЗ читаем его параметры //дождались таймаута или неправильного ответа -третья строка-"нет связи"
	case 1: if((send_prog(addr,NULL) <0)||(inSysBDZ[addr].data[0] !=PROG))	{printTOUT();_delay_ms(2000);return;}
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	87 2d       	mov	r24, r7
    1b20:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <send_prog>
    1b24:	87 fd       	sbrc	r24, 7
    1b26:	0c c0       	rjmp	.+24     	; 0x1b40 <change_param+0x11e>
    1b28:	89 e0       	ldi	r24, 0x09	; 9
    1b2a:	80 9f       	mul	r24, r16
    1b2c:	f0 01       	movw	r30, r0
    1b2e:	81 9f       	mul	r24, r17
    1b30:	f0 0d       	add	r31, r0
    1b32:	11 24       	eor	r1, r1
    1b34:	e3 5c       	subi	r30, 0xC3	; 195
    1b36:	fe 4f       	sbci	r31, 0xFE	; 254
    1b38:	80 81       	ld	r24, Z
    1b3a:	86 30       	cpi	r24, 0x06	; 6
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <change_param+0x11e>
    1b3e:	cc c0       	rjmp	.+408    	; 0x1cd8 <change_param+0x2b6>
    1b40:	0e 94 2b 06 	call	0xc56	; 0xc56 <printTOUT>
    1b44:	0b c0       	rjmp	.+22     	; 0x1b5c <change_param+0x13a>
	break;
	//если БДЗ больше одного
	default:
	{
		addr=0;														//устанавливаем широковещат.адрес
		if(nParam==0){printUNAVALIABLE();_delay_ms(2000);return;}	//если была попытка изменить адрес пишем "недоступно" и вываливаемся
    1b46:	61 10       	cpse	r6, r1
    1b48:	13 c0       	rjmp	.+38     	; 0x1b70 <change_param+0x14e>
	LCD_gotoXY(0,2);LCD_puts_P(NET_SVYAZI,20);
}

static inline void printUNAVALIABLE(void)
{
	LCD_gotoXY(0,2);LCD_puts_P(NEDOSTUPNO,20);
    1b4a:	62 e0       	ldi	r22, 0x02	; 2
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
    1b52:	64 e1       	ldi	r22, 0x14	; 20
    1b54:	84 e5       	ldi	r24, 0x54	; 84
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
    1b5c:	8f ef       	ldi	r24, 0xFF	; 255
    1b5e:	97 ea       	ldi	r25, 0xA7	; 167
    1b60:	21 e6       	ldi	r18, 0x61	; 97
    1b62:	81 50       	subi	r24, 0x01	; 1
    1b64:	90 40       	sbci	r25, 0x00	; 0
    1b66:	20 40       	sbci	r18, 0x00	; 0
    1b68:	e1 f7       	brne	.-8      	; 0x1b62 <change_param+0x140>
    1b6a:	00 c0       	rjmp	.+0      	; 0x1b6c <change_param+0x14a>
    1b6c:	00 00       	nop
    1b6e:	c6 c0       	rjmp	.+396    	; 0x1cfc <change_param+0x2da>
		if(nParam==0){printUNAVALIABLE();_delay_ms(2000);return;}	//если была попытка изменить адрес пишем "недоступно" и вываливаемся
	}
	break;
	}

	switch(nParam)
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	68 16       	cp	r6, r24
    1b74:	39 f0       	breq	.+14     	; 0x1b84 <change_param+0x162>
    1b76:	92 e0       	ldi	r25, 0x02	; 2
    1b78:	69 12       	cpse	r6, r25
    1b7a:	c0 c0       	rjmp	.+384    	; 0x1cfc <change_param+0x2da>
	case 1: if((send_prog(addr,NULL) <0)||(inSysBDZ[addr].data[0] !=PROG))	{printTOUT();_delay_ms(2000);return;}
	break;
	//если БДЗ больше одного
	default:
	{
		addr=0;														//устанавливаем широковещат.адрес
    1b7c:	71 2c       	mov	r7, r1
	}
	break;
	//время УРОВ:если на связи 1 БДЗ пишем его время УРОВ, если больше то 0мс
	case 2:
	{
		param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5]):(0);
    1b7e:	00 e0       	ldi	r16, 0x00	; 0
    1b80:	10 e0       	ldi	r17, 0x00	; 0
    1b82:	1c c0       	rjmp	.+56     	; 0x1bbc <change_param+0x19a>
	case 1: if((send_prog(addr,NULL) <0)||(inSysBDZ[addr].data[0] !=PROG))	{printTOUT();_delay_ms(2000);return;}
	break;
	//если БДЗ больше одного
	default:
	{
		addr=0;														//устанавливаем широковещат.адрес
    1b84:	71 2c       	mov	r7, r1
	case 0:{param=inSysBDZ[addr].data[1];max=99;step=1;}
	break;
	//время МТЗ:если на связи 1 БДЗ пишем его время МТЗ, если больше то 0мс
	case 1:
	{
		param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[2]<<8 | inSysBDZ[addr].data[3]):(0);
    1b86:	00 e0       	ldi	r16, 0x00	; 0
    1b88:	10 e0       	ldi	r17, 0x00	; 0
		inSysBDZ[addr].data[4]=inSysBDZ[addr].data[5]=-1;	//в неизменяемый параметр пишем -1
    1b8a:	29 e0       	ldi	r18, 0x09	; 9
    1b8c:	72 9e       	mul	r7, r18
    1b8e:	f0 01       	movw	r30, r0
    1b90:	11 24       	eor	r1, r1
    1b92:	e3 5c       	subi	r30, 0xC3	; 195
    1b94:	fe 4f       	sbci	r31, 0xFE	; 254
    1b96:	8f ef       	ldi	r24, 0xFF	; 255
    1b98:	85 83       	std	Z+5, r24	; 0x05
    1b9a:	84 83       	std	Z+4, r24	; 0x04
    1b9c:	18 c0       	rjmp	.+48     	; 0x1bce <change_param+0x1ac>
		if(nParam==0){printUNAVALIABLE();_delay_ms(2000);return;}	//если была попытка изменить адрес пишем "недоступно" и вываливаемся
	}
	break;
	}

	switch(nParam)
    1b9e:	92 e0       	ldi	r25, 0x02	; 2
    1ba0:	69 12       	cpse	r6, r25
    1ba2:	ac c0       	rjmp	.+344    	; 0x1cfc <change_param+0x2da>
	}
	break;
	//время УРОВ:если на связи 1 БДЗ пишем его время УРОВ, если больше то 0мс
	case 2:
	{
		param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5]):(0);
    1ba4:	89 e0       	ldi	r24, 0x09	; 9
    1ba6:	80 9f       	mul	r24, r16
    1ba8:	f0 01       	movw	r30, r0
    1baa:	81 9f       	mul	r24, r17
    1bac:	f0 0d       	add	r31, r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	e3 5c       	subi	r30, 0xC3	; 195
    1bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb4:	84 81       	ldd	r24, Z+4	; 0x04
    1bb6:	05 81       	ldd	r16, Z+5	; 0x05
    1bb8:	10 e0       	ldi	r17, 0x00	; 0
    1bba:	18 2b       	or	r17, r24
		inSysBDZ[addr].data[2]=inSysBDZ[addr].data[3]=-1;	//в неизменяемый параметр пишем -1
    1bbc:	89 e0       	ldi	r24, 0x09	; 9
    1bbe:	78 9e       	mul	r7, r24
    1bc0:	f0 01       	movw	r30, r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	e3 5c       	subi	r30, 0xC3	; 195
    1bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	83 83       	std	Z+3, r24	; 0x03
    1bcc:	82 83       	std	Z+2, r24	; 0x02
		max=30000;
    1bce:	20 e3       	ldi	r18, 0x30	; 48
    1bd0:	a2 2e       	mov	r10, r18
    1bd2:	25 e7       	ldi	r18, 0x75	; 117
    1bd4:	b2 2e       	mov	r11, r18
		step=10;
    1bd6:	8a e0       	ldi	r24, 0x0A	; 10

	while(1)
	{
		char str[6];
		printMenuHeader(NOVOE_ZNACHENIE);
		sprintf(str,"%d",param);
    1bd8:	98 ef       	ldi	r25, 0xF8	; 248
    1bda:	89 2e       	mov	r8, r25
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	99 2e       	mov	r9, r25
		if(nParam!=0)LCD_puts_P(MS,2);
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(param>(nParam==0)?(1):(0))param-=step;
		break;
		case UP:if(param<max)param+=step;
    1be0:	c8 2e       	mov	r12, r24
    1be2:	d1 2c       	mov	r13, r1
	}

	while(1)
	{
		char str[6];
		printMenuHeader(NOVOE_ZNACHENIE);
    1be4:	8f e5       	ldi	r24, 0x5F	; 95
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>
		sprintf(str,"%d",param);
    1bec:	1f 93       	push	r17
    1bee:	0f 93       	push	r16
    1bf0:	9f 92       	push	r9
    1bf2:	8f 92       	push	r8
    1bf4:	ff 92       	push	r15
    1bf6:	ef 92       	push	r14
    1bf8:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <sprintf>
		LCD_gotoXY(0,2);
    1bfc:	62 e0       	ldi	r22, 0x02	; 2
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		LCD_puts(str,strlen(str));
    1c04:	f7 01       	movw	r30, r14
    1c06:	01 90       	ld	r0, Z+
    1c08:	00 20       	and	r0, r0
    1c0a:	e9 f7       	brne	.-6      	; 0x1c06 <change_param+0x1e4>
    1c0c:	31 97       	sbiw	r30, 0x01	; 1
    1c0e:	bf 01       	movw	r22, r30
    1c10:	6e 19       	sub	r22, r14
    1c12:	7f 09       	sbc	r23, r15
    1c14:	c7 01       	movw	r24, r14
    1c16:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
		if(nParam!=0)LCD_puts_P(MS,2);
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	66 20       	and	r6, r6
    1c28:	29 f0       	breq	.+10     	; 0x1c34 <change_param+0x212>
    1c2a:	62 e0       	ldi	r22, 0x02	; 2
    1c2c:	85 e7       	ldi	r24, 0x75	; 117
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1c34:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    1c38:	85 30       	cpi	r24, 0x05	; 5
    1c3a:	d9 f0       	breq	.+54     	; 0x1c72 <change_param+0x250>
    1c3c:	30 f4       	brcc	.+12     	; 0x1c4a <change_param+0x228>
    1c3e:	82 30       	cpi	r24, 0x02	; 2
    1c40:	f9 f0       	breq	.+62     	; 0x1c80 <change_param+0x25e>
    1c42:	83 30       	cpi	r24, 0x03	; 3
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <change_param+0x226>
    1c46:	5a c0       	rjmp	.+180    	; 0x1cfc <change_param+0x2da>
    1c48:	cd cf       	rjmp	.-102    	; 0x1be4 <change_param+0x1c2>
    1c4a:	86 30       	cpi	r24, 0x06	; 6
    1c4c:	29 f0       	breq	.+10     	; 0x1c58 <change_param+0x236>
    1c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c50:	49 f6       	brne	.-110    	; 0x1be4 <change_param+0x1c2>
		break;
		case ENT:goto SEND;	//выход по ENT (отсылка новых параметров)
		break;
		case ESC:return;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");
    1c52:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
		}
	}
    1c56:	c6 cf       	rjmp	.-116    	; 0x1be4 <change_param+0x1c2>
		LCD_gotoXY(0,2);
		LCD_puts(str,strlen(str));
		if(nParam!=0)LCD_puts_P(MS,2);
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(param>(nParam==0)?(1):(0))param-=step;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	66 20       	and	r6, r6
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <change_param+0x242>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	80 17       	cp	r24, r16
    1c66:	91 07       	cpc	r25, r17
    1c68:	0c f0       	brlt	.+2      	; 0x1c6c <change_param+0x24a>
    1c6a:	bc cf       	rjmp	.-136    	; 0x1be4 <change_param+0x1c2>
    1c6c:	0c 19       	sub	r16, r12
    1c6e:	1d 09       	sbc	r17, r13
    1c70:	b9 cf       	rjmp	.-142    	; 0x1be4 <change_param+0x1c2>
		break;
		case UP:if(param<max)param+=step;
    1c72:	0a 15       	cp	r16, r10
    1c74:	1b 05       	cpc	r17, r11
    1c76:	0c f0       	brlt	.+2      	; 0x1c7a <change_param+0x258>
    1c78:	b5 cf       	rjmp	.-150    	; 0x1be4 <change_param+0x1c2>
    1c7a:	0c 0d       	add	r16, r12
    1c7c:	1d 1d       	adc	r17, r13
    1c7e:	b2 cf       	rjmp	.-156    	; 0x1be4 <change_param+0x1c2>
		break;
		}
	}
SEND:
	//отсылка новых параметров
	inSysBDZ[addr].data[0]=PROG;
    1c80:	87 2d       	mov	r24, r7
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	29 e0       	ldi	r18, 0x09	; 9
    1c86:	72 9e       	mul	r7, r18
    1c88:	f0 01       	movw	r30, r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	e3 5c       	subi	r30, 0xC3	; 195
    1c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c90:	26 e0       	ldi	r18, 0x06	; 6
    1c92:	20 83       	st	Z, r18
	switch(nParam)
    1c94:	21 e0       	ldi	r18, 0x01	; 1
    1c96:	62 16       	cp	r6, r18
    1c98:	51 f0       	breq	.+20     	; 0x1cae <change_param+0x28c>
    1c9a:	62 16       	cp	r6, r18
    1c9c:	30 f0       	brcs	.+12     	; 0x1caa <change_param+0x288>
    1c9e:	22 e0       	ldi	r18, 0x02	; 2
    1ca0:	62 12       	cpse	r6, r18
    1ca2:	2c c0       	rjmp	.+88     	; 0x1cfc <change_param+0x2da>
	{
	case 0:inSysBDZ[addr].data[1]=param;
	break;
	case 1:{inSysBDZ[addr].data[2]=param >>8; inSysBDZ[addr].data[3]=param & 0x00FF;}
	break;
	case 2:{inSysBDZ[addr].data[4]=param >>8; inSysBDZ[addr].data[5]=param & 0x00FF;}
    1ca4:	14 83       	std	Z+4, r17	; 0x04
    1ca6:	05 83       	std	Z+5, r16	; 0x05
	break;
    1ca8:	04 c0       	rjmp	.+8      	; 0x1cb2 <change_param+0x290>
SEND:
	//отсылка новых параметров
	inSysBDZ[addr].data[0]=PROG;
	switch(nParam)
	{
	case 0:inSysBDZ[addr].data[1]=param;
    1caa:	01 83       	std	Z+1, r16	; 0x01
	break;
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <change_param+0x290>
	case 1:{inSysBDZ[addr].data[2]=param >>8; inSysBDZ[addr].data[3]=param & 0x00FF;}
    1cae:	12 83       	std	Z+2, r17	; 0x02
    1cb0:	03 83       	std	Z+3, r16	; 0x03
	break;
	case 2:{inSysBDZ[addr].data[4]=param >>8; inSysBDZ[addr].data[5]=param & 0x00FF;}
	break;
	default:return;
	}
	if((send_prog(addr,inSysBDZ[addr].data)<0) && (param!=0)){printTOUT();_delay_ms(2000);return;}
    1cb2:	29 e0       	ldi	r18, 0x09	; 9
    1cb4:	28 9f       	mul	r18, r24
    1cb6:	b0 01       	movw	r22, r0
    1cb8:	29 9f       	mul	r18, r25
    1cba:	70 0d       	add	r23, r0
    1cbc:	11 24       	eor	r1, r1
    1cbe:	63 5c       	subi	r22, 0xC3	; 195
    1cc0:	7e 4f       	sbci	r23, 0xFE	; 254
    1cc2:	87 2d       	mov	r24, r7
    1cc4:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <send_prog>
    1cc8:	87 ff       	sbrs	r24, 7
    1cca:	03 c0       	rjmp	.+6      	; 0x1cd2 <change_param+0x2b0>
    1ccc:	01 2b       	or	r16, r17
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <change_param+0x2b0>
    1cd0:	37 cf       	rjmp	.-402    	; 0x1b40 <change_param+0x11e>
	scansys();
    1cd2:	0e 94 ae 0a 	call	0x155c	; 0x155c <scansys>




	return;
    1cd6:	12 c0       	rjmp	.+36     	; 0x1cfc <change_param+0x2da>
		if(nParam==0){printUNAVALIABLE();_delay_ms(2000);return;}	//если была попытка изменить адрес пишем "недоступно" и вываливаемся
	}
	break;
	}

	switch(nParam)
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	68 12       	cpse	r6, r24
    1cdc:	05 c0       	rjmp	.+10     	; 0x1ce8 <change_param+0x2c6>
	case 0:{param=inSysBDZ[addr].data[1];max=99;step=1;}
	break;
	//время МТЗ:если на связи 1 БДЗ пишем его время МТЗ, если больше то 0мс
	case 1:
	{
		param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[2]<<8 | inSysBDZ[addr].data[3]):(0);
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	03 81       	ldd	r16, Z+3	; 0x03
    1ce2:	10 e0       	ldi	r17, 0x00	; 0
    1ce4:	18 2b       	or	r17, r24
    1ce6:	51 cf       	rjmp	.-350    	; 0x1b8a <change_param+0x168>
		if(nParam==0){printUNAVALIABLE();_delay_ms(2000);return;}	//если была попытка изменить адрес пишем "недоступно" и вываливаемся
	}
	break;
	}

	switch(nParam)
    1ce8:	68 16       	cp	r6, r24
    1cea:	08 f0       	brcs	.+2      	; 0x1cee <change_param+0x2cc>
    1cec:	58 cf       	rjmp	.-336    	; 0x1b9e <change_param+0x17c>
	{
	//изменение адреса
	case 0:{param=inSysBDZ[addr].data[1];max=99;step=1;}
    1cee:	01 81       	ldd	r16, Z+1	; 0x01
    1cf0:	10 e0       	ldi	r17, 0x00	; 0
    1cf2:	33 e6       	ldi	r19, 0x63	; 99
    1cf4:	a3 2e       	mov	r10, r19
    1cf6:	b1 2c       	mov	r11, r1
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
	break;
    1cfa:	6e cf       	rjmp	.-292    	; 0x1bd8 <change_param+0x1b6>




	return;
}
    1cfc:	26 96       	adiw	r28, 0x06	; 6
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	1f 91       	pop	r17
    1d0e:	0f 91       	pop	r16
    1d10:	ff 90       	pop	r15
    1d12:	ef 90       	pop	r14
    1d14:	df 90       	pop	r13
    1d16:	cf 90       	pop	r12
    1d18:	bf 90       	pop	r11
    1d1a:	af 90       	pop	r10
    1d1c:	9f 90       	pop	r9
    1d1e:	8f 90       	pop	r8
    1d20:	7f 90       	pop	r7
    1d22:	6f 90       	pop	r6
    1d24:	08 95       	ret

00001d26 <vremya_urov>:
	change_param(1);
}

static void vremya_urov(void)
{
	change_param(2);
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <change_param>

00001d2c <vremya_mtz>:
	naviMenu(LVL_prog);
}

static void vremya_mtz(void)
{
	change_param(1);
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <change_param>

00001d32 <adres>:
	change_param(2);
}

static void adres(void)
{
	change_param(0);
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <change_param>

00001d38 <datavremya>:
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}

static void datavremya(void)
{
    1d38:	cf 92       	push	r12
    1d3a:	df 92       	push	r13
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	a6 97       	sbiw	r28, 0x26	; 38
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
	char buffer[20],max[]={31,12,99,23,59,59},min;
    1d58:	86 e0       	ldi	r24, 0x06	; 6
    1d5a:	e0 ec       	ldi	r30, 0xC0	; 192
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	de 01       	movw	r26, r28
    1d60:	91 96       	adiw	r26, 0x21	; 33
    1d62:	01 90       	ld	r0, Z+
    1d64:	0d 92       	st	X+, r0
    1d66:	8a 95       	dec	r24
    1d68:	e1 f7       	brne	.-8      	; 0x1d62 <datavremya+0x2a>
	unsigned char cursorPos=0;
	unsigned char *ptr[] = {&rtc.day,&rtc.month,&rtc.year,&rtc.hours,&rtc.minutes,&rtc.seconds};
    1d6a:	8c e0       	ldi	r24, 0x0C	; 12
    1d6c:	e6 ec       	ldi	r30, 0xC6	; 198
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	de 01       	movw	r26, r28
    1d72:	55 96       	adiw	r26, 0x15	; 21
    1d74:	01 90       	ld	r0, Z+
    1d76:	0d 92       	st	X+, r0
    1d78:	8a 95       	dec	r24
    1d7a:	e1 f7       	brne	.-8      	; 0x1d74 <datavremya+0x3c>

	printMenuHeader(DATAVREMYA);
    1d7c:	83 e6       	ldi	r24, 0x63	; 99
    1d7e:	91 e0       	ldi	r25, 0x01	; 1
    1d80:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>

	if(rtc_get(&rtc) < 0) {ERROR=RTC;/*return -1;*/}
    1d84:	8c ec       	ldi	r24, 0xCC	; 204
    1d86:	94 e0       	ldi	r25, 0x04	; 4
    1d88:	0e 94 8b 02 	call	0x516	; 0x516 <rtc_get>
    1d8c:	87 ff       	sbrs	r24, 7
    1d8e:	03 c0       	rjmp	.+6      	; 0x1d96 <datavremya+0x5e>
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}

static void datavremya(void)
{
    1d96:	10 e0       	ldi	r17, 0x00	; 0
	if(rtc_get(&rtc) < 0) {ERROR=RTC;/*return -1;*/}


	while(1)
	{
		sprintf(buffer," %02u.%02u.%02u %02u:%02u:%02u",*ptr[0],*ptr[1],*ptr[2],*ptr[3],*ptr[4],*ptr[5]);
    1d98:	5b ef       	ldi	r21, 0xFB	; 251
    1d9a:	c5 2e       	mov	r12, r21
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	d5 2e       	mov	r13, r21
    1da0:	ce 01       	movw	r24, r28
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	7c 01       	movw	r14, r24
    1da6:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <rtc+0x5>
    1daa:	1f 92       	push	r1
    1dac:	8f 93       	push	r24
    1dae:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <rtc+0x4>
    1db2:	1f 92       	push	r1
    1db4:	8f 93       	push	r24
    1db6:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <rtc+0x3>
    1dba:	1f 92       	push	r1
    1dbc:	8f 93       	push	r24
    1dbe:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <rtc>
    1dc2:	1f 92       	push	r1
    1dc4:	8f 93       	push	r24
    1dc6:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <rtc+0x1>
    1dca:	1f 92       	push	r1
    1dcc:	8f 93       	push	r24
    1dce:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <rtc+0x2>
    1dd2:	1f 92       	push	r1
    1dd4:	8f 93       	push	r24
    1dd6:	df 92       	push	r13
    1dd8:	cf 92       	push	r12
    1dda:	ff 92       	push	r15
    1ddc:	ef 92       	push	r14
    1dde:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <sprintf>
		LCD_gotoXY(0,3);
    1de2:	63 e0       	ldi	r22, 0x03	; 3
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		LCD_puts(buffer,18);
    1dea:	62 e1       	ldi	r22, 0x12	; 18
    1dec:	c7 01       	movw	r24, r14
    1dee:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
		LCD_gotoXY(cursorPos*3,3);
    1df2:	63 e0       	ldi	r22, 0x03	; 3
    1df4:	81 2f       	mov	r24, r17
    1df6:	88 0f       	add	r24, r24
    1df8:	81 0f       	add	r24, r17
    1dfa:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		LCD_putchar(0x84);
    1dfe:	84 e8       	ldi	r24, 0x84	; 132
    1e00:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_putchar>
		min=(cursorPos < 2)?(1):(0);
    1e04:	01 e0       	ldi	r16, 0x01	; 1
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	12 30       	cpi	r17, 0x02	; 2
    1e12:	08 f0       	brcs	.+2      	; 0x1e16 <datavremya+0xde>
    1e14:	00 e0       	ldi	r16, 0x00	; 0

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1e16:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    1e1a:	85 30       	cpi	r24, 0x05	; 5
    1e1c:	b1 f0       	breq	.+44     	; 0x1e4a <datavremya+0x112>
    1e1e:	30 f4       	brcc	.+12     	; 0x1e2c <datavremya+0xf4>
    1e20:	82 30       	cpi	r24, 0x02	; 2
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <datavremya+0xee>
    1e24:	43 c0       	rjmp	.+134    	; 0x1eac <datavremya+0x174>
    1e26:	84 30       	cpi	r24, 0x04	; 4
    1e28:	59 f0       	breq	.+22     	; 0x1e40 <datavremya+0x108>
    1e2a:	44 c0       	rjmp	.+136    	; 0x1eb4 <datavremya+0x17c>
    1e2c:	86 30       	cpi	r24, 0x06	; 6
    1e2e:	29 f1       	breq	.+74     	; 0x1e7a <datavremya+0x142>
    1e30:	87 30       	cpi	r24, 0x07	; 7
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <datavremya+0xfe>
    1e34:	3f c0       	rjmp	.+126    	; 0x1eb4 <datavremya+0x17c>
		{
		case RIGHT: if(cursorPos < 5) cursorPos++;
    1e36:	15 30       	cpi	r17, 0x05	; 5
    1e38:	08 f0       	brcs	.+2      	; 0x1e3c <datavremya+0x104>
    1e3a:	b5 cf       	rjmp	.-150    	; 0x1da6 <datavremya+0x6e>
    1e3c:	1f 5f       	subi	r17, 0xFF	; 255
    1e3e:	b3 cf       	rjmp	.-154    	; 0x1da6 <datavremya+0x6e>
		break;
		case LEFT: if(cursorPos >0) cursorPos--;
    1e40:	11 23       	and	r17, r17
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <datavremya+0x10e>
    1e44:	b0 cf       	rjmp	.-160    	; 0x1da6 <datavremya+0x6e>
    1e46:	11 50       	subi	r17, 0x01	; 1
    1e48:	ae cf       	rjmp	.-164    	; 0x1da6 <datavremya+0x6e>
		break;
		case UP:(*ptr[cursorPos] < max[cursorPos])?((*ptr[cursorPos])++):(*ptr[cursorPos]=min);
    1e4a:	21 2f       	mov	r18, r17
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	f9 01       	movw	r30, r18
    1e50:	ee 0f       	add	r30, r30
    1e52:	ff 1f       	adc	r31, r31
    1e54:	ee 0d       	add	r30, r14
    1e56:	ff 1d       	adc	r31, r15
    1e58:	04 88       	ldd	r0, Z+20	; 0x14
    1e5a:	f5 89       	ldd	r31, Z+21	; 0x15
    1e5c:	e0 2d       	mov	r30, r0
    1e5e:	80 81       	ld	r24, Z
    1e60:	a1 e2       	ldi	r26, 0x21	; 33
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	ac 0f       	add	r26, r28
    1e66:	bd 1f       	adc	r27, r29
    1e68:	a2 0f       	add	r26, r18
    1e6a:	b3 1f       	adc	r27, r19
    1e6c:	9c 91       	ld	r25, X
    1e6e:	89 17       	cp	r24, r25
    1e70:	10 f4       	brcc	.+4      	; 0x1e76 <datavremya+0x13e>
    1e72:	8f 5f       	subi	r24, 0xFF	; 255
    1e74:	19 c0       	rjmp	.+50     	; 0x1ea8 <datavremya+0x170>
    1e76:	00 83       	st	Z, r16
    1e78:	96 cf       	rjmp	.-212    	; 0x1da6 <datavremya+0x6e>
		break;
		case DOWN:(*ptr[cursorPos] > min)?((*ptr[cursorPos])--):(*ptr[cursorPos]=max[cursorPos]);
    1e7a:	81 2f       	mov	r24, r17
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	fc 01       	movw	r30, r24
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	ee 0d       	add	r30, r14
    1e86:	ff 1d       	adc	r31, r15
    1e88:	04 88       	ldd	r0, Z+20	; 0x14
    1e8a:	f5 89       	ldd	r31, Z+21	; 0x15
    1e8c:	e0 2d       	mov	r30, r0
    1e8e:	20 81       	ld	r18, Z
    1e90:	02 17       	cp	r16, r18
    1e92:	18 f4       	brcc	.+6      	; 0x1e9a <datavremya+0x162>
    1e94:	21 50       	subi	r18, 0x01	; 1
    1e96:	20 83       	st	Z, r18
    1e98:	86 cf       	rjmp	.-244    	; 0x1da6 <datavremya+0x6e>
    1e9a:	a1 e2       	ldi	r26, 0x21	; 33
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	ac 0f       	add	r26, r28
    1ea0:	bd 1f       	adc	r27, r29
    1ea2:	a8 0f       	add	r26, r24
    1ea4:	b9 1f       	adc	r27, r25
    1ea6:	8c 91       	ld	r24, X
    1ea8:	80 83       	st	Z, r24
    1eaa:	7d cf       	rjmp	.-262    	; 0x1da6 <datavremya+0x6e>
		break;
		case ENT:{rtc_set(&rtc);return;}
    1eac:	8c ec       	ldi	r24, 0xCC	; 204
    1eae:	94 e0       	ldi	r25, 0x04	; 4
    1eb0:	0e 94 26 02 	call	0x44c	; 0x44c <rtc_set>
		default: return;
		}
	}


}
    1eb4:	a6 96       	adiw	r28, 0x26	; 38
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	08 95       	ret

00001ed2 <chetnost>:
		}
	}
}

static void chetnost(void)
{
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
	printMenuHeader(CHETNOST);
    1ed8:	87 e1       	ldi	r24, 0x17	; 23
    1eda:	91 e0       	ldi	r25, 0x01	; 1
    1edc:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>
	unsigned char mparity=eeprom_read_byte(&parity);
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    1ee8:	c8 2f       	mov	r28, r24
	PGM_P ptr=0;
    1eea:	00 e0       	ldi	r16, 0x00	; 0
    1eec:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		LCD_gotoXY(10,0);
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	8a e0       	ldi	r24, 0x0A	; 10
    1ef2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		switch(mparity)
    1ef6:	c0 32       	cpi	r28, 0x20	; 32
    1ef8:	19 f1       	breq	.+70     	; 0x1f40 <chetnost+0x6e>
    1efa:	c0 33       	cpi	r28, 0x30	; 48
    1efc:	61 f0       	breq	.+24     	; 0x1f16 <chetnost+0x44>
    1efe:	c1 11       	cpse	r28, r1
    1f00:	0d c0       	rjmp	.+26     	; 0x1f1c <chetnost+0x4a>
		{
		case NONE:ptr=C_NONE;
    1f02:	09 e0       	ldi	r16, 0x09	; 9
    1f04:	11 e0       	ldi	r17, 0x01	; 1
    1f06:	c0 e0       	ldi	r28, 0x00	; 0
		break;
    1f08:	09 c0       	rjmp	.+18     	; 0x1f1c <chetnost+0x4a>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mparity==EVEN) mparity=ODD;
    1f0a:	c0 32       	cpi	r28, 0x20	; 32
    1f0c:	39 f5       	brne	.+78     	; 0x1f5c <chetnost+0x8a>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	8a e0       	ldi	r24, 0x0A	; 10
    1f12:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		{
		case NONE:ptr=C_NONE;
		break;
		case EVEN:ptr=C_EVEN;
		break;
		case ODD:ptr=C_ODD;
    1f16:	03 e1       	ldi	r16, 0x13	; 19
    1f18:	11 e0       	ldi	r17, 0x01	; 1
    1f1a:	c0 e3       	ldi	r28, 0x30	; 48
		break;
		}
		LCD_puts_P(ptr,5);
    1f1c:	65 e0       	ldi	r22, 0x05	; 5
    1f1e:	c8 01       	movw	r24, r16
    1f20:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1f24:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    1f28:	85 30       	cpi	r24, 0x05	; 5
    1f2a:	79 f3       	breq	.-34     	; 0x1f0a <chetnost+0x38>
    1f2c:	86 30       	cpi	r24, 0x06	; 6
    1f2e:	61 f4       	brne	.+24     	; 0x1f48 <chetnost+0x76>
			else if(mparity==ODD)mparity=NONE;
		}
		break;
		case DOWN:
		{
			if(mparity==NONE) mparity=ODD;
    1f30:	cc 23       	and	r28, r28
    1f32:	69 f3       	breq	.-38     	; 0x1f0e <chetnost+0x3c>
			else if(mparity==ODD)mparity=EVEN;
    1f34:	c0 33       	cpi	r28, 0x30	; 48
    1f36:	d9 f6       	brne	.-74     	; 0x1eee <chetnost+0x1c>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	8a e0       	ldi	r24, 0x0A	; 10
    1f3c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		switch(mparity)
		{
		case NONE:ptr=C_NONE;
		break;
		case EVEN:ptr=C_EVEN;
    1f40:	0e e0       	ldi	r16, 0x0E	; 14
    1f42:	11 e0       	ldi	r17, 0x01	; 1
    1f44:	c0 e2       	ldi	r28, 0x20	; 32
		break;
    1f46:	ea cf       	rjmp	.-44     	; 0x1f1c <chetnost+0x4a>
		case ODD:ptr=C_ODD;
		break;
		}
		LCD_puts_P(ptr,5);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1f48:	82 30       	cpi	r24, 0x02	; 2
    1f4a:	79 f4       	brne	.+30     	; 0x1f6a <chetnost+0x98>
			else if(mparity==ODD)mparity=EVEN;
		}
		break;
		case ENT:
		{
			eeprom_write_byte(&parity,mparity);
    1f4c:	6c 2f       	mov	r22, r28
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		default: return;
		}
	}
}
    1f52:	cf 91       	pop	r28
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
			else if(mparity==ODD)mparity=EVEN;
		}
		break;
		case ENT:
		{
			eeprom_write_byte(&parity,mparity);
    1f58:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <eeprom_write_byte>
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mparity==EVEN) mparity=ODD;
			else if(mparity==ODD)mparity=NONE;
    1f5c:	c0 33       	cpi	r28, 0x30	; 48
    1f5e:	39 f6       	brne	.-114    	; 0x1eee <chetnost+0x1c>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	8a e0       	ldi	r24, 0x0A	; 10
    1f64:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
    1f68:	cc cf       	rjmp	.-104    	; 0x1f02 <chetnost+0x30>
			return;
		}
		default: return;
		}
	}
}
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	08 95       	ret

00001f72 <skorost>:
		}
	}
}

static void skorost(void)
{
    1f72:	cf 92       	push	r12
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	27 97       	sbiw	r28, 0x07	; 7
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61

//	unsigned int speeds_table[SPEED_INDEX]={9600,19200,38400,76800};
	unsigned long int mspeed=eeprom_read_dword(&speed);
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <eeprom_read_dword>
    1f96:	6b 01       	movw	r12, r22
    1f98:	7c 01       	movw	r14, r24
	char buf[7];

	printMenuHeader(SKOROST);
    1f9a:	80 e2       	ldi	r24, 0x20	; 32
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>

	while(1)
	{
		LCD_gotoXY(10,0);
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	8a e0       	ldi	r24, 0x0A	; 10
    1fa6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    1faa:	2a e0       	ldi	r18, 0x0A	; 10
    1fac:	ae 01       	movw	r20, r28
    1fae:	4f 5f       	subi	r20, 0xFF	; 255
    1fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb2:	c7 01       	movw	r24, r14
    1fb4:	b6 01       	movw	r22, r12
    1fb6:	0e 94 8d 1a 	call	0x351a	; 0x351a <__ltoa_ncheck>
		LCD_puts(ltoa(mspeed,buf,10),5);
    1fba:	65 e0       	ldi	r22, 0x05	; 5
    1fbc:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>


		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1fc0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    1fc4:	85 30       	cpi	r24, 0x05	; 5
    1fc6:	59 f0       	breq	.+22     	; 0x1fde <skorost+0x6c>
    1fc8:	86 30       	cpi	r24, 0x06	; 6
    1fca:	a9 f0       	breq	.+42     	; 0x1ff6 <skorost+0x84>
    1fcc:	82 30       	cpi	r24, 0x02	; 2
    1fce:	f9 f4       	brne	.+62     	; 0x200e <skorost+0x9c>
		{
			if(mspeed>9600) mspeed/=2;
		}

		break;
		case ENT:{eeprom_write_dword(&speed,mspeed);return;}
    1fd0:	b7 01       	movw	r22, r14
    1fd2:	a6 01       	movw	r20, r12
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <eeprom_write_dword>
    1fdc:	18 c0       	rjmp	.+48     	; 0x200e <skorost+0x9c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mspeed<76800) mspeed*=2;
    1fde:	c1 14       	cp	r12, r1
    1fe0:	8c e2       	ldi	r24, 0x2C	; 44
    1fe2:	d8 06       	cpc	r13, r24
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	e8 06       	cpc	r14, r24
    1fe8:	f1 04       	cpc	r15, r1
    1fea:	d8 f6       	brcc	.-74     	; 0x1fa2 <skorost+0x30>
    1fec:	cc 0c       	add	r12, r12
    1fee:	dd 1c       	adc	r13, r13
    1ff0:	ee 1c       	adc	r14, r14
    1ff2:	ff 1c       	adc	r15, r15
    1ff4:	d6 cf       	rjmp	.-84     	; 0x1fa2 <skorost+0x30>
		}
		break;
		case DOWN:
		{
			if(mspeed>9600) mspeed/=2;
    1ff6:	81 e8       	ldi	r24, 0x81	; 129
    1ff8:	c8 16       	cp	r12, r24
    1ffa:	85 e2       	ldi	r24, 0x25	; 37
    1ffc:	d8 06       	cpc	r13, r24
    1ffe:	e1 04       	cpc	r14, r1
    2000:	f1 04       	cpc	r15, r1
    2002:	78 f2       	brcs	.-98     	; 0x1fa2 <skorost+0x30>
    2004:	f6 94       	lsr	r15
    2006:	e7 94       	ror	r14
    2008:	d7 94       	ror	r13
    200a:	c7 94       	ror	r12
    200c:	ca cf       	rjmp	.-108    	; 0x1fa2 <skorost+0x30>
		break;
		case ENT:{eeprom_write_dword(&speed,mspeed);return;}
		default: return;
		}
	}
}
    200e:	27 96       	adiw	r28, 0x07	; 7
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	ff 90       	pop	r15
    2020:	ef 90       	pop	r14
    2022:	df 90       	pop	r13
    2024:	cf 90       	pop	r12
    2026:	08 95       	ret

00002028 <rezhim>:
	naviMenu(LVL_svyaz);
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
}

static void rezhim(void)
{
    2028:	cf 93       	push	r28
	printMenuHeader(REZHIM);
    202a:	83 e3       	ldi	r24, 0x33	; 51
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>
	unsigned char mmode=eeprom_read_byte(&mode);
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    203a:	c8 2f       	mov	r28, r24

	while(1)
	{
		LCD_gotoXY(10,0);
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	8a e0       	ldi	r24, 0x0A	; 10
    2040:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		(mmode==RTU)?(LCD_puts_P(RTU_M,5)):(LCD_puts_P(ASCII_M,5));
    2044:	65 e0       	ldi	r22, 0x05	; 5
    2046:	c1 11       	cpse	r28, r1
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <rezhim+0x28>
    204a:	8f e2       	ldi	r24, 0x2F	; 47
    204c:	91 e0       	ldi	r25, 0x01	; 1
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <rezhim+0x2c>
    2050:	89 e2       	ldi	r24, 0x29	; 41
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2058:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    205c:	85 30       	cpi	r24, 0x05	; 5
    205e:	51 f0       	breq	.+20     	; 0x2074 <rezhim+0x4c>
    2060:	86 30       	cpi	r24, 0x06	; 6
    2062:	61 f0       	breq	.+24     	; 0x207c <rezhim+0x54>
    2064:	82 30       	cpi	r24, 0x02	; 2
    2066:	71 f4       	brne	.+28     	; 0x2084 <rezhim+0x5c>
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
		break;
		case ENT:
		{
			eeprom_write_byte(&mode,mmode);
    2068:	6c 2f       	mov	r22, r28
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		default: return;
		}
	}
}
    206e:	cf 91       	pop	r28
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
		break;
		case ENT:
		{
			eeprom_write_byte(&mode,mmode);
    2070:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <eeprom_write_byte>
		LCD_gotoXY(10,0);
		(mmode==RTU)?(LCD_puts_P(RTU_M,5)):(LCD_puts_P(ASCII_M,5));

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:if(mmode==RTU)mmode=ASCII;
    2074:	c1 11       	cpse	r28, r1
    2076:	e2 cf       	rjmp	.-60     	; 0x203c <rezhim+0x14>
    2078:	c1 e0       	ldi	r28, 0x01	; 1
    207a:	e0 cf       	rjmp	.-64     	; 0x203c <rezhim+0x14>
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
    207c:	c1 30       	cpi	r28, 0x01	; 1
    207e:	f1 f6       	brne	.-68     	; 0x203c <rezhim+0x14>
    2080:	c0 e0       	ldi	r28, 0x00	; 0
    2082:	dc cf       	rjmp	.-72     	; 0x203c <rezhim+0x14>
			return;
		}
		default: return;
		}
	}
}
    2084:	cf 91       	pop	r28
    2086:	08 95       	ret

00002088 <printSubMenu>:
}



static inline unsigned char printSubMenu(const char *flashName,unsigned char flag)
{
    2088:	2f 92       	push	r2
    208a:	3f 92       	push	r3
    208c:	4f 92       	push	r4
    208e:	5f 92       	push	r5
    2090:	6f 92       	push	r6
    2092:	7f 92       	push	r7
    2094:	8f 92       	push	r8
    2096:	9f 92       	push	r9
    2098:	af 92       	push	r10
    209a:	bf 92       	push	r11
    209c:	cf 92       	push	r12
    209e:	df 92       	push	r13
    20a0:	ef 92       	push	r14
    20a2:	ff 92       	push	r15
    20a4:	0f 93       	push	r16
    20a6:	1f 93       	push	r17
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	c8 56       	subi	r28, 0x68	; 104
    20b2:	d1 09       	sbc	r29, r1
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	4c 01       	movw	r8, r24
	unsigned char addr[MAXQDEV]={0};
    20c0:	ce 01       	movw	r24, r28
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	7c 01       	movw	r14, r24
    20c6:	83 e6       	ldi	r24, 0x63	; 99
    20c8:	f7 01       	movw	r30, r14
    20ca:	11 92       	st	Z+, r1
    20cc:	8a 95       	dec	r24
    20ce:	e9 f7       	brne	.-6      	; 0x20ca <printSubMenu+0x42>
	unsigned char screenPos=0;	//указатель на позицию экрана
	unsigned char numPunkt=0,currPunkt=0;	//счетчик пунктов меню,
	char tmpStr[4];

	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);
    20d0:	a6 2e       	mov	r10, r22
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	6c 01       	movw	r12, r24
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <printSubMenu+0x56>
    20da:	cc 0c       	add	r12, r12
    20dc:	dd 1c       	adc	r13, r13
    20de:	6a 95       	dec	r22
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <printSubMenu+0x52>
    20e2:	01 e0       	ldi	r16, 0x01	; 1
    20e4:	10 e0       	ldi	r17, 0x00	; 0
static inline unsigned char printSubMenu(const char *flashName,unsigned char flag)
{
	unsigned char addr[MAXQDEV]={0};
	unsigned char cursorPos=1;	//указатель на текущий пункт
	unsigned char screenPos=0;	//указатель на позицию экрана
	unsigned char numPunkt=0,currPunkt=0;	//счетчик пунктов меню,
    20e6:	41 2c       	mov	r4, r1
	char tmpStr[4];

	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);
    20e8:	89 e0       	ldi	r24, 0x09	; 9
    20ea:	78 2e       	mov	r7, r24
    20ec:	c8 01       	movw	r24, r16
    20ee:	87 5f       	subi	r24, 0xF7	; 247
    20f0:	9f 4f       	sbci	r25, 0xFF	; 255
    20f2:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    20f6:	80 13       	cpse	r24, r16
    20f8:	18 c0       	rjmp	.+48     	; 0x212a <printSubMenu+0xa2>
    20fa:	70 9e       	mul	r7, r16
    20fc:	f0 01       	movw	r30, r0
    20fe:	71 9e       	mul	r7, r17
    2100:	f0 0d       	add	r31, r0
    2102:	11 24       	eor	r1, r1
    2104:	e3 5c       	subi	r30, 0xC3	; 195
    2106:	fe 4f       	sbci	r31, 0xFE	; 254
    2108:	20 85       	ldd	r18, Z+8	; 0x08
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	2c 21       	and	r18, r12
    210e:	3d 21       	and	r19, r13
    2110:	0a 2c       	mov	r0, r10
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <printSubMenu+0x90>
    2114:	35 95       	asr	r19
    2116:	27 95       	ror	r18
    2118:	0a 94       	dec	r0
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <printSubMenu+0x8c>
    211c:	23 2b       	or	r18, r19
    211e:	29 f0       	breq	.+10     	; 0x212a <printSubMenu+0xa2>
    2120:	f7 01       	movw	r30, r14
    2122:	e4 0d       	add	r30, r4
    2124:	f1 1d       	adc	r31, r1
    2126:	80 83       	st	Z, r24
    2128:	43 94       	inc	r4
    212a:	0f 5f       	subi	r16, 0xFF	; 255
    212c:	1f 4f       	sbci	r17, 0xFF	; 255
    212e:	03 36       	cpi	r16, 0x63	; 99
    2130:	11 05       	cpc	r17, r1
    2132:	e1 f6       	brne	.-72     	; 0x20ec <printSubMenu+0x64>
    2134:	61 2c       	mov	r6, r1
    2136:	51 2c       	mov	r5, r1
    2138:	77 24       	eor	r7, r7
    213a:	73 94       	inc	r7

	while(1)
	{	//рисуем: "NAME:XX БДЗ"
		printMenuHeader(flashName);
		itoa(numPunkt,tmpStr,10);
    213c:	04 2d       	mov	r16, r4
    213e:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2140:	6e 01       	movw	r12, r28
    2142:	f4 e6       	ldi	r31, 0x64	; 100
    2144:	cf 0e       	add	r12, r31
    2146:	d1 1c       	adc	r13, r1

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt-1)
    2148:	18 01       	movw	r2, r16
    214a:	21 e0       	ldi	r18, 0x01	; 1
    214c:	22 1a       	sub	r2, r18
    214e:	31 08       	sbc	r3, r1
	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);

	while(1)
	{	//рисуем: "NAME:XX БДЗ"
		printMenuHeader(flashName);
    2150:	c4 01       	movw	r24, r8
    2152:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>
    2156:	4a e0       	ldi	r20, 0x0A	; 10
    2158:	b6 01       	movw	r22, r12
    215a:	c8 01       	movw	r24, r16
    215c:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
		itoa(numPunkt,tmpStr,10);
		LCD_puts(tmpStr,strlen(tmpStr)+1);
    2160:	f6 01       	movw	r30, r12
    2162:	01 90       	ld	r0, Z+
    2164:	00 20       	and	r0, r0
    2166:	e9 f7       	brne	.-6      	; 0x2162 <printSubMenu+0xda>
    2168:	6e 2f       	mov	r22, r30
    216a:	6c 19       	sub	r22, r12
    216c:	c6 01       	movw	r24, r12
    216e:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
		LCD_puts_P(BDZ,3);
    2172:	63 e0       	ldi	r22, 0x03	; 3
    2174:	8b e7       	ldi	r24, 0x7B	; 123
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
    217c:	57 01       	movw	r10, r14
    217e:	a5 0c       	add	r10, r5
    2180:	b1 1c       	adc	r11, r1

		for(unsigned char i=0;(i<NUMOFMENUSTRING) && (addr[i+screenPos]);i++)		//прорисовываем не более NUMOFMENUSTRING строк меню
    2182:	41 2c       	mov	r4, r1
    2184:	f5 01       	movw	r30, r10
    2186:	21 91       	ld	r18, Z+
    2188:	5f 01       	movw	r10, r30
    218a:	a9 96       	adiw	r28, 0x29	; 41
    218c:	2f af       	std	Y+63, r18	; 0x3f
    218e:	a9 97       	sbiw	r28, 0x29	; 41
    2190:	22 23       	and	r18, r18
    2192:	c9 f0       	breq	.+50     	; 0x21c6 <printSubMenu+0x13e>
		{
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
    2194:	43 94       	inc	r4
    2196:	64 2d       	mov	r22, r4
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
    219e:	64 e0       	ldi	r22, 0x04	; 4
    21a0:	8b e7       	ldi	r24, 0x7B	; 123
    21a2:	91 e0       	ldi	r25, 0x01	; 1
    21a4:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
    21a8:	4a e0       	ldi	r20, 0x0A	; 10
    21aa:	b6 01       	movw	r22, r12
    21ac:	a9 96       	adiw	r28, 0x29	; 41
    21ae:	ef ad       	ldd	r30, Y+63	; 0x3f
    21b0:	a9 97       	sbiw	r28, 0x29	; 41
    21b2:	8e 2f       	mov	r24, r30
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
    21ba:	63 e0       	ldi	r22, 0x03	; 3
    21bc:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
		printMenuHeader(flashName);
		itoa(numPunkt,tmpStr,10);
		LCD_puts(tmpStr,strlen(tmpStr)+1);
		LCD_puts_P(BDZ,3);

		for(unsigned char i=0;(i<NUMOFMENUSTRING) && (addr[i+screenPos]);i++)		//прорисовываем не более NUMOFMENUSTRING строк меню
    21c0:	f3 e0       	ldi	r31, 0x03	; 3
    21c2:	4f 12       	cpse	r4, r31
    21c4:	df cf       	rjmp	.-66     	; 0x2184 <printSubMenu+0xfc>
		{
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
		}
		LCD_gotoXY(0,cursorPos);LCD_putchar(0x84);			//...и курсор (символ >)
    21c6:	67 2d       	mov	r22, r7
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
    21ce:	84 e8       	ldi	r24, 0x84	; 132
    21d0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_putchar>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    21d4:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    21d8:	85 30       	cpi	r24, 0x05	; 5
    21da:	f1 f0       	breq	.+60     	; 0x2218 <printSubMenu+0x190>
    21dc:	38 f4       	brcc	.+14     	; 0x21ec <printSubMenu+0x164>
    21de:	82 30       	cpi	r24, 0x02	; 2
    21e0:	31 f1       	breq	.+76     	; 0x222e <printSubMenu+0x1a6>
    21e2:	83 30       	cpi	r24, 0x03	; 3
    21e4:	09 f0       	breq	.+2      	; 0x21e8 <printSubMenu+0x160>
    21e6:	b4 cf       	rjmp	.-152    	; 0x2150 <printSubMenu+0xc8>
			}
		}
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
		break;
		case ESC:return 0;	//выход по ESC
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	25 c0       	rjmp	.+74     	; 0x2236 <printSubMenu+0x1ae>
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
		}
		LCD_gotoXY(0,cursorPos);LCD_putchar(0x84);			//...и курсор (символ >)

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    21ec:	86 30       	cpi	r24, 0x06	; 6
    21ee:	31 f0       	breq	.+12     	; 0x21fc <printSubMenu+0x174>
    21f0:	8f 3f       	cpi	r24, 0xFF	; 255
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <printSubMenu+0x16e>
    21f4:	ad cf       	rjmp	.-166    	; 0x2150 <printSubMenu+0xc8>
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
		break;
		case ESC:return 0;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");//автовыход
    21f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    21fa:	aa cf       	rjmp	.-172    	; 0x2150 <printSubMenu+0xc8>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt-1)
    21fc:	86 2d       	mov	r24, r6
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	82 15       	cp	r24, r2
    2202:	93 05       	cpc	r25, r3
    2204:	0c f0       	brlt	.+2      	; 0x2208 <printSubMenu+0x180>
    2206:	a4 cf       	rjmp	.-184    	; 0x2150 <printSubMenu+0xc8>
			{
				++currPunkt;
    2208:	63 94       	inc	r6
				(cursorPos < NUMOFMENUSTRING)?(cursorPos++):(screenPos++);
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	87 15       	cp	r24, r7
    220e:	10 f0       	brcs	.+4      	; 0x2214 <printSubMenu+0x18c>
    2210:	73 94       	inc	r7
    2212:	9e cf       	rjmp	.-196    	; 0x2150 <printSubMenu+0xc8>
    2214:	53 94       	inc	r5
    2216:	9c cf       	rjmp	.-200    	; 0x2150 <printSubMenu+0xc8>
			}
		}
		break;
		case UP:
		{
			if(currPunkt > 0 )
    2218:	66 20       	and	r6, r6
    221a:	09 f4       	brne	.+2      	; 0x221e <printSubMenu+0x196>
    221c:	99 cf       	rjmp	.-206    	; 0x2150 <printSubMenu+0xc8>
			{
				--currPunkt;
    221e:	6a 94       	dec	r6
				(cursorPos > 1)?(cursorPos--):(screenPos--);
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	79 16       	cp	r7, r25
    2224:	11 f0       	breq	.+4      	; 0x222a <printSubMenu+0x1a2>
    2226:	7a 94       	dec	r7
    2228:	93 cf       	rjmp	.-218    	; 0x2150 <printSubMenu+0xc8>
    222a:	5a 94       	dec	r5
    222c:	91 cf       	rjmp	.-222    	; 0x2150 <printSubMenu+0xc8>
			}
		}
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
    222e:	f7 01       	movw	r30, r14
    2230:	e6 0d       	add	r30, r6
    2232:	f1 1d       	adc	r31, r1
    2234:	80 81       	ld	r24, Z
		default:continue;	//любая другая клавиша
		break;
		}
	}
	return NOKEY;
}
    2236:	c8 59       	subi	r28, 0x98	; 152
    2238:	df 4f       	sbci	r29, 0xFF	; 255
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	ff 90       	pop	r15
    224e:	ef 90       	pop	r14
    2250:	df 90       	pop	r13
    2252:	cf 90       	pop	r12
    2254:	bf 90       	pop	r11
    2256:	af 90       	pop	r10
    2258:	9f 90       	pop	r9
    225a:	8f 90       	pop	r8
    225c:	7f 90       	pop	r7
    225e:	6f 90       	pop	r6
    2260:	5f 90       	pop	r5
    2262:	4f 90       	pop	r4
    2264:	3f 90       	pop	r3
    2266:	2f 90       	pop	r2
    2268:	08 95       	ret

0000226a <in_line>:

static void in_line(void)
{
	printSubMenu(NA_SVYAZI,INL);
    226a:	62 e0       	ldi	r22, 0x02	; 2
    226c:	8f e8       	ldi	r24, 0x8F	; 143
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	0c 94 44 10 	jmp	0x2088	; 0x2088 <printSubMenu>

00002274 <viewArch>:

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
}

static unsigned char viewArch(unsigned char currBDZaddr,unsigned char index)
{
    2274:	cf 92       	push	r12
    2276:	df 92       	push	r13
    2278:	ff 92       	push	r15
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	a9 97       	sbiw	r28, 0x29	; 41
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	f8 2e       	mov	r15, r24
    2294:	d6 2e       	mov	r13, r22
	char tmpStr[7];
	unsigned char tmpData[14];
	unsigned char i,page=0;

	printMenuHeader(ARHIV);
    2296:	89 e8       	ldi	r24, 0x89	; 137
    2298:	91 e0       	ldi	r25, 0x01	; 1
    229a:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>

	LCD_puts_P(BDZ,4);
    229e:	64 e0       	ldi	r22, 0x04	; 4
    22a0:	8b e7       	ldi	r24, 0x7B	; 123
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
	LCD_puts(itoa(currBDZaddr,tmpStr,10),3);
    22a8:	0f 2d       	mov	r16, r15
    22aa:	10 e0       	ldi	r17, 0x00	; 0
    22ac:	4a e0       	ldi	r20, 0x0A	; 10
    22ae:	be 01       	movw	r22, r28
    22b0:	6d 5d       	subi	r22, 0xDD	; 221
    22b2:	7f 4f       	sbci	r23, 0xFF	; 255
    22b4:	c8 01       	movw	r24, r16
    22b6:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
    22ba:	63 e0       	ldi	r22, 0x03	; 3
    22bc:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
	LCD_gotoXY(18,0);
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	82 e1       	ldi	r24, 0x12	; 18
    22c4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
    22c8:	8d 2d       	mov	r24, r13
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	4a e0       	ldi	r20, 0x0A	; 10
    22ce:	be 01       	movw	r22, r28
    22d0:	6d 5d       	subi	r22, 0xDD	; 221
    22d2:	7f 4f       	sbci	r23, 0xFF	; 255
    22d4:	01 96       	adiw	r24, 0x01	; 1
    22d6:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
	LCD_puts(itoa(index+1,tmpStr,10),2);
    22da:	62 e0       	ldi	r22, 0x02	; 2
    22dc:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>

	//первая часть архива
	if(send_read_arch(1,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
    22e0:	4d 2d       	mov	r20, r13
    22e2:	6f 2d       	mov	r22, r15
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	0e 94 45 0b 	call	0x168a	; 0x168a <send_read_arch>
    22ea:	87 ff       	sbrs	r24, 7
    22ec:	03 c0       	rjmp	.+6      	; 0x22f4 <viewArch+0x80>
    22ee:	0e 94 2b 06 	call	0xc56	; 0xc56 <printTOUT>
    22f2:	1c c0       	rjmp	.+56     	; 0x232c <viewArch+0xb8>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
    22f4:	89 e0       	ldi	r24, 0x09	; 9
    22f6:	80 9f       	mul	r24, r16
    22f8:	f0 01       	movw	r30, r0
    22fa:	81 9f       	mul	r24, r17
    22fc:	f0 0d       	add	r31, r0
    22fe:	11 24       	eor	r1, r1
    2300:	e3 5c       	subi	r30, 0xC3	; 195
    2302:	fe 4f       	sbci	r31, 0xFE	; 254
    2304:	80 81       	ld	r24, Z
    2306:	84 30       	cpi	r24, 0x04	; 4
    2308:	11 f0       	breq	.+4      	; 0x230e <viewArch+0x9a>
	else return 0;
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	c6 c0       	rjmp	.+396    	; 0x249a <viewArch+0x226>
    230e:	de 01       	movw	r26, r28
    2310:	55 96       	adiw	r26, 0x15	; 21
	LCD_gotoXY(18,0);
	LCD_puts(itoa(index+1,tmpStr,10),2);

	//первая часть архива
	if(send_read_arch(1,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	af 01       	movw	r20, r30
    2318:	9a 01       	movw	r18, r20
    231a:	28 0f       	add	r18, r24
    231c:	39 1f       	adc	r19, r25
    231e:	f9 01       	movw	r30, r18
    2320:	20 81       	ld	r18, Z
    2322:	2d 93       	st	X+, r18
    2324:	01 96       	adiw	r24, 0x01	; 1
    2326:	87 30       	cpi	r24, 0x07	; 7
    2328:	91 05       	cpc	r25, r1
    232a:	b1 f7       	brne	.-20     	; 0x2318 <viewArch+0xa4>
	else return 0;

	//вторая часть архива
	if(send_read_arch(2,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
    232c:	4d 2d       	mov	r20, r13
    232e:	6f 2d       	mov	r22, r15
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	0e 94 45 0b 	call	0x168a	; 0x168a <send_read_arch>
    2336:	87 ff       	sbrs	r24, 7
    2338:	07 c0       	rjmp	.+14     	; 0x2348 <viewArch+0xd4>
    233a:	0e 94 2b 06 	call	0xc56	; 0xc56 <printTOUT>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_2) for(i=7;i<14;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i-7];	//скопировали данные
    233e:	f1 2c       	mov	r15, r1

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
    2340:	cc 24       	eor	r12, r12
    2342:	c3 94       	inc	r12
    2344:	d1 2c       	mov	r13, r1
    2346:	51 c0       	rjmp	.+162    	; 0x23ea <viewArch+0x176>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
	else return 0;

	//вторая часть архива
	if(send_read_arch(2,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_2) for(i=7;i<14;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i-7];	//скопировали данные
    2348:	89 e0       	ldi	r24, 0x09	; 9
    234a:	80 9f       	mul	r24, r16
    234c:	f0 01       	movw	r30, r0
    234e:	81 9f       	mul	r24, r17
    2350:	f0 0d       	add	r31, r0
    2352:	11 24       	eor	r1, r1
    2354:	e3 5c       	subi	r30, 0xC3	; 195
    2356:	fe 4f       	sbci	r31, 0xFE	; 254
    2358:	80 81       	ld	r24, Z
    235a:	85 30       	cpi	r24, 0x05	; 5
    235c:	b1 f6       	brne	.-84     	; 0x230a <viewArch+0x96>
    235e:	de 01       	movw	r26, r28
    2360:	5c 96       	adiw	r26, 0x1c	; 28
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	af 01       	movw	r20, r30
    2368:	9a 01       	movw	r18, r20
    236a:	28 0f       	add	r18, r24
    236c:	39 1f       	adc	r19, r25
    236e:	f9 01       	movw	r30, r18
    2370:	20 81       	ld	r18, Z
    2372:	2d 93       	st	X+, r18
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	87 30       	cpi	r24, 0x07	; 7
    2378:	91 05       	cpc	r25, r1
    237a:	b1 f7       	brne	.-20     	; 0x2368 <viewArch+0xf4>
    237c:	e0 cf       	rjmp	.-64     	; 0x233e <viewArch+0xca>

		if(tmpData[3]==0xFF) {LCD_gotoXY(0,2);LCD_puts_P(PUSTO,7);}	//если год 0xFF строка 0 "пусто"
		else
		{
			//строка 1 дата/время
			printTimeStr(&tmpData[1],0,1);
    237e:	ce 01       	movw	r24, r28
    2380:	46 96       	adiw	r24, 0x16	; 22
    2382:	0e 94 c7 05 	call	0xb8e	; 0xb8e <printTimeStr.constprop.2>

			switch(page)
    2386:	f1 10       	cpse	r15, r1
    2388:	3d c0       	rjmp	.+122    	; 0x2404 <viewArch+0x190>
			{
			case 0:
			{
				//строка ВОД1234 ДВХ1234
				printIOStr(&tmpData[8]);
    238a:	ce 01       	movw	r24, r28
    238c:	4d 96       	adiw	r24, 0x1d	; 29
    238e:	0e 94 a2 04 	call	0x944	; 0x944 <printIOStr>

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
    2392:	63 e0       	ldi	r22, 0x03	; 3
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
    239a:	6e e6       	ldi	r22, 0x6E	; 110
    239c:	71 e0       	ldi	r23, 0x01	; 1
    239e:	ce 01       	movw	r24, r28
    23a0:	01 96       	adiw	r24, 0x01	; 1
    23a2:	0e 94 67 1a 	call	0x34ce	; 0x34ce <strcpy_P>
    23a6:	62 ed       	ldi	r22, 0xD2	; 210
    23a8:	70 e0       	ldi	r23, 0x00	; 0
    23aa:	ce 01       	movw	r24, r28
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	0e 94 77 1a 	call	0x34ee	; 0x34ee <strcat>
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
    23b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23b4:	8f 70       	andi	r24, 0x0F	; 15
    23b6:	b1 f5       	brne	.+108    	; 0x2424 <viewArch+0x1b0>
    23b8:	67 eb       	ldi	r22, 0xB7	; 183
    23ba:	70 e0       	ldi	r23, 0x00	; 0
    23bc:	ce 01       	movw	r24, r28
    23be:	01 96       	adiw	r24, 0x01	; 1
    23c0:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <strcat_P>
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
				LCD_puts(buffer,20);
    23c4:	64 e1       	ldi	r22, 0x14	; 20
    23c6:	ce 01       	movw	r24, r28
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
			break;
			}//switch

		}

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    23ce:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    23d2:	87 30       	cpi	r24, 0x07	; 7
    23d4:	08 f0       	brcs	.+2      	; 0x23d8 <viewArch+0x164>
    23d6:	4f c0       	rjmp	.+158    	; 0x2476 <viewArch+0x202>
    23d8:	85 30       	cpi	r24, 0x05	; 5
    23da:	08 f0       	brcs	.+2      	; 0x23de <viewArch+0x16a>
    23dc:	5e c0       	rjmp	.+188    	; 0x249a <viewArch+0x226>
    23de:	83 30       	cpi	r24, 0x03	; 3
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <viewArch+0x170>
    23e2:	5b c0       	rjmp	.+182    	; 0x249a <viewArch+0x226>
    23e4:	84 30       	cpi	r24, 0x04	; 4
    23e6:	09 f4       	brne	.+2      	; 0x23ea <viewArch+0x176>
    23e8:	53 c0       	rjmp	.+166    	; 0x2490 <viewArch+0x21c>

	while(1)
	{
		char buffer[20];

		if(tmpData[3]==0xFF) {LCD_gotoXY(0,2);LCD_puts_P(PUSTO,7);}	//если год 0xFF строка 0 "пусто"
    23ea:	88 8d       	ldd	r24, Y+24	; 0x18
    23ec:	8f 3f       	cpi	r24, 0xFF	; 255
    23ee:	39 f6       	brne	.-114    	; 0x237e <viewArch+0x10a>
    23f0:	62 e0       	ldi	r22, 0x02	; 2
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
    23f8:	67 e0       	ldi	r22, 0x07	; 7
    23fa:	8b e8       	ldi	r24, 0x8B	; 139
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
    2402:	e5 cf       	rjmp	.-54     	; 0x23ce <viewArch+0x15a>
		else
		{
			//строка 1 дата/время
			printTimeStr(&tmpData[1],0,1);

			switch(page)
    2404:	f1 e0       	ldi	r31, 0x01	; 1
    2406:	ff 12       	cpse	r15, r31
    2408:	e2 cf       	rjmp	.-60     	; 0x23ce <viewArch+0x15a>
			}
			break;
			case 1:
			{
				//строки вкл/откл МТЗ
				printMTZStr((unsigned int)tmpData[10]<<8 | tmpData[11],(unsigned int)tmpData[12]<<8 | tmpData[13]);
    240a:	69 a1       	ldd	r22, Y+33	; 0x21
    240c:	7a a1       	ldd	r23, Y+34	; 0x22
    240e:	76 27       	eor	r23, r22
    2410:	67 27       	eor	r22, r23
    2412:	76 27       	eor	r23, r22
    2414:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2416:	98 a1       	ldd	r25, Y+32	; 0x20
    2418:	98 27       	eor	r25, r24
    241a:	89 27       	eor	r24, r25
    241c:	98 27       	eor	r25, r24
    241e:	0e 94 5a 05 	call	0xab4	; 0xab4 <printMTZStr>
			}
			break;
    2422:	d5 cf       	rjmp	.-86     	; 0x23ce <viewArch+0x15a>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
    2428:	2e 8d       	ldd	r18, Y+30	; 0x1e
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	a6 01       	movw	r20, r12
    242e:	08 2e       	mov	r0, r24
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <viewArch+0x1c2>
    2432:	44 0f       	add	r20, r20
    2434:	55 1f       	adc	r21, r21
    2436:	0a 94       	dec	r0
    2438:	e2 f7       	brpl	.-8      	; 0x2432 <viewArch+0x1be>
    243a:	24 23       	and	r18, r20
    243c:	35 23       	and	r19, r21
    243e:	08 2e       	mov	r0, r24
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <viewArch+0x1d2>
    2442:	35 95       	asr	r19
    2444:	27 95       	ror	r18
    2446:	0a 94       	dec	r0
    2448:	e2 f7       	brpl	.-8      	; 0x2442 <viewArch+0x1ce>
    244a:	8c 01       	movw	r16, r24
    244c:	0f 5f       	subi	r16, 0xFF	; 255
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	23 2b       	or	r18, r19
    2452:	61 f0       	breq	.+24     	; 0x246c <viewArch+0x1f8>
    2454:	4a e0       	ldi	r20, 0x0A	; 10
    2456:	be 01       	movw	r22, r28
    2458:	6d 5d       	subi	r22, 0xDD	; 221
    245a:	7f 4f       	sbci	r23, 0xFF	; 255
    245c:	c8 01       	movw	r24, r16
    245e:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
    2462:	bc 01       	movw	r22, r24
    2464:	ce 01       	movw	r24, r28
    2466:	01 96       	adiw	r24, 0x01	; 1
    2468:	0e 94 77 1a 	call	0x34ee	; 0x34ee <strcat>
    246c:	c8 01       	movw	r24, r16
    246e:	04 30       	cpi	r16, 0x04	; 4
    2470:	11 05       	cpc	r17, r1
    2472:	d1 f6       	brne	.-76     	; 0x2428 <viewArch+0x1b4>
    2474:	a7 cf       	rjmp	.-178    	; 0x23c4 <viewArch+0x150>
			break;
			}//switch

		}

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2476:	87 30       	cpi	r24, 0x07	; 7
    2478:	31 f0       	breq	.+12     	; 0x2486 <viewArch+0x212>
    247a:	8f 3f       	cpi	r24, 0xFF	; 255
    247c:	09 f0       	breq	.+2      	; 0x2480 <viewArch+0x20c>
    247e:	b5 cf       	rjmp	.-150    	; 0x23ea <viewArch+0x176>
		break;
		case LEFT:if(page>0)page--;
		break;
		case ESC:return ESC;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    2480:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    2484:	b2 cf       	rjmp	.-156    	; 0x23ea <viewArch+0x176>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:return UP;
		case DOWN:return DOWN;
		case RIGHT:if(page<1)page++;
    2486:	f1 10       	cpse	r15, r1
    2488:	b0 cf       	rjmp	.-160    	; 0x23ea <viewArch+0x176>
    248a:	ff 24       	eor	r15, r15
    248c:	f3 94       	inc	r15
    248e:	ad cf       	rjmp	.-166    	; 0x23ea <viewArch+0x176>
		break;
		case LEFT:if(page>0)page--;
    2490:	ff 20       	and	r15, r15
    2492:	09 f4       	brne	.+2      	; 0x2496 <viewArch+0x222>
    2494:	aa cf       	rjmp	.-172    	; 0x23ea <viewArch+0x176>
    2496:	fa 94       	dec	r15
    2498:	a8 cf       	rjmp	.-176    	; 0x23ea <viewArch+0x176>
		default:continue;	//любая другая клавиша
		break;
		}
	}
	return 0;
}
    249a:	a9 96       	adiw	r28, 0x29	; 41
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	cd bf       	out	0x3d, r28	; 61
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	1f 91       	pop	r17
    24ac:	0f 91       	pop	r16
    24ae:	ff 90       	pop	r15
    24b0:	df 90       	pop	r13
    24b2:	cf 90       	pop	r12
    24b4:	08 95       	ret

000024b6 <archieve>:
	if( whileKey() ==ESC)reset(currBDZaddr);//а если ответ был правильный предлагаем ресетнуть

}

static void archieve(void)
{
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
	unsigned char currBDZaddr = printSubMenu(ARHIV,INL); /*выполнить просмотр архива инлайновых*/
    24ba:	62 e0       	ldi	r22, 0x02	; 2
    24bc:	89 e8       	ldi	r24, 0x89	; 137
    24be:	91 e0       	ldi	r25, 0x01	; 1
    24c0:	0e 94 44 10 	call	0x2088	; 0x2088 <printSubMenu>
    24c4:	d8 2f       	mov	r29, r24
	unsigned char index=0;

	if(currBDZaddr<1)return;
    24c6:	88 23       	and	r24, r24
    24c8:	91 f0       	breq	.+36     	; 0x24ee <archieve+0x38>
    24ca:	c0 e0       	ldi	r28, 0x00	; 0

	while(1)
	{
		switch(viewArch(currBDZaddr,index))
    24cc:	6c 2f       	mov	r22, r28
    24ce:	8d 2f       	mov	r24, r29
    24d0:	0e 94 3a 11 	call	0x2274	; 0x2274 <viewArch>
    24d4:	85 30       	cpi	r24, 0x05	; 5
    24d6:	19 f0       	breq	.+6      	; 0x24de <archieve+0x28>
    24d8:	86 30       	cpi	r24, 0x06	; 6
    24da:	29 f0       	breq	.+10     	; 0x24e6 <archieve+0x30>
    24dc:	08 c0       	rjmp	.+16     	; 0x24ee <archieve+0x38>
		{
		case UP:if(index>0)index--;
    24de:	cc 23       	and	r28, r28
    24e0:	a9 f3       	breq	.-22     	; 0x24cc <archieve+0x16>
    24e2:	c1 50       	subi	r28, 0x01	; 1
    24e4:	f3 cf       	rjmp	.-26     	; 0x24cc <archieve+0x16>
		break;
		case DOWN:if(index<31)index++;
    24e6:	cf 31       	cpi	r28, 0x1F	; 31
    24e8:	88 f7       	brcc	.-30     	; 0x24cc <archieve+0x16>
    24ea:	cf 5f       	subi	r28, 0xFF	; 255
    24ec:	ef cf       	rjmp	.-34     	; 0x24cc <archieve+0x16>
		break;
		default:return;
		}
	}
}
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	08 95       	ret

000024f4 <reset>:

	return;
}

static void reset(unsigned char currBDZaddr)
{
    24f4:	cf 93       	push	r28
    24f6:	c8 2f       	mov	r28, r24
	whileKey();	//ждем нажатия/отпускания кнопки или автовыхода
    24f8:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>

	LCD_clr();
    24fc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_clr>
	LCD_puts_P(SBROSIT,20);
    2500:	64 e1       	ldi	r22, 0x14	; 20
    2502:	83 ea       	ldi	r24, 0xA3	; 163
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
    250a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    250e:	82 30       	cpi	r24, 0x02	; 2
    2510:	29 f4       	brne	.+10     	; 0x251c <reset+0x28>
    2512:	62 e0       	ldi	r22, 0x02	; 2
    2514:	8c 2f       	mov	r24, r28
}
    2516:	cf 91       	pop	r28
	whileKey();	//ждем нажатия/отпускания кнопки или автовыхода

	LCD_clr();
	LCD_puts_P(SBROSIT,20);

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
    2518:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <send_cmd>
}
    251c:	cf 91       	pop	r28
    251e:	08 95       	ret

00002520 <fault>:
		}
	}
}

static void fault(void)
{
    2520:	ef 92       	push	r14
    2522:	ff 92       	push	r15
    2524:	1f 93       	push	r17
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	00 d0       	rcall	.+0      	; 0x252c <fault+0xc>
    252c:	00 d0       	rcall	.+0      	; 0x252e <fault+0xe>
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
	char tmpStr[4];
	unsigned char currBDZaddr = printSubMenu(NEISPRAVNOST,FLT);	//получили адрес выбранного БДЗ
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	8d e9       	ldi	r24, 0x9D	; 157
    2536:	91 e0       	ldi	r25, 0x01	; 1
    2538:	0e 94 44 10 	call	0x2088	; 0x2088 <printSubMenu>
    253c:	18 2f       	mov	r17, r24
//LCD_gotoXY(0,0);
//LCD_putchar(currBDZaddr+'0');
//_delay_ms(2000);
	if(currBDZaddr<1)return;
    253e:	88 23       	and	r24, r24
    2540:	09 f4       	brne	.+2      	; 0x2544 <fault+0x24>
    2542:	4c c0       	rjmp	.+152    	; 0x25dc <fault+0xbc>

	printMenuHeader(NEISPRAVNOST);
    2544:	8d e9       	ldi	r24, 0x9D	; 157
    2546:	91 e0       	ldi	r25, 0x01	; 1
    2548:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>

	LCD_puts_P(BDZ,4);
    254c:	64 e0       	ldi	r22, 0x04	; 4
    254e:	8b e7       	ldi	r24, 0x7B	; 123
    2550:	91 e0       	ldi	r25, 0x01	; 1
    2552:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
	LCD_puts(itoa(currBDZaddr,tmpStr,10),3);
    2556:	e1 2e       	mov	r14, r17
    2558:	f1 2c       	mov	r15, r1
    255a:	4a e0       	ldi	r20, 0x0A	; 10
    255c:	be 01       	movw	r22, r28
    255e:	6f 5f       	subi	r22, 0xFF	; 255
    2560:	7f 4f       	sbci	r23, 0xFF	; 255
    2562:	c7 01       	movw	r24, r14
    2564:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
    2568:	63 e0       	ldi	r22, 0x03	; 3
    256a:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>

	if(send_cmd(currBDZaddr,RD_FAULT) <0) printTOUT();	//послали команду,дождались таймаута -"нет связи"
    256e:	63 e0       	ldi	r22, 0x03	; 3
    2570:	81 2f       	mov	r24, r17
    2572:	0e 94 bd 0b 	call	0x177a	; 0x177a <send_cmd>
    2576:	87 ff       	sbrs	r24, 7
    2578:	03 c0       	rjmp	.+6      	; 0x2580 <fault+0x60>
    257a:	0e 94 2b 06 	call	0xc56	; 0xc56 <printTOUT>
    257e:	27 c0       	rjmp	.+78     	; 0x25ce <fault+0xae>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_FAULT)	//иначе если принятое сообщени это ответ на этот запрос
    2580:	29 e0       	ldi	r18, 0x09	; 9
    2582:	2e 9d       	mul	r18, r14
    2584:	c0 01       	movw	r24, r0
    2586:	2f 9d       	mul	r18, r15
    2588:	90 0d       	add	r25, r0
    258a:	11 24       	eor	r1, r1
    258c:	9c 01       	movw	r18, r24
    258e:	23 5c       	subi	r18, 0xC3	; 195
    2590:	3e 4f       	sbci	r19, 0xFE	; 254
    2592:	79 01       	movw	r14, r18
    2594:	f9 01       	movw	r30, r18
    2596:	20 81       	ld	r18, Z
    2598:	23 30       	cpi	r18, 0x03	; 3
    259a:	01 f5       	brne	.+64     	; 0x25dc <fault+0xbc>
	{
//		data[1] -состояния входов	 <7>ЦВХ3; <6>ЦВХ2; <5>ЦВХ1; <4>ЦВХ0; <3>ОВХ3; <2>ОВХ2; <1>ОВХ1; <0>ОВХ0  (неисправный вход ==1)
//		data[2] -код ошибки {TEST=1,DATACRC,WATCHDOG,HARDMEM,SOFTHAND,SOFTTIM,UART,RTC,CAN,MSG}
		printIOStr(&inSysBDZ[currBDZaddr].data[1]);
    259c:	82 5c       	subi	r24, 0xC2	; 194
    259e:	9e 4f       	sbci	r25, 0xFE	; 254
    25a0:	0e 94 a2 04 	call	0x944	; 0x944 <printIOStr>

		LCD_gotoXY(0,3);
    25a4:	63 e0       	ldi	r22, 0x03	; 3
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		LCD_puts_P(OSHIBKA,7);
    25ac:	67 e0       	ldi	r22, 0x07	; 7
    25ae:	85 ec       	ldi	r24, 0xC5	; 197
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
		LCD_puts(itoa(inSysBDZ[currBDZaddr].data[2],tmpStr,10),2);
    25b6:	f7 01       	movw	r30, r14
    25b8:	82 81       	ldd	r24, Z+2	; 0x02
    25ba:	4a e0       	ldi	r20, 0x0A	; 10
    25bc:	be 01       	movw	r22, r28
    25be:	6f 5f       	subi	r22, 0xFF	; 255
    25c0:	7f 4f       	sbci	r23, 0xFF	; 255
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
    25c8:	62 e0       	ldi	r22, 0x02	; 2
    25ca:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
	}
	else return;							//если получен не тот ответ выходим
	if( whileKey() ==ESC)reset(currBDZaddr);//а если ответ был правильный предлагаем ресетнуть
    25ce:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    25d2:	83 30       	cpi	r24, 0x03	; 3
    25d4:	19 f4       	brne	.+6      	; 0x25dc <fault+0xbc>
    25d6:	81 2f       	mov	r24, r17
    25d8:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <reset>

}
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	ff 90       	pop	r15
    25ec:	ef 90       	pop	r14
    25ee:	08 95       	ret

000025f0 <alarm>:
{
	printSubMenu(NA_SVYAZI,INL);
}

static void alarm(void)
{
    25f0:	8f 92       	push	r8
    25f2:	9f 92       	push	r9
    25f4:	af 92       	push	r10
    25f6:	bf 92       	push	r11
    25f8:	cf 92       	push	r12
    25fa:	df 92       	push	r13
    25fc:	ef 92       	push	r14
    25fe:	ff 92       	push	r15
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	00 d0       	rcall	.+0      	; 0x260a <alarm+0x1a>
    260a:	00 d0       	rcall	.+0      	; 0x260c <alarm+0x1c>
    260c:	1f 92       	push	r1
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
	unsigned char Ndev=0,tmpAddr=0;
	char tmpStr[5];

	printMenuHeader(AVARIYA);//рисуем название пункта':'
    2612:	8b ea       	ldi	r24, 0xAB	; 171
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>
    261a:	aa 24       	eor	r10, r10
    261c:	a3 94       	inc	r10
    261e:	b1 2c       	mov	r11, r1
static void alarm(void)
{
	unsigned char currBDZaddr = 0;
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
	unsigned char Ndev=0,tmpAddr=0;
    2620:	10 e0       	ldi	r17, 0x00	; 0
    2622:	00 e0       	ldi	r16, 0x00	; 0

static void alarm(void)
{
	unsigned char currBDZaddr = 0;
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
    2624:	ee 24       	eor	r14, r14
    2626:	ea 94       	dec	r14
    2628:	fe 2c       	mov	r15, r14
    262a:	cc 24       	eor	r12, r12
    262c:	ca 94       	dec	r12
    262e:	dc 2c       	mov	r13, r12

	printMenuHeader(AVARIYA);//рисуем название пункта':'

	for(unsigned char i=1;i<MAXQDEV;i++)
	{
		if(readID(i)==i && chkBit(inSysBDZ[i].flags,ALM))	//обнаружили девайс с флагом авария
    2630:	39 e0       	ldi	r19, 0x09	; 9
    2632:	83 2e       	mov	r8, r19
    2634:	c5 01       	movw	r24, r10
    2636:	87 5f       	subi	r24, 0xF7	; 247
    2638:	9f 4f       	sbci	r25, 0xFF	; 255
    263a:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    263e:	98 2e       	mov	r9, r24
    2640:	8a 11       	cpse	r24, r10
    2642:	2f c0       	rjmp	.+94     	; 0x26a2 <alarm+0xb2>
    2644:	8a 9c       	mul	r8, r10
    2646:	f0 01       	movw	r30, r0
    2648:	8b 9c       	mul	r8, r11
    264a:	f0 0d       	add	r31, r0
    264c:	11 24       	eor	r1, r1
    264e:	e3 5c       	subi	r30, 0xC3	; 195
    2650:	fe 4f       	sbci	r31, 0xFE	; 254
    2652:	80 85       	ldd	r24, Z+8	; 0x08
    2654:	80 ff       	sbrs	r24, 0
    2656:	25 c0       	rjmp	.+74     	; 0x26a2 <alarm+0xb2>
		{
			if(tmpAddr==0)tmpAddr=i;						//на случай если не найдется БДЗ,зафиксировавщих время сраб.МТЗ
    2658:	11 11       	cpse	r17, r1
    265a:	01 c0       	rjmp	.+2      	; 0x265e <alarm+0x6e>
    265c:	19 2d       	mov	r17, r9
			Ndev++;											//добавляем кол-во обнаруженных девайсов
    265e:	0f 5f       	subi	r16, 0xFF	; 255
			if(send_read_arch(2,i,0) <0) printTOUT();		//запрашиваем чась архива со значениями МТЗ.Если получен таймаут...
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	69 2d       	mov	r22, r9
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	0e 94 45 0b 	call	0x168a	; 0x168a <send_read_arch>
    266a:	87 ff       	sbrs	r24, 7
    266c:	03 c0       	rjmp	.+6      	; 0x2674 <alarm+0x84>
    266e:	0e 94 2b 06 	call	0xc56	; 0xc56 <printTOUT>
    2672:	17 c0       	rjmp	.+46     	; 0x26a2 <alarm+0xb2>
			else if(inSysBDZ[i].data[0]==RD_ARCH_2)			//получили тот ответ который надо
    2674:	8a 9c       	mul	r8, r10
    2676:	f0 01       	movw	r30, r0
    2678:	8b 9c       	mul	r8, r11
    267a:	f0 0d       	add	r31, r0
    267c:	11 24       	eor	r1, r1
    267e:	e3 5c       	subi	r30, 0xC3	; 195
    2680:	fe 4f       	sbci	r31, 0xFE	; 254
    2682:	80 81       	ld	r24, Z
    2684:	85 30       	cpi	r24, 0x05	; 5
    2686:	69 f4       	brne	.+26     	; 0x26a2 <alarm+0xb2>
			{
				unsigned int tmpTime=(unsigned int)inSysBDZ[i].data[3]<<8 | inSysBDZ[i].data[4];
    2688:	23 81       	ldd	r18, Z+3	; 0x03
    268a:	84 81       	ldd	r24, Z+4	; 0x04
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	92 2b       	or	r25, r18

				if(tmpTime < minMTZ_ontime)
    2690:	8c 15       	cp	r24, r12
    2692:	9d 05       	cpc	r25, r13
    2694:	30 f4       	brcc	.+12     	; 0x26a2 <alarm+0xb2>
				{
					minMTZ_ontime=tmpTime;				//если полученное время меньше сохраненного минимального-перезаписываем
					MTZ_offtime = (unsigned int)inSysBDZ[i].data[5]<<8 | inSysBDZ[i].data[6];	//время отпускания
    2696:	25 81       	ldd	r18, Z+5	; 0x05
    2698:	e6 80       	ldd	r14, Z+6	; 0x06
    269a:	f1 2c       	mov	r15, r1
    269c:	f2 2a       	or	r15, r18
    269e:	19 2d       	mov	r17, r9
    26a0:	6c 01       	movw	r12, r24
    26a2:	2f ef       	ldi	r18, 0xFF	; 255
    26a4:	a2 1a       	sub	r10, r18
    26a6:	b2 0a       	sbc	r11, r18
	unsigned char Ndev=0,tmpAddr=0;
	char tmpStr[5];

	printMenuHeader(AVARIYA);//рисуем название пункта':'

	for(unsigned char i=1;i<MAXQDEV;i++)
    26a8:	83 e6       	ldi	r24, 0x63	; 99
    26aa:	a8 16       	cp	r10, r24
    26ac:	b1 04       	cpc	r11, r1
    26ae:	11 f6       	brne	.-124    	; 0x2634 <alarm+0x44>
				}
			}
		}
	}

	LCD_puts(itoa(Ndev,tmpStr,10),strlen(tmpStr)+2);LCD_puts_P(BDZ,4);		//ХХX	БД3
    26b0:	be 01       	movw	r22, r28
    26b2:	6f 5f       	subi	r22, 0xFF	; 255
    26b4:	7f 4f       	sbci	r23, 0xFF	; 255
    26b6:	fb 01       	movw	r30, r22
    26b8:	01 90       	ld	r0, Z+
    26ba:	00 20       	and	r0, r0
    26bc:	e9 f7       	brne	.-6      	; 0x26b8 <alarm+0xc8>
    26be:	31 97       	sbiw	r30, 0x01	; 1
    26c0:	5f 01       	movw	r10, r30
    26c2:	a6 1a       	sub	r10, r22
    26c4:	b7 0a       	sbc	r11, r23
    26c6:	4a e0       	ldi	r20, 0x0A	; 10
    26c8:	80 2f       	mov	r24, r16
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0e 94 82 1a 	call	0x3504	; 0x3504 <__itoa_ncheck>
    26d0:	62 e0       	ldi	r22, 0x02	; 2
    26d2:	6a 0d       	add	r22, r10
    26d4:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
    26d8:	64 e0       	ldi	r22, 0x04	; 4
    26da:	8b e7       	ldi	r24, 0x7B	; 123
    26dc:	91 e0       	ldi	r25, 0x01	; 1
    26de:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
	if(tmpAddr !=0)
    26e2:	11 23       	and	r17, r17
    26e4:	e1 f0       	breq	.+56     	; 0x271e <alarm+0x12e>
	{
		if(send_read_arch(1,tmpAddr,0) <0)printTOUT();		//запрашиваем часть архива со значениями RTC. Если получен таймаут...
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	61 2f       	mov	r22, r17
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	0e 94 45 0b 	call	0x168a	; 0x168a <send_read_arch>
    26f0:	87 ff       	sbrs	r24, 7
    26f2:	03 c0       	rjmp	.+6      	; 0x26fa <alarm+0x10a>
    26f4:	0e 94 2b 06 	call	0xc56	; 0xc56 <printTOUT>
    26f8:	12 c0       	rjmp	.+36     	; 0x271e <alarm+0x12e>
		else if(inSysBDZ[tmpAddr].data[0]==RD_ARCH_1)
    26fa:	29 e0       	ldi	r18, 0x09	; 9
    26fc:	12 9f       	mul	r17, r18
    26fe:	c0 01       	movw	r24, r0
    2700:	11 24       	eor	r1, r1
    2702:	fc 01       	movw	r30, r24
    2704:	e3 5c       	subi	r30, 0xC3	; 195
    2706:	fe 4f       	sbci	r31, 0xFE	; 254
    2708:	20 81       	ld	r18, Z
    270a:	24 30       	cpi	r18, 0x04	; 4
    270c:	41 f4       	brne	.+16     	; 0x271e <alarm+0x12e>
		{
			//строка дата/время
			printTimeStr(&inSysBDZ[tmpAddr].data[1],0,1);
    270e:	82 5c       	subi	r24, 0xC2	; 194
    2710:	9e 4f       	sbci	r25, 0xFE	; 254
    2712:	0e 94 c7 05 	call	0xb8e	; 0xb8e <printTimeStr.constprop.2>
			//строки вкл/откл МТЗ
			printMTZStr(minMTZ_ontime,MTZ_offtime);
    2716:	b7 01       	movw	r22, r14
    2718:	c6 01       	movw	r24, r12
    271a:	0e 94 5a 05 	call	0xab4	; 0xab4 <printMTZStr>
		}
	}
LOOP:
	switch(whileKey())	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    271e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    2722:	83 30       	cpi	r24, 0x03	; 3
    2724:	29 f0       	breq	.+10     	; 0x2730 <alarm+0x140>
    2726:	8f 3f       	cpi	r24, 0xFF	; 255
    2728:	59 f1       	breq	.+86     	; 0x2780 <alarm+0x190>
    272a:	82 30       	cpi	r24, 0x02	; 2
    272c:	c1 f7       	brne	.-16     	; 0x271e <alarm+0x12e>
    272e:	06 c0       	rjmp	.+12     	; 0x273c <alarm+0x14c>
	{
	case ESC:	//нажат ESC посылаем общий сброс
	{
		if(Ndev !=0) reset(0);
    2730:	00 23       	and	r16, r16
    2732:	31 f1       	breq	.+76     	; 0x2780 <alarm+0x190>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <reset>
    273a:	22 c0       	rjmp	.+68     	; 0x2780 <alarm+0x190>
		return;
	}
	break;
	case ENT:if(Ndev==0)return;	//нажат ENT подолжаем далее(если есть аварии)
    273c:	00 23       	and	r16, r16
    273e:	01 f1       	breq	.+64     	; 0x2780 <alarm+0x190>
	break;
	default:goto LOOP;	//любая другая клавиша
	break;
	}

	currBDZaddr = printSubMenu(AVARIYA,ALM);
    2740:	60 e0       	ldi	r22, 0x00	; 0
    2742:	8b ea       	ldi	r24, 0xAB	; 171
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	0e 94 44 10 	call	0x2088	; 0x2088 <printSubMenu>
    274a:	08 2f       	mov	r16, r24
	if(currBDZaddr<1)return;
    274c:	88 23       	and	r24, r24
    274e:	c1 f0       	breq	.+48     	; 0x2780 <alarm+0x190>
    2750:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		switch(viewArch(currBDZaddr,index))
    2752:	61 2f       	mov	r22, r17
    2754:	80 2f       	mov	r24, r16
    2756:	0e 94 3a 11 	call	0x2274	; 0x2274 <viewArch>
    275a:	85 30       	cpi	r24, 0x05	; 5
    275c:	49 f0       	breq	.+18     	; 0x2770 <alarm+0x180>
    275e:	18 f4       	brcc	.+6      	; 0x2766 <alarm+0x176>
    2760:	83 30       	cpi	r24, 0x03	; 3
    2762:	71 f0       	breq	.+28     	; 0x2780 <alarm+0x190>
    2764:	f6 cf       	rjmp	.-20     	; 0x2752 <alarm+0x162>
    2766:	86 30       	cpi	r24, 0x06	; 6
    2768:	39 f0       	breq	.+14     	; 0x2778 <alarm+0x188>
    276a:	8f 3f       	cpi	r24, 0xFF	; 255
    276c:	49 f0       	breq	.+18     	; 0x2780 <alarm+0x190>
    276e:	f1 cf       	rjmp	.-30     	; 0x2752 <alarm+0x162>
		{
		case UP:if(index>0)index--;
    2770:	11 23       	and	r17, r17
    2772:	79 f3       	breq	.-34     	; 0x2752 <alarm+0x162>
    2774:	11 50       	subi	r17, 0x01	; 1
    2776:	ed cf       	rjmp	.-38     	; 0x2752 <alarm+0x162>
		break;
		case DOWN:if(index<31)index++;
    2778:	1f 31       	cpi	r17, 0x1F	; 31
    277a:	58 f7       	brcc	.-42     	; 0x2752 <alarm+0x162>
    277c:	1f 5f       	subi	r17, 0xFF	; 255
    277e:	e9 cf       	rjmp	.-46     	; 0x2752 <alarm+0x162>
		break;
		default:continue;	//любая другая клавиша
		break;
		}
	}
}
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	ff 90       	pop	r15
    2794:	ef 90       	pop	r14
    2796:	df 90       	pop	r13
    2798:	cf 90       	pop	r12
    279a:	bf 90       	pop	r11
    279c:	af 90       	pop	r10
    279e:	9f 90       	pop	r9
    27a0:	8f 90       	pop	r8
    27a2:	08 95       	ret

000027a4 <naviMenu>:
		LCD_puts(lowerCase,19);	//прорисовали пункты меню:
	}
}

void naviMenu(struct menu *level)
{
    27a4:	7f 92       	push	r7
    27a6:	8f 92       	push	r8
    27a8:	9f 92       	push	r9
    27aa:	af 92       	push	r10
    27ac:	bf 92       	push	r11
    27ae:	cf 92       	push	r12
    27b0:	df 92       	push	r13
    27b2:	ef 92       	push	r14
    27b4:	ff 92       	push	r15
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	64 97       	sbiw	r28, 0x14	; 20
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	5c 01       	movw	r10, r24
	unsigned char cursorPos=1;			//указатель на текущий пункт
	unsigned char screenPos=0;			//указатель на текущий пункт
	unsigned char numPunkt,currPunkt=1;	//счетчик пунктов меню,

	for(numPunkt=0;(level+1+numPunkt)->name != NULL;numPunkt++);	//считаем кол-во пунктов в подменю (level -заголовок; level+1  -первый пункт)
    27d0:	e1 2c       	mov	r14, r1
    27d2:	f5 01       	movw	r30, r10
    27d4:	24 e0       	ldi	r18, 0x04	; 4
    27d6:	e2 9e       	mul	r14, r18
    27d8:	e0 0d       	add	r30, r0
    27da:	f1 1d       	adc	r31, r1
    27dc:	11 24       	eor	r1, r1
    27de:	84 81       	ldd	r24, Z+4	; 0x04
    27e0:	95 81       	ldd	r25, Z+5	; 0x05
    27e2:	89 2b       	or	r24, r25
    27e4:	11 f0       	breq	.+4      	; 0x27ea <naviMenu+0x46>
    27e6:	e3 94       	inc	r14
    27e8:	f4 cf       	rjmp	.-24     	; 0x27d2 <naviMenu+0x2e>
    27ea:	01 e0       	ldi	r16, 0x01	; 1
    27ec:	f1 2c       	mov	r15, r1
    27ee:	11 e0       	ldi	r17, 0x01	; 1

	while(1)
	{
		printMenuHeader(level->name);		//рисуем заголовок
    27f0:	f5 01       	movw	r30, r10
    27f2:	80 81       	ld	r24, Z
    27f4:	91 81       	ldd	r25, Z+1	; 0x01
    27f6:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>
    27fa:	c5 01       	movw	r24, r10
    27fc:	f4 e0       	ldi	r31, 0x04	; 4
    27fe:	ff 9e       	mul	r15, r31
    2800:	80 0d       	add	r24, r0
    2802:	91 1d       	adc	r25, r1
    2804:	11 24       	eor	r1, r1
    2806:	9c 01       	movw	r18, r24
    2808:	2c 5f       	subi	r18, 0xFC	; 252
    280a:	3f 4f       	sbci	r19, 0xFF	; 255
    280c:	69 01       	movw	r12, r18

static inline void printMenuPunkt(struct menu *level)
{
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
    280e:	91 2c       	mov	r9, r1
	{
		if((level+i)->name == NULL)return;	//если вместо имени заглушка(пункта не существует)
    2810:	f6 01       	movw	r30, r12
    2812:	20 81       	ld	r18, Z
    2814:	31 81       	ldd	r19, Z+1	; 0x01
    2816:	21 15       	cp	r18, r1
    2818:	31 05       	cpc	r19, r1
    281a:	29 f1       	breq	.+74     	; 0x2866 <naviMenu+0xc2>
    281c:	de 01       	movw	r26, r28
    281e:	11 96       	adiw	r26, 0x01	; 1
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	7a 2e       	mov	r7, r26
    2826:	8b 2e       	mov	r8, r27
    2828:	f9 01       	movw	r30, r18
    282a:	e8 0f       	add	r30, r24
    282c:	f9 1f       	adc	r31, r25
		for(unsigned char j=0;j<19;j++)		//преобразуем названия пунктов меню в нижний регистр
		{
			lowerCase[j]=(pgm_read_byte(&(level+i)->name[j]) >= 0xC0)?( pgm_read_byte(&(level+i)->name[j])+0x20 ):(pgm_read_byte(&(level+i)->name[j]));
    282e:	44 91       	lpm	r20, Z
    2830:	40 3c       	cpi	r20, 0xC0	; 192
    2832:	18 f0       	brcs	.+6      	; 0x283a <naviMenu+0x96>
    2834:	e4 91       	lpm	r30, Z
    2836:	e0 5e       	subi	r30, 0xE0	; 224
    2838:	01 c0       	rjmp	.+2      	; 0x283c <naviMenu+0x98>
    283a:	e4 91       	lpm	r30, Z
    283c:	ed 93       	st	X+, r30
    283e:	01 96       	adiw	r24, 0x01	; 1
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
	{
		if((level+i)->name == NULL)return;	//если вместо имени заглушка(пункта не существует)
		for(unsigned char j=0;j<19;j++)		//преобразуем названия пунктов меню в нижний регистр
    2840:	83 31       	cpi	r24, 0x13	; 19
    2842:	91 05       	cpc	r25, r1
    2844:	89 f7       	brne	.-30     	; 0x2828 <naviMenu+0x84>
		{
			lowerCase[j]=(pgm_read_byte(&(level+i)->name[j]) >= 0xC0)?( pgm_read_byte(&(level+i)->name[j])+0x20 ):(pgm_read_byte(&(level+i)->name[j]));
		}
		LCD_gotoXY(1,i+1);
    2846:	93 94       	inc	r9
    2848:	69 2d       	mov	r22, r9
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		LCD_puts(lowerCase,19);	//прорисовали пункты меню:
    2850:	63 e1       	ldi	r22, 0x13	; 19
    2852:	87 2d       	mov	r24, r7
    2854:	98 2d       	mov	r25, r8
    2856:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
    285a:	f4 e0       	ldi	r31, 0x04	; 4
    285c:	cf 0e       	add	r12, r31
    285e:	d1 1c       	adc	r13, r1

static inline void printMenuPunkt(struct menu *level)
{
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
    2860:	23 e0       	ldi	r18, 0x03	; 3
    2862:	92 12       	cpse	r9, r18
    2864:	d5 cf       	rjmp	.-86     	; 0x2810 <naviMenu+0x6c>

	while(1)
	{
		printMenuHeader(level->name);		//рисуем заголовок
		printMenuPunkt(level+screenPos+1);	//пункты меню
		LCD_gotoXY(0,cursorPos);			//и курсор (символ >)
    2866:	61 2f       	mov	r22, r17
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		LCD_putchar(0x84);
    286e:	84 e8       	ldi	r24, 0x84	; 132
    2870:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_putchar>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2874:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    2878:	85 30       	cpi	r24, 0x05	; 5
    287a:	61 f1       	breq	.+88     	; 0x28d4 <naviMenu+0x130>
    287c:	c8 f4       	brcc	.+50     	; 0x28b0 <naviMenu+0x10c>
    287e:	82 30       	cpi	r24, 0x02	; 2
    2880:	99 f1       	breq	.+102    	; 0x28e8 <naviMenu+0x144>
    2882:	83 30       	cpi	r24, 0x03	; 3
    2884:	09 f0       	breq	.+2      	; 0x2888 <naviMenu+0xe4>
    2886:	b4 cf       	rjmp	.-152    	; 0x27f0 <naviMenu+0x4c>
		break;
		case NOKEY:asm("jmp 0");	//автовыход
		break;
		}
	}
}
    2888:	64 96       	adiw	r28, 0x14	; 20
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	ff 90       	pop	r15
    289e:	ef 90       	pop	r14
    28a0:	df 90       	pop	r13
    28a2:	cf 90       	pop	r12
    28a4:	bf 90       	pop	r11
    28a6:	af 90       	pop	r10
    28a8:	9f 90       	pop	r9
    28aa:	8f 90       	pop	r8
    28ac:	7f 90       	pop	r7
    28ae:	08 95       	ret
		printMenuHeader(level->name);		//рисуем заголовок
		printMenuPunkt(level+screenPos+1);	//пункты меню
		LCD_gotoXY(0,cursorPos);			//и курсор (символ >)
		LCD_putchar(0x84);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    28b0:	86 30       	cpi	r24, 0x06	; 6
    28b2:	31 f0       	breq	.+12     	; 0x28c0 <naviMenu+0x11c>
    28b4:	8f 3f       	cpi	r24, 0xFF	; 255
    28b6:	09 f0       	breq	.+2      	; 0x28ba <naviMenu+0x116>
    28b8:	9b cf       	rjmp	.-202    	; 0x27f0 <naviMenu+0x4c>
		break;
		case ENT:(level+currPunkt)->pFunc();	//-запускаем функцию выбранного пункта	(она также может вызвать naviMenu -следующий подуровень)
		break;
		case ESC:return;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    28ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    28be:	98 cf       	rjmp	.-208    	; 0x27f0 <naviMenu+0x4c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt)
    28c0:	0e 15       	cp	r16, r14
    28c2:	08 f0       	brcs	.+2      	; 0x28c6 <naviMenu+0x122>
    28c4:	95 cf       	rjmp	.-214    	; 0x27f0 <naviMenu+0x4c>
			{
				++currPunkt;
    28c6:	0f 5f       	subi	r16, 0xFF	; 255
				(cursorPos < NUMOFMENUSTRING)?(cursorPos++):(screenPos++);
    28c8:	13 30       	cpi	r17, 0x03	; 3
    28ca:	10 f4       	brcc	.+4      	; 0x28d0 <naviMenu+0x12c>
    28cc:	1f 5f       	subi	r17, 0xFF	; 255
    28ce:	90 cf       	rjmp	.-224    	; 0x27f0 <naviMenu+0x4c>
    28d0:	f3 94       	inc	r15
    28d2:	8e cf       	rjmp	.-228    	; 0x27f0 <naviMenu+0x4c>
			}
		}
		break;
		case UP:
		{
			if(currPunkt > 1 )
    28d4:	02 30       	cpi	r16, 0x02	; 2
    28d6:	08 f4       	brcc	.+2      	; 0x28da <naviMenu+0x136>
    28d8:	8b cf       	rjmp	.-234    	; 0x27f0 <naviMenu+0x4c>
			{
				--currPunkt;
    28da:	01 50       	subi	r16, 0x01	; 1
				(cursorPos > 1)?(cursorPos--):(screenPos--);
    28dc:	11 30       	cpi	r17, 0x01	; 1
    28de:	11 f0       	breq	.+4      	; 0x28e4 <naviMenu+0x140>
    28e0:	11 50       	subi	r17, 0x01	; 1
    28e2:	86 cf       	rjmp	.-244    	; 0x27f0 <naviMenu+0x4c>
    28e4:	fa 94       	dec	r15
    28e6:	84 cf       	rjmp	.-248    	; 0x27f0 <naviMenu+0x4c>
			}
		}
		break;
		case ENT:(level+currPunkt)->pFunc();	//-запускаем функцию выбранного пункта	(она также может вызвать naviMenu -следующий подуровень)
    28e8:	f5 01       	movw	r30, r10
    28ea:	34 e0       	ldi	r19, 0x04	; 4
    28ec:	03 9f       	mul	r16, r19
    28ee:	e0 0d       	add	r30, r0
    28f0:	f1 1d       	adc	r31, r1
    28f2:	11 24       	eor	r1, r1
    28f4:	02 80       	ldd	r0, Z+2	; 0x02
    28f6:	f3 81       	ldd	r31, Z+3	; 0x03
    28f8:	e0 2d       	mov	r30, r0
    28fa:	09 95       	icall
		break;
    28fc:	79 cf       	rjmp	.-270    	; 0x27f0 <naviMenu+0x4c>

000028fe <svyaz>:
{
	change_param(0);
}

static void svyaz(void)
{
    28fe:	cf 92       	push	r12
    2900:	df 92       	push	r13
    2902:	ef 92       	push	r14
    2904:	ff 92       	push	r15
    2906:	cf 93       	push	r28
	naviMenu(LVL_svyaz);
    2908:	8c e7       	ldi	r24, 0x7C	; 124
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <naviMenu>
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    2910:	82 e0       	ldi	r24, 0x02	; 2
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <eeprom_read_dword>
    2918:	6b 01       	movw	r12, r22
    291a:	7c 01       	movw	r14, r24
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    2924:	c8 2f       	mov	r28, r24
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    292e:	a7 01       	movw	r20, r14
    2930:	96 01       	movw	r18, r12
    2932:	6c 2f       	mov	r22, r28
}
    2934:	cf 91       	pop	r28
    2936:	ff 90       	pop	r15
    2938:	ef 90       	pop	r14
    293a:	df 90       	pop	r13
    293c:	cf 90       	pop	r12
}

static void svyaz(void)
{
	naviMenu(LVL_svyaz);
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    293e:	0c 94 45 18 	jmp	0x308a	; 0x308a <MODB_init>

00002942 <progsys>:
	return ;
}

static void progsys(void)
{
	naviMenu(LVL_prog);
    2942:	8c ea       	ldi	r24, 0xAC	; 172
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <naviMenu>

0000294a <nastroyka>:
		}
	}
}

static void nastroyka(void)
{
    294a:	6f 92       	push	r6
    294c:	7f 92       	push	r7
    294e:	8f 92       	push	r8
    2950:	9f 92       	push	r9
    2952:	af 92       	push	r10
    2954:	bf 92       	push	r11
    2956:	cf 92       	push	r12
    2958:	df 92       	push	r13
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	00 d0       	rcall	.+0      	; 0x2968 <nastroyka+0x1e>
    2968:	00 d0       	rcall	.+0      	; 0x296a <nastroyka+0x20>
    296a:	1f 92       	push	r1
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62

static unsigned char passwd(void)
{
	signed int currPasswd=0,step=1;
	char str[5];
	unsigned char cursorPos=3;
    2970:	33 e0       	ldi	r19, 0x03	; 3
    2972:	73 2e       	mov	r7, r19
	LCD_gotoXY(0,2);LCD_puts_P(NEDOSTUPNO,20);
}

static unsigned char passwd(void)
{
	signed int currPasswd=0,step=1;
    2974:	ee 24       	eor	r14, r14
    2976:	e3 94       	inc	r14
    2978:	f1 2c       	mov	r15, r1
    297a:	00 e0       	ldi	r16, 0x00	; 0
    297c:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		printMenuHeader(PAROL);	//прорисовываем заголовок
		LCD_gotoXY(0,2);
		sprintf(str,"%04d",currPasswd);
    297e:	5a e1       	ldi	r21, 0x1A	; 26
    2980:	c5 2e       	mov	r12, r21
    2982:	51 e0       	ldi	r21, 0x01	; 1
    2984:	d5 2e       	mov	r13, r21
    2986:	ce 01       	movw	r24, r28
    2988:	01 96       	adiw	r24, 0x01	; 1
    298a:	5c 01       	movw	r10, r24
			(cursorPos>0)?(cursorPos--):(cursorPos=3);
		}
		break;
		case RIGHT:
		{
			(step > 1)?(step /= 10):(step=1000);
    298c:	6a e0       	ldi	r22, 0x0A	; 10
    298e:	86 2e       	mov	r8, r22
    2990:	91 2c       	mov	r9, r1
			currPasswd=((currPasswd + step)>=9999)?(0):(currPasswd+step);
		}
		break;
		case LEFT:
		{
			(step < 1000)?(step *= 10):(step=1);
    2992:	7a e0       	ldi	r23, 0x0A	; 10
    2994:	67 2e       	mov	r6, r23
	char str[5];
	unsigned char cursorPos=3;

	while(1)
	{
		printMenuHeader(PAROL);	//прорисовываем заголовок
    2996:	8e e6       	ldi	r24, 0x6E	; 110
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	0e 94 34 06 	call	0xc68	; 0xc68 <printMenuHeader>
		LCD_gotoXY(0,2);
    299e:	62 e0       	ldi	r22, 0x02	; 2
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		sprintf(str,"%04d",currPasswd);
    29a6:	1f 93       	push	r17
    29a8:	0f 93       	push	r16
    29aa:	df 92       	push	r13
    29ac:	cf 92       	push	r12
    29ae:	bf 92       	push	r11
    29b0:	af 92       	push	r10
    29b2:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <sprintf>
		LCD_puts(str,4);
    29b6:	64 e0       	ldi	r22, 0x04	; 4
    29b8:	c5 01       	movw	r24, r10
    29ba:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
		LCD_gotoXY(cursorPos,2);
    29be:	62 e0       	ldi	r22, 0x02	; 2
    29c0:	87 2d       	mov	r24, r7
    29c2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		LCD_cursorBlink();
    29c6:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_cursorBlink>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    29ca:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <whileKey>
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	85 30       	cpi	r24, 0x05	; 5
    29dc:	c1 f0       	breq	.+48     	; 0x2a0e <nastroyka+0xc4>
    29de:	40 f4       	brcc	.+16     	; 0x29f0 <nastroyka+0xa6>
    29e0:	83 30       	cpi	r24, 0x03	; 3
    29e2:	09 f4       	brne	.+2      	; 0x29e6 <nastroyka+0x9c>
    29e4:	57 c0       	rjmp	.+174    	; 0x2a94 <nastroyka+0x14a>
    29e6:	e8 f4       	brcc	.+58     	; 0x2a22 <nastroyka+0xd8>
    29e8:	82 30       	cpi	r24, 0x02	; 2
    29ea:	09 f4       	brne	.+2      	; 0x29ee <nastroyka+0xa4>
    29ec:	45 c0       	rjmp	.+138    	; 0x2a78 <nastroyka+0x12e>
    29ee:	d3 cf       	rjmp	.-90     	; 0x2996 <nastroyka+0x4c>
    29f0:	87 30       	cpi	r24, 0x07	; 7
    29f2:	69 f1       	breq	.+90     	; 0x2a4e <nastroyka+0x104>
    29f4:	28 f0       	brcs	.+10     	; 0x2a00 <nastroyka+0xb6>
    29f6:	8f 3f       	cpi	r24, 0xFF	; 255
    29f8:	71 f6       	brne	.-100    	; 0x2996 <nastroyka+0x4c>
			else return 0;
		}
		break;
		case ESC:{LCD_cursorOff();return 0;}	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    29fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    29fe:	cb cf       	rjmp	.-106    	; 0x2996 <nastroyka+0x4c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			currPasswd=((currPasswd - step)>=0)?(currPasswd-step):(9999);
    2a00:	0e 19       	sub	r16, r14
    2a02:	1f 09       	sbc	r17, r15
    2a04:	17 ff       	sbrs	r17, 7
    2a06:	c7 cf       	rjmp	.-114    	; 0x2996 <nastroyka+0x4c>
    2a08:	0f e0       	ldi	r16, 0x0F	; 15
    2a0a:	17 e2       	ldi	r17, 0x27	; 39
    2a0c:	c4 cf       	rjmp	.-120    	; 0x2996 <nastroyka+0x4c>
		}
		break;
		case UP:
		{
			currPasswd=((currPasswd + step)>=9999)?(0):(currPasswd+step);
    2a0e:	0e 0d       	add	r16, r14
    2a10:	1f 1d       	adc	r17, r15
    2a12:	0f 30       	cpi	r16, 0x0F	; 15
    2a14:	97 e2       	ldi	r25, 0x27	; 39
    2a16:	19 07       	cpc	r17, r25
    2a18:	0c f4       	brge	.+2      	; 0x2a1c <nastroyka+0xd2>
    2a1a:	bd cf       	rjmp	.-134    	; 0x2996 <nastroyka+0x4c>
    2a1c:	00 e0       	ldi	r16, 0x00	; 0
    2a1e:	10 e0       	ldi	r17, 0x00	; 0
    2a20:	ba cf       	rjmp	.-140    	; 0x2996 <nastroyka+0x4c>
		}
		break;
		case LEFT:
		{
			(step < 1000)?(step *= 10):(step=1);
    2a22:	88 ee       	ldi	r24, 0xE8	; 232
    2a24:	e8 16       	cp	r14, r24
    2a26:	83 e0       	ldi	r24, 0x03	; 3
    2a28:	f8 06       	cpc	r15, r24
    2a2a:	3c f4       	brge	.+14     	; 0x2a3a <nastroyka+0xf0>
    2a2c:	c7 01       	movw	r24, r14
    2a2e:	68 9e       	mul	r6, r24
    2a30:	70 01       	movw	r14, r0
    2a32:	69 9e       	mul	r6, r25
    2a34:	f0 0c       	add	r15, r0
    2a36:	11 24       	eor	r1, r1
    2a38:	03 c0       	rjmp	.+6      	; 0x2a40 <nastroyka+0xf6>
    2a3a:	ee 24       	eor	r14, r14
    2a3c:	e3 94       	inc	r14
    2a3e:	f1 2c       	mov	r15, r1
			(cursorPos>0)?(cursorPos--):(cursorPos=3);
    2a40:	71 10       	cpse	r7, r1
    2a42:	03 c0       	rjmp	.+6      	; 0x2a4a <nastroyka+0x100>
    2a44:	23 e0       	ldi	r18, 0x03	; 3
    2a46:	72 2e       	mov	r7, r18
    2a48:	a6 cf       	rjmp	.-180    	; 0x2996 <nastroyka+0x4c>
    2a4a:	7a 94       	dec	r7
    2a4c:	a4 cf       	rjmp	.-184    	; 0x2996 <nastroyka+0x4c>
		}
		break;
		case RIGHT:
		{
			(step > 1)?(step /= 10):(step=1000);
    2a4e:	92 e0       	ldi	r25, 0x02	; 2
    2a50:	e9 16       	cp	r14, r25
    2a52:	f1 04       	cpc	r15, r1
    2a54:	34 f0       	brlt	.+12     	; 0x2a62 <nastroyka+0x118>
    2a56:	c7 01       	movw	r24, r14
    2a58:	b4 01       	movw	r22, r8
    2a5a:	0e 94 12 1a 	call	0x3424	; 0x3424 <__divmodhi4>
    2a5e:	7b 01       	movw	r14, r22
    2a60:	04 c0       	rjmp	.+8      	; 0x2a6a <nastroyka+0x120>
    2a62:	88 ee       	ldi	r24, 0xE8	; 232
    2a64:	e8 2e       	mov	r14, r24
    2a66:	83 e0       	ldi	r24, 0x03	; 3
    2a68:	f8 2e       	mov	r15, r24
			(cursorPos<3)?(cursorPos++):(cursorPos=0);
    2a6a:	83 e0       	ldi	r24, 0x03	; 3
    2a6c:	78 12       	cpse	r7, r24
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <nastroyka+0x12a>
    2a70:	71 2c       	mov	r7, r1
    2a72:	91 cf       	rjmp	.-222    	; 0x2996 <nastroyka+0x4c>
    2a74:	73 94       	inc	r7
    2a76:	8f cf       	rjmp	.-226    	; 0x2996 <nastroyka+0x4c>
		}
		break;
		case ENT:
		{
			LCD_cursorOff();
    2a78:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <LCD_visible>
			if(eeprom_read_word(&password) == currPasswd)return 1;	//
    2a7c:	87 e0       	ldi	r24, 0x07	; 7
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <eeprom_read_word>
    2a84:	08 17       	cp	r16, r24
    2a86:	19 07       	cpc	r17, r25
    2a88:	39 f4       	brne	.+14     	; 0x2a98 <nastroyka+0x14e>
	}
}

static void nastroyka(void)
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
    2a8a:	80 e9       	ldi	r24, 0x90	; 144
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <naviMenu>
}
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <nastroyka+0x14e>
			LCD_cursorOff();
			if(eeprom_read_word(&password) == currPasswd)return 1;	//
			else return 0;
		}
		break;
		case ESC:{LCD_cursorOff();return 0;}	//выход по ESC
    2a94:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <LCD_visible>
}

static void nastroyka(void)
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	1f 91       	pop	r17
    2aa8:	0f 91       	pop	r16
    2aaa:	ff 90       	pop	r15
    2aac:	ef 90       	pop	r14
    2aae:	df 90       	pop	r13
    2ab0:	cf 90       	pop	r12
    2ab2:	bf 90       	pop	r11
    2ab4:	af 90       	pop	r10
    2ab6:	9f 90       	pop	r9
    2ab8:	8f 90       	pop	r8
    2aba:	7f 90       	pop	r7
    2abc:	6f 90       	pop	r6
    2abe:	08 95       	ret

00002ac0 <main>:
#include "menu.c"



int main(void)
{
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	64 97       	sbiw	r28, 0x14	; 20
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
	bki_init();
    2ad4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <bki_init>
		//PGM_P title=RABOTA;
		PGM_P title;

		if(!(chkBit(sys_state,ALM))&&!(chkBit(sys_state,FLT))) title=RABOTA;
		//заголовок
		(ind_state==0)?(ind_state++):(ind_state=0);
    2ad8:	33 24       	eor	r3, r3
    2ada:	33 94       	inc	r3
		if(chkBit(sys_state,ERR))                  title=NET_GOTOVNOSTI;
		LCD_gotoXY(0,0);LCD_puts_P(title,20);

		//читаем время
		rtc_get(&rtc);
		sprintf(buffer,"%02u.%02u.%02u %02u:%02u:%02u",rtc.day,rtc.month,rtc.year,rtc.hours,rtc.minutes,rtc.seconds);
    2adc:	ec ef       	ldi	r30, 0xFC	; 252
    2ade:	6e 2e       	mov	r6, r30
    2ae0:	e0 e0       	ldi	r30, 0x00	; 0
    2ae2:	7e 2e       	mov	r7, r30
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	01 96       	adiw	r24, 0x01	; 1
    2ae8:	6c 01       	movw	r12, r24
		{
			LCD_puts(buffer,20);
		}


		sprintf(buffer, "%u", sys_state);
    2aea:	ff e1       	ldi	r31, 0x1F	; 31
    2aec:	af 2e       	mov	r10, r31
    2aee:	f1 e0       	ldi	r31, 0x01	; 1
    2af0:	bf 2e       	mov	r11, r31
		/*sprintf(buffer, "%u", inSysBDZ[13].data[0]);
		LCD_gotoXY(0,2);
		LCD_puts(buffer,20);*/

		//новое в версии
		if(TWI_ERR)ERROR=RTC;
    2af2:	a2 e0       	ldi	r26, 0x02	; 2
    2af4:	4a 2e       	mov	r4, r26
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
		{
			if(readID(i)==i)	//если блок есть в списке
			{
				modbusRegisters[BDZ_INSYS]++;																//счетчик инлайн блоков
				if(chkBit(inSysBDZ[i].flags,CONF)) setBit(sys_state,CONF);
    2af6:	b9 e0       	ldi	r27, 0x09	; 9
    2af8:	5b 2e       	mov	r5, r27

		//здесь можно пингануть.После пинга пройдет "пауза со сканированием"-за это время должны прийти все отклики
		if(pingTime ==0)
		{
			ping();
			pingTime=PINGTIME;
    2afa:	18 e8       	ldi	r17, 0x88	; 136
    2afc:	81 2e       	mov	r8, r17
    2afe:	13 e1       	ldi	r17, 0x13	; 19
    2b00:	91 2e       	mov	r9, r17
	{
		char buffer[20];
		//PGM_P title=RABOTA;
		PGM_P title;

		if(!(chkBit(sys_state,ALM))&&!(chkBit(sys_state,FLT))) title=RABOTA;
    2b02:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2b06:	98 2f       	mov	r25, r24
    2b08:	92 70       	andi	r25, 0x02	; 2
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	21 70       	andi	r18, 0x01	; 1
    2b0e:	80 fd       	sbrc	r24, 0
    2b10:	06 c0       	rjmp	.+12     	; 0x2b1e <main+0x5e>
    2b12:	91 11       	cpse	r25, r1
    2b14:	04 c0       	rjmp	.+8      	; 0x2b1e <main+0x5e>
    2b16:	72 eb       	ldi	r23, 0xB2	; 178
    2b18:	e7 2e       	mov	r14, r23
    2b1a:	71 e0       	ldi	r23, 0x01	; 1
    2b1c:	f7 2e       	mov	r15, r23
		//заголовок
		(ind_state==0)?(ind_state++):(ind_state=0);
    2b1e:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <ind_state>
    2b22:	31 11       	cpse	r19, r1
    2b24:	03 c0       	rjmp	.+6      	; 0x2b2c <main+0x6c>
    2b26:	30 92 28 01 	sts	0x0128, r3	; 0x800128 <ind_state>
    2b2a:	08 c0       	rjmp	.+16     	; 0x2b3c <main+0x7c>
    2b2c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <ind_state>
		if(chkBit(sys_state,ALM) && ind_state==0)  title=AVARIYA;
    2b30:	22 23       	and	r18, r18
    2b32:	21 f0       	breq	.+8      	; 0x2b3c <main+0x7c>
    2b34:	6b ea       	ldi	r22, 0xAB	; 171
    2b36:	e6 2e       	mov	r14, r22
    2b38:	61 e0       	ldi	r22, 0x01	; 1
    2b3a:	f6 2e       	mov	r15, r22
		if(chkBit(sys_state,FLT) && ind_state==1)  title=NEISPRAVNOST;
    2b3c:	99 23       	and	r25, r25
    2b3e:	41 f0       	breq	.+16     	; 0x2b50 <main+0x90>
    2b40:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <ind_state>
    2b44:	91 30       	cpi	r25, 0x01	; 1
    2b46:	21 f4       	brne	.+8      	; 0x2b50 <main+0x90>
    2b48:	5d e9       	ldi	r21, 0x9D	; 157
    2b4a:	e5 2e       	mov	r14, r21
    2b4c:	51 e0       	ldi	r21, 0x01	; 1
    2b4e:	f5 2e       	mov	r15, r21
		if(chkBit(sys_state,ERR))                  title=NET_GOTOVNOSTI;
    2b50:	83 ff       	sbrs	r24, 3
    2b52:	04 c0       	rjmp	.+8      	; 0x2b5c <main+0x9c>
    2b54:	4c ec       	ldi	r20, 0xCC	; 204
    2b56:	e4 2e       	mov	r14, r20
    2b58:	40 e0       	ldi	r20, 0x00	; 0
    2b5a:	f4 2e       	mov	r15, r20
		LCD_gotoXY(0,0);LCD_puts_P(title,20);
    2b5c:	60 e0       	ldi	r22, 0x00	; 0
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
    2b64:	64 e1       	ldi	r22, 0x14	; 20
    2b66:	c7 01       	movw	r24, r14
    2b68:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>

		//читаем время
		rtc_get(&rtc);
    2b6c:	8c ec       	ldi	r24, 0xCC	; 204
    2b6e:	94 e0       	ldi	r25, 0x04	; 4
    2b70:	0e 94 8b 02 	call	0x516	; 0x516 <rtc_get>
		sprintf(buffer,"%02u.%02u.%02u %02u:%02u:%02u",rtc.day,rtc.month,rtc.year,rtc.hours,rtc.minutes,rtc.seconds);
    2b74:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <rtc+0x5>
    2b78:	1f 92       	push	r1
    2b7a:	8f 93       	push	r24
    2b7c:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <rtc+0x4>
    2b80:	1f 92       	push	r1
    2b82:	8f 93       	push	r24
    2b84:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <rtc+0x3>
    2b88:	1f 92       	push	r1
    2b8a:	8f 93       	push	r24
    2b8c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <rtc>
    2b90:	1f 92       	push	r1
    2b92:	8f 93       	push	r24
    2b94:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <rtc+0x1>
    2b98:	1f 92       	push	r1
    2b9a:	8f 93       	push	r24
    2b9c:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <rtc+0x2>
    2ba0:	1f 92       	push	r1
    2ba2:	8f 93       	push	r24
    2ba4:	7f 92       	push	r7
    2ba6:	6f 92       	push	r6
    2ba8:	df 92       	push	r13
    2baa:	cf 92       	push	r12
    2bac:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <sprintf>
		//обновляем модбас
		modbusRegisters[TIME_YYMM]=(unsigned int)rtc.year<<8 | rtc.month;
    2bb0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <rtc>
    2bb4:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <rtc+0x1>
    2bb8:	98 27       	eor	r25, r24
    2bba:	89 27       	eor	r24, r25
    2bbc:	98 27       	eor	r25, r24
    2bbe:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <modbusRegisters+0xb>
    2bc2:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <modbusRegisters+0xa>
		modbusRegisters[TIME_DDHH]=(unsigned int)rtc.day<<8 | rtc.hours;
    2bc6:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <rtc+0x2>
    2bca:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <rtc+0x3>
    2bce:	98 27       	eor	r25, r24
    2bd0:	89 27       	eor	r24, r25
    2bd2:	98 27       	eor	r25, r24
    2bd4:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <modbusRegisters+0xd>
    2bd8:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <modbusRegisters+0xc>
		modbusRegisters[TIME_MMSS]=(unsigned int)rtc.minutes<<8 | rtc.seconds;
    2bdc:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <rtc+0x4>
    2be0:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <rtc+0x5>
    2be4:	98 27       	eor	r25, r24
    2be6:	89 27       	eor	r24, r25
    2be8:	98 27       	eor	r25, r24
    2bea:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <modbusRegisters+0xf>
    2bee:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <modbusRegisters+0xe>

		//экран:код ошибки или строка RTC
		LCD_gotoXY(0,3);
    2bf2:	63 e0       	ldi	r22, 0x03	; 3
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		if(ERROR)
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ERROR>
    2c08:	88 23       	and	r24, r24
    2c0a:	a1 f0       	breq	.+40     	; 0x2c34 <main+0x174>
		{
			setBit(sys_state,ERR);
    2c0c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2c10:	88 60       	ori	r24, 0x08	; 8
    2c12:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <sys_state>
			LCD_puts_P(OSHIBKA,20);
    2c16:	64 e1       	ldi	r22, 0x14	; 20
    2c18:	85 ec       	ldi	r24, 0xC5	; 197
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 09 06 	call	0xc12	; 0xc12 <LCD_puts_P>
			LCD_gotoXY(7,3);
    2c20:	63 e0       	ldi	r22, 0x03	; 3
    2c22:	87 e0       	ldi	r24, 0x07	; 7
    2c24:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
			LCD_putchar(ERROR+'0');
    2c28:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ERROR>
    2c2c:	80 5d       	subi	r24, 0xD0	; 208
    2c2e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_putchar>
    2c32:	04 c0       	rjmp	.+8      	; 0x2c3c <main+0x17c>
		}
		else
		{
			LCD_puts(buffer,20);
    2c34:	64 e1       	ldi	r22, 0x14	; 20
    2c36:	c6 01       	movw	r24, r12
    2c38:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
		}


		sprintf(buffer, "%u", sys_state);
    2c3c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2c40:	1f 92       	push	r1
    2c42:	8f 93       	push	r24
    2c44:	bf 92       	push	r11
    2c46:	af 92       	push	r10
    2c48:	df 92       	push	r13
    2c4a:	cf 92       	push	r12
    2c4c:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <sprintf>
		LCD_gotoXY(0,1);
    2c50:	61 e0       	ldi	r22, 0x01	; 1
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
		LCD_puts(buffer,20);
    2c58:	64 e1       	ldi	r22, 0x14	; 20
    2c5a:	c6 01       	movw	r24, r12
    2c5c:	0e 94 84 04 	call	0x908	; 0x908 <LCD_puts>
		/*sprintf(buffer, "%u", inSysBDZ[13].data[0]);
		LCD_gotoXY(0,2);
		LCD_puts(buffer,20);*/

		//новое в версии
		if(TWI_ERR)ERROR=RTC;
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <TWI_ERR>
    2c70:	81 11       	cpse	r24, r1
    2c72:	40 92 27 01 	sts	0x0127, r4	; 0x800127 <ERROR>
		if(MODB_ERR)ERROR=MODB;
    2c76:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <MODB_ERR>
    2c7a:	88 23       	and	r24, r24
    2c7c:	19 f0       	breq	.+6      	; 0x2c84 <main+0x1c4>
    2c7e:	85 e0       	ldi	r24, 0x05	; 5
    2c80:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>
		if(CAN_ERR)ERROR=CAN;
    2c84:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <CAN_ERR>
    2c88:	88 23       	and	r24, r24
    2c8a:	19 f0       	breq	.+6      	; 0x2c92 <main+0x1d2>
    2c8c:	83 e0       	ldi	r24, 0x03	; 3
    2c8e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>



		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
    2c92:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <sys_state>
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
    2c96:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <modbusRegisters+0x9>
    2c9a:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <modbusRegisters+0x8>
    2c9e:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <modbusRegisters+0x7>
    2ca2:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <modbusRegisters+0x6>
    2ca6:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <modbusRegisters+0x5>
    2caa:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <modbusRegisters+0x4>
    2cae:	01 e0       	ldi	r16, 0x01	; 1
    2cb0:	10 e0       	ldi	r17, 0x00	; 0
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
		{
			if(readID(i)==i)	//если блок есть в списке
    2cb2:	c8 01       	movw	r24, r16
    2cb4:	87 5f       	subi	r24, 0xF7	; 247
    2cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb8:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    2cbc:	80 13       	cpse	r24, r16
    2cbe:	53 c0       	rjmp	.+166    	; 0x2d66 <main+0x2a6>
			{
				modbusRegisters[BDZ_INSYS]++;																//счетчик инлайн блоков
    2cc0:	20 91 c0 04 	lds	r18, 0x04C0	; 0x8004c0 <modbusRegisters+0x4>
    2cc4:	30 91 c1 04 	lds	r19, 0x04C1	; 0x8004c1 <modbusRegisters+0x5>
    2cc8:	2f 5f       	subi	r18, 0xFF	; 255
    2cca:	3f 4f       	sbci	r19, 0xFF	; 255
    2ccc:	30 93 c1 04 	sts	0x04C1, r19	; 0x8004c1 <modbusRegisters+0x5>
    2cd0:	20 93 c0 04 	sts	0x04C0, r18	; 0x8004c0 <modbusRegisters+0x4>
				if(chkBit(inSysBDZ[i].flags,CONF)) setBit(sys_state,CONF);
    2cd4:	50 9e       	mul	r5, r16
    2cd6:	f0 01       	movw	r30, r0
    2cd8:	51 9e       	mul	r5, r17
    2cda:	f0 0d       	add	r31, r0
    2cdc:	11 24       	eor	r1, r1
    2cde:	e3 5c       	subi	r30, 0xC3	; 195
    2ce0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce2:	90 85       	ldd	r25, Z+8	; 0x08
    2ce4:	95 ff       	sbrs	r25, 5
    2ce6:	05 c0       	rjmp	.+10     	; 0x2cf2 <main+0x232>
    2ce8:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <sys_state>
    2cec:	90 62       	ori	r25, 0x20	; 32
    2cee:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <sys_state>
				if(chkBit(inSysBDZ[i].flags,ALM))
    2cf2:	50 9e       	mul	r5, r16
    2cf4:	f0 01       	movw	r30, r0
    2cf6:	51 9e       	mul	r5, r17
    2cf8:	f0 0d       	add	r31, r0
    2cfa:	11 24       	eor	r1, r1
    2cfc:	e3 5c       	subi	r30, 0xC3	; 195
    2cfe:	fe 4f       	sbci	r31, 0xFE	; 254
    2d00:	90 85       	ldd	r25, Z+8	; 0x08
    2d02:	90 ff       	sbrs	r25, 0
    2d04:	18 c0       	rjmp	.+48     	; 0x2d36 <main+0x276>
				{
					modbusRegisters[BDZ_ALARM]++;
    2d06:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <modbusRegisters+0x8>
    2d0a:	30 91 c5 04 	lds	r19, 0x04C5	; 0x8004c5 <modbusRegisters+0x9>
    2d0e:	2f 5f       	subi	r18, 0xFF	; 255
    2d10:	3f 4f       	sbci	r19, 0xFF	; 255
    2d12:	30 93 c5 04 	sts	0x04C5, r19	; 0x8004c5 <modbusRegisters+0x9>
    2d16:	20 93 c4 04 	sts	0x04C4, r18	; 0x8004c4 <modbusRegisters+0x8>
					setBit(sys_state,ALM);
    2d1a:	20 90 29 01 	lds	r2, 0x0129	; 0x800129 <sys_state>
    2d1e:	92 2d       	mov	r25, r2
    2d20:	91 60       	ori	r25, 0x01	; 1
    2d22:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <sys_state>
					if (scanID(i)) setBit(sys_state,NEW);
    2d26:	0e 94 a6 0c 	call	0x194c	; 0x194c <scanID>
    2d2a:	88 23       	and	r24, r24
    2d2c:	21 f0       	breq	.+8      	; 0x2d36 <main+0x276>
    2d2e:	82 2d       	mov	r24, r2
    2d30:	81 64       	ori	r24, 0x41	; 65
    2d32:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <sys_state>
				}	//счетчик аварийных блоков и установка флага общей аварии
				if(chkBit(inSysBDZ[i].flags,FLT)) {modbusRegisters[BDZ_FAULT]++; setBit(sys_state,FLT);}	//счетчик неисправный блоков и установка флага общей неисправности
    2d36:	50 9e       	mul	r5, r16
    2d38:	f0 01       	movw	r30, r0
    2d3a:	51 9e       	mul	r5, r17
    2d3c:	f0 0d       	add	r31, r0
    2d3e:	11 24       	eor	r1, r1
    2d40:	e3 5c       	subi	r30, 0xC3	; 195
    2d42:	fe 4f       	sbci	r31, 0xFE	; 254
    2d44:	80 85       	ldd	r24, Z+8	; 0x08
    2d46:	81 ff       	sbrs	r24, 1
    2d48:	0e c0       	rjmp	.+28     	; 0x2d66 <main+0x2a6>
    2d4a:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <modbusRegisters+0x6>
    2d4e:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <modbusRegisters+0x7>
    2d52:	01 96       	adiw	r24, 0x01	; 1
    2d54:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <modbusRegisters+0x7>
    2d58:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <modbusRegisters+0x6>
    2d5c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2d60:	82 60       	ori	r24, 0x02	; 2
    2d62:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <sys_state>
				//if(new==i) setBit(sys_state,NEW);
				//sys_state |= inSysBDZ[i].flags & 0x03;				//два мл.бита-это флаги аварии и неисправности
			}

			(chkBit(sys_state,CONF))?(PORTA|=1<<OUT2):(PORTA &= ~(1<<OUT2));
    2d66:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2d6a:	85 ff       	sbrs	r24, 5
    2d6c:	02 c0       	rjmp	.+4      	; 0x2d72 <main+0x2b2>
    2d6e:	da 9a       	sbi	0x1b, 2	; 27
    2d70:	01 c0       	rjmp	.+2      	; 0x2d74 <main+0x2b4>
    2d72:	da 98       	cbi	0x1b, 2	; 27
			(chkBit(sys_state,ALM))?(PORTA|=1<<OUT1):(PORTA &= ~(1<<OUT1));	//обнаружили аварию ОТКЛЮЧАЕМ
    2d74:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2d78:	80 ff       	sbrs	r24, 0
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <main+0x2c0>
    2d7c:	db 9a       	sbi	0x1b, 3	; 27
    2d7e:	01 c0       	rjmp	.+2      	; 0x2d82 <main+0x2c2>
    2d80:	db 98       	cbi	0x1b, 3	; 27
			(chkBit(sys_state,NEW))?(PORTA|=1<<OUT3):(PORTA &= ~(1<<OUT3));
    2d82:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2d86:	86 ff       	sbrs	r24, 6
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <main+0x2ce>
    2d8a:	d9 9a       	sbi	0x1b, 1	; 27
    2d8c:	01 c0       	rjmp	.+2      	; 0x2d90 <main+0x2d0>
    2d8e:	d9 98       	cbi	0x1b, 1	; 27
			(chkBit(sys_state,FLT) || ERROR)?(clrBit(PORTA,OUT4)):(setBit(PORTA,OUT4));
    2d90:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2d94:	81 fd       	sbrc	r24, 1
    2d96:	04 c0       	rjmp	.+8      	; 0x2da0 <main+0x2e0>
    2d98:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ERROR>
    2d9c:	88 23       	and	r24, r24
    2d9e:	11 f0       	breq	.+4      	; 0x2da4 <main+0x2e4>
    2da0:	d8 98       	cbi	0x1b, 0	; 27
    2da2:	01 c0       	rjmp	.+2      	; 0x2da6 <main+0x2e6>
    2da4:	d8 9a       	sbi	0x1b, 0	; 27
    2da6:	0f 5f       	subi	r16, 0xFF	; 255
    2da8:	1f 4f       	sbci	r17, 0xFF	; 255


		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
    2daa:	03 36       	cpi	r16, 0x63	; 99
    2dac:	11 05       	cpc	r17, r1
    2dae:	09 f0       	breq	.+2      	; 0x2db2 <main+0x2f2>
    2db0:	80 cf       	rjmp	.-256    	; 0x2cb2 <main+0x1f2>
			(chkBit(sys_state,ALM))?(PORTA|=1<<OUT1):(PORTA &= ~(1<<OUT1));	//обнаружили аварию ОТКЛЮЧАЕМ
			(chkBit(sys_state,NEW))?(PORTA|=1<<OUT3):(PORTA &= ~(1<<OUT3));
			(chkBit(sys_state,FLT) || ERROR)?(clrBit(PORTA,OUT4)):(setBit(PORTA,OUT4));
		}
		//сохраняем ошибку, статус системы и состояния выходов
		modbusRegisters[BKI_STATE]=(unsigned int)ERROR<<8 | sys_state;
    2db2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ERROR>
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	98 2f       	mov	r25, r24
    2dba:	88 27       	eor	r24, r24
    2dbc:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <sys_state>
    2dc0:	82 2b       	or	r24, r18
    2dc2:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <modbusRegisters+0x1>
    2dc6:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <modbusRegisters>
		modbusRegisters[BKI_OUTS]= PINA & 0x0F;
    2dca:	89 b3       	in	r24, 0x19	; 25
    2dcc:	8f 70       	andi	r24, 0x0F	; 15
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <modbusRegisters+0x3>
    2dd4:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <modbusRegisters+0x2>

		//здесь можно пингануть.После пинга пройдет "пауза со сканированием"-за это время должны прийти все отклики
		if(pingTime ==0)
    2dd8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <pingTime>
    2ddc:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <pingTime+0x1>
    2de0:	89 2b       	or	r24, r25
    2de2:	69 f4       	brne	.+26     	; 0x2dfe <main+0x33e>
		{
			ping();
    2de4:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <ping>
			pingTime=PINGTIME;
    2de8:	90 92 39 01 	sts	0x0139, r9	; 0x800139 <pingTime+0x1>
    2dec:	80 92 38 01 	sts	0x0138, r8	; 0x800138 <pingTime>
			LCD_gotoXY(19,0);
    2df0:	60 e0       	ldi	r22, 0x00	; 0
    2df2:	83 e1       	ldi	r24, 0x13	; 19
    2df4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_gotoXY>
			LCD_putchar('*');
    2df8:	8a e2       	ldi	r24, 0x2A	; 42
    2dfa:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_putchar>



		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
    2dfe:	08 ee       	ldi	r16, 0xE8	; 232
    2e00:	13 e0       	ldi	r17, 0x03	; 3
		}



		//пауза со сканированием клавы.Если появился RX прерываемся
		for(unsigned int i=0;(i<1000) && (!rx_counter);i++)
    2e02:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rx_counter>
    2e06:	81 11       	cpse	r24, r1
    2e08:	19 c0       	rjmp	.+50     	; 0x2e3c <main+0x37c>
    2e0a:	8f e9       	ldi	r24, 0x9F	; 159
    2e0c:	9f e0       	ldi	r25, 0x0F	; 15
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <main+0x34e>
    2e12:	00 c0       	rjmp	.+0      	; 0x2e14 <main+0x354>
    2e14:	00 00       	nop
		{
			_delay_ms(1);
			//нажат ENT-висим пока не отпустят-по выходу из меню очищаем экран,обнуляем статус
			if(scanKBD()==ENT){while(scanKBD()!=NOKEY);naviMenu(LVL_main);LCD_clr();sys_state=0;}
    2e16:	0e 94 bd 0c 	call	0x197a	; 0x197a <scanKBD>
    2e1a:	82 30       	cpi	r24, 0x02	; 2
    2e1c:	61 f4       	brne	.+24     	; 0x2e36 <main+0x376>
    2e1e:	0e 94 bd 0c 	call	0x197a	; 0x197a <scanKBD>
    2e22:	8f 3f       	cpi	r24, 0xFF	; 255
    2e24:	e1 f7       	brne	.-8      	; 0x2e1e <main+0x35e>
    2e26:	80 e6       	ldi	r24, 0x60	; 96
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <naviMenu>
    2e2e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_clr>
    2e32:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <sys_state>
    2e36:	01 50       	subi	r16, 0x01	; 1
    2e38:	11 09       	sbc	r17, r1
		}



		//пауза со сканированием клавы.Если появился RX прерываемся
		for(unsigned int i=0;(i<1000) && (!rx_counter);i++)
    2e3a:	19 f7       	brne	.-58     	; 0x2e02 <main+0x342>
			//нажат ENT-висим пока не отпустят-по выходу из меню очищаем экран,обнуляем статус
			if(scanKBD()==ENT){while(scanKBD()!=NOKEY);naviMenu(LVL_main);LCD_clr();sys_state=0;}
		}

		//отработка модбаса.если что то есть в буфере читаем сообщение
		if(rx_counter)
    2e3c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rx_counter>
    2e40:	88 23       	and	r24, r24
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <main+0x386>
    2e44:	5e ce       	rjmp	.-836    	; 0x2b02 <main+0x42>
		{
			signed char a=getModbMsg();
    2e46:	0e 94 39 19 	call	0x3272	; 0x3272 <getModbMsg>
			if(a<1)ERROR=MODB;
    2e4a:	18 16       	cp	r1, r24
    2e4c:	24 f0       	brlt	.+8      	; 0x2e56 <main+0x396>
    2e4e:	85 e0       	ldi	r24, 0x05	; 5
    2e50:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>
    2e54:	56 ce       	rjmp	.-852    	; 0x2b02 <main+0x42>
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
    2e56:	dd 98       	cbi	0x1b, 5	; 27
				if(ERROR==MODB)ERROR=0;
    2e58:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ERROR>
    2e5c:	85 30       	cpi	r24, 0x05	; 5
    2e5e:	11 f4       	brne	.+4      	; 0x2e64 <main+0x3a4>
    2e60:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <ERROR>


static signed char modbDecoder(void)
{
	//адрес не наш
	if(MODB_ADDR != eeprom_read_byte(&bki_addr)) return -1;
    2e64:	10 91 7e 05 	lds	r17, 0x057E	; 0x80057e <modb_message>
    2e68:	86 e0       	ldi	r24, 0x06	; 6
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <eeprom_read_byte>
    2e70:	18 13       	cpse	r17, r24
    2e72:	41 c0       	rjmp	.+130    	; 0x2ef6 <main+0x436>
    2e74:	e0 91 80 05 	lds	r30, 0x0580	; 0x800580 <modb_message+0x2>
    2e78:	f0 91 81 05 	lds	r31, 0x0581	; 0x800581 <modb_message+0x3>
    2e7c:	fe 27       	eor	r31, r30
    2e7e:	ef 27       	eor	r30, r31
    2e80:	fe 27       	eor	r31, r30
    2e82:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <modb_message+0x4>
    2e86:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <modb_message+0x5>
    2e8a:	98 27       	eor	r25, r24
    2e8c:	89 27       	eor	r24, r25
    2e8e:	98 27       	eor	r25, r24
	//неправильный регистр или их кол-во
	if((MODB_START_REG+MODB_QUANT_REG) > MAX_QUANT_MODB_REG) return modbErr(ILLEGAL_DATA_ADDR);
    2e90:	af 01       	movw	r20, r30
    2e92:	48 0f       	add	r20, r24
    2e94:	59 1f       	adc	r21, r25
    2e96:	20 91 7f 05 	lds	r18, 0x057F	; 0x80057f <modb_message+0x1>
    2e9a:	49 30       	cpi	r20, 0x09	; 9
    2e9c:	51 05       	cpc	r21, r1
    2e9e:	38 f0       	brcs	.+14     	; 0x2eae <main+0x3ee>
	return 0;
}

static unsigned char modbErr(unsigned char errCode)
{
	MODB_FUNC |= 0x80;			//установили флаг ошибки
    2ea0:	20 68       	ori	r18, 0x80	; 128
    2ea2:	20 93 7f 05 	sts	0x057F, r18	; 0x80057f <modb_message+0x1>
	MOBD_ERROR_CODE = errCode; 	//код ошибки
    2ea6:	40 92 80 05 	sts	0x0580, r4	; 0x800580 <modb_message+0x2>
static signed char modbDecoder(void)
{
	//адрес не наш
	if(MODB_ADDR != eeprom_read_byte(&bki_addr)) return -1;
	//неправильный регистр или их кол-во
	if((MODB_START_REG+MODB_QUANT_REG) > MAX_QUANT_MODB_REG) return modbErr(ILLEGAL_DATA_ADDR);
    2eaa:	83 e0       	ldi	r24, 0x03	; 3
    2eac:	26 c0       	rjmp	.+76     	; 0x2efa <main+0x43a>
	//обрабатываем функцию
	switch(MODB_FUNC)
    2eae:	23 30       	cpi	r18, 0x03	; 3
    2eb0:	e9 f4       	brne	.+58     	; 0x2eec <main+0x42c>
    2eb2:	ee 0f       	add	r30, r30
    2eb4:	ff 1f       	adc	r31, r31
    2eb6:	e4 54       	subi	r30, 0x44	; 68
    2eb8:	fb 4f       	sbci	r31, 0xFB	; 251
    2eba:	ae e7       	ldi	r26, 0x7E	; 126
    2ebc:	b5 e0       	ldi	r27, 0x05	; 5
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	12 96       	adiw	r26, 0x02	; 2
	{
		unsigned char j=MOBD_START_DATA;
		unsigned int  s=MODB_START_REG;
		unsigned int  e=MODB_QUANT_REG;

		for(unsigned int i=0; i<e; i++)
    2ec4:	82 17       	cp	r24, r18
    2ec6:	93 07       	cpc	r25, r19
    2ec8:	61 f0       	breq	.+24     	; 0x2ee2 <main+0x422>
		{
			modb_message[j++] =modbusRegisters[i+s] >>8;		//старший байт данных
    2eca:	40 81       	ld	r20, Z
    2ecc:	51 81       	ldd	r21, Z+1	; 0x01
    2ece:	32 96       	adiw	r30, 0x02	; 2
    2ed0:	11 96       	adiw	r26, 0x01	; 1
    2ed2:	5c 93       	st	X, r21
    2ed4:	11 97       	sbiw	r26, 0x01	; 1
			modb_message[j++] =modbusRegisters[i+s] & 0x00FF;	//младший
    2ed6:	12 96       	adiw	r26, 0x02	; 2
    2ed8:	4c 93       	st	X, r20
    2eda:	12 97       	sbiw	r26, 0x02	; 2
	{
		unsigned char j=MOBD_START_DATA;
		unsigned int  s=MODB_START_REG;
		unsigned int  e=MODB_QUANT_REG;

		for(unsigned int i=0; i<e; i++)
    2edc:	2f 5f       	subi	r18, 0xFF	; 255
    2ede:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee0:	f0 cf       	rjmp	.-32     	; 0x2ec2 <main+0x402>
    2ee2:	88 0f       	add	r24, r24
		{
			modb_message[j++] =modbusRegisters[i+s] >>8;		//старший байт данных
			modb_message[j++] =modbusRegisters[i+s] & 0x00FF;	//младший
		}
		MOBD_BYTE_COUNT = j-MOBD_START_DATA;				//счетчик байт в сообщении
    2ee4:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <modb_message+0x2>
		return MOBD_BYTE_COUNT+3;
    2ee8:	8d 5f       	subi	r24, 0xFD	; 253
    2eea:	07 c0       	rjmp	.+14     	; 0x2efa <main+0x43a>
	return 0;
}

static unsigned char modbErr(unsigned char errCode)
{
	MODB_FUNC |= 0x80;			//установили флаг ошибки
    2eec:	20 68       	ori	r18, 0x80	; 128
    2eee:	20 93 7f 05 	sts	0x057F, r18	; 0x80057f <modb_message+0x1>
	MOBD_ERROR_CODE = errCode; 	//код ошибки
    2ef2:	30 92 80 05 	sts	0x0580, r3	; 0x800580 <modb_message+0x2>
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
				if(ERROR==MODB)ERROR=0;
				if((a=modbDecoder()) >0)putModbMsg(a);
				PORTA |= 1<<5;	//зажигаем СД
    2ef6:	dd 9a       	sbi	0x1b, 5	; 27
			}
		}


	}
    2ef8:	04 ce       	rjmp	.-1016   	; 0x2b02 <main+0x42>
			if(a<1)ERROR=MODB;
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
				if(ERROR==MODB)ERROR=0;
				if((a=modbDecoder()) >0)putModbMsg(a);
    2efa:	0e 94 96 18 	call	0x312c	; 0x312c <putModbMsg>
    2efe:	fb cf       	rjmp	.-10     	; 0x2ef6 <main+0x436>

00002f00 <__vector_7>:
	clrBit(PORTA,BEEP);
}

//таймер 1ms
ISR(TIMER1_COMPA_vect)
{
    2f00:	1f 92       	push	r1
    2f02:	0f 92       	push	r0
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	0f 92       	push	r0
    2f08:	11 24       	eor	r1, r1
    2f0a:	8f 93       	push	r24
    2f0c:	9f 93       	push	r25
    2f0e:	af 93       	push	r26
    2f10:	bf 93       	push	r27
	if(CAN_timeout)CAN_timeout--;
    2f12:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <CAN_timeout>
    2f16:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <CAN_timeout+0x1>
    2f1a:	89 2b       	or	r24, r25
    2f1c:	49 f0       	breq	.+18     	; 0x2f30 <__vector_7+0x30>
    2f1e:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <CAN_timeout>
    2f22:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <CAN_timeout+0x1>
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <CAN_timeout+0x1>
    2f2c:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <CAN_timeout>
	if(SPI_timeout)SPI_timeout--;
    2f30:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <SPI_timeout>
    2f34:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <SPI_timeout+0x1>
    2f38:	89 2b       	or	r24, r25
    2f3a:	49 f0       	breq	.+18     	; 0x2f4e <__vector_7+0x4e>
    2f3c:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <SPI_timeout>
    2f40:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <SPI_timeout+0x1>
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <SPI_timeout+0x1>
    2f4a:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <SPI_timeout>
	if(menuExit)menuExit--;
    2f4e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <menuExit>
    2f52:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <menuExit+0x1>
    2f56:	89 2b       	or	r24, r25
    2f58:	49 f0       	breq	.+18     	; 0x2f6c <__vector_7+0x6c>
    2f5a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <menuExit>
    2f5e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <menuExit+0x1>
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <menuExit+0x1>
    2f68:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <menuExit>
	if(pingTime)pingTime--;
    2f6c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <pingTime>
    2f70:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <pingTime+0x1>
    2f74:	89 2b       	or	r24, r25
    2f76:	49 f0       	breq	.+18     	; 0x2f8a <__vector_7+0x8a>
    2f78:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <pingTime>
    2f7c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <pingTime+0x1>
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <pingTime+0x1>
    2f86:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <pingTime>

	if(MODB_timeout)MODB_timeout--;
    2f8a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MODB_timeout>
    2f8e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <MODB_timeout+0x1>
    2f92:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <MODB_timeout+0x2>
    2f96:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <MODB_timeout+0x3>
    2f9a:	89 2b       	or	r24, r25
    2f9c:	8a 2b       	or	r24, r26
    2f9e:	8b 2b       	or	r24, r27
    2fa0:	99 f0       	breq	.+38     	; 0x2fc8 <__vector_7+0xc8>
    2fa2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MODB_timeout>
    2fa6:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <MODB_timeout+0x1>
    2faa:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <MODB_timeout+0x2>
    2fae:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <MODB_timeout+0x3>
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	a1 09       	sbc	r26, r1
    2fb6:	b1 09       	sbc	r27, r1
    2fb8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <MODB_timeout>
    2fbc:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <MODB_timeout+0x1>
    2fc0:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <MODB_timeout+0x2>
    2fc4:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <MODB_timeout+0x3>

}
    2fc8:	bf 91       	pop	r27
    2fca:	af 91       	pop	r26
    2fcc:	9f 91       	pop	r25
    2fce:	8f 91       	pop	r24
    2fd0:	0f 90       	pop	r0
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	0f 90       	pop	r0
    2fd6:	1f 90       	pop	r1
    2fd8:	18 95       	reti

00002fda <__vector_13>:

//чтение данный UART
ISR(USART_RXC_vect)
{
    2fda:	1f 92       	push	r1
    2fdc:	0f 92       	push	r0
    2fde:	0f b6       	in	r0, 0x3f	; 63
    2fe0:	0f 92       	push	r0
    2fe2:	11 24       	eor	r1, r1
    2fe4:	8f 93       	push	r24
    2fe6:	9f 93       	push	r25
    2fe8:	ef 93       	push	r30
    2fea:	ff 93       	push	r31
//отправить сообщение из модбас буфера. На входе RTU сообщение, передаем его длину
extern void putModbMsg(unsigned char lenght);
//прием символа и помещение в приемный буфер. Вставляется,например в прерывание
inline void read_raw_data(void)
{
	char status=UCSRA,data=UDR;
    2fec:	8b b1       	in	r24, 0x0b	; 11
    2fee:	9c b1       	in	r25, 0x0c	; 12

	if ((status & (1<<FE | 1<<PE | 1<<DOR))!=0) {MODB_ERR=MODBHW;return;}
    2ff0:	8c 71       	andi	r24, 0x1C	; 28
    2ff2:	11 f0       	breq	.+4      	; 0x2ff8 <__vector_13+0x1e>
    2ff4:	83 e0       	ldi	r24, 0x03	; 3
    2ff6:	19 c0       	rjmp	.+50     	; 0x302a <__vector_13+0x50>
	rx_buffer[wr_index]=data;
    2ff8:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <wr_index>
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	ea 5a       	subi	r30, 0xAA	; 170
    3000:	fa 4f       	sbci	r31, 0xFA	; 250
    3002:	90 83       	st	Z, r25
	if (++wr_index == MODB_MESSSIZE) wr_index=0;
    3004:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <wr_index>
    3008:	8f 5f       	subi	r24, 0xFF	; 255
    300a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <wr_index>
    300e:	88 32       	cpi	r24, 0x28	; 40
    3010:	11 f4       	brne	.+4      	; 0x3016 <__vector_13+0x3c>
    3012:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <wr_index>
	if (++rx_counter == MODB_MESSSIZE) {rx_counter=0;MODB_ERR=MODBBUFOVF;return;}
    3016:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rx_counter>
    301a:	8f 5f       	subi	r24, 0xFF	; 255
    301c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rx_counter>
    3020:	88 32       	cpi	r24, 0x28	; 40
    3022:	29 f4       	brne	.+10     	; 0x302e <__vector_13+0x54>
    3024:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_counter>
    3028:	82 e0       	ldi	r24, 0x02	; 2
    302a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <MODB_ERR>
	read_raw_data();
}
    302e:	ff 91       	pop	r31
    3030:	ef 91       	pop	r30
    3032:	9f 91       	pop	r25
    3034:	8f 91       	pop	r24
    3036:	0f 90       	pop	r0
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	0f 90       	pop	r0
    303c:	1f 90       	pop	r1
    303e:	18 95       	reti

00003040 <modb_putchar>:
}

//отсылка символа по УАРТу
static void modb_putchar(char c)
{
	while((UCSRA&(1<<UDRE))==0);
    3040:	5d 9b       	sbis	0x0b, 5	; 11
    3042:	fe cf       	rjmp	.-4      	; 0x3040 <modb_putchar>
	UDR=c;
    3044:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<TXC))==0);	//ждем окончания передачи
    3046:	5e 9b       	sbis	0x0b, 6	; 11
    3048:	fe cf       	rjmp	.-4      	; 0x3046 <modb_putchar+0x6>
	UCSRA |= 1<<TXC;			//сброс флага окончания передачи
    304a:	5e 9a       	sbi	0x0b, 6	; 11
    304c:	08 95       	ret

0000304e <CRC.constprop.0>:
  while(lenght--) {lrc+=*data++;}
  return ((unsigned char) (-(signed char) lrc));
}

//вычисление CRC
static unsigned int CRC(volatile unsigned char *data, unsigned char lenght)
    304e:	28 2f       	mov	r18, r24
{
  unsigned int crc=0xFFFF;
    3050:	8f ef       	ldi	r24, 0xFF	; 255
    3052:	9f ef       	ldi	r25, 0xFF	; 255
    3054:	ee e7       	ldi	r30, 0x7E	; 126
    3056:	f5 e0       	ldi	r31, 0x05	; 5

  while(lenght--)
    3058:	21 50       	subi	r18, 0x01	; 1
    305a:	b0 f0       	brcs	.+44     	; 0x3088 <CRC.constprop.0+0x3a>
  {
    crc ^= *data++;
    305c:	bf 01       	movw	r22, r30
    305e:	6f 5f       	subi	r22, 0xFF	; 255
    3060:	7f 4f       	sbci	r23, 0xFF	; 255
    3062:	30 81       	ld	r19, Z
    3064:	83 27       	eor	r24, r19
    3066:	38 e0       	ldi	r19, 0x08	; 8
    3068:	ac 01       	movw	r20, r24
    306a:	56 95       	lsr	r21
    306c:	47 95       	ror	r20
    for (unsigned char i = 0; i < 8; ++i)
    {
	if (crc & 1) crc = (crc >> 1) ^ 0xA001;
    306e:	80 ff       	sbrs	r24, 0
    3070:	06 c0       	rjmp	.+12     	; 0x307e <CRC.constprop.0+0x30>
    3072:	ca 01       	movw	r24, r20
    3074:	e1 e0       	ldi	r30, 0x01	; 1
    3076:	8e 27       	eor	r24, r30
    3078:	e0 ea       	ldi	r30, 0xA0	; 160
    307a:	9e 27       	eor	r25, r30
    307c:	01 c0       	rjmp	.+2      	; 0x3080 <CRC.constprop.0+0x32>
	else crc = (crc >> 1);
    307e:	ca 01       	movw	r24, r20
    3080:	31 50       	subi	r19, 0x01	; 1
  unsigned int crc=0xFFFF;

  while(lenght--)
  {
    crc ^= *data++;
    for (unsigned char i = 0; i < 8; ++i)
    3082:	91 f7       	brne	.-28     	; 0x3068 <CRC.constprop.0+0x1a>
{
  unsigned int crc=0xFFFF;

  while(lenght--)
  {
    crc ^= *data++;
    3084:	fb 01       	movw	r30, r22
    3086:	e8 cf       	rjmp	.-48     	; 0x3058 <CRC.constprop.0+0xa>
	else crc = (crc >> 1);
    }
  }

  return crc;
}
    3088:	08 95       	ret

0000308a <MODB_init>:
static void modb_putchar(char);


//Инициализация.Выглядит примерно так:  MODB_init(RTU,EVEN,9600);
void MODB_init(unsigned char type,unsigned char parity,unsigned long int speed)
{
    308a:	0f 93       	push	r16
    308c:	1f 93       	push	r17
    308e:	cf 93       	push	r28
    3090:	df 93       	push	r29
    3092:	18 2f       	mov	r17, r24
    3094:	c6 2f       	mov	r28, r22
  unsigned char stop=(parity ==NONE)?(2):(1);	//1 стоп бит если есть паритет; 2 бита если нет паритета
    3096:	66 23       	and	r22, r22
    3098:	11 f0       	breq	.+4      	; 0x309e <MODB_init+0x14>
    309a:	01 e0       	ldi	r16, 0x01	; 1
    309c:	01 c0       	rjmp	.+2      	; 0x30a0 <MODB_init+0x16>
    309e:	02 e0       	ldi	r16, 0x02	; 2
  unsigned char size=(type ==ASCII)?(7):(8);	//если ASCII-7 бит данных MSB, если RTU-8 бит данных MSB
    30a0:	11 30       	cpi	r17, 0x01	; 1
    30a2:	11 f0       	breq	.+4      	; 0x30a8 <MODB_init+0x1e>
    30a4:	d8 e0       	ldi	r29, 0x08	; 8
    30a6:	01 c0       	rjmp	.+2      	; 0x30aa <MODB_init+0x20>
    30a8:	d7 e0       	ldi	r29, 0x07	; 7
  unsigned int baud=0x7F & (unsigned int)((F_CPU/(16*speed))-1);
    30aa:	84 e0       	ldi	r24, 0x04	; 4
    30ac:	22 0f       	add	r18, r18
    30ae:	33 1f       	adc	r19, r19
    30b0:	44 1f       	adc	r20, r20
    30b2:	55 1f       	adc	r21, r21
    30b4:	8a 95       	dec	r24
    30b6:	d1 f7       	brne	.-12     	; 0x30ac <MODB_init+0x22>
    30b8:	60 e0       	ldi	r22, 0x00	; 0
    30ba:	74 e2       	ldi	r23, 0x24	; 36
    30bc:	84 ef       	ldi	r24, 0xF4	; 244
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	0e 94 26 1a 	call	0x344c	; 0x344c <__udivmodsi4>
    30c4:	21 50       	subi	r18, 0x01	; 1
    30c6:	31 09       	sbc	r19, r1
    30c8:	2f 77       	andi	r18, 0x7F	; 127
    30ca:	33 27       	eor	r19, r19


  size-=5;
    30cc:	d5 50       	subi	r29, 0x05	; 5
  TXENDDR |= 1<<TXENPIN;
    30ce:	8e 9a       	sbi	0x11, 6	; 17
  TXDISABLE;
    30d0:	96 98       	cbi	0x12, 6	; 18

  modb_type=type;
    30d2:	10 93 2f 01 	sts	0x012F, r17	; 0x80012f <modb_type>
  //длительность передачи одного бита == кол-во бит-в-символе(ASCII==10, RTU==11)/скорость
  //таймаут д.б. RTU>=3.5 символа (>38,5 бит), ASCII <=1000ms;
  //RTU = с запасом 40 бит=> 40/speed ==пауза, сек *1000 ==ms
//  val_timeout=(type ==ASCII)?(1000000):(40000000/speed);
  val_timeout=(type ==ASCII)?(1000):(2);	//при скоростях больше 19200 таймаут можно принять 2мс
    30d6:	11 30       	cpi	r17, 0x01	; 1
    30d8:	29 f0       	breq	.+10     	; 0x30e4 <MODB_init+0x5a>
    30da:	82 e0       	ldi	r24, 0x02	; 2
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	a0 e0       	ldi	r26, 0x00	; 0
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	04 c0       	rjmp	.+8      	; 0x30ec <MODB_init+0x62>
    30e4:	88 ee       	ldi	r24, 0xE8	; 232
    30e6:	93 e0       	ldi	r25, 0x03	; 3
    30e8:	a0 e0       	ldi	r26, 0x00	; 0
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <val_timeout>
    30f0:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <val_timeout+0x1>
    30f4:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <val_timeout+0x2>
    30f8:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <val_timeout+0x3>

  //нога ТХ
  //When the USART Transmitter is enabled, this pin is configured as an output regardless of the value of DDD1.
  PORTD |= (1<<PORTD1);//PORTD.1=1 выход с "1"
    30fc:	91 9a       	sbi	0x12, 1	; 18
  DDRD |= (1<<DDD1);  //DDRD.1=1 выход
    30fe:	89 9a       	sbi	0x11, 1	; 17

  //нога RX
  PORTD |= (1<<PORTD0);//PORTD.1=1 вход с притяжкой
    3100:	90 9a       	sbi	0x12, 0	; 18
  DDRD &= ~(1<<DDD0);  //DDD.1=0 вход
    3102:	88 98       	cbi	0x11, 0	; 17

  UCSRA=0x00;
    3104:	1b b8       	out	0x0b, r1	; 11
  //(7)вкл.прер.по приему, (6)откл.прер.по передаче, (5)откл.прер.по опустошению UDR, (4)вкл.передатчик и (3)приемник, (2)9бит откл.
  UCSRB=0b10011000;
    3106:	88 e9       	ldi	r24, 0x98	; 152
    3108:	8a b9       	out	0x0a, r24	; 10
  //(7)?, (6)асинхронный режим, (5:4)четность(none), (3)1стоп, (2:1)8бит, (0)=0
  //	UCSRC=0b10000110;

  UCSRC=(1<<7) | parity | ((stop==2)?(1):(0) << 3) | (size<<1);
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	02 30       	cpi	r16, 0x02	; 2
    310e:	09 f0       	breq	.+2      	; 0x3112 <MODB_init+0x88>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	c0 68       	ori	r28, 0x80	; 128
    3114:	8c 2b       	or	r24, r28
    3116:	cd 2f       	mov	r28, r29
    3118:	cc 0f       	add	r28, r28
    311a:	c8 2b       	or	r28, r24
    311c:	c0 bd       	out	0x20, r28	; 32
//	//(7)?, (6)асинхронный режим, (5:4)четность(EVEN), (3)1стоп, (2:1)8бит, (0)=0
//	UCSRC=0b10100110;
  UBRRH=baud << 8;
    311e:	10 bc       	out	0x20, r1	; 32
  UBRRL=baud & 0x00FF;
    3120:	29 b9       	out	0x09, r18	; 9
//	//9600 bps
//	UBRRH=0x00;
//	UBRRL=0x67;

}
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	1f 91       	pop	r17
    3128:	0f 91       	pop	r16
    312a:	08 95       	ret

0000312c <putModbMsg>:

//отправить сообщение из модбас буфера. На входе RTU сообщение, передаем его длину
void putModbMsg(unsigned char lenght)
{
    312c:	ef 92       	push	r14
    312e:	ff 92       	push	r15
    3130:	0f 93       	push	r16
    3132:	1f 93       	push	r17
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	c8 2f       	mov	r28, r24
  switch(modb_type)
    313a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <modb_type>
    313e:	88 23       	and	r24, r24
    3140:	41 f0       	breq	.+16     	; 0x3152 <putModbMsg+0x26>
    3142:	81 30       	cpi	r24, 0x01	; 1
    3144:	09 f0       	breq	.+2      	; 0x3148 <putModbMsg+0x1c>
    3146:	8e c0       	rjmp	.+284    	; 0x3264 <putModbMsg+0x138>
    3148:	9c 2f       	mov	r25, r28
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	ee e7       	ldi	r30, 0x7E	; 126
    314e:	f5 e0       	ldi	r31, 0x05	; 5
    3150:	35 c0       	rjmp	.+106    	; 0x31bc <putModbMsg+0x90>
  {
  case(RTU):
    {
    unsigned int crc=CRC(modb_message,lenght);
    3152:	8c 2f       	mov	r24, r28
    3154:	0e 94 27 18 	call	0x304e	; 0x304e <CRC.constprop.0>
    3158:	f8 2e       	mov	r15, r24
    315a:	d9 2f       	mov	r29, r25
    unsigned char index=0;

    TXENABLE;
    315c:	96 9a       	sbi	0x12, 6	; 18
    315e:	0e e7       	ldi	r16, 0x7E	; 126
    3160:	15 e0       	ldi	r17, 0x05	; 5
    while(lenght--) modb_putchar(modb_message[index++]);
    3162:	cc 23       	and	r28, r28
    3164:	39 f0       	breq	.+14     	; 0x3174 <putModbMsg+0x48>
    3166:	f8 01       	movw	r30, r16
    3168:	81 91       	ld	r24, Z+
    316a:	8f 01       	movw	r16, r30
    316c:	0e 94 20 18 	call	0x3040	; 0x3040 <modb_putchar>
    3170:	c1 50       	subi	r28, 0x01	; 1
    3172:	f7 cf       	rjmp	.-18     	; 0x3162 <putModbMsg+0x36>
    modb_putchar(crc & 0x00FF);	//младшим байтом вперед
    3174:	8f 2d       	mov	r24, r15
    3176:	0e 94 20 18 	call	0x3040	; 0x3040 <modb_putchar>
    modb_putchar(crc>>8);
    317a:	8d 2f       	mov	r24, r29
    317c:	0e 94 20 18 	call	0x3040	; 0x3040 <modb_putchar>
    TXDISABLE;
    3180:	96 98       	cbi	0x12, 6	; 18
    MODB_timeout=val_timeout;
    3182:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <val_timeout>
    3186:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <val_timeout+0x1>
    318a:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <val_timeout+0x2>
    318e:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <val_timeout+0x3>
    3192:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <MODB_timeout>
    3196:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <MODB_timeout+0x1>
    319a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <MODB_timeout+0x2>
    319e:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <MODB_timeout+0x3>
    while(MODB_timeout);
    31a2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MODB_timeout>
    31a6:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <MODB_timeout+0x1>
    31aa:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <MODB_timeout+0x2>
    31ae:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <MODB_timeout+0x3>
    31b2:	89 2b       	or	r24, r25
    31b4:	8a 2b       	or	r24, r26
    31b6:	8b 2b       	or	r24, r27
    31b8:	a1 f7       	brne	.-24     	; 0x31a2 <putModbMsg+0x76>
    31ba:	54 c0       	rjmp	.+168    	; 0x3264 <putModbMsg+0x138>
//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;

  while(lenght--) {lrc+=*data++;}
    31bc:	91 50       	subi	r25, 0x01	; 1
    31be:	20 f0       	brcs	.+8      	; 0x31c8 <putModbMsg+0x9c>
    31c0:	20 81       	ld	r18, Z
    31c2:	82 0f       	add	r24, r18
    31c4:	31 96       	adiw	r30, 0x01	; 1
    31c6:	fa cf       	rjmp	.-12     	; 0x31bc <putModbMsg+0x90>
  return ((unsigned char) (-(signed char) lrc));
    31c8:	d8 2f       	mov	r29, r24
    31ca:	d1 95       	neg	r29
  case(ASCII):
    {
    unsigned char lrc=LRC(modb_message,lenght);
    unsigned char index=0;

    TXENABLE;
    31cc:	96 9a       	sbi	0x12, 6	; 18
    31ce:	ff ef       	ldi	r31, 0xFF	; 255
    31d0:	29 ef       	ldi	r18, 0xF9	; 249
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	f1 50       	subi	r31, 0x01	; 1
    31d6:	20 40       	sbci	r18, 0x00	; 0
    31d8:	80 40       	sbci	r24, 0x00	; 0
    31da:	e1 f7       	brne	.-8      	; 0x31d4 <putModbMsg+0xa8>
    31dc:	00 c0       	rjmp	.+0      	; 0x31de <putModbMsg+0xb2>
    31de:	00 00       	nop
    _delay_ms(20);
    modb_putchar(':');
    31e0:	8a e3       	ldi	r24, 0x3A	; 58
    31e2:	0e 94 20 18 	call	0x3040	; 0x3040 <modb_putchar>
    31e6:	0e e7       	ldi	r16, 0x7E	; 126
    31e8:	15 e0       	ldi	r17, 0x05	; 5

    while(lenght--)
    31ea:	cc 23       	and	r28, r28
    31ec:	f1 f0       	breq	.+60     	; 0x322a <putModbMsg+0xfe>
    31ee:	78 01       	movw	r14, r16
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
    31f0:	f8 01       	movw	r30, r16
    31f2:	80 81       	ld	r24, Z
    31f4:	82 95       	swap	r24
    31f6:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    31f8:	90 e3       	ldi	r25, 0x30	; 48
    31fa:	98 0f       	add	r25, r24
  if(num>57)return num+7;
    31fc:	9a 33       	cpi	r25, 0x3A	; 58
    31fe:	10 f0       	brcs	.+4      	; 0x3204 <putModbMsg+0xd8>
    3200:	89 5c       	subi	r24, 0xC9	; 201
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <putModbMsg+0xda>
    3204:	89 2f       	mov	r24, r25
    _delay_ms(20);
    modb_putchar(':');

    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
    3206:	0e 94 20 18 	call	0x3040	; 0x3040 <modb_putchar>
    320a:	0f 5f       	subi	r16, 0xFF	; 255
    320c:	1f 4f       	sbci	r17, 0xFF	; 255
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
    320e:	f7 01       	movw	r30, r14
    3210:	80 81       	ld	r24, Z
    3212:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    3214:	90 e3       	ldi	r25, 0x30	; 48
    3216:	98 0f       	add	r25, r24
  if(num>57)return num+7;
    3218:	9a 33       	cpi	r25, 0x3A	; 58
    321a:	10 f0       	brcs	.+4      	; 0x3220 <putModbMsg+0xf4>
    321c:	89 5c       	subi	r24, 0xC9	; 201
    321e:	01 c0       	rjmp	.+2      	; 0x3222 <putModbMsg+0xf6>
    3220:	89 2f       	mov	r24, r25
    modb_putchar(':');

    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
    3222:	0e 94 20 18 	call	0x3040	; 0x3040 <modb_putchar>
    3226:	c1 50       	subi	r28, 0x01	; 1
    3228:	e0 cf       	rjmp	.-64     	; 0x31ea <putModbMsg+0xbe>
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    322a:	9d 2f       	mov	r25, r29
    322c:	92 95       	swap	r25
    322e:	9f 70       	andi	r25, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    3230:	80 e3       	ldi	r24, 0x30	; 48
    3232:	89 0f       	add	r24, r25
  if(num>57)return num+7;
    3234:	8a 33       	cpi	r24, 0x3A	; 58
    3236:	10 f0       	brcs	.+4      	; 0x323c <putModbMsg+0x110>
    3238:	87 e3       	ldi	r24, 0x37	; 55
    323a:	89 0f       	add	r24, r25
    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    323c:	0e 94 20 18 	call	0x3040	; 0x3040 <modb_putchar>
    modb_putchar( dig_to_char(lrc& 0x0F) );
    3240:	8d 2f       	mov	r24, r29
    3242:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    3244:	d0 e3       	ldi	r29, 0x30	; 48
    3246:	d8 0f       	add	r29, r24
  if(num>57)return num+7;
    3248:	da 33       	cpi	r29, 0x3A	; 58
    324a:	10 f0       	brcs	.+4      	; 0x3250 <putModbMsg+0x124>
    324c:	89 5c       	subi	r24, 0xC9	; 201
    324e:	01 c0       	rjmp	.+2      	; 0x3252 <putModbMsg+0x126>
    3250:	8d 2f       	mov	r24, r29
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    modb_putchar( dig_to_char(lrc& 0x0F) );
    3252:	0e 94 20 18 	call	0x3040	; 0x3040 <modb_putchar>
    modb_putchar(0x0D);
    3256:	8d e0       	ldi	r24, 0x0D	; 13
    3258:	0e 94 20 18 	call	0x3040	; 0x3040 <modb_putchar>
    modb_putchar(0x0A);
    325c:	8a e0       	ldi	r24, 0x0A	; 10
    325e:	0e 94 20 18 	call	0x3040	; 0x3040 <modb_putchar>
    TXDISABLE;
    3262:	96 98       	cbi	0x12, 6	; 18
    }
   break;
  }
}
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	1f 91       	pop	r17
    326a:	0f 91       	pop	r16
    326c:	ff 90       	pop	r15
    326e:	ef 90       	pop	r14
    3270:	08 95       	ret

00003272 <getModbMsg>:

//получить сообщение из приемного буфера УАРТа. В итоге-в буфере RTU сообщение,вернули длину полученного сообщения или -1 (ошибка)
signed char getModbMsg(void)
{
    3272:	8f 92       	push	r8
    3274:	9f 92       	push	r9
    3276:	af 92       	push	r10
    3278:	bf 92       	push	r11
    327a:	cf 92       	push	r12
    327c:	df 92       	push	r13
    327e:	ef 92       	push	r14
    3280:	ff 92       	push	r15
    3282:	0f 93       	push	r16
    3284:	1f 93       	push	r17
    3286:	cf 93       	push	r28
	unsigned char flag_tout=0,index=0,pass=0;

	while(1)																		//пока не дочитаем до конца сообщения или до ошибки крутимся тут
	{
		MODB_timeout=val_timeout;
    3288:	c0 90 2b 01 	lds	r12, 0x012B	; 0x80012b <val_timeout>
    328c:	d0 90 2c 01 	lds	r13, 0x012C	; 0x80012c <val_timeout+0x1>
    3290:	e0 90 2d 01 	lds	r14, 0x012D	; 0x80012d <val_timeout+0x2>
    3294:	f0 90 2e 01 	lds	r15, 0x012E	; 0x80012e <val_timeout+0x3>
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    3298:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <modb_type>
    329c:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <rd_index>
}

//получить сообщение из приемного буфера УАРТа. В итоге-в буфере RTU сообщение,вернули длину полученного сообщения или -1 (ошибка)
signed char getModbMsg(void)
{
	unsigned char flag_tout=0,index=0,pass=0;
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	80 e0       	ldi	r24, 0x00	; 0

	while(1)																		//пока не дочитаем до конца сообщения или до ошибки крутимся тут
	{
		MODB_timeout=val_timeout;
    32a4:	c0 92 32 01 	sts	0x0132, r12	; 0x800132 <MODB_timeout>
    32a8:	d0 92 33 01 	sts	0x0133, r13	; 0x800133 <MODB_timeout+0x1>
    32ac:	e0 92 34 01 	sts	0x0134, r14	; 0x800134 <MODB_timeout+0x2>
    32b0:	f0 92 35 01 	sts	0x0135, r15	; 0x800135 <MODB_timeout+0x3>
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут
    32b4:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <rx_counter>
    32b8:	31 11       	cpse	r19, r1
    32ba:	0d c0       	rjmp	.+26     	; 0x32d6 <getModbMsg+0x64>
    32bc:	80 90 32 01 	lds	r8, 0x0132	; 0x800132 <MODB_timeout>
    32c0:	90 90 33 01 	lds	r9, 0x0133	; 0x800133 <MODB_timeout+0x1>
    32c4:	a0 90 34 01 	lds	r10, 0x0134	; 0x800134 <MODB_timeout+0x2>
    32c8:	b0 90 35 01 	lds	r11, 0x0135	; 0x800135 <MODB_timeout+0x3>
    32cc:	89 28       	or	r8, r9
    32ce:	8a 28       	or	r8, r10
    32d0:	8b 28       	or	r8, r11
    32d2:	81 f7       	brne	.-32     	; 0x32b4 <getModbMsg+0x42>
    32d4:	34 c0       	rjmp	.+104    	; 0x333e <getModbMsg+0xcc>
    32d6:	e9 2f       	mov	r30, r25
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	9f 5f       	subi	r25, 0xFF	; 255

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    32dc:	61 11       	cpse	r22, r1
    32de:	0a c0       	rjmp	.+20     	; 0x32f4 <getModbMsg+0x82>
			{
				unsigned int crc= modb_message[index-1] <<8 | modb_message[index-2];//полученная CRC
				if(crc !=CRC(modb_message,index-2))	{MODB_ERR=MODBXRC;return -1;}	//сравниваем с фактической
				return index-2;														//длина сообщения минус 2 символа CRC
			}
			modb_message[index++]=rx_buffer[rd_index];								//если не таймаут принимаем след. символ
    32e0:	ea 5a       	subi	r30, 0xAA	; 170
    32e2:	fa 4f       	sbci	r31, 0xFA	; 250
    32e4:	30 81       	ld	r19, Z
    32e6:	e8 2f       	mov	r30, r24
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	e2 58       	subi	r30, 0x82	; 130
    32ec:	fa 4f       	sbci	r31, 0xFA	; 250
    32ee:	30 83       	st	Z, r19
    32f0:	8f 5f       	subi	r24, 0xFF	; 255
    32f2:	1a c0       	rjmp	.+52     	; 0x3328 <getModbMsg+0xb6>

//////////////////////////////////если работаем в режиме ASCII
		else
		{
			if(flag_tout) {MODB_ERR=MODBTOUT;return -1;}							//таймаут в случае ASCII это ошибка
			switch(rx_buffer[rd_index])
    32f4:	ea 5a       	subi	r30, 0xAA	; 170
    32f6:	fa 4f       	sbci	r31, 0xFA	; 250
    32f8:	30 81       	ld	r19, Z
    32fa:	3d 30       	cpi	r19, 0x0D	; 13
    32fc:	09 f4       	brne	.+2      	; 0x3300 <getModbMsg+0x8e>
    32fe:	3c c0       	rjmp	.+120    	; 0x3378 <getModbMsg+0x106>
    3300:	3a 33       	cpi	r19, 0x3A	; 58
    3302:	91 f0       	breq	.+36     	; 0x3328 <getModbMsg+0xb6>
    3304:	48 2f       	mov	r20, r24
    3306:	50 e0       	ldi	r21, 0x00	; 0
					return index-1;													// а возвращем длину без учета ЛРЦ
				}
				break;
				default:															//сборка ASCII-to-RTU
				{
					if(pass==0)														//первый проход- в буфер сообщения пишем первую тетраду
    3308:	21 11       	cpse	r18, r1
    330a:	58 c0       	rjmp	.+176    	; 0x33bc <getModbMsg+0x14a>
					{
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
    330c:	20 81       	ld	r18, Z
}

//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
    330e:	30 ed       	ldi	r19, 0xD0	; 208
    3310:	32 0f       	add	r19, r18
  if(sym>41) return sym-39;	/* a .. f */
    3312:	3a 32       	cpi	r19, 0x2A	; 42
    3314:	08 f4       	brcc	.+2      	; 0x3318 <getModbMsg+0xa6>
    3316:	4c c0       	rjmp	.+152    	; 0x33b0 <getModbMsg+0x13e>
    3318:	27 55       	subi	r18, 0x57	; 87
				break;
				default:															//сборка ASCII-to-RTU
				{
					if(pass==0)														//первый проход- в буфер сообщения пишем первую тетраду
					{
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
    331a:	fa 01       	movw	r30, r20
    331c:	e2 58       	subi	r30, 0x82	; 130
    331e:	fa 4f       	sbci	r31, 0xFA	; 250
    3320:	22 95       	swap	r18
    3322:	20 7f       	andi	r18, 0xF0	; 240
    3324:	20 83       	st	Z, r18
						pass=1;
    3326:	21 e0       	ldi	r18, 0x01	; 1
				}
				break;
			}
		}

		if (++rd_index == MODB_MESSSIZE) rd_index=0;
    3328:	98 32       	cpi	r25, 0x28	; 40
    332a:	09 f4       	brne	.+2      	; 0x332e <getModbMsg+0xbc>
    332c:	90 e0       	ldi	r25, 0x00	; 0
		asm("cli");
    332e:	f8 94       	cli
		--rx_counter;
    3330:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <rx_counter>
    3334:	31 50       	subi	r19, 0x01	; 1
    3336:	30 93 30 01 	sts	0x0130, r19	; 0x800130 <rx_counter>
		asm("sei");
    333a:	78 94       	sei
	}
    333c:	b3 cf       	rjmp	.-154    	; 0x32a4 <getModbMsg+0x32>
	{
		MODB_timeout=val_timeout;
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    333e:	61 11       	cpse	r22, r1
    3340:	53 c0       	rjmp	.+166    	; 0x33e8 <getModbMsg+0x176>
    3342:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <rd_index>
		{
			if(flag_tout)															//таймаут в случае RTU -это конец сообщения.Проверяем CRC
			{
				unsigned int crc= modb_message[index-1] <<8 | modb_message[index-2];//полученная CRC
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	22 58       	subi	r18, 0x82	; 130
    334c:	3a 4f       	sbci	r19, 0xFA	; 250
    334e:	f9 01       	movw	r30, r18
    3350:	31 97       	sbiw	r30, 0x01	; 1
    3352:	00 81       	ld	r16, Z
    3354:	10 e0       	ldi	r17, 0x00	; 0
    3356:	10 2f       	mov	r17, r16
    3358:	00 27       	eor	r16, r16
    335a:	31 97       	sbiw	r30, 0x01	; 1
    335c:	90 81       	ld	r25, Z
    335e:	09 2b       	or	r16, r25
				if(crc !=CRC(modb_message,index-2))	{MODB_ERR=MODBXRC;return -1;}	//сравниваем с фактической
    3360:	ce ef       	ldi	r28, 0xFE	; 254
    3362:	c8 0f       	add	r28, r24
    3364:	8c 2f       	mov	r24, r28
    3366:	0e 94 27 18 	call	0x304e	; 0x304e <CRC.constprop.0>
    336a:	08 17       	cp	r16, r24
    336c:	19 07       	cpc	r17, r25
    336e:	11 f4       	brne	.+4      	; 0x3374 <getModbMsg+0x102>
				return index-2;														//длина сообщения минус 2 символа CRC
    3370:	8c 2f       	mov	r24, r28
    3372:	40 c0       	rjmp	.+128    	; 0x33f4 <getModbMsg+0x182>
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
					if(LRC(modb_message,index) !=0){MODB_ERR=MODBXRC;return -1;}	//для проверки ЛРЦ посылаем сообщение без ':' но с ЛРЦ
    3374:	85 e0       	ldi	r24, 0x05	; 5
    3376:	3b c0       	rjmp	.+118    	; 0x33ee <getModbMsg+0x17c>
					;
				}
				break;
				case(0x0D):															//конец сообщения. Проверяем LRC и вываливаемся
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
    3378:	98 32       	cpi	r25, 0x28	; 40
    337a:	19 f0       	breq	.+6      	; 0x3382 <getModbMsg+0x110>
    337c:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <rd_index>
    3380:	02 c0       	rjmp	.+4      	; 0x3386 <getModbMsg+0x114>
    3382:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <rd_index>
					asm("cli");
    3386:	f8 94       	cli
					--rx_counter;
    3388:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <rx_counter>
    338c:	91 50       	subi	r25, 0x01	; 1
    338e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <rx_counter>
					asm("sei");
    3392:	78 94       	sei
    3394:	28 2f       	mov	r18, r24
}

//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;
    3396:	90 e0       	ldi	r25, 0x00	; 0
				case(0x0D):															//конец сообщения. Проверяем LRC и вываливаемся
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
    3398:	ee e7       	ldi	r30, 0x7E	; 126
    339a:	f5 e0       	ldi	r31, 0x05	; 5
//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;

  while(lenght--) {lrc+=*data++;}
    339c:	21 50       	subi	r18, 0x01	; 1
    339e:	20 f0       	brcs	.+8      	; 0x33a8 <getModbMsg+0x136>
    33a0:	30 81       	ld	r19, Z
    33a2:	93 0f       	add	r25, r19
    33a4:	31 96       	adiw	r30, 0x01	; 1
    33a6:	fa cf       	rjmp	.-12     	; 0x339c <getModbMsg+0x12a>
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
					if(LRC(modb_message,index) !=0){MODB_ERR=MODBXRC;return -1;}	//для проверки ЛРЦ посылаем сообщение без ':' но с ЛРЦ
    33a8:	91 11       	cpse	r25, r1
    33aa:	e4 cf       	rjmp	.-56     	; 0x3374 <getModbMsg+0x102>
					return index-1;													// а возвращем длину без учета ЛРЦ
    33ac:	81 50       	subi	r24, 0x01	; 1
    33ae:	22 c0       	rjmp	.+68     	; 0x33f4 <getModbMsg+0x182>
//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
  if(sym>41) return sym-39;	/* a .. f */
  if(sym>9) return sym-7;   	/* A .. F */
    33b0:	3a 30       	cpi	r19, 0x0A	; 10
    33b2:	10 f0       	brcs	.+4      	; 0x33b8 <getModbMsg+0x146>
    33b4:	27 53       	subi	r18, 0x37	; 55
    33b6:	b1 cf       	rjmp	.-158    	; 0x331a <getModbMsg+0xa8>
    33b8:	23 2f       	mov	r18, r19
    33ba:	af cf       	rjmp	.-162    	; 0x331a <getModbMsg+0xa8>
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
						pass=1;
					}
					else															//второй проход- в буфер сообщения пишем вторую тетраду
					{
						modb_message[index++] |= char_to_dig(rx_buffer[rd_index]) & 0x0F;
    33bc:	20 81       	ld	r18, Z
}

//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
    33be:	30 ed       	ldi	r19, 0xD0	; 208
    33c0:	32 0f       	add	r19, r18
  if(sym>41) return sym-39;	/* a .. f */
    33c2:	3a 32       	cpi	r19, 0x2A	; 42
    33c4:	10 f0       	brcs	.+4      	; 0x33ca <getModbMsg+0x158>
    33c6:	27 55       	subi	r18, 0x57	; 87
    33c8:	05 c0       	rjmp	.+10     	; 0x33d4 <getModbMsg+0x162>
  if(sym>9) return sym-7;   	/* A .. F */
    33ca:	3a 30       	cpi	r19, 0x0A	; 10
    33cc:	10 f0       	brcs	.+4      	; 0x33d2 <getModbMsg+0x160>
    33ce:	27 53       	subi	r18, 0x37	; 55
    33d0:	01 c0       	rjmp	.+2      	; 0x33d4 <getModbMsg+0x162>
    33d2:	23 2f       	mov	r18, r19
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
						pass=1;
					}
					else															//второй проход- в буфер сообщения пишем вторую тетраду
					{
						modb_message[index++] |= char_to_dig(rx_buffer[rd_index]) & 0x0F;
    33d4:	fa 01       	movw	r30, r20
    33d6:	e2 58       	subi	r30, 0x82	; 130
    33d8:	fa 4f       	sbci	r31, 0xFA	; 250
    33da:	2f 70       	andi	r18, 0x0F	; 15
    33dc:	30 81       	ld	r19, Z
    33de:	23 2b       	or	r18, r19
    33e0:	20 83       	st	Z, r18
    33e2:	8f 5f       	subi	r24, 0xFF	; 255
						pass=0;
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	a0 cf       	rjmp	.-192    	; 0x3328 <getModbMsg+0xb6>
    33e8:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <rd_index>
		}

//////////////////////////////////если работаем в режиме ASCII
		else
		{
			if(flag_tout) {MODB_ERR=MODBTOUT;return -1;}							//таймаут в случае ASCII это ошибка
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <MODB_ERR>
    33f2:	8f ef       	ldi	r24, 0xFF	; 255
		asm("cli");
		--rx_counter;
		asm("sei");
	}
	return -1;	//что то ваще пошло не так
}
    33f4:	cf 91       	pop	r28
    33f6:	1f 91       	pop	r17
    33f8:	0f 91       	pop	r16
    33fa:	ff 90       	pop	r15
    33fc:	ef 90       	pop	r14
    33fe:	df 90       	pop	r13
    3400:	cf 90       	pop	r12
    3402:	bf 90       	pop	r11
    3404:	af 90       	pop	r10
    3406:	9f 90       	pop	r9
    3408:	8f 90       	pop	r8
    340a:	08 95       	ret

0000340c <__udivmodqi4>:
    340c:	99 1b       	sub	r25, r25
    340e:	79 e0       	ldi	r23, 0x09	; 9
    3410:	04 c0       	rjmp	.+8      	; 0x341a <__udivmodqi4_ep>

00003412 <__udivmodqi4_loop>:
    3412:	99 1f       	adc	r25, r25
    3414:	96 17       	cp	r25, r22
    3416:	08 f0       	brcs	.+2      	; 0x341a <__udivmodqi4_ep>
    3418:	96 1b       	sub	r25, r22

0000341a <__udivmodqi4_ep>:
    341a:	88 1f       	adc	r24, r24
    341c:	7a 95       	dec	r23
    341e:	c9 f7       	brne	.-14     	; 0x3412 <__udivmodqi4_loop>
    3420:	80 95       	com	r24
    3422:	08 95       	ret

00003424 <__divmodhi4>:
    3424:	97 fb       	bst	r25, 7
    3426:	07 2e       	mov	r0, r23
    3428:	16 f4       	brtc	.+4      	; 0x342e <__divmodhi4+0xa>
    342a:	00 94       	com	r0
    342c:	07 d0       	rcall	.+14     	; 0x343c <__divmodhi4_neg1>
    342e:	77 fd       	sbrc	r23, 7
    3430:	09 d0       	rcall	.+18     	; 0x3444 <__divmodhi4_neg2>
    3432:	0e 94 48 1a 	call	0x3490	; 0x3490 <__udivmodhi4>
    3436:	07 fc       	sbrc	r0, 7
    3438:	05 d0       	rcall	.+10     	; 0x3444 <__divmodhi4_neg2>
    343a:	3e f4       	brtc	.+14     	; 0x344a <__divmodhi4_exit>

0000343c <__divmodhi4_neg1>:
    343c:	90 95       	com	r25
    343e:	81 95       	neg	r24
    3440:	9f 4f       	sbci	r25, 0xFF	; 255
    3442:	08 95       	ret

00003444 <__divmodhi4_neg2>:
    3444:	70 95       	com	r23
    3446:	61 95       	neg	r22
    3448:	7f 4f       	sbci	r23, 0xFF	; 255

0000344a <__divmodhi4_exit>:
    344a:	08 95       	ret

0000344c <__udivmodsi4>:
    344c:	a1 e2       	ldi	r26, 0x21	; 33
    344e:	1a 2e       	mov	r1, r26
    3450:	aa 1b       	sub	r26, r26
    3452:	bb 1b       	sub	r27, r27
    3454:	fd 01       	movw	r30, r26
    3456:	0d c0       	rjmp	.+26     	; 0x3472 <__udivmodsi4_ep>

00003458 <__udivmodsi4_loop>:
    3458:	aa 1f       	adc	r26, r26
    345a:	bb 1f       	adc	r27, r27
    345c:	ee 1f       	adc	r30, r30
    345e:	ff 1f       	adc	r31, r31
    3460:	a2 17       	cp	r26, r18
    3462:	b3 07       	cpc	r27, r19
    3464:	e4 07       	cpc	r30, r20
    3466:	f5 07       	cpc	r31, r21
    3468:	20 f0       	brcs	.+8      	; 0x3472 <__udivmodsi4_ep>
    346a:	a2 1b       	sub	r26, r18
    346c:	b3 0b       	sbc	r27, r19
    346e:	e4 0b       	sbc	r30, r20
    3470:	f5 0b       	sbc	r31, r21

00003472 <__udivmodsi4_ep>:
    3472:	66 1f       	adc	r22, r22
    3474:	77 1f       	adc	r23, r23
    3476:	88 1f       	adc	r24, r24
    3478:	99 1f       	adc	r25, r25
    347a:	1a 94       	dec	r1
    347c:	69 f7       	brne	.-38     	; 0x3458 <__udivmodsi4_loop>
    347e:	60 95       	com	r22
    3480:	70 95       	com	r23
    3482:	80 95       	com	r24
    3484:	90 95       	com	r25
    3486:	9b 01       	movw	r18, r22
    3488:	ac 01       	movw	r20, r24
    348a:	bd 01       	movw	r22, r26
    348c:	cf 01       	movw	r24, r30
    348e:	08 95       	ret

00003490 <__udivmodhi4>:
    3490:	aa 1b       	sub	r26, r26
    3492:	bb 1b       	sub	r27, r27
    3494:	51 e1       	ldi	r21, 0x11	; 17
    3496:	07 c0       	rjmp	.+14     	; 0x34a6 <__udivmodhi4_ep>

00003498 <__udivmodhi4_loop>:
    3498:	aa 1f       	adc	r26, r26
    349a:	bb 1f       	adc	r27, r27
    349c:	a6 17       	cp	r26, r22
    349e:	b7 07       	cpc	r27, r23
    34a0:	10 f0       	brcs	.+4      	; 0x34a6 <__udivmodhi4_ep>
    34a2:	a6 1b       	sub	r26, r22
    34a4:	b7 0b       	sbc	r27, r23

000034a6 <__udivmodhi4_ep>:
    34a6:	88 1f       	adc	r24, r24
    34a8:	99 1f       	adc	r25, r25
    34aa:	5a 95       	dec	r21
    34ac:	a9 f7       	brne	.-22     	; 0x3498 <__udivmodhi4_loop>
    34ae:	80 95       	com	r24
    34b0:	90 95       	com	r25
    34b2:	bc 01       	movw	r22, r24
    34b4:	cd 01       	movw	r24, r26
    34b6:	08 95       	ret

000034b8 <strcat_P>:
    34b8:	fb 01       	movw	r30, r22
    34ba:	dc 01       	movw	r26, r24
    34bc:	0d 90       	ld	r0, X+
    34be:	00 20       	and	r0, r0
    34c0:	e9 f7       	brne	.-6      	; 0x34bc <strcat_P+0x4>
    34c2:	11 97       	sbiw	r26, 0x01	; 1
    34c4:	05 90       	lpm	r0, Z+
    34c6:	0d 92       	st	X+, r0
    34c8:	00 20       	and	r0, r0
    34ca:	e1 f7       	brne	.-8      	; 0x34c4 <strcat_P+0xc>
    34cc:	08 95       	ret

000034ce <strcpy_P>:
    34ce:	fb 01       	movw	r30, r22
    34d0:	dc 01       	movw	r26, r24
    34d2:	05 90       	lpm	r0, Z+
    34d4:	0d 92       	st	X+, r0
    34d6:	00 20       	and	r0, r0
    34d8:	e1 f7       	brne	.-8      	; 0x34d2 <strcpy_P+0x4>
    34da:	08 95       	ret

000034dc <__strlen_P>:
    34dc:	fc 01       	movw	r30, r24
    34de:	05 90       	lpm	r0, Z+
    34e0:	00 20       	and	r0, r0
    34e2:	e9 f7       	brne	.-6      	; 0x34de <__strlen_P+0x2>
    34e4:	80 95       	com	r24
    34e6:	90 95       	com	r25
    34e8:	8e 0f       	add	r24, r30
    34ea:	9f 1f       	adc	r25, r31
    34ec:	08 95       	ret

000034ee <strcat>:
    34ee:	fb 01       	movw	r30, r22
    34f0:	dc 01       	movw	r26, r24
    34f2:	0d 90       	ld	r0, X+
    34f4:	00 20       	and	r0, r0
    34f6:	e9 f7       	brne	.-6      	; 0x34f2 <strcat+0x4>
    34f8:	11 97       	sbiw	r26, 0x01	; 1
    34fa:	01 90       	ld	r0, Z+
    34fc:	0d 92       	st	X+, r0
    34fe:	00 20       	and	r0, r0
    3500:	e1 f7       	brne	.-8      	; 0x34fa <strcat+0xc>
    3502:	08 95       	ret

00003504 <__itoa_ncheck>:
    3504:	bb 27       	eor	r27, r27
    3506:	4a 30       	cpi	r20, 0x0A	; 10
    3508:	31 f4       	brne	.+12     	; 0x3516 <__itoa_ncheck+0x12>
    350a:	99 23       	and	r25, r25
    350c:	22 f4       	brpl	.+8      	; 0x3516 <__itoa_ncheck+0x12>
    350e:	bd e2       	ldi	r27, 0x2D	; 45
    3510:	90 95       	com	r25
    3512:	81 95       	neg	r24
    3514:	9f 4f       	sbci	r25, 0xFF	; 255
    3516:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__utoa_common>

0000351a <__ltoa_ncheck>:
    351a:	bb 27       	eor	r27, r27
    351c:	2a 30       	cpi	r18, 0x0A	; 10
    351e:	51 f4       	brne	.+20     	; 0x3534 <__ltoa_ncheck+0x1a>
    3520:	99 23       	and	r25, r25
    3522:	42 f4       	brpl	.+16     	; 0x3534 <__ltoa_ncheck+0x1a>
    3524:	bd e2       	ldi	r27, 0x2D	; 45
    3526:	90 95       	com	r25
    3528:	80 95       	com	r24
    352a:	70 95       	com	r23
    352c:	61 95       	neg	r22
    352e:	7f 4f       	sbci	r23, 0xFF	; 255
    3530:	8f 4f       	sbci	r24, 0xFF	; 255
    3532:	9f 4f       	sbci	r25, 0xFF	; 255
    3534:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__ultoa_common>

00003538 <__ultoa_ncheck>:
    3538:	bb 27       	eor	r27, r27

0000353a <__ultoa_common>:
    353a:	fa 01       	movw	r30, r20
    353c:	a6 2f       	mov	r26, r22
    353e:	62 17       	cp	r22, r18
    3540:	71 05       	cpc	r23, r1
    3542:	81 05       	cpc	r24, r1
    3544:	91 05       	cpc	r25, r1
    3546:	33 0b       	sbc	r19, r19
    3548:	30 fb       	bst	r19, 0
    354a:	66 f0       	brts	.+24     	; 0x3564 <__ultoa_common+0x2a>
    354c:	aa 27       	eor	r26, r26
    354e:	66 0f       	add	r22, r22
    3550:	77 1f       	adc	r23, r23
    3552:	88 1f       	adc	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	aa 1f       	adc	r26, r26
    3558:	a2 17       	cp	r26, r18
    355a:	10 f0       	brcs	.+4      	; 0x3560 <__ultoa_common+0x26>
    355c:	a2 1b       	sub	r26, r18
    355e:	63 95       	inc	r22
    3560:	38 50       	subi	r19, 0x08	; 8
    3562:	a9 f7       	brne	.-22     	; 0x354e <__ultoa_common+0x14>
    3564:	a0 5d       	subi	r26, 0xD0	; 208
    3566:	aa 33       	cpi	r26, 0x3A	; 58
    3568:	08 f0       	brcs	.+2      	; 0x356c <__ultoa_common+0x32>
    356a:	a9 5d       	subi	r26, 0xD9	; 217
    356c:	a1 93       	st	Z+, r26
    356e:	36 f7       	brtc	.-52     	; 0x353c <__ultoa_common+0x2>
    3570:	b1 11       	cpse	r27, r1
    3572:	b1 93       	st	Z+, r27
    3574:	10 82       	st	Z, r1
    3576:	ca 01       	movw	r24, r20
    3578:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <strrev>

0000357c <__utoa_ncheck>:
    357c:	bb 27       	eor	r27, r27

0000357e <__utoa_common>:
    357e:	fb 01       	movw	r30, r22
    3580:	55 27       	eor	r21, r21
    3582:	aa 27       	eor	r26, r26
    3584:	88 0f       	add	r24, r24
    3586:	99 1f       	adc	r25, r25
    3588:	aa 1f       	adc	r26, r26
    358a:	a4 17       	cp	r26, r20
    358c:	10 f0       	brcs	.+4      	; 0x3592 <__utoa_common+0x14>
    358e:	a4 1b       	sub	r26, r20
    3590:	83 95       	inc	r24
    3592:	50 51       	subi	r21, 0x10	; 16
    3594:	b9 f7       	brne	.-18     	; 0x3584 <__utoa_common+0x6>
    3596:	a0 5d       	subi	r26, 0xD0	; 208
    3598:	aa 33       	cpi	r26, 0x3A	; 58
    359a:	08 f0       	brcs	.+2      	; 0x359e <__utoa_common+0x20>
    359c:	a9 5d       	subi	r26, 0xD9	; 217
    359e:	a1 93       	st	Z+, r26
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	79 f7       	brne	.-34     	; 0x3582 <__utoa_common+0x4>
    35a4:	b1 11       	cpse	r27, r1
    35a6:	b1 93       	st	Z+, r27
    35a8:	11 92       	st	Z+, r1
    35aa:	cb 01       	movw	r24, r22
    35ac:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <strrev>

000035b0 <sprintf>:
    35b0:	ae e0       	ldi	r26, 0x0E	; 14
    35b2:	b0 e0       	ldi	r27, 0x00	; 0
    35b4:	ee ed       	ldi	r30, 0xDE	; 222
    35b6:	fa e1       	ldi	r31, 0x1A	; 26
    35b8:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <__prologue_saves__+0x1c>
    35bc:	0d 89       	ldd	r16, Y+21	; 0x15
    35be:	1e 89       	ldd	r17, Y+22	; 0x16
    35c0:	86 e0       	ldi	r24, 0x06	; 6
    35c2:	8c 83       	std	Y+4, r24	; 0x04
    35c4:	1a 83       	std	Y+2, r17	; 0x02
    35c6:	09 83       	std	Y+1, r16	; 0x01
    35c8:	8f ef       	ldi	r24, 0xFF	; 255
    35ca:	9f e7       	ldi	r25, 0x7F	; 127
    35cc:	9e 83       	std	Y+6, r25	; 0x06
    35ce:	8d 83       	std	Y+5, r24	; 0x05
    35d0:	ae 01       	movw	r20, r28
    35d2:	47 5e       	subi	r20, 0xE7	; 231
    35d4:	5f 4f       	sbci	r21, 0xFF	; 255
    35d6:	6f 89       	ldd	r22, Y+23	; 0x17
    35d8:	78 8d       	ldd	r23, Y+24	; 0x18
    35da:	ce 01       	movw	r24, r28
    35dc:	01 96       	adiw	r24, 0x01	; 1
    35de:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <vfprintf>
    35e2:	ef 81       	ldd	r30, Y+7	; 0x07
    35e4:	f8 85       	ldd	r31, Y+8	; 0x08
    35e6:	e0 0f       	add	r30, r16
    35e8:	f1 1f       	adc	r31, r17
    35ea:	10 82       	st	Z, r1
    35ec:	2e 96       	adiw	r28, 0x0e	; 14
    35ee:	e4 e0       	ldi	r30, 0x04	; 4
    35f0:	0c 94 03 1e 	jmp	0x3c06	; 0x3c06 <__epilogue_restores__+0x1c>

000035f4 <vfprintf>:
    35f4:	ab e0       	ldi	r26, 0x0B	; 11
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
    35f8:	e0 e0       	ldi	r30, 0x00	; 0
    35fa:	fb e1       	ldi	r31, 0x1B	; 27
    35fc:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__prologue_saves__>
    3600:	6c 01       	movw	r12, r24
    3602:	7b 01       	movw	r14, r22
    3604:	8a 01       	movw	r16, r20
    3606:	fc 01       	movw	r30, r24
    3608:	17 82       	std	Z+7, r1	; 0x07
    360a:	16 82       	std	Z+6, r1	; 0x06
    360c:	83 81       	ldd	r24, Z+3	; 0x03
    360e:	81 ff       	sbrs	r24, 1
    3610:	cc c1       	rjmp	.+920    	; 0x39aa <vfprintf+0x3b6>
    3612:	ce 01       	movw	r24, r28
    3614:	01 96       	adiw	r24, 0x01	; 1
    3616:	3c 01       	movw	r6, r24
    3618:	f6 01       	movw	r30, r12
    361a:	93 81       	ldd	r25, Z+3	; 0x03
    361c:	f7 01       	movw	r30, r14
    361e:	93 fd       	sbrc	r25, 3
    3620:	85 91       	lpm	r24, Z+
    3622:	93 ff       	sbrs	r25, 3
    3624:	81 91       	ld	r24, Z+
    3626:	7f 01       	movw	r14, r30
    3628:	88 23       	and	r24, r24
    362a:	09 f4       	brne	.+2      	; 0x362e <vfprintf+0x3a>
    362c:	ba c1       	rjmp	.+884    	; 0x39a2 <vfprintf+0x3ae>
    362e:	85 32       	cpi	r24, 0x25	; 37
    3630:	39 f4       	brne	.+14     	; 0x3640 <vfprintf+0x4c>
    3632:	93 fd       	sbrc	r25, 3
    3634:	85 91       	lpm	r24, Z+
    3636:	93 ff       	sbrs	r25, 3
    3638:	81 91       	ld	r24, Z+
    363a:	7f 01       	movw	r14, r30
    363c:	85 32       	cpi	r24, 0x25	; 37
    363e:	29 f4       	brne	.+10     	; 0x364a <vfprintf+0x56>
    3640:	b6 01       	movw	r22, r12
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <fputc>
    3648:	e7 cf       	rjmp	.-50     	; 0x3618 <vfprintf+0x24>
    364a:	91 2c       	mov	r9, r1
    364c:	21 2c       	mov	r2, r1
    364e:	31 2c       	mov	r3, r1
    3650:	ff e1       	ldi	r31, 0x1F	; 31
    3652:	f3 15       	cp	r31, r3
    3654:	d8 f0       	brcs	.+54     	; 0x368c <vfprintf+0x98>
    3656:	8b 32       	cpi	r24, 0x2B	; 43
    3658:	79 f0       	breq	.+30     	; 0x3678 <vfprintf+0x84>
    365a:	38 f4       	brcc	.+14     	; 0x366a <vfprintf+0x76>
    365c:	80 32       	cpi	r24, 0x20	; 32
    365e:	79 f0       	breq	.+30     	; 0x367e <vfprintf+0x8a>
    3660:	83 32       	cpi	r24, 0x23	; 35
    3662:	a1 f4       	brne	.+40     	; 0x368c <vfprintf+0x98>
    3664:	23 2d       	mov	r18, r3
    3666:	20 61       	ori	r18, 0x10	; 16
    3668:	1d c0       	rjmp	.+58     	; 0x36a4 <vfprintf+0xb0>
    366a:	8d 32       	cpi	r24, 0x2D	; 45
    366c:	61 f0       	breq	.+24     	; 0x3686 <vfprintf+0x92>
    366e:	80 33       	cpi	r24, 0x30	; 48
    3670:	69 f4       	brne	.+26     	; 0x368c <vfprintf+0x98>
    3672:	23 2d       	mov	r18, r3
    3674:	21 60       	ori	r18, 0x01	; 1
    3676:	16 c0       	rjmp	.+44     	; 0x36a4 <vfprintf+0xb0>
    3678:	83 2d       	mov	r24, r3
    367a:	82 60       	ori	r24, 0x02	; 2
    367c:	38 2e       	mov	r3, r24
    367e:	e3 2d       	mov	r30, r3
    3680:	e4 60       	ori	r30, 0x04	; 4
    3682:	3e 2e       	mov	r3, r30
    3684:	2a c0       	rjmp	.+84     	; 0x36da <vfprintf+0xe6>
    3686:	f3 2d       	mov	r31, r3
    3688:	f8 60       	ori	r31, 0x08	; 8
    368a:	1d c0       	rjmp	.+58     	; 0x36c6 <vfprintf+0xd2>
    368c:	37 fc       	sbrc	r3, 7
    368e:	2d c0       	rjmp	.+90     	; 0x36ea <vfprintf+0xf6>
    3690:	20 ed       	ldi	r18, 0xD0	; 208
    3692:	28 0f       	add	r18, r24
    3694:	2a 30       	cpi	r18, 0x0A	; 10
    3696:	40 f0       	brcs	.+16     	; 0x36a8 <vfprintf+0xb4>
    3698:	8e 32       	cpi	r24, 0x2E	; 46
    369a:	b9 f4       	brne	.+46     	; 0x36ca <vfprintf+0xd6>
    369c:	36 fc       	sbrc	r3, 6
    369e:	81 c1       	rjmp	.+770    	; 0x39a2 <vfprintf+0x3ae>
    36a0:	23 2d       	mov	r18, r3
    36a2:	20 64       	ori	r18, 0x40	; 64
    36a4:	32 2e       	mov	r3, r18
    36a6:	19 c0       	rjmp	.+50     	; 0x36da <vfprintf+0xe6>
    36a8:	36 fe       	sbrs	r3, 6
    36aa:	06 c0       	rjmp	.+12     	; 0x36b8 <vfprintf+0xc4>
    36ac:	8a e0       	ldi	r24, 0x0A	; 10
    36ae:	98 9e       	mul	r9, r24
    36b0:	20 0d       	add	r18, r0
    36b2:	11 24       	eor	r1, r1
    36b4:	92 2e       	mov	r9, r18
    36b6:	11 c0       	rjmp	.+34     	; 0x36da <vfprintf+0xe6>
    36b8:	ea e0       	ldi	r30, 0x0A	; 10
    36ba:	2e 9e       	mul	r2, r30
    36bc:	20 0d       	add	r18, r0
    36be:	11 24       	eor	r1, r1
    36c0:	22 2e       	mov	r2, r18
    36c2:	f3 2d       	mov	r31, r3
    36c4:	f0 62       	ori	r31, 0x20	; 32
    36c6:	3f 2e       	mov	r3, r31
    36c8:	08 c0       	rjmp	.+16     	; 0x36da <vfprintf+0xe6>
    36ca:	8c 36       	cpi	r24, 0x6C	; 108
    36cc:	21 f4       	brne	.+8      	; 0x36d6 <vfprintf+0xe2>
    36ce:	83 2d       	mov	r24, r3
    36d0:	80 68       	ori	r24, 0x80	; 128
    36d2:	38 2e       	mov	r3, r24
    36d4:	02 c0       	rjmp	.+4      	; 0x36da <vfprintf+0xe6>
    36d6:	88 36       	cpi	r24, 0x68	; 104
    36d8:	41 f4       	brne	.+16     	; 0x36ea <vfprintf+0xf6>
    36da:	f7 01       	movw	r30, r14
    36dc:	93 fd       	sbrc	r25, 3
    36de:	85 91       	lpm	r24, Z+
    36e0:	93 ff       	sbrs	r25, 3
    36e2:	81 91       	ld	r24, Z+
    36e4:	7f 01       	movw	r14, r30
    36e6:	81 11       	cpse	r24, r1
    36e8:	b3 cf       	rjmp	.-154    	; 0x3650 <vfprintf+0x5c>
    36ea:	98 2f       	mov	r25, r24
    36ec:	9f 7d       	andi	r25, 0xDF	; 223
    36ee:	95 54       	subi	r25, 0x45	; 69
    36f0:	93 30       	cpi	r25, 0x03	; 3
    36f2:	28 f4       	brcc	.+10     	; 0x36fe <vfprintf+0x10a>
    36f4:	0c 5f       	subi	r16, 0xFC	; 252
    36f6:	1f 4f       	sbci	r17, 0xFF	; 255
    36f8:	9f e3       	ldi	r25, 0x3F	; 63
    36fa:	99 83       	std	Y+1, r25	; 0x01
    36fc:	0d c0       	rjmp	.+26     	; 0x3718 <vfprintf+0x124>
    36fe:	83 36       	cpi	r24, 0x63	; 99
    3700:	31 f0       	breq	.+12     	; 0x370e <vfprintf+0x11a>
    3702:	83 37       	cpi	r24, 0x73	; 115
    3704:	71 f0       	breq	.+28     	; 0x3722 <vfprintf+0x12e>
    3706:	83 35       	cpi	r24, 0x53	; 83
    3708:	09 f0       	breq	.+2      	; 0x370c <vfprintf+0x118>
    370a:	59 c0       	rjmp	.+178    	; 0x37be <vfprintf+0x1ca>
    370c:	21 c0       	rjmp	.+66     	; 0x3750 <vfprintf+0x15c>
    370e:	f8 01       	movw	r30, r16
    3710:	80 81       	ld	r24, Z
    3712:	89 83       	std	Y+1, r24	; 0x01
    3714:	0e 5f       	subi	r16, 0xFE	; 254
    3716:	1f 4f       	sbci	r17, 0xFF	; 255
    3718:	88 24       	eor	r8, r8
    371a:	83 94       	inc	r8
    371c:	91 2c       	mov	r9, r1
    371e:	53 01       	movw	r10, r6
    3720:	13 c0       	rjmp	.+38     	; 0x3748 <vfprintf+0x154>
    3722:	28 01       	movw	r4, r16
    3724:	f2 e0       	ldi	r31, 0x02	; 2
    3726:	4f 0e       	add	r4, r31
    3728:	51 1c       	adc	r5, r1
    372a:	f8 01       	movw	r30, r16
    372c:	a0 80       	ld	r10, Z
    372e:	b1 80       	ldd	r11, Z+1	; 0x01
    3730:	36 fe       	sbrs	r3, 6
    3732:	03 c0       	rjmp	.+6      	; 0x373a <vfprintf+0x146>
    3734:	69 2d       	mov	r22, r9
    3736:	70 e0       	ldi	r23, 0x00	; 0
    3738:	02 c0       	rjmp	.+4      	; 0x373e <vfprintf+0x14a>
    373a:	6f ef       	ldi	r22, 0xFF	; 255
    373c:	7f ef       	ldi	r23, 0xFF	; 255
    373e:	c5 01       	movw	r24, r10
    3740:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <strnlen>
    3744:	4c 01       	movw	r8, r24
    3746:	82 01       	movw	r16, r4
    3748:	f3 2d       	mov	r31, r3
    374a:	ff 77       	andi	r31, 0x7F	; 127
    374c:	3f 2e       	mov	r3, r31
    374e:	16 c0       	rjmp	.+44     	; 0x377c <vfprintf+0x188>
    3750:	28 01       	movw	r4, r16
    3752:	22 e0       	ldi	r18, 0x02	; 2
    3754:	42 0e       	add	r4, r18
    3756:	51 1c       	adc	r5, r1
    3758:	f8 01       	movw	r30, r16
    375a:	a0 80       	ld	r10, Z
    375c:	b1 80       	ldd	r11, Z+1	; 0x01
    375e:	36 fe       	sbrs	r3, 6
    3760:	03 c0       	rjmp	.+6      	; 0x3768 <vfprintf+0x174>
    3762:	69 2d       	mov	r22, r9
    3764:	70 e0       	ldi	r23, 0x00	; 0
    3766:	02 c0       	rjmp	.+4      	; 0x376c <vfprintf+0x178>
    3768:	6f ef       	ldi	r22, 0xFF	; 255
    376a:	7f ef       	ldi	r23, 0xFF	; 255
    376c:	c5 01       	movw	r24, r10
    376e:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <strnlen_P>
    3772:	4c 01       	movw	r8, r24
    3774:	f3 2d       	mov	r31, r3
    3776:	f0 68       	ori	r31, 0x80	; 128
    3778:	3f 2e       	mov	r3, r31
    377a:	82 01       	movw	r16, r4
    377c:	33 fc       	sbrc	r3, 3
    377e:	1b c0       	rjmp	.+54     	; 0x37b6 <vfprintf+0x1c2>
    3780:	82 2d       	mov	r24, r2
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	88 16       	cp	r8, r24
    3786:	99 06       	cpc	r9, r25
    3788:	b0 f4       	brcc	.+44     	; 0x37b6 <vfprintf+0x1c2>
    378a:	b6 01       	movw	r22, r12
    378c:	80 e2       	ldi	r24, 0x20	; 32
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <fputc>
    3794:	2a 94       	dec	r2
    3796:	f4 cf       	rjmp	.-24     	; 0x3780 <vfprintf+0x18c>
    3798:	f5 01       	movw	r30, r10
    379a:	37 fc       	sbrc	r3, 7
    379c:	85 91       	lpm	r24, Z+
    379e:	37 fe       	sbrs	r3, 7
    37a0:	81 91       	ld	r24, Z+
    37a2:	5f 01       	movw	r10, r30
    37a4:	b6 01       	movw	r22, r12
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <fputc>
    37ac:	21 10       	cpse	r2, r1
    37ae:	2a 94       	dec	r2
    37b0:	21 e0       	ldi	r18, 0x01	; 1
    37b2:	82 1a       	sub	r8, r18
    37b4:	91 08       	sbc	r9, r1
    37b6:	81 14       	cp	r8, r1
    37b8:	91 04       	cpc	r9, r1
    37ba:	71 f7       	brne	.-36     	; 0x3798 <vfprintf+0x1a4>
    37bc:	e8 c0       	rjmp	.+464    	; 0x398e <vfprintf+0x39a>
    37be:	84 36       	cpi	r24, 0x64	; 100
    37c0:	11 f0       	breq	.+4      	; 0x37c6 <vfprintf+0x1d2>
    37c2:	89 36       	cpi	r24, 0x69	; 105
    37c4:	41 f5       	brne	.+80     	; 0x3816 <vfprintf+0x222>
    37c6:	f8 01       	movw	r30, r16
    37c8:	37 fe       	sbrs	r3, 7
    37ca:	07 c0       	rjmp	.+14     	; 0x37da <vfprintf+0x1e6>
    37cc:	60 81       	ld	r22, Z
    37ce:	71 81       	ldd	r23, Z+1	; 0x01
    37d0:	82 81       	ldd	r24, Z+2	; 0x02
    37d2:	93 81       	ldd	r25, Z+3	; 0x03
    37d4:	0c 5f       	subi	r16, 0xFC	; 252
    37d6:	1f 4f       	sbci	r17, 0xFF	; 255
    37d8:	08 c0       	rjmp	.+16     	; 0x37ea <vfprintf+0x1f6>
    37da:	60 81       	ld	r22, Z
    37dc:	71 81       	ldd	r23, Z+1	; 0x01
    37de:	07 2e       	mov	r0, r23
    37e0:	00 0c       	add	r0, r0
    37e2:	88 0b       	sbc	r24, r24
    37e4:	99 0b       	sbc	r25, r25
    37e6:	0e 5f       	subi	r16, 0xFE	; 254
    37e8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ea:	f3 2d       	mov	r31, r3
    37ec:	ff 76       	andi	r31, 0x6F	; 111
    37ee:	3f 2e       	mov	r3, r31
    37f0:	97 ff       	sbrs	r25, 7
    37f2:	09 c0       	rjmp	.+18     	; 0x3806 <vfprintf+0x212>
    37f4:	90 95       	com	r25
    37f6:	80 95       	com	r24
    37f8:	70 95       	com	r23
    37fa:	61 95       	neg	r22
    37fc:	7f 4f       	sbci	r23, 0xFF	; 255
    37fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3800:	9f 4f       	sbci	r25, 0xFF	; 255
    3802:	f0 68       	ori	r31, 0x80	; 128
    3804:	3f 2e       	mov	r3, r31
    3806:	2a e0       	ldi	r18, 0x0A	; 10
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	a3 01       	movw	r20, r6
    380c:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__ultoa_invert>
    3810:	88 2e       	mov	r8, r24
    3812:	86 18       	sub	r8, r6
    3814:	45 c0       	rjmp	.+138    	; 0x38a0 <vfprintf+0x2ac>
    3816:	85 37       	cpi	r24, 0x75	; 117
    3818:	31 f4       	brne	.+12     	; 0x3826 <vfprintf+0x232>
    381a:	23 2d       	mov	r18, r3
    381c:	2f 7e       	andi	r18, 0xEF	; 239
    381e:	b2 2e       	mov	r11, r18
    3820:	2a e0       	ldi	r18, 0x0A	; 10
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	25 c0       	rjmp	.+74     	; 0x3870 <vfprintf+0x27c>
    3826:	93 2d       	mov	r25, r3
    3828:	99 7f       	andi	r25, 0xF9	; 249
    382a:	b9 2e       	mov	r11, r25
    382c:	8f 36       	cpi	r24, 0x6F	; 111
    382e:	c1 f0       	breq	.+48     	; 0x3860 <vfprintf+0x26c>
    3830:	18 f4       	brcc	.+6      	; 0x3838 <vfprintf+0x244>
    3832:	88 35       	cpi	r24, 0x58	; 88
    3834:	79 f0       	breq	.+30     	; 0x3854 <vfprintf+0x260>
    3836:	b5 c0       	rjmp	.+362    	; 0x39a2 <vfprintf+0x3ae>
    3838:	80 37       	cpi	r24, 0x70	; 112
    383a:	19 f0       	breq	.+6      	; 0x3842 <vfprintf+0x24e>
    383c:	88 37       	cpi	r24, 0x78	; 120
    383e:	21 f0       	breq	.+8      	; 0x3848 <vfprintf+0x254>
    3840:	b0 c0       	rjmp	.+352    	; 0x39a2 <vfprintf+0x3ae>
    3842:	e9 2f       	mov	r30, r25
    3844:	e0 61       	ori	r30, 0x10	; 16
    3846:	be 2e       	mov	r11, r30
    3848:	b4 fe       	sbrs	r11, 4
    384a:	0d c0       	rjmp	.+26     	; 0x3866 <vfprintf+0x272>
    384c:	fb 2d       	mov	r31, r11
    384e:	f4 60       	ori	r31, 0x04	; 4
    3850:	bf 2e       	mov	r11, r31
    3852:	09 c0       	rjmp	.+18     	; 0x3866 <vfprintf+0x272>
    3854:	34 fe       	sbrs	r3, 4
    3856:	0a c0       	rjmp	.+20     	; 0x386c <vfprintf+0x278>
    3858:	29 2f       	mov	r18, r25
    385a:	26 60       	ori	r18, 0x06	; 6
    385c:	b2 2e       	mov	r11, r18
    385e:	06 c0       	rjmp	.+12     	; 0x386c <vfprintf+0x278>
    3860:	28 e0       	ldi	r18, 0x08	; 8
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	05 c0       	rjmp	.+10     	; 0x3870 <vfprintf+0x27c>
    3866:	20 e1       	ldi	r18, 0x10	; 16
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <vfprintf+0x27c>
    386c:	20 e1       	ldi	r18, 0x10	; 16
    386e:	32 e0       	ldi	r19, 0x02	; 2
    3870:	f8 01       	movw	r30, r16
    3872:	b7 fe       	sbrs	r11, 7
    3874:	07 c0       	rjmp	.+14     	; 0x3884 <vfprintf+0x290>
    3876:	60 81       	ld	r22, Z
    3878:	71 81       	ldd	r23, Z+1	; 0x01
    387a:	82 81       	ldd	r24, Z+2	; 0x02
    387c:	93 81       	ldd	r25, Z+3	; 0x03
    387e:	0c 5f       	subi	r16, 0xFC	; 252
    3880:	1f 4f       	sbci	r17, 0xFF	; 255
    3882:	06 c0       	rjmp	.+12     	; 0x3890 <vfprintf+0x29c>
    3884:	60 81       	ld	r22, Z
    3886:	71 81       	ldd	r23, Z+1	; 0x01
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	0e 5f       	subi	r16, 0xFE	; 254
    388e:	1f 4f       	sbci	r17, 0xFF	; 255
    3890:	a3 01       	movw	r20, r6
    3892:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__ultoa_invert>
    3896:	88 2e       	mov	r8, r24
    3898:	86 18       	sub	r8, r6
    389a:	fb 2d       	mov	r31, r11
    389c:	ff 77       	andi	r31, 0x7F	; 127
    389e:	3f 2e       	mov	r3, r31
    38a0:	36 fe       	sbrs	r3, 6
    38a2:	0d c0       	rjmp	.+26     	; 0x38be <vfprintf+0x2ca>
    38a4:	23 2d       	mov	r18, r3
    38a6:	2e 7f       	andi	r18, 0xFE	; 254
    38a8:	a2 2e       	mov	r10, r18
    38aa:	89 14       	cp	r8, r9
    38ac:	58 f4       	brcc	.+22     	; 0x38c4 <vfprintf+0x2d0>
    38ae:	34 fe       	sbrs	r3, 4
    38b0:	0b c0       	rjmp	.+22     	; 0x38c8 <vfprintf+0x2d4>
    38b2:	32 fc       	sbrc	r3, 2
    38b4:	09 c0       	rjmp	.+18     	; 0x38c8 <vfprintf+0x2d4>
    38b6:	83 2d       	mov	r24, r3
    38b8:	8e 7e       	andi	r24, 0xEE	; 238
    38ba:	a8 2e       	mov	r10, r24
    38bc:	05 c0       	rjmp	.+10     	; 0x38c8 <vfprintf+0x2d4>
    38be:	b8 2c       	mov	r11, r8
    38c0:	a3 2c       	mov	r10, r3
    38c2:	03 c0       	rjmp	.+6      	; 0x38ca <vfprintf+0x2d6>
    38c4:	b8 2c       	mov	r11, r8
    38c6:	01 c0       	rjmp	.+2      	; 0x38ca <vfprintf+0x2d6>
    38c8:	b9 2c       	mov	r11, r9
    38ca:	a4 fe       	sbrs	r10, 4
    38cc:	0f c0       	rjmp	.+30     	; 0x38ec <vfprintf+0x2f8>
    38ce:	fe 01       	movw	r30, r28
    38d0:	e8 0d       	add	r30, r8
    38d2:	f1 1d       	adc	r31, r1
    38d4:	80 81       	ld	r24, Z
    38d6:	80 33       	cpi	r24, 0x30	; 48
    38d8:	21 f4       	brne	.+8      	; 0x38e2 <vfprintf+0x2ee>
    38da:	9a 2d       	mov	r25, r10
    38dc:	99 7e       	andi	r25, 0xE9	; 233
    38de:	a9 2e       	mov	r10, r25
    38e0:	09 c0       	rjmp	.+18     	; 0x38f4 <vfprintf+0x300>
    38e2:	a2 fe       	sbrs	r10, 2
    38e4:	06 c0       	rjmp	.+12     	; 0x38f2 <vfprintf+0x2fe>
    38e6:	b3 94       	inc	r11
    38e8:	b3 94       	inc	r11
    38ea:	04 c0       	rjmp	.+8      	; 0x38f4 <vfprintf+0x300>
    38ec:	8a 2d       	mov	r24, r10
    38ee:	86 78       	andi	r24, 0x86	; 134
    38f0:	09 f0       	breq	.+2      	; 0x38f4 <vfprintf+0x300>
    38f2:	b3 94       	inc	r11
    38f4:	a3 fc       	sbrc	r10, 3
    38f6:	11 c0       	rjmp	.+34     	; 0x391a <vfprintf+0x326>
    38f8:	a0 fe       	sbrs	r10, 0
    38fa:	06 c0       	rjmp	.+12     	; 0x3908 <vfprintf+0x314>
    38fc:	b2 14       	cp	r11, r2
    38fe:	88 f4       	brcc	.+34     	; 0x3922 <vfprintf+0x32e>
    3900:	28 0c       	add	r2, r8
    3902:	92 2c       	mov	r9, r2
    3904:	9b 18       	sub	r9, r11
    3906:	0e c0       	rjmp	.+28     	; 0x3924 <vfprintf+0x330>
    3908:	b2 14       	cp	r11, r2
    390a:	60 f4       	brcc	.+24     	; 0x3924 <vfprintf+0x330>
    390c:	b6 01       	movw	r22, r12
    390e:	80 e2       	ldi	r24, 0x20	; 32
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <fputc>
    3916:	b3 94       	inc	r11
    3918:	f7 cf       	rjmp	.-18     	; 0x3908 <vfprintf+0x314>
    391a:	b2 14       	cp	r11, r2
    391c:	18 f4       	brcc	.+6      	; 0x3924 <vfprintf+0x330>
    391e:	2b 18       	sub	r2, r11
    3920:	02 c0       	rjmp	.+4      	; 0x3926 <vfprintf+0x332>
    3922:	98 2c       	mov	r9, r8
    3924:	21 2c       	mov	r2, r1
    3926:	a4 fe       	sbrs	r10, 4
    3928:	10 c0       	rjmp	.+32     	; 0x394a <vfprintf+0x356>
    392a:	b6 01       	movw	r22, r12
    392c:	80 e3       	ldi	r24, 0x30	; 48
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <fputc>
    3934:	a2 fe       	sbrs	r10, 2
    3936:	17 c0       	rjmp	.+46     	; 0x3966 <vfprintf+0x372>
    3938:	a1 fc       	sbrc	r10, 1
    393a:	03 c0       	rjmp	.+6      	; 0x3942 <vfprintf+0x34e>
    393c:	88 e7       	ldi	r24, 0x78	; 120
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	02 c0       	rjmp	.+4      	; 0x3946 <vfprintf+0x352>
    3942:	88 e5       	ldi	r24, 0x58	; 88
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	b6 01       	movw	r22, r12
    3948:	0c c0       	rjmp	.+24     	; 0x3962 <vfprintf+0x36e>
    394a:	8a 2d       	mov	r24, r10
    394c:	86 78       	andi	r24, 0x86	; 134
    394e:	59 f0       	breq	.+22     	; 0x3966 <vfprintf+0x372>
    3950:	a1 fe       	sbrs	r10, 1
    3952:	02 c0       	rjmp	.+4      	; 0x3958 <vfprintf+0x364>
    3954:	8b e2       	ldi	r24, 0x2B	; 43
    3956:	01 c0       	rjmp	.+2      	; 0x395a <vfprintf+0x366>
    3958:	80 e2       	ldi	r24, 0x20	; 32
    395a:	a7 fc       	sbrc	r10, 7
    395c:	8d e2       	ldi	r24, 0x2D	; 45
    395e:	b6 01       	movw	r22, r12
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <fputc>
    3966:	89 14       	cp	r8, r9
    3968:	38 f4       	brcc	.+14     	; 0x3978 <vfprintf+0x384>
    396a:	b6 01       	movw	r22, r12
    396c:	80 e3       	ldi	r24, 0x30	; 48
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <fputc>
    3974:	9a 94       	dec	r9
    3976:	f7 cf       	rjmp	.-18     	; 0x3966 <vfprintf+0x372>
    3978:	8a 94       	dec	r8
    397a:	f3 01       	movw	r30, r6
    397c:	e8 0d       	add	r30, r8
    397e:	f1 1d       	adc	r31, r1
    3980:	80 81       	ld	r24, Z
    3982:	b6 01       	movw	r22, r12
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <fputc>
    398a:	81 10       	cpse	r8, r1
    398c:	f5 cf       	rjmp	.-22     	; 0x3978 <vfprintf+0x384>
    398e:	22 20       	and	r2, r2
    3990:	09 f4       	brne	.+2      	; 0x3994 <vfprintf+0x3a0>
    3992:	42 ce       	rjmp	.-892    	; 0x3618 <vfprintf+0x24>
    3994:	b6 01       	movw	r22, r12
    3996:	80 e2       	ldi	r24, 0x20	; 32
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <fputc>
    399e:	2a 94       	dec	r2
    39a0:	f6 cf       	rjmp	.-20     	; 0x398e <vfprintf+0x39a>
    39a2:	f6 01       	movw	r30, r12
    39a4:	86 81       	ldd	r24, Z+6	; 0x06
    39a6:	97 81       	ldd	r25, Z+7	; 0x07
    39a8:	02 c0       	rjmp	.+4      	; 0x39ae <vfprintf+0x3ba>
    39aa:	8f ef       	ldi	r24, 0xFF	; 255
    39ac:	9f ef       	ldi	r25, 0xFF	; 255
    39ae:	2b 96       	adiw	r28, 0x0b	; 11
    39b0:	e2 e1       	ldi	r30, 0x12	; 18
    39b2:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__epilogue_restores__>

000039b6 <strnlen_P>:
    39b6:	fc 01       	movw	r30, r24
    39b8:	05 90       	lpm	r0, Z+
    39ba:	61 50       	subi	r22, 0x01	; 1
    39bc:	70 40       	sbci	r23, 0x00	; 0
    39be:	01 10       	cpse	r0, r1
    39c0:	d8 f7       	brcc	.-10     	; 0x39b8 <strnlen_P+0x2>
    39c2:	80 95       	com	r24
    39c4:	90 95       	com	r25
    39c6:	8e 0f       	add	r24, r30
    39c8:	9f 1f       	adc	r25, r31
    39ca:	08 95       	ret

000039cc <strnlen>:
    39cc:	fc 01       	movw	r30, r24
    39ce:	61 50       	subi	r22, 0x01	; 1
    39d0:	70 40       	sbci	r23, 0x00	; 0
    39d2:	01 90       	ld	r0, Z+
    39d4:	01 10       	cpse	r0, r1
    39d6:	d8 f7       	brcc	.-10     	; 0x39ce <strnlen+0x2>
    39d8:	80 95       	com	r24
    39da:	90 95       	com	r25
    39dc:	8e 0f       	add	r24, r30
    39de:	9f 1f       	adc	r25, r31
    39e0:	08 95       	ret

000039e2 <strrev>:
    39e2:	dc 01       	movw	r26, r24
    39e4:	fc 01       	movw	r30, r24
    39e6:	67 2f       	mov	r22, r23
    39e8:	71 91       	ld	r23, Z+
    39ea:	77 23       	and	r23, r23
    39ec:	e1 f7       	brne	.-8      	; 0x39e6 <strrev+0x4>
    39ee:	32 97       	sbiw	r30, 0x02	; 2
    39f0:	04 c0       	rjmp	.+8      	; 0x39fa <strrev+0x18>
    39f2:	7c 91       	ld	r23, X
    39f4:	6d 93       	st	X+, r22
    39f6:	70 83       	st	Z, r23
    39f8:	62 91       	ld	r22, -Z
    39fa:	ae 17       	cp	r26, r30
    39fc:	bf 07       	cpc	r27, r31
    39fe:	c8 f3       	brcs	.-14     	; 0x39f2 <strrev+0x10>
    3a00:	08 95       	ret

00003a02 <fputc>:
    3a02:	0f 93       	push	r16
    3a04:	1f 93       	push	r17
    3a06:	cf 93       	push	r28
    3a08:	df 93       	push	r29
    3a0a:	fb 01       	movw	r30, r22
    3a0c:	23 81       	ldd	r18, Z+3	; 0x03
    3a0e:	21 fd       	sbrc	r18, 1
    3a10:	03 c0       	rjmp	.+6      	; 0x3a18 <fputc+0x16>
    3a12:	8f ef       	ldi	r24, 0xFF	; 255
    3a14:	9f ef       	ldi	r25, 0xFF	; 255
    3a16:	2c c0       	rjmp	.+88     	; 0x3a70 <fputc+0x6e>
    3a18:	22 ff       	sbrs	r18, 2
    3a1a:	16 c0       	rjmp	.+44     	; 0x3a48 <fputc+0x46>
    3a1c:	46 81       	ldd	r20, Z+6	; 0x06
    3a1e:	57 81       	ldd	r21, Z+7	; 0x07
    3a20:	24 81       	ldd	r18, Z+4	; 0x04
    3a22:	35 81       	ldd	r19, Z+5	; 0x05
    3a24:	42 17       	cp	r20, r18
    3a26:	53 07       	cpc	r21, r19
    3a28:	44 f4       	brge	.+16     	; 0x3a3a <fputc+0x38>
    3a2a:	a0 81       	ld	r26, Z
    3a2c:	b1 81       	ldd	r27, Z+1	; 0x01
    3a2e:	9d 01       	movw	r18, r26
    3a30:	2f 5f       	subi	r18, 0xFF	; 255
    3a32:	3f 4f       	sbci	r19, 0xFF	; 255
    3a34:	31 83       	std	Z+1, r19	; 0x01
    3a36:	20 83       	st	Z, r18
    3a38:	8c 93       	st	X, r24
    3a3a:	26 81       	ldd	r18, Z+6	; 0x06
    3a3c:	37 81       	ldd	r19, Z+7	; 0x07
    3a3e:	2f 5f       	subi	r18, 0xFF	; 255
    3a40:	3f 4f       	sbci	r19, 0xFF	; 255
    3a42:	37 83       	std	Z+7, r19	; 0x07
    3a44:	26 83       	std	Z+6, r18	; 0x06
    3a46:	14 c0       	rjmp	.+40     	; 0x3a70 <fputc+0x6e>
    3a48:	8b 01       	movw	r16, r22
    3a4a:	ec 01       	movw	r28, r24
    3a4c:	fb 01       	movw	r30, r22
    3a4e:	00 84       	ldd	r0, Z+8	; 0x08
    3a50:	f1 85       	ldd	r31, Z+9	; 0x09
    3a52:	e0 2d       	mov	r30, r0
    3a54:	09 95       	icall
    3a56:	89 2b       	or	r24, r25
    3a58:	e1 f6       	brne	.-72     	; 0x3a12 <fputc+0x10>
    3a5a:	d8 01       	movw	r26, r16
    3a5c:	16 96       	adiw	r26, 0x06	; 6
    3a5e:	8d 91       	ld	r24, X+
    3a60:	9c 91       	ld	r25, X
    3a62:	17 97       	sbiw	r26, 0x07	; 7
    3a64:	01 96       	adiw	r24, 0x01	; 1
    3a66:	17 96       	adiw	r26, 0x07	; 7
    3a68:	9c 93       	st	X, r25
    3a6a:	8e 93       	st	-X, r24
    3a6c:	16 97       	sbiw	r26, 0x06	; 6
    3a6e:	ce 01       	movw	r24, r28
    3a70:	df 91       	pop	r29
    3a72:	cf 91       	pop	r28
    3a74:	1f 91       	pop	r17
    3a76:	0f 91       	pop	r16
    3a78:	08 95       	ret

00003a7a <__ultoa_invert>:
    3a7a:	fa 01       	movw	r30, r20
    3a7c:	aa 27       	eor	r26, r26
    3a7e:	28 30       	cpi	r18, 0x08	; 8
    3a80:	51 f1       	breq	.+84     	; 0x3ad6 <__ultoa_invert+0x5c>
    3a82:	20 31       	cpi	r18, 0x10	; 16
    3a84:	81 f1       	breq	.+96     	; 0x3ae6 <__ultoa_invert+0x6c>
    3a86:	e8 94       	clt
    3a88:	6f 93       	push	r22
    3a8a:	6e 7f       	andi	r22, 0xFE	; 254
    3a8c:	6e 5f       	subi	r22, 0xFE	; 254
    3a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a90:	8f 4f       	sbci	r24, 0xFF	; 255
    3a92:	9f 4f       	sbci	r25, 0xFF	; 255
    3a94:	af 4f       	sbci	r26, 0xFF	; 255
    3a96:	b1 e0       	ldi	r27, 0x01	; 1
    3a98:	3e d0       	rcall	.+124    	; 0x3b16 <__ultoa_invert+0x9c>
    3a9a:	b4 e0       	ldi	r27, 0x04	; 4
    3a9c:	3c d0       	rcall	.+120    	; 0x3b16 <__ultoa_invert+0x9c>
    3a9e:	67 0f       	add	r22, r23
    3aa0:	78 1f       	adc	r23, r24
    3aa2:	89 1f       	adc	r24, r25
    3aa4:	9a 1f       	adc	r25, r26
    3aa6:	a1 1d       	adc	r26, r1
    3aa8:	68 0f       	add	r22, r24
    3aaa:	79 1f       	adc	r23, r25
    3aac:	8a 1f       	adc	r24, r26
    3aae:	91 1d       	adc	r25, r1
    3ab0:	a1 1d       	adc	r26, r1
    3ab2:	6a 0f       	add	r22, r26
    3ab4:	71 1d       	adc	r23, r1
    3ab6:	81 1d       	adc	r24, r1
    3ab8:	91 1d       	adc	r25, r1
    3aba:	a1 1d       	adc	r26, r1
    3abc:	20 d0       	rcall	.+64     	; 0x3afe <__ultoa_invert+0x84>
    3abe:	09 f4       	brne	.+2      	; 0x3ac2 <__ultoa_invert+0x48>
    3ac0:	68 94       	set
    3ac2:	3f 91       	pop	r19
    3ac4:	2a e0       	ldi	r18, 0x0A	; 10
    3ac6:	26 9f       	mul	r18, r22
    3ac8:	11 24       	eor	r1, r1
    3aca:	30 19       	sub	r19, r0
    3acc:	30 5d       	subi	r19, 0xD0	; 208
    3ace:	31 93       	st	Z+, r19
    3ad0:	de f6       	brtc	.-74     	; 0x3a88 <__ultoa_invert+0xe>
    3ad2:	cf 01       	movw	r24, r30
    3ad4:	08 95       	ret
    3ad6:	46 2f       	mov	r20, r22
    3ad8:	47 70       	andi	r20, 0x07	; 7
    3ada:	40 5d       	subi	r20, 0xD0	; 208
    3adc:	41 93       	st	Z+, r20
    3ade:	b3 e0       	ldi	r27, 0x03	; 3
    3ae0:	0f d0       	rcall	.+30     	; 0x3b00 <__ultoa_invert+0x86>
    3ae2:	c9 f7       	brne	.-14     	; 0x3ad6 <__ultoa_invert+0x5c>
    3ae4:	f6 cf       	rjmp	.-20     	; 0x3ad2 <__ultoa_invert+0x58>
    3ae6:	46 2f       	mov	r20, r22
    3ae8:	4f 70       	andi	r20, 0x0F	; 15
    3aea:	40 5d       	subi	r20, 0xD0	; 208
    3aec:	4a 33       	cpi	r20, 0x3A	; 58
    3aee:	18 f0       	brcs	.+6      	; 0x3af6 <__ultoa_invert+0x7c>
    3af0:	49 5d       	subi	r20, 0xD9	; 217
    3af2:	31 fd       	sbrc	r19, 1
    3af4:	40 52       	subi	r20, 0x20	; 32
    3af6:	41 93       	st	Z+, r20
    3af8:	02 d0       	rcall	.+4      	; 0x3afe <__ultoa_invert+0x84>
    3afa:	a9 f7       	brne	.-22     	; 0x3ae6 <__ultoa_invert+0x6c>
    3afc:	ea cf       	rjmp	.-44     	; 0x3ad2 <__ultoa_invert+0x58>
    3afe:	b4 e0       	ldi	r27, 0x04	; 4
    3b00:	a6 95       	lsr	r26
    3b02:	97 95       	ror	r25
    3b04:	87 95       	ror	r24
    3b06:	77 95       	ror	r23
    3b08:	67 95       	ror	r22
    3b0a:	ba 95       	dec	r27
    3b0c:	c9 f7       	brne	.-14     	; 0x3b00 <__ultoa_invert+0x86>
    3b0e:	00 97       	sbiw	r24, 0x00	; 0
    3b10:	61 05       	cpc	r22, r1
    3b12:	71 05       	cpc	r23, r1
    3b14:	08 95       	ret
    3b16:	9b 01       	movw	r18, r22
    3b18:	ac 01       	movw	r20, r24
    3b1a:	0a 2e       	mov	r0, r26
    3b1c:	06 94       	lsr	r0
    3b1e:	57 95       	ror	r21
    3b20:	47 95       	ror	r20
    3b22:	37 95       	ror	r19
    3b24:	27 95       	ror	r18
    3b26:	ba 95       	dec	r27
    3b28:	c9 f7       	brne	.-14     	; 0x3b1c <__ultoa_invert+0xa2>
    3b2a:	62 0f       	add	r22, r18
    3b2c:	73 1f       	adc	r23, r19
    3b2e:	84 1f       	adc	r24, r20
    3b30:	95 1f       	adc	r25, r21
    3b32:	a0 1d       	adc	r26, r0
    3b34:	08 95       	ret

00003b36 <eeprom_read_byte>:
    3b36:	e1 99       	sbic	0x1c, 1	; 28
    3b38:	fe cf       	rjmp	.-4      	; 0x3b36 <eeprom_read_byte>
    3b3a:	9f bb       	out	0x1f, r25	; 31
    3b3c:	8e bb       	out	0x1e, r24	; 30
    3b3e:	e0 9a       	sbi	0x1c, 0	; 28
    3b40:	99 27       	eor	r25, r25
    3b42:	8d b3       	in	r24, 0x1d	; 29
    3b44:	08 95       	ret

00003b46 <eeprom_read_dword>:
    3b46:	a6 e1       	ldi	r26, 0x16	; 22
    3b48:	b0 e0       	ldi	r27, 0x00	; 0
    3b4a:	44 e0       	ldi	r20, 0x04	; 4
    3b4c:	50 e0       	ldi	r21, 0x00	; 0
    3b4e:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <eeprom_read_blraw>

00003b52 <eeprom_read_word>:
    3b52:	a8 e1       	ldi	r26, 0x18	; 24
    3b54:	b0 e0       	ldi	r27, 0x00	; 0
    3b56:	42 e0       	ldi	r20, 0x02	; 2
    3b58:	50 e0       	ldi	r21, 0x00	; 0
    3b5a:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <eeprom_read_blraw>

00003b5e <eeprom_write_byte>:
    3b5e:	26 2f       	mov	r18, r22

00003b60 <eeprom_write_r18>:
    3b60:	e1 99       	sbic	0x1c, 1	; 28
    3b62:	fe cf       	rjmp	.-4      	; 0x3b60 <eeprom_write_r18>
    3b64:	9f bb       	out	0x1f, r25	; 31
    3b66:	8e bb       	out	0x1e, r24	; 30
    3b68:	2d bb       	out	0x1d, r18	; 29
    3b6a:	0f b6       	in	r0, 0x3f	; 63
    3b6c:	f8 94       	cli
    3b6e:	e2 9a       	sbi	0x1c, 2	; 28
    3b70:	e1 9a       	sbi	0x1c, 1	; 28
    3b72:	0f be       	out	0x3f, r0	; 63
    3b74:	01 96       	adiw	r24, 0x01	; 1
    3b76:	08 95       	ret

00003b78 <eeprom_write_dword>:
    3b78:	24 2f       	mov	r18, r20
    3b7a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <eeprom_write_r18>
    3b7e:	25 2f       	mov	r18, r21
    3b80:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <eeprom_write_r18>
    3b84:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <eeprom_write_word>

00003b88 <eeprom_write_word>:
    3b88:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <eeprom_write_byte>
    3b8c:	27 2f       	mov	r18, r23
    3b8e:	0c 94 b0 1d 	jmp	0x3b60	; 0x3b60 <eeprom_write_r18>

00003b92 <eeprom_read_block>:
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22

00003b96 <eeprom_read_blraw>:
    3b96:	fc 01       	movw	r30, r24
    3b98:	e1 99       	sbic	0x1c, 1	; 28
    3b9a:	fe cf       	rjmp	.-4      	; 0x3b98 <eeprom_read_blraw+0x2>
    3b9c:	06 c0       	rjmp	.+12     	; 0x3baa <eeprom_read_blraw+0x14>
    3b9e:	ff bb       	out	0x1f, r31	; 31
    3ba0:	ee bb       	out	0x1e, r30	; 30
    3ba2:	e0 9a       	sbi	0x1c, 0	; 28
    3ba4:	31 96       	adiw	r30, 0x01	; 1
    3ba6:	0d b2       	in	r0, 0x1d	; 29
    3ba8:	0d 92       	st	X+, r0
    3baa:	41 50       	subi	r20, 0x01	; 1
    3bac:	50 40       	sbci	r21, 0x00	; 0
    3bae:	b8 f7       	brcc	.-18     	; 0x3b9e <eeprom_read_blraw+0x8>
    3bb0:	08 95       	ret

00003bb2 <__prologue_saves__>:
    3bb2:	2f 92       	push	r2
    3bb4:	3f 92       	push	r3
    3bb6:	4f 92       	push	r4
    3bb8:	5f 92       	push	r5
    3bba:	6f 92       	push	r6
    3bbc:	7f 92       	push	r7
    3bbe:	8f 92       	push	r8
    3bc0:	9f 92       	push	r9
    3bc2:	af 92       	push	r10
    3bc4:	bf 92       	push	r11
    3bc6:	cf 92       	push	r12
    3bc8:	df 92       	push	r13
    3bca:	ef 92       	push	r14
    3bcc:	ff 92       	push	r15
    3bce:	0f 93       	push	r16
    3bd0:	1f 93       	push	r17
    3bd2:	cf 93       	push	r28
    3bd4:	df 93       	push	r29
    3bd6:	cd b7       	in	r28, 0x3d	; 61
    3bd8:	de b7       	in	r29, 0x3e	; 62
    3bda:	ca 1b       	sub	r28, r26
    3bdc:	db 0b       	sbc	r29, r27
    3bde:	0f b6       	in	r0, 0x3f	; 63
    3be0:	f8 94       	cli
    3be2:	de bf       	out	0x3e, r29	; 62
    3be4:	0f be       	out	0x3f, r0	; 63
    3be6:	cd bf       	out	0x3d, r28	; 61
    3be8:	09 94       	ijmp

00003bea <__epilogue_restores__>:
    3bea:	2a 88       	ldd	r2, Y+18	; 0x12
    3bec:	39 88       	ldd	r3, Y+17	; 0x11
    3bee:	48 88       	ldd	r4, Y+16	; 0x10
    3bf0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bf2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bf4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bf6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bf8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bfa:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bfc:	b9 84       	ldd	r11, Y+9	; 0x09
    3bfe:	c8 84       	ldd	r12, Y+8	; 0x08
    3c00:	df 80       	ldd	r13, Y+7	; 0x07
    3c02:	ee 80       	ldd	r14, Y+6	; 0x06
    3c04:	fd 80       	ldd	r15, Y+5	; 0x05
    3c06:	0c 81       	ldd	r16, Y+4	; 0x04
    3c08:	1b 81       	ldd	r17, Y+3	; 0x03
    3c0a:	aa 81       	ldd	r26, Y+2	; 0x02
    3c0c:	b9 81       	ldd	r27, Y+1	; 0x01
    3c0e:	ce 0f       	add	r28, r30
    3c10:	d1 1d       	adc	r29, r1
    3c12:	0f b6       	in	r0, 0x3f	; 63
    3c14:	f8 94       	cli
    3c16:	de bf       	out	0x3e, r29	; 62
    3c18:	0f be       	out	0x3f, r0	; 63
    3c1a:	cd bf       	out	0x3d, r28	; 61
    3c1c:	ed 01       	movw	r28, r26
    3c1e:	08 95       	ret

00003c20 <_exit>:
    3c20:	f8 94       	cli

00003c22 <__stop_program>:
    3c22:	ff cf       	rjmp	.-2      	; 0x3c22 <__stop_program>
