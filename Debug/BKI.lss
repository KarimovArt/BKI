
BKI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cf6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  00003cf6  00003daa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000485  00800122  00800122  00003e6c  2**0
                  ALLOC
  3 .eeprom       000000cf  00810000  00810000  00003e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00005c7c  00000000  00000000  00003f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00002864  00000000  00000000  00009bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000005c  00000000  00000000  0000c41c  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000c478  2**2
                  CONTENTS, READONLY
  8 .debug_info   000004e6  00000000  00000000  0000c4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004a3  00000000  00000000  0000c99a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0000ce3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000196  00000000  00000000  0000ce57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__ctors_end>
       4:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__vector_1>
       8:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
       c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      10:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      14:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      18:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      1c:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__vector_7>
      20:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      24:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      28:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      2c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      30:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      34:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <__vector_13>
      38:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      3c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      40:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      44:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      48:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      4c:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>
      50:	0c 94 34 01 	jmp	0x268	; 0x268 <__bad_interrupt>

00000054 <NEDOSTUPNO>:
      54:	ed e5 e4 ee f1 f2 f3 ef ed ee 00                    ...........

0000005f <NOVOE_ZNACHENIE>:
      5f:	cd ce c2 ce c5 20 c7 cd c0 d7 c5 cd c8 c5 00        ..... .........

0000006e <PAROL>:
      6e:	cf c0 d0 ce cb dc 00                                .......

00000075 <MS>:
      75:	ec f1 00                                            ...

00000078 <OTKL_MTZ>:
      78:	ee f2 ea eb 2e cc d2 c7 3a 00                       ........:.

00000082 <VKL_MTZ>:
      82:	e2 ea eb 2e cc d2 c7 3a 00                          .......:.

0000008b <PUSTO>:
      8b:	3c ef f3 f1 f2 ee 3e 00                             <.....>.

00000093 <OBNARUZHENO>:
      93:	ee e1 ed e0 f0 f3 e6 e5 ed ee 20 c1 c4 c7 3a 00     .......... ...:.

000000a3 <SBROSIT>:
      a3:	d1 e1 f0 ee f1 e8 f2 fc 3f 20 e4 e0 2d 22 c2 c2     ........? ..-"..
      b3:	ce c4 22 00                                         ..".

000000b7 <NET>:
      b7:	ed e5 f2 00                                         ....

000000bb <NET_SVYAZI>:
      bb:	ed e5 f2 20 f1 e2 ff e7 e8 00                       ... ......

000000c5 <OSHIBKA>:
      c5:	ee f8 e8 e1 ea e0 00                                .......

000000cc <NET_GOTOVNOSTI>:
      cc:	cd c5 d2 20 c3 ce d2 ce c2 cd ce d1 d2 c8 00        ... ...........

000000db <VREMYA_UROV>:
      db:	c2 d0 c5 cc df 20 d3 d0 ce c2 00                    ..... .....

000000e6 <VREMYA_MTZ>:
      e6:	c2 d0 c5 cc df 20 cc d2 c7 00                       ..... ....

000000f0 <ADRES>:
      f0:	c0 c4 d0 c5 d1 00                                   ......

000000f6 <PO_ODNOMU>:
      f6:	cf ce 20 ce c4 cd ce cc d3 00                       .. .......

00000100 <DLYA_VSEH>:
     100:	c4 cb df 20 c2 d1 c5 d5 00                          ... .....

00000109 <C_NONE>:
     109:	4e 4f 4e 45 00                                      NONE.

0000010e <C_EVEN>:
     10e:	45 56 45 4e 00                                      EVEN.

00000113 <C_ODD>:
     113:	4f 44 44 00                                         ODD.

00000117 <CHETNOST>:
     117:	d7 c5 d2 cd ce d1 d2 dc 00                          .........

00000120 <SKOROST>:
     120:	d1 ca ce d0 ce d1 d2 dc 00                          .........

00000129 <ASCII_M>:
     129:	41 53 43 49 49 00                                   ASCII.

0000012f <RTU_M>:
     12f:	52 54 55 00                                         RTU.

00000133 <REZHIM>:
     133:	d0 c5 c6 c8 cc 00                                   ......

00000139 <SVYAZ>:
     139:	d1 c2 df c7 dc 20 52 53 34 38 35 00                 ..... RS485.

00000145 <PROGRAMMIROVANIE>:
     145:	cf d0 ce c3 d0 c0 cc cc c8 d0 ce c2 c0 cd c8 c5     ................
	...

00000156 <SCANIROVANIE>:
     156:	d1 ca c0 cd c8 d0 ce c2 c0 cd c8 c5 00              .............

00000163 <DATAVREMYA>:
     163:	c4 c0 d2 c0 2f c2 d0 c5 cc df 00                    ..../......

0000016e <RELE>:
     16e:	d0 c5 cb c5 00                                      .....

00000173 <DVX>:
     173:	c4 c2 d5 00                                         ....

00000177 <VOD>:
     177:	c2 ce c4 00                                         ....

0000017b <BDZ>:
     17b:	c1 c4 c7 00                                         ....

0000017f <NASTROYKA>:
     17f:	cd c0 d1 d2 d0 ce c9 ca c0 00                       ..........

00000189 <ARHIV>:
     189:	c0 d0 d5 c8 c2 00                                   ......

0000018f <NA_SVYAZI>:
     18f:	cd c0 20 d1 c2 df c7 c8 00                          .. ......

00000198 <MENU>:
     198:	cc c5 cd de 00                                      .....

0000019d <NEISPRAVNOST>:
     19d:	cd c5 c8 d1 cf d0 c0 c2 cd ce d1 d2 dc 00           ..............

000001ab <AVARIYA>:
     1ab:	c0 c2 c0 d0 c8 df 00                                .......

000001b2 <RABOTA>:
     1b2:	d0 c0 c1 ce d2 c0 31 00                             ......1.

000001ba <OSHIBKA_ADDR>:
     1ba:	ce d8 c8 c1 ca c0 20 e0 e4 f0 e5 f1 20 e7 e0 ed     ...... ..... ...
     1ca:	ff f2 00                                            ...

000001cd <STAROE_ZNACHENIE>:
     1cd:	d1 d2 c0 d0 ce c5 20 c7 cd c0 d7 c5 cd c8 c5 00     ...... .........

000001dd <NUMM>:
     1dd:	cd ce cc c5 d0 20 c1 c4 c7 00                       ..... ....

000001e7 <NOVOE>:
     1e7:	cd ce c2 ce c5 00                                   ......

000001ed <lcd_codepage>:
     1ed:	41 a0 42 a1 e0 45 a3 a4 a5 a6 4b a7 4d 48 4f a8     A.B..E....K.MHO.
     1fd:	50 43 54 a9 aa 58 e1 ab ac e2 ad ae 62 af b0 b1     PCT..X......b...
     20d:	61 b2 b3 b4 e3 65 b6 b7 b8 b9 ba bb bc bd 6f be     a....e........o.
     21d:	70 63 bf 79 e4 78 e5 c0 c1 e6 c2 c3 c4 c5 c6 c7     pc.y.x..........
	...

0000022e <__ctors_end>:
     22e:	11 24       	eor	r1, r1
     230:	1f be       	out	0x3f, r1	; 63
     232:	cf e5       	ldi	r28, 0x5F	; 95
     234:	d8 e0       	ldi	r29, 0x08	; 8
     236:	de bf       	out	0x3e, r29	; 62
     238:	cd bf       	out	0x3d, r28	; 61

0000023a <__do_copy_data>:
     23a:	11 e0       	ldi	r17, 0x01	; 1
     23c:	a0 e6       	ldi	r26, 0x60	; 96
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	e6 ef       	ldi	r30, 0xF6	; 246
     242:	fc e3       	ldi	r31, 0x3C	; 60
     244:	02 c0       	rjmp	.+4      	; 0x24a <__do_copy_data+0x10>
     246:	05 90       	lpm	r0, Z+
     248:	0d 92       	st	X+, r0
     24a:	a2 32       	cpi	r26, 0x22	; 34
     24c:	b1 07       	cpc	r27, r17
     24e:	d9 f7       	brne	.-10     	; 0x246 <__do_copy_data+0xc>

00000250 <__do_clear_bss>:
     250:	25 e0       	ldi	r18, 0x05	; 5
     252:	a2 e2       	ldi	r26, 0x22	; 34
     254:	b1 e0       	ldi	r27, 0x01	; 1
     256:	01 c0       	rjmp	.+2      	; 0x25a <.do_clear_bss_start>

00000258 <.do_clear_bss_loop>:
     258:	1d 92       	st	X+, r1

0000025a <.do_clear_bss_start>:
     25a:	a7 3a       	cpi	r26, 0xA7	; 167
     25c:	b2 07       	cpc	r27, r18
     25e:	e1 f7       	brne	.-8      	; 0x258 <.do_clear_bss_loop>
     260:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <main>
     264:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <_exit>

00000268 <__bad_interrupt>:
     268:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026c <checkTOUT>:
	return 	checkTOUT(addr);
}

static inline signed char checkTOUT(unsigned char addr)
{
	CAN_timeout=CAN_TOUT;
     26c:	28 ee       	ldi	r18, 0xE8	; 232
     26e:	33 e0       	ldi	r19, 0x03	; 3
     270:	30 93 b9 04 	sts	0x04B9, r19	; 0x8004b9 <CAN_timeout+0x1>
     274:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <CAN_timeout>
	while(chkBit(inSysBDZ[addr].flags,INL)==0 && (CAN_timeout !=0));	//ждем ответа
     278:	29 e0       	ldi	r18, 0x09	; 9
     27a:	82 9f       	mul	r24, r18
     27c:	c0 01       	movw	r24, r0
     27e:	11 24       	eor	r1, r1
     280:	fc 01       	movw	r30, r24
     282:	eb 5b       	subi	r30, 0xBB	; 187
     284:	fe 4f       	sbci	r31, 0xFE	; 254
     286:	80 81       	ld	r24, Z
     288:	82 fd       	sbrc	r24, 2
     28a:	06 c0       	rjmp	.+12     	; 0x298 <checkTOUT+0x2c>
     28c:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <CAN_timeout>
     290:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <CAN_timeout+0x1>
     294:	89 2b       	or	r24, r25
     296:	b9 f7       	brne	.-18     	; 0x286 <checkTOUT+0x1a>
	return (CAN_timeout ==0 || CAN_ERR !=0)?(-1):(1);					//дождались таймаута или ошибки CAN вернули -1
     298:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <CAN_timeout>
     29c:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <CAN_timeout+0x1>
     2a0:	89 2b       	or	r24, r25
     2a2:	31 f0       	breq	.+12     	; 0x2b0 <checkTOUT+0x44>
     2a4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <CAN_ERR>
     2a8:	81 11       	cpse	r24, r1
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <checkTOUT+0x44>
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	08 95       	ret
     2b0:	8f ef       	ldi	r24, 0xFF	; 255
}
     2b2:	08 95       	ret

000002b4 <novoe>:
	{ARHIV,archieve},
	{NASTROYKA,nastroyka},
	{NULL,NULL}	//затычка
};
static void novoe(void)
{
     2b4:	08 95       	ret

000002b6 <LCD_strob>:
}


static inline void LCD_strob(void)
{
	LCP |= 1<<LCD_E;
     2b6:	ac 9a       	sbi	0x15, 4	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b8:	8f e9       	ldi	r24, 0x9F	; 159
     2ba:	9f e0       	ldi	r25, 0x0F	; 15
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_strob+0x6>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_strob+0xc>
     2c2:	00 00       	nop
	_delay_ms(1);
	LCP &= ~(1<<LCD_E);
     2c4:	ac 98       	cbi	0x15, 4	; 21
     2c6:	8f e9       	ldi	r24, 0x9F	; 159
     2c8:	9f e0       	ldi	r25, 0x0F	; 15
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_strob+0x14>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD_strob+0x1a>
     2d0:	00 00       	nop
     2d2:	08 95       	ret

000002d4 <TWI_init>:
#define MR_DATA_NACK 0x58	//данные пришли, ACK не отправлен

void TWI_init(void)
{
//скорость 100 kHz
TWBR=72;
     2d4:	88 e4       	ldi	r24, 0x48	; 72
     2d6:	80 b9       	out	0x00, r24	; 0
//TWEA разрешение бита подтверждения,TWEN разрешение работы TWI модуля,
TWCR |= (1<<TWEA | 1<<TWEN);
     2d8:	86 b7       	in	r24, 0x36	; 54
     2da:	84 64       	ori	r24, 0x44	; 68
     2dc:	86 bf       	out	0x36, r24	; 54
TWSR &=~(1<<TWPS0) | (1<<TWPS1);
     2de:	08 98       	cbi	0x01, 0	; 1
     2e0:	08 95       	ret

000002e2 <twi_write>:
}

unsigned char twi_write(unsigned char addr,unsigned char *data,unsigned char len)
{
TWI_timeout=T_TOUT;
     2e2:	28 ee       	ldi	r18, 0xE8	; 232
     2e4:	33 e0       	ldi	r19, 0x03	; 3
     2e6:	30 93 55 05 	sts	0x0555, r19	; 0x800555 <TWI_timeout+0x1>
     2ea:	20 93 54 05 	sts	0x0554, r18	; 0x800554 <TWI_timeout>

//TWI_ERR=0;

TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);										//Send START condition
     2ee:	94 ea       	ldi	r25, 0xA4	; 164
     2f0:	96 bf       	out	0x36, r25	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//флаг TWINT говорит о том,что текущее задание выполнено
     2f2:	06 b6       	in	r0, 0x36	; 54
     2f4:	07 fc       	sbrc	r0, 7
     2f6:	08 c0       	rjmp	.+16     	; 0x308 <twi_write+0x26>
     2f8:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <TWI_timeout>
     2fc:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <TWI_timeout+0x1>
     300:	23 2b       	or	r18, r19
     302:	b9 f7       	brne	.-18     	; 0x2f2 <twi_write+0x10>
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	2d c0       	rjmp	.+90     	; 0x362 <twi_write+0x80>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел
     308:	91 b1       	in	r25, 0x01	; 1
     30a:	98 7f       	andi	r25, 0xF8	; 248
     30c:	98 30       	cpi	r25, 0x08	; 8
     30e:	11 f0       	breq	.+4      	; 0x314 <twi_write+0x32>
     310:	82 e0       	ldi	r24, 0x02	; 2
     312:	27 c0       	rjmp	.+78     	; 0x362 <twi_write+0x80>



TWDR = addr & 0xFE;													//грузим адпес и флаг записи (SLA+W)
     314:	8e 7f       	andi	r24, 0xFE	; 254
     316:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
     318:	84 e8       	ldi	r24, 0x84	; 132
     31a:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
     31c:	06 b6       	in	r0, 0x36	; 54
     31e:	07 fc       	sbrc	r0, 7
     320:	07 c0       	rjmp	.+14     	; 0x330 <twi_write+0x4e>
     322:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <TWI_timeout>
     326:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <TWI_timeout+0x1>
     32a:	89 2b       	or	r24, r25
     32c:	b9 f7       	brne	.-18     	; 0x31c <twi_write+0x3a>
     32e:	ea cf       	rjmp	.-44     	; 0x304 <twi_write+0x22>
if ((TWSR & 0xF8) != MT_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     330:	81 b1       	in	r24, 0x01	; 1
     332:	88 7f       	andi	r24, 0xF8	; 248
     334:	88 31       	cpi	r24, 0x18	; 24
     336:	21 f4       	brne	.+8      	; 0x340 <twi_write+0x5e>
     338:	96 2f       	mov	r25, r22
     33a:	fb 01       	movw	r30, r22


for(unsigned char i=0;i<len;i++)											//данные пошли
{
	TWDR = *(data+i);
	TWCR = (1<<TWINT) | (1<<TWEN);
     33c:	24 e8       	ldi	r18, 0x84	; 132
     33e:	02 c0       	rjmp	.+4      	; 0x344 <twi_write+0x62>


TWDR = addr & 0xFE;													//грузим адпес и флаг записи (SLA+W)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MT_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	0f c0       	rjmp	.+30     	; 0x362 <twi_write+0x80>



for(unsigned char i=0;i<len;i++)											//данные пошли
     344:	8e 2f       	mov	r24, r30
     346:	89 1b       	sub	r24, r25
     348:	84 17       	cp	r24, r20
     34a:	a8 f4       	brcc	.+42     	; 0x376 <twi_write+0x94>
{
	TWDR = *(data+i);
     34c:	81 91       	ld	r24, Z+
     34e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     350:	26 bf       	out	0x36, r18	; 54
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}
     352:	06 b6       	in	r0, 0x36	; 54
     354:	07 fe       	sbrs	r0, 7
     356:	08 c0       	rjmp	.+16     	; 0x368 <twi_write+0x86>
	if ((TWSR & 0xF8) != MT_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}
     358:	81 b1       	in	r24, 0x01	; 1
     35a:	88 7f       	andi	r24, 0xF8	; 248
     35c:	88 32       	cpi	r24, 0x28	; 40
     35e:	91 f3       	breq	.-28     	; 0x344 <twi_write+0x62>
     360:	84 e0       	ldi	r24, 0x04	; 4
     362:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TWI_ERR>
     366:	07 c0       	rjmp	.+14     	; 0x376 <twi_write+0x94>

for(unsigned char i=0;i<len;i++)											//данные пошли
{
	TWDR = *(data+i);
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}
     368:	60 91 54 05 	lds	r22, 0x0554	; 0x800554 <TWI_timeout>
     36c:	70 91 55 05 	lds	r23, 0x0555	; 0x800555 <TWI_timeout+0x1>
     370:	67 2b       	or	r22, r23
     372:	79 f7       	brne	.-34     	; 0x352 <twi_write+0x70>
     374:	c7 cf       	rjmp	.-114    	; 0x304 <twi_write+0x22>


ERROR:


TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);										//Transmit STOP condition
     376:	84 e9       	ldi	r24, 0x94	; 148
     378:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37a:	8f e8       	ldi	r24, 0x8F	; 143
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <twi_write+0x9c>
     382:	00 c0       	rjmp	.+0      	; 0x384 <twi_write+0xa2>
     384:	00 00       	nop
_delay_us(100);	//ждем прохождения стопа
#ifdef DEBUG
if(TWI_ERR)uart_puts("writeErr");
#endif
return TWI_ERR;	//возвращаем код ошибки
}
     386:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <TWI_ERR>
     38a:	08 95       	ret

0000038c <twi_read>:

unsigned char twi_read(unsigned char addr,unsigned char *data,unsigned char len)
{
     38c:	98 2f       	mov	r25, r24
unsigned char i=0;

TWI_timeout=T_TOUT;
     38e:	28 ee       	ldi	r18, 0xE8	; 232
     390:	33 e0       	ldi	r19, 0x03	; 3
     392:	30 93 55 05 	sts	0x0555, r19	; 0x800555 <TWI_timeout+0x1>
     396:	20 93 54 05 	sts	0x0554, r18	; 0x800554 <TWI_timeout>

TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);										//Send START condition
     39a:	84 ea       	ldi	r24, 0xA4	; 164
     39c:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//флаг TWINT говорит о том,что текущее задание выполнено
     39e:	06 b6       	in	r0, 0x36	; 54
     3a0:	07 fc       	sbrc	r0, 7
     3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <twi_read+0x28>
     3a4:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <TWI_timeout>
     3a8:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <TWI_timeout+0x1>
     3ac:	23 2b       	or	r18, r19
     3ae:	b9 f7       	brne	.-18     	; 0x39e <twi_read+0x12>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	34 c0       	rjmp	.+104    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел
     3b4:	81 b1       	in	r24, 0x01	; 1
     3b6:	88 7f       	andi	r24, 0xF8	; 248
     3b8:	88 30       	cpi	r24, 0x08	; 8
     3ba:	11 f0       	breq	.+4      	; 0x3c0 <twi_read+0x34>
     3bc:	82 e0       	ldi	r24, 0x02	; 2
     3be:	2e c0       	rjmp	.+92     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>

TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
     3c0:	91 60       	ori	r25, 0x01	; 1
     3c2:	93 b9       	out	0x03, r25	; 3
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
     3c4:	84 e8       	ldi	r24, 0x84	; 132
     3c6:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
     3c8:	06 b6       	in	r0, 0x36	; 54
     3ca:	07 fc       	sbrc	r0, 7
     3cc:	07 c0       	rjmp	.+14     	; 0x3dc <twi_read+0x50>
     3ce:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <TWI_timeout>
     3d2:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <TWI_timeout+0x1>
     3d6:	89 2b       	or	r24, r25
     3d8:	b9 f7       	brne	.-18     	; 0x3c8 <twi_read+0x3c>
     3da:	ea cf       	rjmp	.-44     	; 0x3b0 <twi_read+0x24>
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     3dc:	91 b1       	in	r25, 0x01	; 1
     3de:	98 7f       	andi	r25, 0xF8	; 248
     3e0:	90 34       	cpi	r25, 0x40	; 64
     3e2:	31 f4       	brne	.+12     	; 0x3f0 <twi_read+0x64>
     3e4:	20 e0       	ldi	r18, 0x00	; 0

for(i=0;i<len-1;i++)												//данные пошли
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	41 50       	subi	r20, 0x01	; 1
     3ea:	51 09       	sbc	r21, r1
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
     3ec:	e4 ec       	ldi	r30, 0xC4	; 196
     3ee:	08 c0       	rjmp	.+16     	; 0x400 <__EEPROM_REGION_LENGTH__>
if ((TWSR & 0xF8) != START)	{TWI_ERR=TWISTART;goto ERROR;}					//СТАРТ не прошел

TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел
     3f0:	83 e0       	ldi	r24, 0x03	; 3
     3f2:	14 c0       	rjmp	.+40     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
for(i=0;i<len-1;i++)												//данные пошли
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
	*(data+i)=TWDR;
     3f4:	33 b1       	in	r19, 0x03	; 3
     3f6:	db 01       	movw	r26, r22
     3f8:	a8 0f       	add	r26, r24
     3fa:	b9 1f       	adc	r27, r25
     3fc:	3c 93       	st	X, r19
TWDR = addr| 0x01;															//грузим адпес и флаг чтения (SLA+R)
TWCR = (1<<TWINT) | (1<<TWEN);												//шлем
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока улетит
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел

for(i=0;i<len-1;i++)												//данные пошли
     3fe:	2f 5f       	subi	r18, 0xFF	; 255
     400:	82 2f       	mov	r24, r18
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	84 17       	cp	r24, r20
     406:	95 07       	cpc	r25, r21
     408:	9c f4       	brge	.+38     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
     40a:	e6 bf       	out	0x36, r30	; 54
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
     40c:	06 b6       	in	r0, 0x36	; 54
     40e:	07 fe       	sbrs	r0, 7
     410:	08 c0       	rjmp	.+16     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
     412:	31 b1       	in	r19, 0x01	; 1
     414:	38 7f       	andi	r19, 0xF8	; 248
     416:	30 35       	cpi	r19, 0x50	; 80
     418:	69 f3       	breq	.-38     	; 0x3f4 <twi_read+0x68>
     41a:	84 e0       	ldi	r24, 0x04	; 4
     41c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <TWI_ERR>
     420:	1c c0       	rjmp	.+56     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
if ((TWSR & 0xF8) != MR_SLA_ACK){TWI_ERR=TWIADDR;goto ERROR;}				//адрес не прошел

for(i=0;i<len-1;i++)												//данные пошли
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);									//запускаем прием с подтверждением
	while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}	//ждем пока прилетит
     422:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <TWI_timeout>
     426:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <TWI_timeout+0x1>
     42a:	ab 2b       	or	r26, r27
     42c:	79 f7       	brne	.-34     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     42e:	c0 cf       	rjmp	.-128    	; 0x3b0 <twi_read+0x24>
	if ((TWSR & 0xF8) != MR_DATA_ACK){TWI_ERR=TWIDATA;goto ERROR;}				//данные не прошли
	*(data+i)=TWDR;
}
TWCR = (1<<TWINT) | (1<<TWEN);													//запускаем прием последнего байта без подтверждения
     430:	24 e8       	ldi	r18, 0x84	; 132
     432:	26 bf       	out	0x36, r18	; 54
while (!(TWCR & (1<<TWINT)))if(TWI_timeout==0){TWI_ERR=TWITOUT;goto ERROR;}		//ждем пока прилетит
     434:	06 b6       	in	r0, 0x36	; 54
     436:	07 fc       	sbrc	r0, 7
     438:	07 c0       	rjmp	.+14     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     43a:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <TWI_timeout>
     43e:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <TWI_timeout+0x1>
     442:	23 2b       	or	r18, r19
     444:	b9 f7       	brne	.-18     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     446:	b4 cf       	rjmp	.-152    	; 0x3b0 <twi_read+0x24>
if ((TWSR & 0xF8) != MR_DATA_NACK){TWI_ERR=TWIDATA;goto ERROR;}					//данные не прошли
     448:	21 b1       	in	r18, 0x01	; 1
     44a:	28 7f       	andi	r18, 0xF8	; 248
     44c:	28 35       	cpi	r18, 0x58	; 88
     44e:	29 f7       	brne	.-54     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
*(data+i)=TWDR;
     450:	23 b1       	in	r18, 0x03	; 3
     452:	fb 01       	movw	r30, r22
     454:	e8 0f       	add	r30, r24
     456:	f9 1f       	adc	r31, r25
     458:	20 83       	st	Z, r18

ERROR:
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)|(1<<TWEA);											//Transmit STOP condition
     45a:	84 ed       	ldi	r24, 0xD4	; 212
     45c:	86 bf       	out	0x36, r24	; 54
     45e:	8f e8       	ldi	r24, 0x8F	; 143
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     466:	00 c0       	rjmp	.+0      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     468:	00 00       	nop
#ifdef DEBUG
if(TWI_ERR){uart_puts("readErr");}
#endif

return TWI_ERR;	//возвращаем код ошибки
}
     46a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <TWI_ERR>
     46e:	08 95       	ret

00000470 <rtc_set>:
signed char rtc_check(void);
static inline unsigned char bcd2dec(unsigned char n);
static inline unsigned char dec2bcd(unsigned char n);

signed char rtc_set(struct RTC *rtc)
{
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	2a 97       	sbiw	r28, 0x0a	; 10
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	fc 01       	movw	r30, r24
	unsigned char data[10];

	data[0]=0;									//начальный регистр
     486:	19 82       	std	Y+1, r1	; 0x01
	data[1]=(dec2bcd(rtc->seconds) & ~(1<<CH));	//секунды с запуском тактового
     488:	85 81       	ldd	r24, Z+5	; 0x05
     48a:	2a e0       	ldi	r18, 0x0A	; 10
     48c:	62 2f       	mov	r22, r18
     48e:	0e 94 6f 1a 	call	0x34de	; 0x34de <__udivmodqi4>
     492:	39 2f       	mov	r19, r25
     494:	40 e1       	ldi	r20, 0x10	; 16
     496:	84 9f       	mul	r24, r20
     498:	c0 01       	movw	r24, r0
     49a:	11 24       	eor	r1, r1
     49c:	83 2b       	or	r24, r19
     49e:	8f 77       	andi	r24, 0x7F	; 127
     4a0:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=dec2bcd(rtc->minutes);
     4a2:	84 81       	ldd	r24, Z+4	; 0x04
     4a4:	0e 94 6f 1a 	call	0x34de	; 0x34de <__udivmodqi4>
     4a8:	39 2f       	mov	r19, r25
     4aa:	40 e1       	ldi	r20, 0x10	; 16
     4ac:	84 9f       	mul	r24, r20
     4ae:	c0 01       	movw	r24, r0
     4b0:	11 24       	eor	r1, r1
     4b2:	83 2b       	or	r24, r19
     4b4:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=dec2bcd(rtc->hours);
     4b6:	83 81       	ldd	r24, Z+3	; 0x03
     4b8:	0e 94 6f 1a 	call	0x34de	; 0x34de <__udivmodqi4>
     4bc:	39 2f       	mov	r19, r25
     4be:	40 e1       	ldi	r20, 0x10	; 16
     4c0:	84 9f       	mul	r24, r20
     4c2:	c0 01       	movw	r24, r0
     4c4:	11 24       	eor	r1, r1
     4c6:	83 2b       	or	r24, r19
     4c8:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=0;									//день недели
     4ca:	1d 82       	std	Y+5, r1	; 0x05
	data[5]=dec2bcd(rtc->day);
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	0e 94 6f 1a 	call	0x34de	; 0x34de <__udivmodqi4>
     4d2:	39 2f       	mov	r19, r25
     4d4:	40 e1       	ldi	r20, 0x10	; 16
     4d6:	84 9f       	mul	r24, r20
     4d8:	c0 01       	movw	r24, r0
     4da:	11 24       	eor	r1, r1
     4dc:	83 2b       	or	r24, r19
     4de:	8e 83       	std	Y+6, r24	; 0x06
	data[6]=dec2bcd(rtc->month);
     4e0:	81 81       	ldd	r24, Z+1	; 0x01
     4e2:	0e 94 6f 1a 	call	0x34de	; 0x34de <__udivmodqi4>
     4e6:	39 2f       	mov	r19, r25
     4e8:	40 e1       	ldi	r20, 0x10	; 16
     4ea:	84 9f       	mul	r24, r20
     4ec:	c0 01       	movw	r24, r0
     4ee:	11 24       	eor	r1, r1
     4f0:	83 2b       	or	r24, r19
     4f2:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=dec2bcd(rtc->year);
     4f4:	80 81       	ld	r24, Z
     4f6:	0e 94 6f 1a 	call	0x34de	; 0x34de <__udivmodqi4>
     4fa:	29 2f       	mov	r18, r25
     4fc:	30 e1       	ldi	r19, 0x10	; 16
     4fe:	83 9f       	mul	r24, r19
     500:	c0 01       	movw	r24, r0
     502:	11 24       	eor	r1, r1
     504:	82 2b       	or	r24, r18
     506:	88 87       	std	Y+8, r24	; 0x08
	data[8]=0;									//управляющий регистр
     508:	19 86       	std	Y+9, r1	; 0x09
	data[9]=STRT;								//первый регистр ОЗУ(часы работают)
     50a:	8a ea       	ldi	r24, 0xAA	; 170
     50c:	8a 87       	std	Y+10, r24	; 0x0a
	if(twi_write(DS1307ADDR,data,10) !=0) return -1;//посыл
     50e:	4a e0       	ldi	r20, 0x0A	; 10
     510:	be 01       	movw	r22, r28
     512:	6f 5f       	subi	r22, 0xFF	; 255
     514:	7f 4f       	sbci	r23, 0xFF	; 255
     516:	80 ed       	ldi	r24, 0xD0	; 208
     518:	0e 94 71 01 	call	0x2e2	; 0x2e2 <twi_write>
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	81 11       	cpse	r24, r1
     520:	01 c0       	rjmp	.+2      	; 0x524 <rtc_set+0xb4>
     522:	90 e0       	ldi	r25, 0x00	; 0

	return 0;
}
     524:	89 2f       	mov	r24, r25
     526:	81 95       	neg	r24
     528:	2a 96       	adiw	r28, 0x0a	; 10
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <rtc_get>:

signed char rtc_get(struct RTC *rtc)
{
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	28 97       	sbiw	r28, 0x08	; 8
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	8c 01       	movw	r16, r24
	unsigned char data[7]={0},startreg=0;
     558:	ce 01       	movw	r24, r28
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	7c 01       	movw	r14, r24
     55e:	87 e0       	ldi	r24, 0x07	; 7
     560:	f7 01       	movw	r30, r14
     562:	11 92       	st	Z+, r1
     564:	8a 95       	dec	r24
     566:	e9 f7       	brne	.-6      	; 0x562 <rtc_get+0x28>
     568:	18 86       	std	Y+8, r1	; 0x08

	twi_write(DS1307ADDR,&startreg,1);							//посыл начальнОго регистра
     56a:	41 e0       	ldi	r20, 0x01	; 1
     56c:	be 01       	movw	r22, r28
     56e:	68 5f       	subi	r22, 0xF8	; 248
     570:	7f 4f       	sbci	r23, 0xFF	; 255
     572:	80 ed       	ldi	r24, 0xD0	; 208
     574:	0e 94 71 01 	call	0x2e2	; 0x2e2 <twi_write>
	if(twi_read(DS1307ADDR,data,7) !=0)return -1;	//читаем
     578:	47 e0       	ldi	r20, 0x07	; 7
     57a:	b7 01       	movw	r22, r14
     57c:	80 ed       	ldi	r24, 0xD0	; 208
     57e:	0e 94 c6 01 	call	0x38c	; 0x38c <twi_read>
     582:	81 11       	cpse	r24, r1
     584:	44 c0       	rjmp	.+136    	; 0x60e <rtc_get+0xd4>

	rtc->seconds=bcd2dec(data[0]);
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	98 2f       	mov	r25, r24
     58a:	92 95       	swap	r25
     58c:	9f 70       	andi	r25, 0x0F	; 15
     58e:	8f 70       	andi	r24, 0x0F	; 15
     590:	fa e0       	ldi	r31, 0x0A	; 10
     592:	9f 9f       	mul	r25, r31
     594:	80 0d       	add	r24, r0
     596:	11 24       	eor	r1, r1
     598:	f8 01       	movw	r30, r16
     59a:	85 83       	std	Z+5, r24	; 0x05
	rtc->minutes=bcd2dec(data[1]);
     59c:	8a 81       	ldd	r24, Y+2	; 0x02
     59e:	98 2f       	mov	r25, r24
     5a0:	92 95       	swap	r25
     5a2:	9f 70       	andi	r25, 0x0F	; 15
     5a4:	8f 70       	andi	r24, 0x0F	; 15
     5a6:	fa e0       	ldi	r31, 0x0A	; 10
     5a8:	9f 9f       	mul	r25, r31
     5aa:	80 0d       	add	r24, r0
     5ac:	11 24       	eor	r1, r1
     5ae:	f8 01       	movw	r30, r16
     5b0:	84 83       	std	Z+4, r24	; 0x04
	rtc->hours  =bcd2dec(data[2]);
     5b2:	8b 81       	ldd	r24, Y+3	; 0x03
     5b4:	98 2f       	mov	r25, r24
     5b6:	92 95       	swap	r25
     5b8:	9f 70       	andi	r25, 0x0F	; 15
     5ba:	8f 70       	andi	r24, 0x0F	; 15
     5bc:	fa e0       	ldi	r31, 0x0A	; 10
     5be:	9f 9f       	mul	r25, r31
     5c0:	80 0d       	add	r24, r0
     5c2:	11 24       	eor	r1, r1
     5c4:	f8 01       	movw	r30, r16
     5c6:	83 83       	std	Z+3, r24	; 0x03
	rtc->day    =bcd2dec(data[4]);			//дни недели пропускаем
     5c8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ca:	98 2f       	mov	r25, r24
     5cc:	92 95       	swap	r25
     5ce:	9f 70       	andi	r25, 0x0F	; 15
     5d0:	8f 70       	andi	r24, 0x0F	; 15
     5d2:	fa e0       	ldi	r31, 0x0A	; 10
     5d4:	9f 9f       	mul	r25, r31
     5d6:	80 0d       	add	r24, r0
     5d8:	11 24       	eor	r1, r1
     5da:	f8 01       	movw	r30, r16
     5dc:	82 83       	std	Z+2, r24	; 0x02
	rtc->month  =bcd2dec(data[5]);
     5de:	8e 81       	ldd	r24, Y+6	; 0x06
     5e0:	98 2f       	mov	r25, r24
     5e2:	92 95       	swap	r25
     5e4:	9f 70       	andi	r25, 0x0F	; 15
     5e6:	8f 70       	andi	r24, 0x0F	; 15
     5e8:	fa e0       	ldi	r31, 0x0A	; 10
     5ea:	9f 9f       	mul	r25, r31
     5ec:	80 0d       	add	r24, r0
     5ee:	11 24       	eor	r1, r1
     5f0:	f8 01       	movw	r30, r16
     5f2:	81 83       	std	Z+1, r24	; 0x01
	rtc->year   =bcd2dec(data[6]);	//год без десятков
     5f4:	8f 81       	ldd	r24, Y+7	; 0x07
     5f6:	98 2f       	mov	r25, r24
     5f8:	92 95       	swap	r25
     5fa:	9f 70       	andi	r25, 0x0F	; 15
     5fc:	8f 70       	andi	r24, 0x0F	; 15
     5fe:	fa e0       	ldi	r31, 0x0A	; 10
     600:	9f 9f       	mul	r25, r31
     602:	80 0d       	add	r24, r0
     604:	11 24       	eor	r1, r1
     606:	f8 01       	movw	r30, r16
     608:	80 83       	st	Z, r24

	return 0;
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	01 c0       	rjmp	.+2      	; 0x610 <rtc_get+0xd6>
signed char rtc_get(struct RTC *rtc)
{
	unsigned char data[7]={0},startreg=0;

	twi_write(DS1307ADDR,&startreg,1);							//посыл начальнОго регистра
	if(twi_read(DS1307ADDR,data,7) !=0)return -1;	//читаем
     60e:	8f ef       	ldi	r24, 0xFF	; 255
	rtc->day    =bcd2dec(data[4]);			//дни недели пропускаем
	rtc->month  =bcd2dec(data[5]);
	rtc->year   =bcd2dec(data[6]);	//год без десятков

	return 0;
}
     610:	28 96       	adiw	r28, 0x08	; 8
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	08 95       	ret

0000062a <rtc_check>:

signed char rtc_check(void)
{
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	00 d0       	rcall	.+0      	; 0x630 <rtc_check+0x6>
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
	unsigned char result=0,startreg=8;
     634:	1a 82       	std	Y+2, r1	; 0x02
     636:	88 e0       	ldi	r24, 0x08	; 8
     638:	89 83       	std	Y+1, r24	; 0x01

	twi_write(DS1307ADDR,&startreg,1);								//посыл начальнОго регистра
     63a:	41 e0       	ldi	r20, 0x01	; 1
     63c:	be 01       	movw	r22, r28
     63e:	6f 5f       	subi	r22, 0xFF	; 255
     640:	7f 4f       	sbci	r23, 0xFF	; 255
     642:	80 ed       	ldi	r24, 0xD0	; 208
     644:	0e 94 71 01 	call	0x2e2	; 0x2e2 <twi_write>
	if(twi_read(DS1307ADDR,&result,1) !=0)return -1;	//читаем
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	be 01       	movw	r22, r28
     64c:	6e 5f       	subi	r22, 0xFE	; 254
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	80 ed       	ldi	r24, 0xD0	; 208
     652:	0e 94 c6 01 	call	0x38c	; 0x38c <twi_read>
     656:	81 11       	cpse	r24, r1
     658:	07 c0       	rjmp	.+14     	; 0x668 <rtc_check+0x3e>

	if(result==STRT) return 0;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	9a 3a       	cpi	r25, 0xAA	; 170
     660:	09 f4       	brne	.+2      	; 0x664 <rtc_check+0x3a>
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	81 95       	neg	r24
     666:	01 c0       	rjmp	.+2      	; 0x66a <rtc_check+0x40>
signed char rtc_check(void)
{
	unsigned char result=0,startreg=8;

	twi_write(DS1307ADDR,&startreg,1);								//посыл начальнОго регистра
	if(twi_read(DS1307ADDR,&result,1) !=0)return -1;	//читаем
     668:	8f ef       	ldi	r24, 0xFF	; 255

	if(result==STRT) return 0;
	return -1;
}
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <LCD_sendCmd>:
	_delay_ms(1);
}

void LCD_sendCmd(unsigned char cmd)	//Sends Command to LCD
{
     674:	cf 92       	push	r12
     676:	df 92       	push	r13
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	c8 2f       	mov	r28, r24
	//старшие полбайта команды
	LDP |= ((cmd>>7 & 0x01)<<LCD_DB7) | ((cmd>>6 & 0x01)<<LCD_DB6) | ((cmd>>5 & 0x01)<<LCD_DB5) | ((cmd>>4 & 0x01)<<LCD_DB4);
     684:	88 b3       	in	r24, 0x18	; 24
     686:	c6 fb       	bst	r28, 6
     688:	66 27       	eor	r22, r22
     68a:	60 f9       	bld	r22, 0
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	66 0f       	add	r22, r22
     690:	77 1f       	adc	r23, r23
     692:	9c 2f       	mov	r25, r28
     694:	99 1f       	adc	r25, r25
     696:	99 27       	eor	r25, r25
     698:	99 1f       	adc	r25, r25
     69a:	89 2b       	or	r24, r25
     69c:	68 2b       	or	r22, r24
     69e:	c5 fb       	bst	r28, 5
     6a0:	44 27       	eor	r20, r20
     6a2:	40 f9       	bld	r20, 0
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	44 0f       	add	r20, r20
     6a8:	55 1f       	adc	r21, r21
     6aa:	44 0f       	add	r20, r20
     6ac:	55 1f       	adc	r21, r21
     6ae:	46 2b       	or	r20, r22
     6b0:	c4 fb       	bst	r28, 4
     6b2:	22 27       	eor	r18, r18
     6b4:	20 f9       	bld	r18, 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	53 e0       	ldi	r21, 0x03	; 3
     6ba:	22 0f       	add	r18, r18
     6bc:	33 1f       	adc	r19, r19
     6be:	5a 95       	dec	r21
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <LCD_sendCmd+0x46>
     6c2:	24 2b       	or	r18, r20
     6c4:	28 bb       	out	0x18, r18	; 24
	LCD_strob();
     6c6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_strob>
	//младшие полбайта команды
	CLRLDP;
     6ca:	88 b3       	in	r24, 0x18	; 24
     6cc:	80 7f       	andi	r24, 0xF0	; 240
     6ce:	88 bb       	out	0x18, r24	; 24
	LDP = ((cmd>>3 & 0x01)<<LCD_DB7) | ((cmd>>2 & 0x01)<<LCD_DB6) | ((cmd>>1 & 0x01)<<LCD_DB5) | ((cmd>>0 & 0x01)<<LCD_DB4);
     6d0:	c3 fb       	bst	r28, 3
     6d2:	88 27       	eor	r24, r24
     6d4:	80 f9       	bld	r24, 0
     6d6:	c0 fb       	bst	r28, 0
     6d8:	cc 24       	eor	r12, r12
     6da:	c0 f8       	bld	r12, 0
     6dc:	d1 2c       	mov	r13, r1
     6de:	63 e0       	ldi	r22, 0x03	; 3
     6e0:	cc 0c       	add	r12, r12
     6e2:	dd 1c       	adc	r13, r13
     6e4:	6a 95       	dec	r22
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <LCD_sendCmd+0x6c>
     6e8:	c8 2a       	or	r12, r24
     6ea:	c2 fb       	bst	r28, 2
     6ec:	ee 24       	eor	r14, r14
     6ee:	e0 f8       	bld	r14, 0
     6f0:	f1 2c       	mov	r15, r1
     6f2:	ee 0c       	add	r14, r14
     6f4:	ff 1c       	adc	r15, r15
     6f6:	ec 28       	or	r14, r12
     6f8:	c1 fb       	bst	r28, 1
     6fa:	00 27       	eor	r16, r16
     6fc:	00 f9       	bld	r16, 0
     6fe:	10 e0       	ldi	r17, 0x00	; 0
     700:	00 0f       	add	r16, r16
     702:	11 1f       	adc	r17, r17
     704:	00 0f       	add	r16, r16
     706:	11 1f       	adc	r17, r17
     708:	0e 29       	or	r16, r14
     70a:	08 bb       	out	0x18, r16	; 24
	LCD_strob();
     70c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_strob>
	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины
     710:	85 b3       	in	r24, 0x15	; 21
     712:	83 7e       	andi	r24, 0xE3	; 227
     714:	85 bb       	out	0x15, r24	; 21
     716:	88 b3       	in	r24, 0x18	; 24
     718:	80 7f       	andi	r24, 0xF0	; 240
     71a:	88 bb       	out	0x18, r24	; 24
}
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	08 95       	ret

0000072c <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     72c:	2f ef       	ldi	r18, 0xFF	; 255
     72e:	89 ef       	ldi	r24, 0xF9	; 249
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	21 50       	subi	r18, 0x01	; 1
     734:	80 40       	sbci	r24, 0x00	; 0
     736:	90 40       	sbci	r25, 0x00	; 0
     738:	e1 f7       	brne	.-8      	; 0x732 <LCD_init+0x6>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <LCD_init+0x10>
     73c:	00 00       	nop

void LCD_init(void)//Initializes LCD
{
	//инициализация портов
	_delay_ms(20);								//Wait for more than 15 ms after VCC rises to 4.5 V
	CLRLDP; 								//пины порта данных =0
     73e:	88 b3       	in	r24, 0x18	; 24
     740:	80 7f       	andi	r24, 0xF0	; 240
     742:	88 bb       	out	0x18, r24	; 24
	LDDR |= (1<<LCD_DB7) | (1<<LCD_DB6) | (1<<LCD_DB5) | (1<<LCD_DB4);	//пины порта данных =выходы
     744:	87 b3       	in	r24, 0x17	; 23
     746:	8f 60       	ori	r24, 0x0F	; 15
     748:	87 bb       	out	0x17, r24	; 23
	CLRLCP;									//пины порта управляющих сигналов =0
     74a:	85 b3       	in	r24, 0x15	; 21
     74c:	83 7e       	andi	r24, 0xE3	; 227
     74e:	85 bb       	out	0x15, r24	; 21
	LCDR |= (1<<LCD_E) | (1<<LCD_RW) | (1<<LCD_RS);				//пины порта управляющих сигналов =выходы
     750:	84 b3       	in	r24, 0x14	; 20
     752:	8c 61       	ori	r24, 0x1C	; 28
     754:	84 bb       	out	0x14, r24	; 20

//	LDP |= convert(0b00110000);		//1
//	CLRLDP;								//обнулили пины DB
	LDP |= (1<<LCD_DB4) | (1<<LCD_DB5);	//step1
     756:	88 b3       	in	r24, 0x18	; 24
     758:	8c 60       	ori	r24, 0x0C	; 12
     75a:	88 bb       	out	0x18, r24	; 24
	LCD_strob();
     75c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_strob>
     760:	8f e1       	ldi	r24, 0x1F	; 31
     762:	9e e4       	ldi	r25, 0x4E	; 78
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <LCD_init+0x38>
     768:	00 c0       	rjmp	.+0      	; 0x76a <LCD_init+0x3e>
     76a:	00 00       	nop
	_delay_ms(5);						//Wait for more than 4.1 m
	LCD_strob();						//step2
     76c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_strob>
     770:	8f e1       	ldi	r24, 0x1F	; 31
     772:	9e e4       	ldi	r25, 0x4E	; 78
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <LCD_init+0x48>
     778:	00 c0       	rjmp	.+0      	; 0x77a <LCD_init+0x4e>
     77a:	00 00       	nop
	_delay_ms(5);
	LCD_strob();						//step3
     77c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_strob>
	LDP &= ~(1<<LCD_DB4);				//step4 обнулили DB4
     780:	c3 98       	cbi	0x18, 3	; 24
	LCD_strob();
     782:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_strob>
     786:	8f e3       	ldi	r24, 0x3F	; 63
     788:	9f e1       	ldi	r25, 0x1F	; 31
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <LCD_init+0x5e>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <LCD_init+0x64>
     790:	00 00       	nop
	_delay_ms(2);
	LCD_sendCmd(0b00101000);	//4х разрядный режим(4);страница знакогенератора(1)
     792:	88 e2       	ldi	r24, 0x28	; 40
     794:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_sendCmd>
   	LCD_sendCmd(0b00001000);	//дисплей откл(2);курсор выкл(1);мигание курсора выкл(0)
     798:	88 e0       	ldi	r24, 0x08	; 8
     79a:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_sendCmd>
   	LCD_sendCmd(0b00000001);	//очистка дисплея
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_sendCmd>
   	LCD_sendCmd(0b00000110);	//сдвиг курсора вправо(1)
     7a4:	86 e0       	ldi	r24, 0x06	; 6
     7a6:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_sendCmd>

   	CLRLDP; CLRLCP;
     7aa:	88 b3       	in	r24, 0x18	; 24
     7ac:	80 7f       	andi	r24, 0xF0	; 240
     7ae:	88 bb       	out	0x18, r24	; 24
     7b0:	85 b3       	in	r24, 0x15	; 21
     7b2:	83 7e       	andi	r24, 0xE3	; 227
     7b4:	85 bb       	out	0x15, r24	; 21
     7b6:	08 95       	ret

000007b8 <LCD_cursorOn>:
}

void LCD_cursorOn(void) //displays LCD cursor
{
	LCD_sendCmd(0x0E);
     7b8:	8e e0       	ldi	r24, 0x0E	; 14
     7ba:	0c 94 3a 03 	jmp	0x674	; 0x674 <LCD_sendCmd>

000007be <LCD_cursorBlink>:
}

void LCD_cursorBlink(void)	//displays LCD blinking cursor
{
	LCD_sendCmd(0x0F);
     7be:	8f e0       	ldi	r24, 0x0F	; 15
     7c0:	0c 94 3a 03 	jmp	0x674	; 0x674 <LCD_sendCmd>

000007c4 <LCD_visible>:
	LCD_sendCmd(0x0C);
}

void LCD_visible(void)		//Shows LCD
{
	LCD_sendCmd(0x0C);
     7c4:	8c e0       	ldi	r24, 0x0C	; 12
     7c6:	0c 94 3a 03 	jmp	0x674	; 0x674 <LCD_sendCmd>

000007ca <LCD_cursorOff>:
     7ca:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <LCD_visible>

000007ce <LCD_clr>:
}

void LCD_clr(void)				//Clears LCD
{
	LCD_sendCmd(0x01);x=0;y=0;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_sendCmd>
     7d4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <x>
     7d8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <y>
     7dc:	8f e1       	ldi	r24, 0x1F	; 31
     7de:	9e e4       	ldi	r25, 0x4E	; 78
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <LCD_clr+0x12>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <LCD_clr+0x18>
     7e6:	00 00       	nop
     7e8:	08 95       	ret

000007ea <LCD_gotoXY>:
	_delay_ms(5);
}

void LCD_gotoXY(char cx, char cy)	//Cursor to X Y position
{
	x=cx;y=cy;
     7ea:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <x>
     7ee:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <y>
	// remap lines into proper order
	switch(y)
     7f2:	61 30       	cpi	r22, 0x01	; 1
     7f4:	39 f0       	breq	.+14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7f6:	48 f0       	brcs	.+18     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     7f8:	62 30       	cpi	r22, 0x02	; 2
     7fa:	31 f0       	breq	.+12     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7fc:	63 30       	cpi	r22, 0x03	; 3
     7fe:	29 f4       	brne	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	{
	case 0: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
	case 1: LCD_sendCmd(0x80 | (LCD_LINE1_DDRAMADDR+x)); break;
	case 2: LCD_sendCmd(0x80 | (LCD_LINE2_DDRAMADDR+x)); break;
	case 3: LCD_sendCmd(0x80 | (LCD_LINE3_DDRAMADDR+x)); break;
     800:	8c 5a       	subi	r24, 0xAC	; 172
     802:	03 c0       	rjmp	.+6      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	x=cx;y=cy;
	// remap lines into proper order
	switch(y)
	{
	case 0: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
	case 1: LCD_sendCmd(0x80 | (LCD_LINE1_DDRAMADDR+x)); break;
     804:	80 5c       	subi	r24, 0xC0	; 192
     806:	01 c0       	rjmp	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	case 2: LCD_sendCmd(0x80 | (LCD_LINE2_DDRAMADDR+x)); break;
     808:	8c 5e       	subi	r24, 0xEC	; 236
	case 3: LCD_sendCmd(0x80 | (LCD_LINE3_DDRAMADDR+x)); break;
	default: LCD_sendCmd(0x80 | (LCD_LINE0_DDRAMADDR+x)); break;
     80a:	80 68       	ori	r24, 0x80	; 128
     80c:	0c 94 3a 03 	jmp	0x674	; 0x674 <LCD_sendCmd>

00000810 <LCD_putchar>:
	}

}

void LCD_putchar(char ch)
{
     810:	cf 92       	push	r12
     812:	df 92       	push	r13
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	c8 2f       	mov	r28, r24
	if ( ch >= 0xC0 ) ch = (char)pgm_read_byte(&lcd_codepage[ch - 0xC0]); //преобразование СР1251 в коды LCD
     822:	80 3c       	cpi	r24, 0xC0	; 192
     824:	28 f0       	brcs	.+10     	; 0x830 <LCD_putchar+0x20>
     826:	d0 e0       	ldi	r29, 0x00	; 0
     828:	fe 01       	movw	r30, r28
     82a:	e3 5d       	subi	r30, 0xD3	; 211
     82c:	fe 4f       	sbci	r31, 0xFE	; 254
     82e:	c4 91       	lpm	r28, Z

	//4 bit part
	LCP |= 1<<LCD_RS; 	//установили RS
     830:	aa 9a       	sbi	0x15, 2	; 21

	//старшие полбайта символа
	LDP |= ((ch>>7 & 0x01)<<LCD_DB7) | ((ch>>6 & 0x01)<<LCD_DB6) | ((ch>>5 & 0x01)<<LCD_DB5) | ((ch>>4 & 0x01)<<LCD_DB4);
     832:	88 b3       	in	r24, 0x18	; 24
     834:	c6 fb       	bst	r28, 6
     836:	66 27       	eor	r22, r22
     838:	60 f9       	bld	r22, 0
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	66 0f       	add	r22, r22
     83e:	77 1f       	adc	r23, r23
     840:	9c 2f       	mov	r25, r28
     842:	99 1f       	adc	r25, r25
     844:	99 27       	eor	r25, r25
     846:	99 1f       	adc	r25, r25
     848:	89 2b       	or	r24, r25
     84a:	68 2b       	or	r22, r24
     84c:	c5 fb       	bst	r28, 5
     84e:	44 27       	eor	r20, r20
     850:	40 f9       	bld	r20, 0
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	44 0f       	add	r20, r20
     856:	55 1f       	adc	r21, r21
     858:	44 0f       	add	r20, r20
     85a:	55 1f       	adc	r21, r21
     85c:	46 2b       	or	r20, r22
     85e:	c4 fb       	bst	r28, 4
     860:	22 27       	eor	r18, r18
     862:	20 f9       	bld	r18, 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	53 e0       	ldi	r21, 0x03	; 3
     868:	22 0f       	add	r18, r18
     86a:	33 1f       	adc	r19, r19
     86c:	5a 95       	dec	r21
     86e:	e1 f7       	brne	.-8      	; 0x868 <__stack+0x9>
     870:	24 2b       	or	r18, r20
     872:	28 bb       	out	0x18, r18	; 24
	LCD_strob();
     874:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_strob>

	//младшие полбайта символа
	CLRLDP;
     878:	88 b3       	in	r24, 0x18	; 24
     87a:	80 7f       	andi	r24, 0xF0	; 240
     87c:	88 bb       	out	0x18, r24	; 24
	LDP |= ((ch>>3 & 0x01)<<LCD_DB7) | ((ch>>2 & 0x01)<<LCD_DB6) | ((ch>>1 & 0x01)<<LCD_DB5) | ((ch>>0 & 0x01)<<LCD_DB4);
     87e:	88 b3       	in	r24, 0x18	; 24
     880:	c3 fb       	bst	r28, 3
     882:	99 27       	eor	r25, r25
     884:	90 f9       	bld	r25, 0
     886:	89 2b       	or	r24, r25
     888:	c0 fb       	bst	r28, 0
     88a:	cc 24       	eor	r12, r12
     88c:	c0 f8       	bld	r12, 0
     88e:	d1 2c       	mov	r13, r1
     890:	63 e0       	ldi	r22, 0x03	; 3
     892:	cc 0c       	add	r12, r12
     894:	dd 1c       	adc	r13, r13
     896:	6a 95       	dec	r22
     898:	e1 f7       	brne	.-8      	; 0x892 <__stack+0x33>
     89a:	c8 2a       	or	r12, r24
     89c:	c2 fb       	bst	r28, 2
     89e:	ee 24       	eor	r14, r14
     8a0:	e0 f8       	bld	r14, 0
     8a2:	f1 2c       	mov	r15, r1
     8a4:	ee 0c       	add	r14, r14
     8a6:	ff 1c       	adc	r15, r15
     8a8:	ec 28       	or	r14, r12
     8aa:	c1 fb       	bst	r28, 1
     8ac:	00 27       	eor	r16, r16
     8ae:	00 f9       	bld	r16, 0
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	00 0f       	add	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	00 0f       	add	r16, r16
     8b8:	11 1f       	adc	r17, r17
     8ba:	0e 29       	or	r16, r14
     8bc:	08 bb       	out	0x18, r16	; 24
	LCD_strob();
     8be:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_strob>

	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины
     8c2:	85 b3       	in	r24, 0x15	; 21
     8c4:	83 7e       	andi	r24, 0xE3	; 227
     8c6:	85 bb       	out	0x15, r24	; 21
     8c8:	88 b3       	in	r24, 0x18	; 24
     8ca:	80 7f       	andi	r24, 0xF0	; 240
     8cc:	88 bb       	out	0x18, r24	; 24

	if(++x >= LCD_MAXX)
     8ce:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <x>
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	84 31       	cpi	r24, 0x14	; 20
     8d6:	58 f4       	brcc	.+22     	; 0x8ee <__stack+0x8f>
     8d8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <x>
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
		}
	}
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	cf 90       	pop	r12
     8ec:	08 95       	ret

	CLRLCP;CLRLDP;//обнулили все командные и управляющие пины

	if(++x >= LCD_MAXX)
	{
		x=0;y++;
     8ee:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <x>
     8f2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <y>
     8f6:	8f 5f       	subi	r24, 0xFF	; 255
     8f8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <y>
		switch (y)
     8fc:	81 30       	cpi	r24, 0x01	; 1
     8fe:	39 f0       	breq	.+14     	; 0x90e <__stack+0xaf>
     900:	50 f0       	brcs	.+20     	; 0x916 <__stack+0xb7>
     902:	82 30       	cpi	r24, 0x02	; 2
     904:	31 f0       	breq	.+12     	; 0x912 <__stack+0xb3>
     906:	83 30       	cpi	r24, 0x03	; 3
     908:	31 f4       	brne	.+12     	; 0x916 <__stack+0xb7>
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
     90a:	84 ed       	ldi	r24, 0xD4	; 212
     90c:	05 c0       	rjmp	.+10     	; 0x918 <__stack+0xb9>
	{
		x=0;y++;
		switch (y)
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
     90e:	80 ec       	ldi	r24, 0xC0	; 192
     910:	03 c0       	rjmp	.+6      	; 0x918 <__stack+0xb9>
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
     912:	84 e9       	ldi	r24, 0x94	; 148
     914:	01 c0       	rjmp	.+2      	; 0x918 <__stack+0xb9>
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
     916:	80 e8       	ldi	r24, 0x80	; 128
		}
	}
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
		{
			case 0: LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
			case 1: LCD_sendCmd(0x80 | LCD_LINE1_DDRAMADDR);break;
			case 2: LCD_sendCmd(0x80 | LCD_LINE2_DDRAMADDR);break;
			case 3: LCD_sendCmd(0x80 | LCD_LINE3_DDRAMADDR);break;
			default:LCD_sendCmd(0x80 | LCD_LINE0_DDRAMADDR);break;
     928:	0c 94 3a 03 	jmp	0x674	; 0x674 <LCD_sendCmd>

0000092c <LCD_puts>:
		}
	}
}

void LCD_puts(char* data, char nBytes)	//Outputs string to LCD с автоматической перекодировкой с СР1251
{
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	d6 2f       	mov	r29, r22
     936:	8c 01       	movw	r16, r24
	// print data
	for(unsigned char i=0; i<nBytes; i++)
     938:	c0 e0       	ldi	r28, 0x00	; 0
     93a:	cd 17       	cp	r28, r29
     93c:	81 f0       	breq	.+32     	; 0x95e <LCD_puts+0x32>
	{
		if(data[i]==0)								//если дошли до конца строки
     93e:	f8 01       	movw	r30, r16
     940:	81 91       	ld	r24, Z+
     942:	8f 01       	movw	r16, r30
     944:	81 11       	cpse	r24, r1
     946:	07 c0       	rjmp	.+14     	; 0x956 <LCD_puts+0x2a>
		{
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
     948:	80 e2       	ldi	r24, 0x20	; 32
     94a:	0e 94 08 04 	call	0x810	; 0x810 <LCD_putchar>
     94e:	cf 5f       	subi	r28, 0xFF	; 255
     950:	cd 17       	cp	r28, r29
     952:	d0 f3       	brcs	.-12     	; 0x948 <LCD_puts+0x1c>
     954:	04 c0       	rjmp	.+8      	; 0x95e <LCD_puts+0x32>
			return;
		}
		else LCD_putchar(data[i]);
     956:	0e 94 08 04 	call	0x810	; 0x810 <LCD_putchar>
}

void LCD_puts(char* data, char nBytes)	//Outputs string to LCD с автоматической перекодировкой с СР1251
{
	// print data
	for(unsigned char i=0; i<nBytes; i++)
     95a:	cf 5f       	subi	r28, 0xFF	; 255
     95c:	ee cf       	rjmp	.-36     	; 0x93a <LCD_puts+0xe>
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
			return;
		}
		else LCD_putchar(data[i]);
	}
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	08 95       	ret

00000968 <printIOStr>:
	LCD_gotoXY(x,y);
	LCD_puts(buffer,20);
}

static inline void printIOStr(volatile unsigned char *data)
{
     968:	cf 92       	push	r12
     96a:	df 92       	push	r13
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	6b 97       	sbiw	r28, 0x1b	; 27
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	7c 01       	movw	r14, r24
	char buffer[20];
	char tmpStr[7];
	unsigned char i;

	//строка 2 "ВОД:  ДВХ:"
	LCD_gotoXY(0,2);
     98a:	62 e0       	ldi	r22, 0x02	; 2
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
	strcpy_P(buffer,VOD);strcat(buffer,":");										//ВОД:
     992:	67 e7       	ldi	r22, 0x77	; 119
     994:	71 e0       	ldi	r23, 0x01	; 1
     996:	ce 01       	movw	r24, r28
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <strcpy_P>
     99e:	62 ed       	ldi	r22, 0xD2	; 210
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	ce 01       	movw	r24, r28
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <strcat>
	if((*data & 0x0F) ==0) strcat_P(buffer,NET);									//"нет"
     9aa:	f7 01       	movw	r30, r14
     9ac:	80 81       	ld	r24, Z
     9ae:	8f 70       	andi	r24, 0x0F	; 15
     9b0:	39 f4       	brne	.+14     	; 0x9c0 <printIOStr+0x58>
     9b2:	67 eb       	ldi	r22, 0xB7	; 183
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 c5 1a 	call	0x358a	; 0x358a <strcat_P>
     9be:	2d c0       	rjmp	.+90     	; 0xa1a <printIOStr+0xb2>
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
	else for(i=0;i<4;i++) if( chkBit(*data,i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//или номера
     9c4:	cc 24       	eor	r12, r12
     9c6:	c3 94       	inc	r12
     9c8:	d1 2c       	mov	r13, r1
     9ca:	f7 01       	movw	r30, r14
     9cc:	30 81       	ld	r19, Z
     9ce:	a6 01       	movw	r20, r12
     9d0:	08 2e       	mov	r0, r24
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <printIOStr+0x70>
     9d4:	44 0f       	add	r20, r20
     9d6:	55 1f       	adc	r21, r21
     9d8:	0a 94       	dec	r0
     9da:	e2 f7       	brpl	.-8      	; 0x9d4 <printIOStr+0x6c>
     9dc:	23 2f       	mov	r18, r19
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	24 23       	and	r18, r20
     9e2:	35 23       	and	r19, r21
     9e4:	08 2e       	mov	r0, r24
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <printIOStr+0x84>
     9e8:	35 95       	asr	r19
     9ea:	27 95       	ror	r18
     9ec:	0a 94       	dec	r0
     9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <printIOStr+0x80>
     9f0:	8c 01       	movw	r16, r24
     9f2:	0f 5f       	subi	r16, 0xFF	; 255
     9f4:	1f 4f       	sbci	r17, 0xFF	; 255
     9f6:	23 2b       	or	r18, r19
     9f8:	61 f0       	breq	.+24     	; 0xa12 <printIOStr+0xaa>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9fa:	4a e0       	ldi	r20, 0x0A	; 10
     9fc:	be 01       	movw	r22, r28
     9fe:	6b 5e       	subi	r22, 0xEB	; 235
     a00:	7f 4f       	sbci	r23, 0xFF	; 255
     a02:	c8 01       	movw	r24, r16
     a04:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
     a08:	bc 01       	movw	r22, r24
     a0a:	ce 01       	movw	r24, r28
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <strcat>
     a12:	c8 01       	movw	r24, r16
     a14:	04 30       	cpi	r16, 0x04	; 4
     a16:	11 05       	cpc	r17, r1
     a18:	c1 f6       	brne	.-80     	; 0x9ca <printIOStr+0x62>
	LCD_puts(buffer,20);
     a1a:	64 e1       	ldi	r22, 0x14	; 20
     a1c:	ce 01       	movw	r24, r28
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
	LCD_gotoXY(9,2);
     a24:	62 e0       	ldi	r22, 0x02	; 2
     a26:	89 e0       	ldi	r24, 0x09	; 9
     a28:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
	strcpy_P(buffer,DVX);strcat(buffer,":");	//ДВХ:
     a2c:	63 e7       	ldi	r22, 0x73	; 115
     a2e:	71 e0       	ldi	r23, 0x01	; 1
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <strcpy_P>
     a38:	62 ed       	ldi	r22, 0xD2	; 210
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	ce 01       	movw	r24, r28
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <strcat>
	if((*data & 0xF0) ==0) strcat_P(buffer,NET);	//"нет"
     a44:	f7 01       	movw	r30, r14
     a46:	80 81       	ld	r24, Z
     a48:	80 7f       	andi	r24, 0xF0	; 240
     a4a:	39 f4       	brne	.+14     	; 0xa5a <printIOStr+0xf2>
     a4c:	67 eb       	ldi	r22, 0xB7	; 183
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 c5 1a 	call	0x358a	; 0x358a <strcat_P>
     a58:	2b c0       	rjmp	.+86     	; 0xab0 <printIOStr+0x148>
     a5a:	04 e0       	ldi	r16, 0x04	; 4
     a5c:	10 e0       	ldi	r17, 0x00	; 0
	else for(i=4;i<8;i++) if( chkBit(*data,i) ) strcat(buffer,itoa(i-4+1,tmpStr,10));	//рисуем номера неисправных
     a5e:	cc 24       	eor	r12, r12
     a60:	c3 94       	inc	r12
     a62:	d1 2c       	mov	r13, r1
     a64:	f7 01       	movw	r30, r14
     a66:	80 81       	ld	r24, Z
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	96 01       	movw	r18, r12
     a6c:	00 2e       	mov	r0, r16
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <printIOStr+0x10c>
     a70:	22 0f       	add	r18, r18
     a72:	33 1f       	adc	r19, r19
     a74:	0a 94       	dec	r0
     a76:	e2 f7       	brpl	.-8      	; 0xa70 <printIOStr+0x108>
     a78:	82 23       	and	r24, r18
     a7a:	93 23       	and	r25, r19
     a7c:	00 2e       	mov	r0, r16
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <printIOStr+0x11c>
     a80:	95 95       	asr	r25
     a82:	87 95       	ror	r24
     a84:	0a 94       	dec	r0
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <printIOStr+0x118>
     a88:	89 2b       	or	r24, r25
     a8a:	69 f0       	breq	.+26     	; 0xaa6 <printIOStr+0x13e>
     a8c:	4a e0       	ldi	r20, 0x0A	; 10
     a8e:	be 01       	movw	r22, r28
     a90:	6b 5e       	subi	r22, 0xEB	; 235
     a92:	7f 4f       	sbci	r23, 0xFF	; 255
     a94:	c8 01       	movw	r24, r16
     a96:	03 97       	sbiw	r24, 0x03	; 3
     a98:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
     a9c:	bc 01       	movw	r22, r24
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <strcat>
     aa6:	0f 5f       	subi	r16, 0xFF	; 255
     aa8:	1f 4f       	sbci	r17, 0xFF	; 255
     aaa:	08 30       	cpi	r16, 0x08	; 8
     aac:	11 05       	cpc	r17, r1
     aae:	d1 f6       	brne	.-76     	; 0xa64 <printIOStr+0xfc>
	LCD_puts(buffer,20);
     ab0:	64 e1       	ldi	r22, 0x14	; 20
     ab2:	ce 01       	movw	r24, r28
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
}
     aba:	6b 96       	adiw	r28, 0x1b	; 27
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	ff 90       	pop	r15
     ad0:	ef 90       	pop	r14
     ad2:	df 90       	pop	r13
     ad4:	cf 90       	pop	r12
     ad6:	08 95       	ret

00000ad8 <printMTZStr>:

static inline void printMTZStr(unsigned int MTZon,unsigned int MTZoff)
{
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	6b 97       	sbiw	r28, 0x1b	; 27
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	7c 01       	movw	r14, r24
     af6:	8b 01       	movw	r16, r22
	char buffer[20];
	char tmpStr[7];
	//строка 2 "вкл.МТЗ"
	LCD_gotoXY(0,2);
     af8:	62 e0       	ldi	r22, 0x02	; 2
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
	strcpy_P(buffer,VKL_MTZ);
     b00:	62 e8       	ldi	r22, 0x82	; 130
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <strcpy_P>
	if(MTZon==0xFFFF)strcat_P(buffer,NET);
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	e8 16       	cp	r14, r24
     b10:	f8 06       	cpc	r15, r24
     b12:	19 f4       	brne	.+6      	; 0xb1a <printMTZStr+0x42>
     b14:	67 eb       	ldi	r22, 0xB7	; 183
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	0e c0       	rjmp	.+28     	; 0xb36 <printMTZStr+0x5e>
     b1a:	4a e0       	ldi	r20, 0x0A	; 10
     b1c:	be 01       	movw	r22, r28
     b1e:	6b 5e       	subi	r22, 0xEB	; 235
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	c7 01       	movw	r24, r14
     b24:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
	else {strcat(buffer,itoa(MTZon,tmpStr,10));strcat_P(buffer,MS);}
     b28:	bc 01       	movw	r22, r24
     b2a:	ce 01       	movw	r24, r28
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <strcat>
     b32:	65 e7       	ldi	r22, 0x75	; 117
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	ce 01       	movw	r24, r28
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	0e 94 c5 1a 	call	0x358a	; 0x358a <strcat_P>
	LCD_puts(buffer,20);
     b3e:	64 e1       	ldi	r22, 0x14	; 20
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>

	//строка 3 "откл.МТЗ"
	LCD_gotoXY(0,3);
     b48:	63 e0       	ldi	r22, 0x03	; 3
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
	strcpy_P(buffer,OTKL_MTZ);
     b50:	68 e7       	ldi	r22, 0x78	; 120
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	ce 01       	movw	r24, r28
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <strcpy_P>
	if(MTZoff==0xFFFF)strcat_P(buffer,NET);
     b5c:	0f 3f       	cpi	r16, 0xFF	; 255
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	18 07       	cpc	r17, r24
     b62:	19 f4       	brne	.+6      	; 0xb6a <printMTZStr+0x92>
     b64:	67 eb       	ldi	r22, 0xB7	; 183
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	0e c0       	rjmp	.+28     	; 0xb86 <printMTZStr+0xae>
     b6a:	4a e0       	ldi	r20, 0x0A	; 10
     b6c:	be 01       	movw	r22, r28
     b6e:	6b 5e       	subi	r22, 0xEB	; 235
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	c8 01       	movw	r24, r16
     b74:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
	else{strcat(buffer,itoa(MTZoff,tmpStr,10));strcat_P(buffer,MS);}
     b78:	bc 01       	movw	r22, r24
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <strcat>
     b82:	65 e7       	ldi	r22, 0x75	; 117
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	0e 94 c5 1a 	call	0x358a	; 0x358a <strcat_P>
	LCD_puts(buffer,20);
     b8e:	64 e1       	ldi	r22, 0x14	; 20
     b90:	ce 01       	movw	r24, r28
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>

}
     b98:	6b 96       	adiw	r28, 0x1b	; 27
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	08 95       	ret

00000bb2 <printTimeStr.constprop.2>:
		}
	}
	return 0;
}

static inline void printTimeStr(volatile unsigned char *data, unsigned char x,unsigned char y)
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	64 97       	sbiw	r28, 0x14	; 20
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	fc 01       	movw	r30, r24
{
	char buffer[20];

	sprintf(buffer,"%02u.%02u.%02u  %02u:%02u:%02u",*data,*(data+1),*(data+2),*(data+3),*(data+4),*(data+5));
     bcc:	55 81       	ldd	r21, Z+5	; 0x05
     bce:	44 81       	ldd	r20, Z+4	; 0x04
     bd0:	33 81       	ldd	r19, Z+3	; 0x03
     bd2:	22 81       	ldd	r18, Z+2	; 0x02
     bd4:	91 81       	ldd	r25, Z+1	; 0x01
     bd6:	80 81       	ld	r24, Z
     bd8:	1f 92       	push	r1
     bda:	5f 93       	push	r21
     bdc:	1f 92       	push	r1
     bde:	4f 93       	push	r20
     be0:	1f 92       	push	r1
     be2:	3f 93       	push	r19
     be4:	1f 92       	push	r1
     be6:	2f 93       	push	r18
     be8:	1f 92       	push	r1
     bea:	9f 93       	push	r25
     bec:	1f 92       	push	r1
     bee:	8f 93       	push	r24
     bf0:	84 ed       	ldi	r24, 0xD4	; 212
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	9f 93       	push	r25
     bf6:	8f 93       	push	r24
     bf8:	8e 01       	movw	r16, r28
     bfa:	0f 5f       	subi	r16, 0xFF	; 255
     bfc:	1f 4f       	sbci	r17, 0xFF	; 255
     bfe:	1f 93       	push	r17
     c00:	0f 93       	push	r16
     c02:	0e 94 41 1b 	call	0x3682	; 0x3682 <sprintf>
	LCD_gotoXY(x,y);
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
	LCD_puts(buffer,20);
     c0e:	64 e1       	ldi	r22, 0x14	; 20
     c10:	c8 01       	movw	r24, r16
     c12:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
}
     c20:	64 96       	adiw	r28, 0x14	; 20
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	08 95       	ret

00000c36 <LCD_puts_P>:

void LCD_puts_P(const char *FlashLoc, char nBytes)
{
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	d6 2f       	mov	r29, r22

	for(unsigned char i=0; i<nBytes; i++)
     c40:	c0 e0       	ldi	r28, 0x00	; 0
     c42:	cd 17       	cp	r28, r29
     c44:	a9 f0       	breq	.+42     	; 0xc70 <LCD_puts_P+0x3a>
	{
		if(pgm_read_byte(&FlashLoc[i])==0)			//если дошли до конца строки
     c46:	fc 01       	movw	r30, r24
     c48:	24 91       	lpm	r18, Z
     c4a:	8c 01       	movw	r16, r24
     c4c:	0f 5f       	subi	r16, 0xFF	; 255
     c4e:	1f 4f       	sbci	r17, 0xFF	; 255
     c50:	21 11       	cpse	r18, r1
     c52:	07 c0       	rjmp	.+14     	; 0xc62 <LCD_puts_P+0x2c>
		{
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
     c54:	80 e2       	ldi	r24, 0x20	; 32
     c56:	0e 94 08 04 	call	0x810	; 0x810 <LCD_putchar>
     c5a:	cf 5f       	subi	r28, 0xFF	; 255
     c5c:	cd 17       	cp	r28, r29
     c5e:	d0 f3       	brcs	.-12     	; 0xc54 <LCD_puts_P+0x1e>
     c60:	07 c0       	rjmp	.+14     	; 0xc70 <LCD_puts_P+0x3a>
			return;
		}
		else LCD_putchar(pgm_read_byte(&FlashLoc[i]));
     c62:	fc 01       	movw	r30, r24
     c64:	84 91       	lpm	r24, Z
     c66:	0e 94 08 04 	call	0x810	; 0x810 <LCD_putchar>
}

void LCD_puts_P(const char *FlashLoc, char nBytes)
{

	for(unsigned char i=0; i<nBytes; i++)
     c6a:	cf 5f       	subi	r28, 0xFF	; 255
     c6c:	c8 01       	movw	r24, r16
     c6e:	e9 cf       	rjmp	.-46     	; 0xc42 <LCD_puts_P+0xc>
			for(;i<nBytes;i++)LCD_putchar(0x20);	//остаток добиваем пробелами
			return;
		}
		else LCD_putchar(pgm_read_byte(&FlashLoc[i]));
	}
}
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	08 95       	ret

00000c7a <printTOUT>:
	return tmpKey;
}

static inline void printTOUT(void)
{
	LCD_gotoXY(0,2);LCD_puts_P(NET_SVYAZI,20);
     c7a:	62 e0       	ldi	r22, 0x02	; 2
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
     c82:	64 e1       	ldi	r22, 0x14	; 20
     c84:	8b eb       	ldi	r24, 0xBB	; 187
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <LCD_puts_P>

00000c8c <printMenuHeader>:


}

static inline void printMenuHeader(PGM_P name)
{
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	ec 01       	movw	r28, r24
	//прорисовываем заголовок "NAME:"
	LCD_clr();
     c92:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_clr>
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
     c96:	ce 01       	movw	r24, r28
     c98:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <__strlen_P>
	LCD_puts_P(name,strlen_P(name));
     c9c:	68 2f       	mov	r22, r24
     c9e:	ce 01       	movw	r24, r28
     ca0:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
	LCD_putchar(0x3A);
     ca4:	8a e3       	ldi	r24, 0x3A	; 58
}
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
static inline void printMenuHeader(PGM_P name)
{
	//прорисовываем заголовок "NAME:"
	LCD_clr();
	LCD_puts_P(name,strlen_P(name));
	LCD_putchar(0x3A);
     caa:	0c 94 08 04 	jmp	0x810	; 0x810 <LCD_putchar>

00000cae <SPI_init>:
#define DD_MOSI DDB5
#define DD_SCK  DDB7
#define DD_CS DDB4

/* Set MOSI and SCK and CS output, all others input */
DDRB |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     cae:	87 b3       	in	r24, 0x17	; 23
     cb0:	80 6b       	ori	r24, 0xB0	; 176
     cb2:	87 bb       	out	0x17, r24	; 23
//все выходы pullup
PORTB |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     cb4:	88 b3       	in	r24, 0x18	; 24
     cb6:	80 6b       	ori	r24, 0xB0	; 176
     cb8:	88 bb       	out	0x18, r24	; 24
/* Enable SPI, Master, set clock rate fck/64 (250kHz) SCK в покое=hi, выборка по зад. фронту CPHA=1*/
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<CPOL)|(1<<CPHA);//
     cba:	8e e5       	ldi	r24, 0x5E	; 94
     cbc:	8d b9       	out	0x0d, r24	; 13
     cbe:	08 95       	ret

00000cc0 <SPI_transmit>:

unsigned char SPI_transmit(char cData)
{

/* Start transmission */
SPDR = cData;
     cc0:	8f b9       	out	0x0f, r24	; 15
SPI_timeout=S_TOUT;
     cc2:	88 ee       	ldi	r24, 0xE8	; 232
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <SPI_timeout+0x1>
     cca:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <SPI_timeout>

/* Wait for transmission complete */
#warning НЕКОРРЕКТНАЯ ОТРАБОТКА ОШИБКИ (spi.h)

while(!(SPSR & (1<<SPIF))) if(SPI_timeout==0){CAN_ERR=SPI;return -1;}
     cce:	77 99       	sbic	0x0e, 7	; 14
     cd0:	0b c0       	rjmp	.+22     	; 0xce8 <SPI_transmit+0x28>
     cd2:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <SPI_timeout>
     cd6:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <SPI_timeout+0x1>
     cda:	89 2b       	or	r24, r25
     cdc:	c1 f7       	brne	.-16     	; 0xcce <SPI_transmit+0xe>
     cde:	86 e0       	ldi	r24, 0x06	; 6
     ce0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <CAN_ERR>
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	08 95       	ret

return SPDR;
     ce8:	8f b1       	in	r24, 0x0f	; 15
}
     cea:	08 95       	ret

00000cec <CAN_getStatus>:
}

static unsigned char CAN_getStatus(void)
{
unsigned char data;
clrBit(CSPINPORT,CSPIN);
     cec:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0xA0);
     cee:	80 ea       	ldi	r24, 0xA0	; 160
     cf0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
//SPI_transmit(0x00);
data=SPI_transmit(0x00);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     cfa:	c4 9a       	sbi	0x18, 4	; 24
return data;
}
     cfc:	08 95       	ret

00000cfe <CAN_read>:
	setBit(CSPINPORT,CSPIN);
}
}

static unsigned char CAN_read(unsigned char numOfReg)
{
     cfe:	cf 93       	push	r28
     d00:	c8 2f       	mov	r28, r24
unsigned char data;

clrBit(CSPINPORT,CSPIN);
     d02:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x03);  //команда чтения
     d04:	83 e0       	ldi	r24, 0x03	; 3
     d06:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(numOfReg);
     d0a:	8c 2f       	mov	r24, r28
     d0c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
data=SPI_transmit(0x00);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     d16:	c4 9a       	sbi	0x18, 4	; 24
return data;
}
     d18:	cf 91       	pop	r28
     d1a:	08 95       	ret

00000d1c <CAN_bitModify>:
SPI_transmit(data);
setBit(CSPINPORT,CSPIN);
}

static void CAN_bitModify(unsigned char numOfReg, unsigned char MASK, unsigned char DATA)
{
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	18 2f       	mov	r17, r24
     d24:	d6 2f       	mov	r29, r22
     d26:	c4 2f       	mov	r28, r20
clrBit(CSPINPORT,CSPIN);
     d28:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x05);//Команда модификации
     d2a:	85 e0       	ldi	r24, 0x05	; 5
     d2c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(numOfReg);
     d30:	81 2f       	mov	r24, r17
     d32:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(MASK);
     d36:	8d 2f       	mov	r24, r29
     d38:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(DATA);
     d3c:	8c 2f       	mov	r24, r28
     d3e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     d42:	c4 9a       	sbi	0x18, 4	; 24
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	08 95       	ret

00000d4c <CAN_write>:
setBit(CSPINPORT,CSPIN);
return data;
}

static void CAN_write(unsigned char numOfReg, unsigned char data)
{
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	d8 2f       	mov	r29, r24
     d52:	c6 2f       	mov	r28, r22
clrBit(CSPINPORT,CSPIN);
     d54:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);  //команда записи
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(numOfReg);
     d5c:	8d 2f       	mov	r24, r29
     d5e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(data);
     d62:	8c 2f       	mov	r24, r28
     d64:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
     d68:	c4 9a       	sbi	0x18, 4	; 24
}
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <CANgetPosition>:

signed char CANgetPosition(void)
{
	signed char index;

	CAN_timeout=CAN_TOUT;
     d70:	88 ee       	ldi	r24, 0xE8	; 232
     d72:	93 e0       	ldi	r25, 0x03	; 3
     d74:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <CAN_timeout+0x1>
     d78:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <CAN_timeout>
	while(CANRXcounter==0)
     d7c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <CANRXcounter>
     d80:	81 11       	cpse	r24, r1
     d82:	0b c0       	rjmp	.+22     	; 0xd9a <CANgetPosition+0x2a>
	{
		if(CAN_timeout==0) {CAN_ERR=CANTOUT;return -1;};
     d84:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <CAN_timeout>
     d88:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <CAN_timeout+0x1>
     d8c:	89 2b       	or	r24, r25
     d8e:	b1 f7       	brne	.-20     	; 0xd7c <CANgetPosition+0xc>
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <CAN_ERR>
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	08 95       	ret
	}
	asm ("cli");
     d9a:	f8 94       	cli
	CANRXcounter--;
     d9c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <CANRXcounter>
     da0:	81 50       	subi	r24, 0x01	; 1
     da2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <CANRXcounter>
	asm ("sei");
     da6:	78 94       	sei
	index=CANRDindex;
     da8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <CANRDindex>
	if(++CANRDindex == CAN_RX_BUFFER_SIZE)CANRDindex=0;
     dac:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <CANRDindex>
     db0:	9f 5f       	subi	r25, 0xFF	; 255
     db2:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <CANRDindex>
     db6:	9a 30       	cpi	r25, 0x0A	; 10
     db8:	11 f4       	brne	.+4      	; 0xdbe <CANgetPosition+0x4e>
     dba:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <CANRDindex>
	return index;
}
     dbe:	08 95       	ret

00000dc0 <CAN_gets>:
	if(CAN_ERR)return -1;
	return 1;
}
//получить строку
char *CAN_gets(char *str,unsigned char length)
{
     dc0:	9f 92       	push	r9
     dc2:	af 92       	push	r10
     dc4:	bf 92       	push	r11
     dc6:	cf 92       	push	r12
     dc8:	df 92       	push	r13
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	d8 2f       	mov	r29, r24
     dd8:	c9 2f       	mov	r28, r25
     dda:	b6 2e       	mov	r11, r22
	unsigned char i=CANgetPosition(),j;
     ddc:	0e 94 b8 06 	call	0xd70	; 0xd70 <CANgetPosition>
	unsigned long int ID=CANRXbuf[i].ID;
     de0:	9d e0       	ldi	r25, 0x0D	; 13
     de2:	89 9f       	mul	r24, r25
     de4:	f0 01       	movw	r30, r0
     de6:	11 24       	eor	r1, r1
     de8:	ee 52       	subi	r30, 0x2E	; 46
     dea:	fb 4f       	sbci	r31, 0xFB	; 251
     dec:	c0 80       	ld	r12, Z
     dee:	d1 80       	ldd	r13, Z+1	; 0x01
     df0:	e2 80       	ldd	r14, Z+2	; 0x02
     df2:	f3 80       	ldd	r15, Z+3	; 0x03
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
     df4:	0d 2f       	mov	r16, r29
     df6:	1c 2f       	mov	r17, r28
	{
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
     df8:	9d e0       	ldi	r25, 0x0D	; 13
     dfa:	a9 2e       	mov	r10, r25
     dfc:	2d e0       	ldi	r18, 0x0D	; 13
     dfe:	92 2e       	mov	r9, r18
	unsigned char i=CANgetPosition(),j;
	unsigned long int ID=CANRXbuf[i].ID;
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
     e00:	b1 10       	cpse	r11, r1
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <CAN_gets+0x4a>
			str+=CANRXbuf[i].dataLength;
			i=CANgetPosition();
			if(CAN_ERR) return NULL;
			if(CANRXbuf[i].ID != ID){CAN_ERR=CANID;return NULL;}//LCDsendChar('e')
		}
		else return tmp;
     e04:	8d 2f       	mov	r24, r29
     e06:	9c 2f       	mov	r25, r28
     e08:	41 c0       	rjmp	.+130    	; 0xe8c <CAN_gets+0xcc>
     e0a:	40 e0       	ldi	r20, 0x00	; 0
	char *tmp=str;

	//PORTC |= 1<<3;
	while(length--)
	{
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
     e0c:	a8 9e       	mul	r10, r24
     e0e:	f0 01       	movw	r30, r0
     e10:	11 24       	eor	r1, r1
     e12:	ee 52       	subi	r30, 0x2E	; 46
     e14:	fb 4f       	sbci	r31, 0xFB	; 251
     e16:	bf 01       	movw	r22, r30
     e18:	6c 5f       	subi	r22, 0xFC	; 252
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	db 01       	movw	r26, r22
     e1e:	8c 91       	ld	r24, X
     e20:	24 2f       	mov	r18, r20
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	48 17       	cp	r20, r24
     e26:	60 f4       	brcc	.+24     	; 0xe40 <CAN_gets+0x80>
     e28:	cf 01       	movw	r24, r30
     e2a:	82 0f       	add	r24, r18
     e2c:	93 1f       	adc	r25, r19
     e2e:	dc 01       	movw	r26, r24
     e30:	15 96       	adiw	r26, 0x05	; 5
     e32:	8c 91       	ld	r24, X
     e34:	20 0f       	add	r18, r16
     e36:	31 1f       	adc	r19, r17
     e38:	d9 01       	movw	r26, r18
     e3a:	8c 93       	st	X, r24
     e3c:	4f 5f       	subi	r20, 0xFF	; 255
     e3e:	ee cf       	rjmp	.-36     	; 0xe1c <CAN_gets+0x5c>
		if(str[j-1] !=0)	//последний принятый символ не \0
     e40:	20 0f       	add	r18, r16
     e42:	31 1f       	adc	r19, r17
     e44:	d9 01       	movw	r26, r18
     e46:	11 97       	sbiw	r26, 0x01	; 1
     e48:	8c 91       	ld	r24, X
     e4a:	88 23       	and	r24, r24
     e4c:	d9 f2       	breq	.-74     	; 0xe04 <CAN_gets+0x44>
		{
			str+=CANRXbuf[i].dataLength;
     e4e:	84 81       	ldd	r24, Z+4	; 0x04
     e50:	08 0f       	add	r16, r24
     e52:	11 1d       	adc	r17, r1
			i=CANgetPosition();
     e54:	0e 94 b8 06 	call	0xd70	; 0xd70 <CANgetPosition>
			if(CAN_ERR) return NULL;
     e58:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <CAN_ERR>
     e5c:	91 11       	cpse	r25, r1
     e5e:	14 c0       	rjmp	.+40     	; 0xe88 <CAN_gets+0xc8>
			if(CANRXbuf[i].ID != ID){CAN_ERR=CANID;return NULL;}//LCDsendChar('e')
     e60:	98 9e       	mul	r9, r24
     e62:	f0 01       	movw	r30, r0
     e64:	11 24       	eor	r1, r1
     e66:	ee 52       	subi	r30, 0x2E	; 46
     e68:	fb 4f       	sbci	r31, 0xFB	; 251
     e6a:	40 81       	ld	r20, Z
     e6c:	51 81       	ldd	r21, Z+1	; 0x01
     e6e:	62 81       	ldd	r22, Z+2	; 0x02
     e70:	73 81       	ldd	r23, Z+3	; 0x03
     e72:	ba 94       	dec	r11
     e74:	c4 16       	cp	r12, r20
     e76:	d5 06       	cpc	r13, r21
     e78:	e6 06       	cpc	r14, r22
     e7a:	f7 06       	cpc	r15, r23
     e7c:	09 f2       	breq	.-126    	; 0xe00 <CAN_gets+0x40>
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <CAN_ERR>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <CAN_gets+0xcc>
		for(j=0;j<CANRXbuf[i].dataLength;j++) {*(str+j)=CANRXbuf[i].data[j];/*LCDsendChar(*(str+j));*/}
		if(str[j-1] !=0)	//последний принятый символ не \0
		{
			str+=CANRXbuf[i].dataLength;
			i=CANgetPosition();
			if(CAN_ERR) return NULL;
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
		}
		else return tmp;
	}
	if(length==0){CAN_ERR=CANSTROVF;return NULL;}
	return tmp;
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	bf 90       	pop	r11
     e9e:	af 90       	pop	r10
     ea0:	9f 90       	pop	r9
     ea2:	08 95       	ret

00000ea4 <CAN_loadTXbuf>:
	CAN_ERR=0;
}


signed char CAN_loadTXbuf(unsigned long int ID, unsigned char dataLenght, unsigned char *data, unsigned char CAN_TX_MSG_SETTING)
{//ID==EID<28:11> SID<10:0>
     ea4:	af 92       	push	r10
     ea6:	bf 92       	push	r11
     ea8:	cf 92       	push	r12
     eaa:	df 92       	push	r13
     eac:	ef 92       	push	r14
     eae:	ff 92       	push	r15
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	6b 01       	movw	r12, r22
     eba:	7c 01       	movw	r14, r24
     ebc:	14 2f       	mov	r17, r20
     ebe:	59 01       	movw	r10, r18
#define EIDFLG  CAN_TX_MSG_SETTING & 0x08 //флаг расширенного идентификатора

unsigned char i,j;
unsigned char SIDL = 0;
unsigned char status=CAN_getStatus();
     ec0:	0e 94 76 06 	call	0xcec	; 0xcec <CAN_getStatus>


//SID<2:0> == ID & 0x00000007
//EID<17:16> == (ID >> 27) & 0x00000003
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);
     ec4:	dc 2d       	mov	r29, r12
     ec6:	d2 95       	swap	r29
     ec8:	dd 0f       	add	r29, r29
     eca:	d0 7e       	andi	r29, 0xE0	; 224
     ecc:	90 2f       	mov	r25, r16
     ece:	98 70       	andi	r25, 0x08	; 8
     ed0:	d9 2b       	or	r29, r25
     ed2:	b7 01       	movw	r22, r14
     ed4:	a6 01       	movw	r20, r12
     ed6:	eb e1       	ldi	r30, 0x1B	; 27
     ed8:	76 95       	lsr	r23
     eda:	67 95       	ror	r22
     edc:	57 95       	ror	r21
     ede:	47 95       	ror	r20
     ee0:	ea 95       	dec	r30
     ee2:	d1 f7       	brne	.-12     	; 0xed8 <CAN_loadTXbuf+0x34>
     ee4:	43 70       	andi	r20, 0x03	; 3
     ee6:	d4 2b       	or	r29, r20


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
  {
  if( chkBit(status,(i*2)) )continue; //если установлен флаг TXREQ -значить буфер занят
     ee8:	86 ff       	sbrs	r24, 6
     eea:	0b c0       	rjmp	.+22     	; 0xf02 <CAN_loadTXbuf+0x5e>
     eec:	84 ff       	sbrs	r24, 4
     eee:	0b c0       	rjmp	.+22     	; 0xf06 <CAN_loadTXbuf+0x62>
     ef0:	82 fd       	sbrc	r24, 2
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <CAN_loadTXbuf+0x54>
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
     ef4:	c1 e0       	ldi	r28, 0x01	; 1
     ef6:	08 c0       	rjmp	.+16     	; 0xf08 <CAN_loadTXbuf+0x64>
  {
  if( chkBit(status,(i*2)) )continue; //если установлен флаг TXREQ -значить буфер занят
  else break;
  }

if(i==0) {CAN_ERR=CANBUFOVF;return -1;} //всё занято
     ef8:	85 e0       	ldi	r24, 0x05	; 5
     efa:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <CAN_ERR>
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	58 c0       	rjmp	.+176    	; 0xfb2 <CAN_loadTXbuf+0x10e>
//EXIDE == CAN_TX_MSG_FLAGS & 0x08
SIDL = ((ID & 0x00000007) << 5) | ((ID >> 27) & 0x00000003) | (EIDFLG);


//выбор буфера.Буфер с бОльшим номером-приоритетней
for(i=3;i>0;i--)
     f02:	c3 e0       	ldi	r28, 0x03	; 3
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <CAN_loadTXbuf+0x64>
     f06:	c2 e0       	ldi	r28, 0x02	; 2
  }

if(i==0) {CAN_ERR=CANBUFOVF;return -1;} //всё занято
//в результате i-это номер свободного буфера с более высоким приоритетом

asm("cli");
     f08:	f8 94       	cli
clrBit(CSPINPORT,CSPIN);
     f0a:	c4 98       	cbi	0x18, 4	; 24
//запись регистров командой write
SPI_transmit(0x02);                   	//Команда записи
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(i*0x10+0x20);             	//начало записи(TXBnCTRL)-регистр конфигурации
     f12:	8c 2f       	mov	r24, r28
     f14:	82 95       	swap	r24
     f16:	80 7f       	andi	r24, 0xF0	; 240
     f18:	80 5e       	subi	r24, 0xE0	; 224
     f1a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(CAN_TX_MSG_SETTING & 0x03);//приоритет сообщения
     f1e:	80 2f       	mov	r24, r16
     f20:	83 70       	andi	r24, 0x03	; 3
     f22:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
//запись ID
SPI_transmit((ID >> 3)  & 0x000000FF); 	//SIDH
     f26:	d7 01       	movw	r26, r14
     f28:	c6 01       	movw	r24, r12
     f2a:	23 e0       	ldi	r18, 0x03	; 3
     f2c:	b6 95       	lsr	r27
     f2e:	a7 95       	ror	r26
     f30:	97 95       	ror	r25
     f32:	87 95       	ror	r24
     f34:	2a 95       	dec	r18
     f36:	d1 f7       	brne	.-12     	; 0xf2c <CAN_loadTXbuf+0x88>
     f38:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(SIDL);
     f3c:	8d 2f       	mov	r24, r29
     f3e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
if(1/*EIDFLG*/)	//EID пишем палюбому(запись по регистрам идет подряд)
{
	SPI_transmit((ID >> 19) & 0x000000FF);	//EID
     f42:	d7 01       	movw	r26, r14
     f44:	c6 01       	movw	r24, r12
     f46:	33 e1       	ldi	r19, 0x13	; 19
     f48:	b6 95       	lsr	r27
     f4a:	a7 95       	ror	r26
     f4c:	97 95       	ror	r25
     f4e:	87 95       	ror	r24
     f50:	3a 95       	dec	r19
     f52:	d1 f7       	brne	.-12     	; 0xf48 <CAN_loadTXbuf+0xa4>
     f54:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
	SPI_transmit((ID >> 11) & 0x000000FF);
     f58:	d7 01       	movw	r26, r14
     f5a:	c6 01       	movw	r24, r12
     f5c:	4b e0       	ldi	r20, 0x0B	; 11
     f5e:	b6 95       	lsr	r27
     f60:	a7 95       	ror	r26
     f62:	97 95       	ror	r25
     f64:	87 95       	ror	r24
     f66:	4a 95       	dec	r20
     f68:	d1 f7       	brne	.-12     	; 0xf5e <CAN_loadTXbuf+0xba>
     f6a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
}

//запись количества байт в сообщении
SPI_transmit(dataLenght);
     f6e:	81 2f       	mov	r24, r17
     f70:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
     f74:	75 01       	movw	r14, r10
//запись данных(не более 8 байт)
for(j=0;(j<dataLenght) && j<8;j++) SPI_transmit(*(data+j));
     f76:	d0 e0       	ldi	r29, 0x00	; 0
     f78:	d1 17       	cp	r29, r17
     f7a:	49 f0       	breq	.+18     	; 0xf8e <CAN_loadTXbuf+0xea>
     f7c:	d8 30       	cpi	r29, 0x08	; 8
     f7e:	39 f0       	breq	.+14     	; 0xf8e <CAN_loadTXbuf+0xea>
     f80:	f7 01       	movw	r30, r14
     f82:	81 91       	ld	r24, Z+
     f84:	7f 01       	movw	r14, r30
     f86:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
     f8a:	df 5f       	subi	r29, 0xFF	; 255
     f8c:	f5 cf       	rjmp	.-22     	; 0xf78 <CAN_loadTXbuf+0xd4>
setBit(CSPINPORT,CSPIN);
     f8e:	c4 9a       	sbi	0x18, 4	; 24

//автоматический запрос на передачу
if(CAN_TX_MSG_SETTING & 0x04) CAN_RTS(i-1);
     f90:	02 ff       	sbrs	r16, 2
     f92:	0d c0       	rjmp	.+26     	; 0xfae <CAN_loadTXbuf+0x10a>

static void CAN_RTS(unsigned char numOfBuf) //request to send
{
if(numOfBuf < 3)
{
	clrBit(CSPINPORT,CSPIN);
     f94:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(0x80 | (1<<numOfBuf));
     f96:	2f ef       	ldi	r18, 0xFF	; 255
     f98:	2c 0f       	add	r18, r28
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <CAN_loadTXbuf+0xfe>
     fa0:	88 0f       	add	r24, r24
     fa2:	2a 95       	dec	r18
     fa4:	ea f7       	brpl	.-6      	; 0xfa0 <CAN_loadTXbuf+0xfc>
     fa6:	80 68       	ori	r24, 0x80	; 128
     fa8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
	setBit(CSPINPORT,CSPIN);
     fac:	c4 9a       	sbi	0x18, 4	; 24
for(j=0;(j<dataLenght) && j<8;j++) SPI_transmit(*(data+j));
setBit(CSPINPORT,CSPIN);

//автоматический запрос на передачу
if(CAN_TX_MSG_SETTING & 0x04) CAN_RTS(i-1);
asm("sei");
     fae:	78 94       	sei
return i; //если все ОК возвращаем номер буфера
     fb0:	8c 2f       	mov	r24, r28
}
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	bf 90       	pop	r11
     fc4:	af 90       	pop	r10
     fc6:	08 95       	ret

00000fc8 <CAN_puts>:
	return 1;
}

//отсыл строки
signed char CAN_puts(char *str, unsigned char length, unsigned long int ID)	//посылаем строку с /0 на конце
{
     fc8:	8f 92       	push	r8
     fca:	9f 92       	push	r9
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	7c 01       	movw	r14, r24
     fde:	c6 2f       	mov	r28, r22
     fe0:	49 01       	movw	r8, r18
     fe2:	5a 01       	movw	r10, r20
	for(unsigned char i=0;i<length/8;i++)
     fe4:	16 2f       	mov	r17, r22
     fe6:	16 95       	lsr	r17
     fe8:	16 95       	lsr	r17
     fea:	16 95       	lsr	r17
     fec:	d0 e0       	ldi	r29, 0x00	; 0
     fee:	d1 17       	cp	r29, r17
     ff0:	91 f0       	breq	.+36     	; 0x1016 <CAN_puts+0x4e>
	{
		CAN_loadTXbuf(ID,8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME );//LCDsendChar+'0'& CAN_TX_NO_RTS
     ff2:	0f ef       	ldi	r16, 0xFF	; 255
     ff4:	97 01       	movw	r18, r14
     ff6:	48 e0       	ldi	r20, 0x08	; 8
     ff8:	c5 01       	movw	r24, r10
     ffa:	b4 01       	movw	r22, r8
     ffc:	0e 94 52 07 	call	0xea4	; 0xea4 <CAN_loadTXbuf>
		if(CAN_ERR)return -1;
    1000:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <CAN_ERR>
    1004:	88 23       	and	r24, r24
    1006:	11 f0       	breq	.+4      	; 0x100c <CAN_puts+0x44>
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	13 c0       	rjmp	.+38     	; 0x1032 <CAN_puts+0x6a>
		str+=8;
    100c:	88 e0       	ldi	r24, 0x08	; 8
    100e:	e8 0e       	add	r14, r24
    1010:	f1 1c       	adc	r15, r1
}

//отсыл строки
signed char CAN_puts(char *str, unsigned char length, unsigned long int ID)	//посылаем строку с /0 на конце
{
	for(unsigned char i=0;i<length/8;i++)
    1012:	df 5f       	subi	r29, 0xFF	; 255
    1014:	ec cf       	rjmp	.-40     	; 0xfee <CAN_puts+0x26>
	{
		CAN_loadTXbuf(ID,8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME );//LCDsendChar+'0'& CAN_TX_NO_RTS
		if(CAN_ERR)return -1;
		str+=8;
	}
	if(length%8)CAN_loadTXbuf(ID,length%8,(unsigned char *)str,CAN_TX_PRIORITY_3 & CAN_EID_FRAME);
    1016:	4c 2f       	mov	r20, r28
    1018:	47 70       	andi	r20, 0x07	; 7
    101a:	31 f0       	breq	.+12     	; 0x1028 <CAN_puts+0x60>
    101c:	0f ef       	ldi	r16, 0xFF	; 255
    101e:	97 01       	movw	r18, r14
    1020:	c5 01       	movw	r24, r10
    1022:	b4 01       	movw	r22, r8
    1024:	0e 94 52 07 	call	0xea4	; 0xea4 <CAN_loadTXbuf>
	if(CAN_ERR)return -1;
    1028:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <CAN_ERR>
    102c:	81 11       	cpse	r24, r1
    102e:	ec cf       	rjmp	.-40     	; 0x1008 <CAN_puts+0x40>
	return 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
}
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	bf 90       	pop	r11
    1040:	af 90       	pop	r10
    1042:	9f 90       	pop	r9
    1044:	8f 90       	pop	r8
    1046:	08 95       	ret

00001048 <CAN_readRXbuf>:
asm("sei");
return i; //если все ОК возвращаем номер буфера
}

volatile unsigned char *CAN_readRXbuf(volatile unsigned long int *ID, volatile unsigned char *data, volatile unsigned char *dataLen, unsigned char *CAN_RX_MSG_FLAGS)
{
    1048:	2f 92       	push	r2
    104a:	3f 92       	push	r3
    104c:	4f 92       	push	r4
    104e:	5f 92       	push	r5
    1050:	6f 92       	push	r6
    1052:	7f 92       	push	r7
    1054:	8f 92       	push	r8
    1056:	9f 92       	push	r9
    1058:	af 92       	push	r10
    105a:	bf 92       	push	r11
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	00 d0       	rcall	.+0      	; 0x106e <CAN_readRXbuf+0x26>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <CAN_readRXbuf+0x28>
    1070:	1f 92       	push	r1
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	1c 01       	movw	r2, r24
    1078:	8b 01       	movw	r16, r22
    107a:	5d 83       	std	Y+5, r21	; 0x05
    107c:	4c 83       	std	Y+4, r20	; 0x04
    107e:	79 01       	movw	r14, r18
#define EID ( EID0 | EID8<<8 | (SIDL&0x03)<<16 )

//поиск заполненного буфера
for(i=0;i<2;i++)
  {
  if( CAN_getStatus() & (1<<i)  ) break;
    1080:	0e 94 76 06 	call	0xcec	; 0xcec <CAN_getStatus>
    1084:	80 fd       	sbrc	r24, 0
    1086:	07 c0       	rjmp	.+14     	; 0x1096 <CAN_readRXbuf+0x4e>
    1088:	0e 94 76 06 	call	0xcec	; 0xcec <CAN_getStatus>
    108c:	81 fd       	sbrc	r24, 1
    108e:	05 c0       	rjmp	.+10     	; 0x109a <CAN_readRXbuf+0x52>
  }
// i-содержит номер буфера
if(i==2)return 0;//если все буферы пусты возвращаем 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	91 c0       	rjmp	.+290    	; 0x11b8 <CAN_readRXbuf+0x170>

#define SID ( SIDL>>5 | SIDH<<3 )
#define EID ( EID0 | EID8<<8 | (SIDL&0x03)<<16 )

//поиск заполненного буфера
for(i=0;i<2;i++)
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	01 c0       	rjmp	.+2      	; 0x109c <CAN_readRXbuf+0x54>
    109a:	81 e0       	ldi	r24, 0x01	; 1
  if( CAN_getStatus() & (1<<i)  ) break;
  }
// i-содержит номер буфера
if(i==2)return 0;//если все буферы пусты возвращаем 0

clrBit(CSPINPORT,CSPIN);
    109c:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit( 0x90 | (i<<2) );// команда чтения с SIDH
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	80 69       	ori	r24, 0x90	; 144
    10aa:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SIDH = SPI_transmit(0x00);
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
    10b4:	88 2e       	mov	r8, r24
    10b6:	91 2c       	mov	r9, r1
    10b8:	a1 2c       	mov	r10, r1
    10ba:	b1 2c       	mov	r11, r1
SIDL = SPI_transmit(0x00);
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
    10c2:	89 83       	std	Y+1, r24	; 0x01
    10c4:	48 2e       	mov	r4, r24
    10c6:	51 2c       	mov	r5, r1
    10c8:	61 2c       	mov	r6, r1
    10ca:	71 2c       	mov	r7, r1

EID8 = SPI_transmit(0x00);
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
    10d2:	8a 83       	std	Y+2, r24	; 0x02
EID0 = SPI_transmit(0x00);
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
    10da:	8b 83       	std	Y+3, r24	; 0x03
*dataLen = SPI_transmit(0x00);
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
    10e2:	ec 81       	ldd	r30, Y+4	; 0x04
    10e4:	fd 81       	ldd	r31, Y+5	; 0x05
    10e6:	80 83       	st	Z, r24
    10e8:	1d 82       	std	Y+5, r1	; 0x05
    10ea:	1c 82       	std	Y+4, r1	; 0x04
    10ec:	cc 80       	ldd	r12, Y+4	; 0x04
    10ee:	dd 80       	ldd	r13, Y+5	; 0x05
    10f0:	c0 0e       	add	r12, r16
    10f2:	d1 1e       	adc	r13, r17

for(i=0;i<8;i++) *(data+i) = SPI_transmit(0x00);
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
    10fa:	f6 01       	movw	r30, r12
    10fc:	80 83       	st	Z, r24
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	9d 83       	std	Y+5, r25	; 0x05
    1106:	8c 83       	std	Y+4, r24	; 0x04
    1108:	08 97       	sbiw	r24, 0x08	; 8
    110a:	81 f7       	brne	.-32     	; 0x10ec <CAN_readRXbuf+0xa4>
setBit(CSPINPORT,CSPIN);
    110c:	c4 9a       	sbi	0x18, 4	; 24

if((SIDL & 0x08) ==0) EID8=EID0=0;	//если идентификатор не расширенный обнуляем EID
    110e:	99 81       	ldd	r25, Y+1	; 0x01
    1110:	93 ff       	sbrs	r25, 3
    1112:	0b c0       	rjmp	.+22     	; 0x112a <CAN_readRXbuf+0xe2>
clrBit(CSPINPORT,CSPIN);
SPI_transmit( 0x90 | (i<<2) );// команда чтения с SIDH
SIDH = SPI_transmit(0x00);
SIDL = SPI_transmit(0x00);

EID8 = SPI_transmit(0x00);
    1114:	ea 81       	ldd	r30, Y+2	; 0x02
    1116:	4e 2f       	mov	r20, r30
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
EID0 = SPI_transmit(0x00);
    111e:	fb 81       	ldd	r31, Y+3	; 0x03
    1120:	8f 2f       	mov	r24, r31
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	a0 e0       	ldi	r26, 0x00	; 0
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <CAN_readRXbuf+0xee>
*dataLen = SPI_transmit(0x00);

for(i=0;i<8;i++) *(data+i) = SPI_transmit(0x00);
setBit(CSPINPORT,CSPIN);

if((SIDL & 0x08) ==0) EID8=EID0=0;	//если идентификатор не расширенный обнуляем EID
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	dc 01       	movw	r26, r24
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	ba 01       	movw	r22, r20

*ID=0;
    1136:	f1 01       	movw	r30, r2
    1138:	10 82       	st	Z, r1
    113a:	11 82       	std	Z+1, r1	; 0x01
    113c:	12 82       	std	Z+2, r1	; 0x02
    113e:	13 82       	std	Z+3, r1	; 0x03
*ID= EID<<11 | SID;
    1140:	29 81       	ldd	r18, Y+1	; 0x01
    1142:	23 70       	andi	r18, 0x03	; 3
    1144:	a2 2b       	or	r26, r18
    1146:	76 2f       	mov	r23, r22
    1148:	65 2f       	mov	r22, r21
    114a:	54 2f       	mov	r21, r20
    114c:	44 27       	eor	r20, r20
    114e:	48 2b       	or	r20, r24
    1150:	59 2b       	or	r21, r25
    1152:	6a 2b       	or	r22, r26
    1154:	7b 2b       	or	r23, r27
    1156:	ab e0       	ldi	r26, 0x0B	; 11
    1158:	44 0f       	add	r20, r20
    115a:	55 1f       	adc	r21, r21
    115c:	66 1f       	adc	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	aa 95       	dec	r26
    1162:	d1 f7       	brne	.-12     	; 0x1158 <CAN_readRXbuf+0x110>
    1164:	b5 e0       	ldi	r27, 0x05	; 5
    1166:	76 94       	lsr	r7
    1168:	67 94       	ror	r6
    116a:	57 94       	ror	r5
    116c:	47 94       	ror	r4
    116e:	ba 95       	dec	r27
    1170:	d1 f7       	brne	.-12     	; 0x1166 <CAN_readRXbuf+0x11e>
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	88 0c       	add	r8, r8
    1176:	99 1c       	adc	r9, r9
    1178:	aa 1c       	adc	r10, r10
    117a:	bb 1c       	adc	r11, r11
    117c:	8a 95       	dec	r24
    117e:	d1 f7       	brne	.-12     	; 0x1174 <CAN_readRXbuf+0x12c>
    1180:	84 28       	or	r8, r4
    1182:	95 28       	or	r9, r5
    1184:	a6 28       	or	r10, r6
    1186:	b7 28       	or	r11, r7
    1188:	48 29       	or	r20, r8
    118a:	59 29       	or	r21, r9
    118c:	6a 29       	or	r22, r10
    118e:	7b 29       	or	r23, r11
    1190:	40 83       	st	Z, r20
    1192:	51 83       	std	Z+1, r21	; 0x01
    1194:	62 83       	std	Z+2, r22	; 0x02
    1196:	73 83       	std	Z+3, r23	; 0x03

*CAN_RX_MSG_FLAGS=0;
    1198:	f7 01       	movw	r30, r14
    119a:	10 82       	st	Z, r1
*CAN_RX_MSG_FLAGS|=CAN_read(0x2D) & CAN_RX_OVF; //ошибка переполнения
    119c:	8d e2       	ldi	r24, 0x2D	; 45
    119e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <CAN_read>
    11a2:	80 7c       	andi	r24, 0xC0	; 192
    11a4:	f7 01       	movw	r30, r14
    11a6:	90 81       	ld	r25, Z
    11a8:	89 2b       	or	r24, r25
    11aa:	80 83       	st	Z, r24

if(*CAN_RX_MSG_FLAGS & CAN_RX_OVF );//PORTC |= 1<<3;

CAN_bitModify(0x2D,0xC0,0x00);            //сброс флага переполнения
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	60 ec       	ldi	r22, 0xC0	; 192
    11b0:	8d e2       	ldi	r24, 0x2D	; 45
    11b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <CAN_bitModify>
return data;
    11b6:	c8 01       	movw	r24, r16
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	df 90       	pop	r13
    11d0:	cf 90       	pop	r12
    11d2:	bf 90       	pop	r11
    11d4:	af 90       	pop	r10
    11d6:	9f 90       	pop	r9
    11d8:	8f 90       	pop	r8
    11da:	7f 90       	pop	r7
    11dc:	6f 90       	pop	r6
    11de:	5f 90       	pop	r5
    11e0:	4f 90       	pop	r4
    11e2:	3f 90       	pop	r3
    11e4:	2f 90       	pop	r2
    11e6:	08 95       	ret

000011e8 <CAN_readMessage>:



//чтение сообщения из "железного" буфера в программный
signed char CAN_readMessage(void)
{
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	1f 92       	push	r1
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
	unsigned char msg_flags=0;
    11f2:	19 82       	std	Y+1, r1	; 0x01

	CAN_readRXbuf(&CANRXbuf[CANRWindex].ID, CANRXbuf[CANRWindex].data, &CANRXbuf[CANRWindex].dataLength, &msg_flags);
    11f4:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <CANRWindex>
    11f8:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <CANRWindex>
    11fc:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <CANRWindex>
    1200:	8d e0       	ldi	r24, 0x0D	; 13
    1202:	84 9f       	mul	r24, r20
    1204:	a0 01       	movw	r20, r0
    1206:	11 24       	eor	r1, r1
    1208:	4a 52       	subi	r20, 0x2A	; 42
    120a:	5b 4f       	sbci	r21, 0xFB	; 251
    120c:	86 9f       	mul	r24, r22
    120e:	b0 01       	movw	r22, r0
    1210:	11 24       	eor	r1, r1
    1212:	69 52       	subi	r22, 0x29	; 41
    1214:	7b 4f       	sbci	r23, 0xFB	; 251
    1216:	89 9f       	mul	r24, r25
    1218:	c0 01       	movw	r24, r0
    121a:	11 24       	eor	r1, r1
    121c:	9e 01       	movw	r18, r28
    121e:	2f 5f       	subi	r18, 0xFF	; 255
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
    1222:	8e 52       	subi	r24, 0x2E	; 46
    1224:	9b 4f       	sbci	r25, 0xFB	; 251
    1226:	0e 94 24 08 	call	0x1048	; 0x1048 <CAN_readRXbuf>

	if(++CANRWindex==CAN_RX_BUFFER_SIZE)   CANRWindex=0;
    122a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <CANRWindex>
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <CANRWindex>
    1234:	8a 30       	cpi	r24, 0x0A	; 10
    1236:	11 f4       	brne	.+4      	; 0x123c <CAN_readMessage+0x54>
    1238:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <CANRWindex>
	if((++CANRXcounter==CAN_RX_BUFFER_SIZE)) {CANRXcounter=0;CAN_ERR=CANBUFOVF;return -1;}	//переполнение программного буфера
    123c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <CANRXcounter>
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <CANRXcounter>
    1246:	8a 30       	cpi	r24, 0x0A	; 10
    1248:	19 f4       	brne	.+6      	; 0x1250 <CAN_readMessage+0x68>
    124a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <CANRXcounter>
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <CAN_readMessage+0x6e>
	if(msg_flags & CAN_RX_OVF){CAN_ERR=CANBUFOVF;return -1;}								//переполнение аппаратног буфера
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	80 7c       	andi	r24, 0xC0	; 192
    1254:	29 f0       	breq	.+10     	; 0x1260 <CAN_readMessage+0x78>
    1256:	85 e0       	ldi	r24, 0x05	; 5
    1258:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <CAN_ERR>
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <CAN_readMessage+0x7a>
	return 1;
    1260:	81 e0       	ldi	r24, 0x01	; 1
}
    1262:	0f 90       	pop	r0
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <CAN_setMask>:
CAN_bitModify(0x2D,0xC0,0x00);            //сброс флага переполнения
return data;
}

void CAN_setMask(unsigned char addrOfMask,unsigned long int MASK)
{//MASK==EID<28:11> SID<10:0>
    126a:	cf 92       	push	r12
    126c:	df 92       	push	r13
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	d8 2f       	mov	r29, r24
    1278:	6a 01       	movw	r12, r20
    127a:	7b 01       	movw	r14, r22
unsigned char RXM_SIDL = ((MASK & 0x00000007) << 5) | ((MASK >> 27) & 0x00000003);
    127c:	db 01       	movw	r26, r22
    127e:	ca 01       	movw	r24, r20
    1280:	2b e1       	ldi	r18, 0x1B	; 27
    1282:	b6 95       	lsr	r27
    1284:	a7 95       	ror	r26
    1286:	97 95       	ror	r25
    1288:	87 95       	ror	r24
    128a:	2a 95       	dec	r18
    128c:	d1 f7       	brne	.-12     	; 0x1282 <CAN_setMask+0x18>
    128e:	c8 2f       	mov	r28, r24
    1290:	c3 70       	andi	r28, 0x03	; 3
    1292:	84 2f       	mov	r24, r20
    1294:	82 95       	swap	r24
    1296:	88 0f       	add	r24, r24
    1298:	80 7e       	andi	r24, 0xE0	; 224
    129a:	c8 2b       	or	r28, r24
//unsigned char i=0;

//if(addrOfMask>0x24)return;

clrBit(CSPINPORT,CSPIN);
    129c:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);        //команда записи
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(addrOfMask);   //начальная ячейка
    12a4:	8d 2f       	mov	r24, r29
    12a6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit((MASK >> 3)  & 0x000000FF);
    12aa:	d7 01       	movw	r26, r14
    12ac:	c6 01       	movw	r24, r12
    12ae:	33 e0       	ldi	r19, 0x03	; 3
    12b0:	b6 95       	lsr	r27
    12b2:	a7 95       	ror	r26
    12b4:	97 95       	ror	r25
    12b6:	87 95       	ror	r24
    12b8:	3a 95       	dec	r19
    12ba:	d1 f7       	brne	.-12     	; 0x12b0 <CAN_setMask+0x46>
    12bc:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(RXM_SIDL);
    12c0:	8c 2f       	mov	r24, r28
    12c2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit((MASK >> 19) & 0x000000FF);
    12c6:	d7 01       	movw	r26, r14
    12c8:	c6 01       	movw	r24, r12
    12ca:	43 e1       	ldi	r20, 0x13	; 19
    12cc:	b6 95       	lsr	r27
    12ce:	a7 95       	ror	r26
    12d0:	97 95       	ror	r25
    12d2:	87 95       	ror	r24
    12d4:	4a 95       	dec	r20
    12d6:	d1 f7       	brne	.-12     	; 0x12cc <CAN_setMask+0x62>
    12d8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit((MASK >> 11) & 0x000000FF);
    12dc:	d7 01       	movw	r26, r14
    12de:	c6 01       	movw	r24, r12
    12e0:	5b e0       	ldi	r21, 0x0B	; 11
    12e2:	b6 95       	lsr	r27
    12e4:	a7 95       	ror	r26
    12e6:	97 95       	ror	r25
    12e8:	87 95       	ror	r24
    12ea:	5a 95       	dec	r21
    12ec:	d1 f7       	brne	.-12     	; 0x12e2 <CAN_setMask+0x78>
    12ee:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    12f2:	c4 9a       	sbi	0x18, 4	; 24
}
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	cf 90       	pop	r12
    1300:	08 95       	ret

00001302 <CAN_setFilter>:

void CAN_setFilter(unsigned char addrOfFilter, unsigned long int FILTER, unsigned char CAN_TYPE_FRAME)
{//FILTER==EID<28:11> SID<10:0>
    1302:	cf 92       	push	r12
    1304:	df 92       	push	r13
    1306:	ef 92       	push	r14
    1308:	ff 92       	push	r15
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	d8 2f       	mov	r29, r24
    1310:	6a 01       	movw	r12, r20
    1312:	7b 01       	movw	r14, r22
unsigned char RXF_SIDL = ((FILTER & 0x00000007) << 5) | ((FILTER >> 27) & 0x00000003) | (CAN_TYPE_FRAME & 0x08);
    1314:	c4 2f       	mov	r28, r20
    1316:	c2 95       	swap	r28
    1318:	cc 0f       	add	r28, r28
    131a:	c0 7e       	andi	r28, 0xE0	; 224
    131c:	28 70       	andi	r18, 0x08	; 8
    131e:	c2 2b       	or	r28, r18
    1320:	8b e1       	ldi	r24, 0x1B	; 27
    1322:	76 95       	lsr	r23
    1324:	67 95       	ror	r22
    1326:	57 95       	ror	r21
    1328:	47 95       	ror	r20
    132a:	8a 95       	dec	r24
    132c:	d1 f7       	brne	.-12     	; 0x1322 <CAN_setFilter+0x20>
    132e:	43 70       	andi	r20, 0x03	; 3
    1330:	c4 2b       	or	r28, r20
//unsigned char i=0;

//if(addrOfFilter>0x18)return;

clrBit(CSPINPORT,CSPIN);
    1332:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0x02);        //команда записи
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(addrOfFilter); //начальная ячейка
    133a:	8d 2f       	mov	r24, r29
    133c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit((FILTER >> 3)  & 0x000000FF);  //RXF_SIDH
    1340:	d7 01       	movw	r26, r14
    1342:	c6 01       	movw	r24, r12
    1344:	23 e0       	ldi	r18, 0x03	; 3
    1346:	b6 95       	lsr	r27
    1348:	a7 95       	ror	r26
    134a:	97 95       	ror	r25
    134c:	87 95       	ror	r24
    134e:	2a 95       	dec	r18
    1350:	d1 f7       	brne	.-12     	; 0x1346 <CAN_setFilter+0x44>
    1352:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit(RXF_SIDL);
    1356:	8c 2f       	mov	r24, r28
    1358:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit((FILTER >> 19) & 0x000000FF);  //RXF_EID8
    135c:	d7 01       	movw	r26, r14
    135e:	c6 01       	movw	r24, r12
    1360:	33 e1       	ldi	r19, 0x13	; 19
    1362:	b6 95       	lsr	r27
    1364:	a7 95       	ror	r26
    1366:	97 95       	ror	r25
    1368:	87 95       	ror	r24
    136a:	3a 95       	dec	r19
    136c:	d1 f7       	brne	.-12     	; 0x1362 <CAN_setFilter+0x60>
    136e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
SPI_transmit((FILTER >> 11) & 0x000000FF);  //RXF_EID0
    1372:	d7 01       	movw	r26, r14
    1374:	c6 01       	movw	r24, r12
    1376:	4b e0       	ldi	r20, 0x0B	; 11
    1378:	b6 95       	lsr	r27
    137a:	a7 95       	ror	r26
    137c:	97 95       	ror	r25
    137e:	87 95       	ror	r24
    1380:	4a 95       	dec	r20
    1382:	d1 f7       	brne	.-12     	; 0x1378 <CAN_setFilter+0x76>
    1384:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    1388:	c4 9a       	sbi	0x18, 4	; 24
}
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	cf 90       	pop	r12
    1396:	08 95       	ret

00001398 <interrupt_init>:


void interrupt_init(void)
{
	//���� ��� ���������� �� CAN
	DDRD &= ~(1<<DDD2);	//PORTD.2 ����
    1398:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= 1<<DDD2;	//pull up
    139a:	92 9a       	sbi	0x12, 2	; 18

	MCUCR &= 0xFC;	//���������� �� ������� ������
    139c:	85 b7       	in	r24, 0x35	; 53
    139e:	8c 7f       	andi	r24, 0xFC	; 252
    13a0:	85 bf       	out	0x35, r24	; 53
	GICR |= 0x40;	//INT0 ���
    13a2:	8b b7       	in	r24, 0x3b	; 59
    13a4:	80 64       	ori	r24, 0x40	; 64
    13a6:	8b bf       	out	0x3b, r24	; 59
    13a8:	08 95       	ret

000013aa <timers_init>:
	// Input Capture on Falling Edge
	// Timer 1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=0x00;
    13aa:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x0A; 	// Clock value: 2000 kHz
    13ac:	8a e0       	ldi	r24, 0x0A	; 10
    13ae:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
    13b0:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
    13b2:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
    13b4:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
    13b6:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x07;	//���������� 1 ��
    13b8:	87 e0       	ldi	r24, 0x07	; 7
    13ba:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0xD0;
    13bc:	80 ed       	ldi	r24, 0xD0	; 208
    13be:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;	//
    13c0:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
    13c2:	18 bc       	out	0x28, r1	; 40

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK |= 1<<OCIE1A;// | 1<<OCIE1B;
    13c4:	89 b7       	in	r24, 0x39	; 57
    13c6:	80 61       	ori	r24, 0x10	; 16
    13c8:	89 bf       	out	0x39, r24	; 57
    13ca:	08 95       	ret

000013cc <CAN_init>:
}

signed char CAN_init(unsigned char mode)
  {
    13cc:	cf 93       	push	r28
    13ce:	c8 2f       	mov	r28, r24
  signed char result;

  SPI_init();
    13d0:	0e 94 57 06 	call	0xcae	; 0xcae <SPI_init>
  //��������� ����������
  //DDRB &= ~(1<<2);	//PORTB.2 ����
  //PORTB |= 1<<2;		//pull up
  //GICR=0x00;	//���������� �� ������� ������

  CSPINDDR |= 1<<CSPIN; 	//��� CS �����
    13d4:	bc 9a       	sbi	0x17, 4	; 23
  CSPINPORT |= 1<<CSPIN;	// Hi-level
    13d6:	c4 9a       	sbi	0x18, 4	; 24

static void CAN_reset(void)
{
clrBit(CSPINPORT,CSPIN);
    13d8:	c4 98       	cbi	0x18, 4	; 24
SPI_transmit(0xC0);
    13da:	80 ec       	ldi	r24, 0xC0	; 192
    13dc:	0e 94 60 06 	call	0xcc0	; 0xcc0 <SPI_transmit>
setBit(CSPINPORT,CSPIN);
    13e0:	c4 9a       	sbi	0x18, 4	; 24

  CAN_reset();

  //��������� �������� (125 kib/s)
    CAN_bitModify(CNF2,0x80,0x80); //���������� ���������� ���������������� PHSEG2 (BTLMODE==1)
    13e2:	40 e8       	ldi	r20, 0x80	; 128
    13e4:	60 e8       	ldi	r22, 0x80	; 128
    13e6:	89 e2       	ldi	r24, 0x29	; 41
    13e8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <CAN_bitModify>
    CAN_write(CNF1,0x05);// SJW==1Tq, BRP==6;
    13ec:	65 e0       	ldi	r22, 0x05	; 5
    13ee:	8a e2       	ldi	r24, 0x2A	; 42
    13f0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <CAN_write>
    CAN_write(CNF2,0x89);// BTLMODE==1,SAM==0,PRSEG2==2Tq,PHSEG1==2Tq ;
    13f4:	69 e8       	ldi	r22, 0x89	; 137
    13f6:	89 e2       	ldi	r24, 0x29	; 41
    13f8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <CAN_write>
    CAN_write(CNF3,0x02);// PHSEG2==3Tq ;
    13fc:	62 e0       	ldi	r22, 0x02	; 2
    13fe:	88 e2       	ldi	r24, 0x28	; 40
    1400:	0e 94 a6 06 	call	0xd4c	; 0xd4c <CAN_write>
  //��������� ������� 5 ��� SID
  CAN_bitModify(RXB1CTRL,0b01100111,0b00100101);
  #endif

  //��������� ���������� �� ������ ����� �������
  CAN_bitModify(CANINTE,0x03,0x03);
    1404:	43 e0       	ldi	r20, 0x03	; 3
    1406:	63 e0       	ldi	r22, 0x03	; 3
    1408:	8b e2       	ldi	r24, 0x2B	; 43
    140a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <CAN_bitModify>
return (CAN_read(CANSTAT) & 0xE0);
}

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0
    140e:	4c 2f       	mov	r20, r28
    1410:	6f ef       	ldi	r22, 0xFF	; 255
    1412:	8f e0       	ldi	r24, 0x0F	; 15
    1414:	0e 94 8e 06 	call	0xd1c	; 0xd1c <CAN_bitModify>
return data;
}

static unsigned char CAN_getOpMode(void)
{
return (CAN_read(CANSTAT) & 0xE0);
    1418:	8e e0       	ldi	r24, 0x0E	; 14
    141a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <CAN_read>

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0

if( (CAN_getOpMode() )!=CAN_MODE ) return -1;
    141e:	80 7e       	andi	r24, 0xE0	; 224
    1420:	c8 13       	cpse	r28, r24
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <CAN_init+0x5c>
else return 1;//
    1424:	c1 e0       	ldi	r28, 0x01	; 1
    1426:	01 c0       	rjmp	.+2      	; 0x142a <CAN_init+0x5e>

static signed char CAN_setOpMode(unsigned char CAN_MODE)
{
CAN_bitModify(CANCTRL,0xFF,CAN_MODE);//0xE0

if( (CAN_getOpMode() )!=CAN_MODE ) return -1;
    1428:	cf ef       	ldi	r28, 0xFF	; 255
//  will not occur and the new message will be moved into
//  RXB1, regardless of the acceptance criteria of RXB1.


  //set rollover-mode
  CAN_bitModify(RXB0CTRL,0x04,0x04);
    142a:	44 e0       	ldi	r20, 0x04	; 4
    142c:	64 e0       	ldi	r22, 0x04	; 4
    142e:	80 e6       	ldi	r24, 0x60	; 96
    1430:	0e 94 8e 06 	call	0xd1c	; 0xd1c <CAN_bitModify>

  //set one-shot-mode
  //CAN_bitModify(CANCTRL,0x08,0x08);

  return result;
  }
    1434:	8c 2f       	mov	r24, r28
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <bki_init>:

void bki_init(void)
{
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	cf 93       	push	r28
	asm("cli");
    1444:	f8 94       	cli
	//������������� ����������
	DDRC &= ~((1<<7) | (1<<6) | (1<<5));//�����
    1446:	84 b3       	in	r24, 0x14	; 20
    1448:	8f 71       	andi	r24, 0x1F	; 31
    144a:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<7) | (1<<6) | (1<<5);	//Pull Up
    144c:	85 b3       	in	r24, 0x15	; 21
    144e:	80 6e       	ori	r24, 0xE0	; 224
    1450:	85 bb       	out	0x15, r24	; 21
	DDRD &= ~((1<<5) | (1<<4) | (1<<3));//�����
    1452:	81 b3       	in	r24, 0x11	; 17
    1454:	87 7c       	andi	r24, 0xC7	; 199
    1456:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<5) | (1<<4) | (1<<3);	//Pull Up
    1458:	82 b3       	in	r24, 0x12	; 18
    145a:	88 63       	ori	r24, 0x38	; 56
    145c:	82 bb       	out	0x12, r24	; 18
	DDRA |= (1<<BEEP);					//�������
    145e:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1<<BEEP);
    1460:	dc 98       	cbi	0x1b, 4	; 27
	DDRA |= 1<<5;						//��� ����������
    1462:	d5 9a       	sbi	0x1a, 5	; 26
	PORTA |= 1<<5;
    1464:	dd 9a       	sbi	0x1b, 5	; 27
	DDRA |= (1<<OUT1) | (1<<OUT2) | (1<<OUT3) | (1<<OUT4);	//����
    1466:	8a b3       	in	r24, 0x1a	; 26
    1468:	8f 60       	ori	r24, 0x0F	; 15
    146a:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<OUT1) | (1<<OUT2) | (1<<OUT3) | (1<<OUT4);	//��������
    146c:	8b b3       	in	r24, 0x1b	; 27
    146e:	8f 60       	ori	r24, 0x0F	; 15
    1470:	8b bb       	out	0x1b, r24	; 27

	//������������� LCD
	LCD_init();
    1472:	0e 94 96 03 	call	0x72c	; 0x72c <LCD_init>
	LCD_visible();
    1476:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <LCD_visible>
	LCD_clr();
    147a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_clr>

	//����
	TWI_init();
    147e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <TWI_init>
	rtc_get(&rtc);
    1482:	8c ec       	ldi	r24, 0xCC	; 204
    1484:	94 e0       	ldi	r25, 0x04	; 4
    1486:	0e 94 9d 02 	call	0x53a	; 0x53a <rtc_get>
	if(rtc_check()<0){ERROR=RTC;/*return;*/}
    148a:	0e 94 15 03 	call	0x62a	; 0x62a <rtc_check>
    148e:	87 ff       	sbrs	r24, 7
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <bki_init+0x5e>
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>

	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <eeprom_read_dword>
    14a0:	6b 01       	movw	r12, r22
    14a2:	7c 01       	movw	r14, r24
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    14ac:	c8 2f       	mov	r28, r24
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    14b6:	a7 01       	movw	r20, r14
    14b8:	96 01       	movw	r18, r12
    14ba:	6c 2f       	mov	r22, r28
    14bc:	0e 94 ae 18 	call	0x315c	; 0x315c <MODB_init>

UCSRB |= 1<<RXCIE;	//���������� UARTRX
    14c0:	57 9a       	sbi	0x0a, 7	; 10

	interrupt_init();
    14c2:	0e 94 cc 09 	call	0x1398	; 0x1398 <interrupt_init>
	timers_init();
    14c6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <timers_init>
	asm("sei");
    14ca:	78 94       	sei
    14cc:	2f ef       	ldi	r18, 0xFF	; 255
    14ce:	89 e6       	ldi	r24, 0x69	; 105
    14d0:	98 e1       	ldi	r25, 0x18	; 24
    14d2:	21 50       	subi	r18, 0x01	; 1
    14d4:	80 40       	sbci	r24, 0x00	; 0
    14d6:	90 40       	sbci	r25, 0x00	; 0
    14d8:	e1 f7       	brne	.-8      	; 0x14d2 <bki_init+0x98>
    14da:	00 c0       	rjmp	.+0      	; 0x14dc <bki_init+0xa2>
    14dc:	00 00       	nop

	_delay_ms(500);
	if(CAN_init(CAN_MODE_NORMAL)<1){ERROR=CAN;return;}
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <CAN_init>
    14e4:	18 16       	cp	r1, r24
    14e6:	1c f0       	brlt	.+6      	; 0x14ee <bki_init+0xb4>
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>

//	_
//_delay_ms(500);


}
    14ee:	cf 91       	pop	r28
    14f0:	ff 90       	pop	r15
    14f2:	ef 90       	pop	r14
    14f4:	df 90       	pop	r13
    14f6:	cf 90       	pop	r12
    14f8:	08 95       	ret

000014fa <ping>:
signed char send_cmd(unsigned char addr,unsigned char cmd);
signed char send_read_arch(unsigned char part,unsigned char addr,unsigned char index);
static inline signed char checkTOUT(unsigned char addr);

void ping(void)
{
    14fa:	0f 93       	push	r16
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	27 97       	sbiw	r28, 0x07	; 7
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char data[7];

	for(unsigned char i=1;i<MAXQDEV;i++) inSysBDZ[i].flags=1<<FLT;	//перед посылкой команды обнуляем все флаги.Установленный флаг INL будет говорить о том,что ответ принят
    1514:	39 e0       	ldi	r19, 0x09	; 9
    1516:	22 e0       	ldi	r18, 0x02	; 2
    1518:	38 9f       	mul	r19, r24
    151a:	f0 01       	movw	r30, r0
    151c:	39 9f       	mul	r19, r25
    151e:	f0 0d       	add	r31, r0
    1520:	11 24       	eor	r1, r1
    1522:	e3 5c       	subi	r30, 0xC3	; 195
    1524:	fe 4f       	sbci	r31, 0xFE	; 254
    1526:	20 87       	std	Z+8, r18	; 0x08
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	83 36       	cpi	r24, 0x63	; 99
    152c:	91 05       	cpc	r25, r1
    152e:	a1 f7       	brne	.-24     	; 0x1518 <ping+0x1e>
	data[0]=PING;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	89 83       	std	Y+1, r24	; 0x01
	//синхронизация времени для БДЗ
	data[1]=rtc.day;
    1534:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <rtc+0x2>
    1538:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=rtc.month;
    153a:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <rtc+0x1>
    153e:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=rtc.year;
    1540:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <rtc>
    1544:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=rtc.hours;
    1546:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <rtc+0x3>
    154a:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=rtc.minutes;
    154c:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <rtc+0x4>
    1550:	8e 83       	std	Y+6, r24	; 0x06
	data[6]=rtc.seconds;
    1552:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <rtc+0x5>
    1556:	8f 83       	std	Y+7, r24	; 0x07

	CAN_loadTXbuf(0,7,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    1558:	07 ef       	ldi	r16, 0xF7	; 247
    155a:	9e 01       	movw	r18, r28
    155c:	2f 5f       	subi	r18, 0xFF	; 255
    155e:	3f 4f       	sbci	r19, 0xFF	; 255
    1560:	47 e0       	ldi	r20, 0x07	; 7
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	cb 01       	movw	r24, r22
    1568:	0e 94 52 07 	call	0xea4	; 0xea4 <CAN_loadTXbuf>
}
    156c:	27 96       	adiw	r28, 0x07	; 7
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	0f 91       	pop	r16
    157e:	08 95       	ret

00001580 <scansys>:


}

static void scansys(void)
{
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	00 d0       	rcall	.+0      	; 0x158e <scansys+0xe>
    158e:	00 d0       	rcall	.+0      	; 0x1590 <scansys+0x10>
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
	unsigned char i,j=0;
	char tmpStr[4];

	sys_state |= 1<<SCAN;
    1594:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    1598:	80 61       	ori	r24, 0x10	; 16
    159a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <sys_state>
    159e:	01 e0       	ldi	r16, 0x01	; 1
    15a0:	10 e0       	ldi	r17, 0x00	; 0
	for(i=1;i<MAXQDEV;i++) {eeprom_write_byte(&inSysBDZaddr[i],0);inSysBDZ[i].data[7]=0;}
    15a2:	99 e0       	ldi	r25, 0x09	; 9
    15a4:	f9 2e       	mov	r15, r25
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	c8 01       	movw	r24, r16
    15aa:	87 5f       	subi	r24, 0xF7	; 247
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <eeprom_write_byte>
    15b2:	f0 9e       	mul	r15, r16
    15b4:	f0 01       	movw	r30, r0
    15b6:	f1 9e       	mul	r15, r17
    15b8:	f0 0d       	add	r31, r0
    15ba:	11 24       	eor	r1, r1
    15bc:	e3 5c       	subi	r30, 0xC3	; 195
    15be:	fe 4f       	sbci	r31, 0xFE	; 254
    15c0:	17 82       	std	Z+7, r1	; 0x07
    15c2:	0f 5f       	subi	r16, 0xFF	; 255
    15c4:	1f 4f       	sbci	r17, 0xFF	; 255
    15c6:	03 36       	cpi	r16, 0x63	; 99
    15c8:	11 05       	cpc	r17, r1
    15ca:	69 f7       	brne	.-38     	; 0x15a6 <scansys+0x26>
	while(!eeprom_is_ready());
    15cc:	e1 99       	sbic	0x1c, 1	; 28
    15ce:	fe cf       	rjmp	.-4      	; 0x15cc <scansys+0x4c>
	ping();
    15d0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <ping>
    15d4:	2f ef       	ldi	r18, 0xFF	; 255
    15d6:	81 ee       	ldi	r24, 0xE1	; 225
    15d8:	94 e0       	ldi	r25, 0x04	; 4
    15da:	21 50       	subi	r18, 0x01	; 1
    15dc:	80 40       	sbci	r24, 0x00	; 0
    15de:	90 40       	sbci	r25, 0x00	; 0
    15e0:	e1 f7       	brne	.-8      	; 0x15da <scansys+0x5a>
    15e2:	00 c0       	rjmp	.+0      	; 0x15e4 <scansys+0x64>
    15e4:	00 00       	nop
	_delay_ms(100);
	LCD_clr();
    15e6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_clr>
	LCD_puts_P(SCANIROVANIE,12);
    15ea:	6c e0       	ldi	r22, 0x0C	; 12
    15ec:	86 e5       	ldi	r24, 0x56	; 86
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
    15f4:	18 e0       	ldi	r17, 0x08	; 8
	for(i=0;i<8;i++){LCD_putchar(0x2E);_delay_ms(500);}
    15f6:	8e e2       	ldi	r24, 0x2E	; 46
    15f8:	0e 94 08 04 	call	0x810	; 0x810 <LCD_putchar>
    15fc:	2f ef       	ldi	r18, 0xFF	; 255
    15fe:	89 e6       	ldi	r24, 0x69	; 105
    1600:	98 e1       	ldi	r25, 0x18	; 24
    1602:	21 50       	subi	r18, 0x01	; 1
    1604:	80 40       	sbci	r24, 0x00	; 0
    1606:	90 40       	sbci	r25, 0x00	; 0
    1608:	e1 f7       	brne	.-8      	; 0x1602 <scansys+0x82>
    160a:	00 c0       	rjmp	.+0      	; 0x160c <scansys+0x8c>
    160c:	00 00       	nop
    160e:	11 50       	subi	r17, 0x01	; 1
    1610:	91 f7       	brne	.-28     	; 0x15f6 <scansys+0x76>

	sys_state =0;
    1612:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <sys_state>
    1616:	01 e0       	ldi	r16, 0x01	; 1
    1618:	10 e0       	ldi	r17, 0x00	; 0

}

static void scansys(void)
{
	unsigned char i,j=0;
    161a:	f1 2c       	mov	r15, r1
	LCD_clr();
	LCD_puts_P(SCANIROVANIE,12);
	for(i=0;i<8;i++){LCD_putchar(0x2E);_delay_ms(500);}

	sys_state =0;
	for(i=1;i<MAXQDEV;i++) if(inSysBDZ[i].data[7] == i) {writeID(i);j++;}
    161c:	89 e0       	ldi	r24, 0x09	; 9
    161e:	e8 2e       	mov	r14, r24
    1620:	e0 9e       	mul	r14, r16
    1622:	f0 01       	movw	r30, r0
    1624:	e1 9e       	mul	r14, r17
    1626:	f0 0d       	add	r31, r0
    1628:	11 24       	eor	r1, r1
    162a:	e3 5c       	subi	r30, 0xC3	; 195
    162c:	fe 4f       	sbci	r31, 0xFE	; 254
    162e:	67 81       	ldd	r22, Z+7	; 0x07
    1630:	60 13       	cpse	r22, r16
    1632:	06 c0       	rjmp	.+12     	; 0x1640 <scansys+0xc0>
    1634:	c8 01       	movw	r24, r16
    1636:	87 5f       	subi	r24, 0xF7	; 247
    1638:	9f 4f       	sbci	r25, 0xFF	; 255
    163a:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <eeprom_write_byte>
    163e:	f3 94       	inc	r15
    1640:	0f 5f       	subi	r16, 0xFF	; 255
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	03 36       	cpi	r16, 0x63	; 99
    1646:	11 05       	cpc	r17, r1
    1648:	59 f7       	brne	.-42     	; 0x1620 <scansys+0xa0>


	LCD_gotoXY(0,2);
    164a:	62 e0       	ldi	r22, 0x02	; 2
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
	LCD_puts_P(OBNARUZHENO,16);
    1652:	60 e1       	ldi	r22, 0x10	; 16
    1654:	83 e9       	ldi	r24, 0x93	; 147
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
    165c:	4a e0       	ldi	r20, 0x0A	; 10
    165e:	be 01       	movw	r22, r28
    1660:	6f 5f       	subi	r22, 0xFF	; 255
    1662:	7f 4f       	sbci	r23, 0xFF	; 255
    1664:	8f 2d       	mov	r24, r15
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
	LCD_puts(itoa(j,tmpStr,10),3);
    166c:	63 e0       	ldi	r22, 0x03	; 3
    166e:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
	ping();
    1672:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <ping>
    1676:	2f ef       	ldi	r18, 0xFF	; 255
    1678:	87 ea       	ldi	r24, 0xA7	; 167
    167a:	91 e6       	ldi	r25, 0x61	; 97
    167c:	21 50       	subi	r18, 0x01	; 1
    167e:	80 40       	sbci	r24, 0x00	; 0
    1680:	90 40       	sbci	r25, 0x00	; 0
    1682:	e1 f7       	brne	.-8      	; 0x167c <scansys+0xfc>
    1684:	00 c0       	rjmp	.+0      	; 0x1686 <scansys+0x106>
    1686:	00 00       	nop
	_delay_ms(2000);
	menuExit=EXITMENU;
    1688:	80 e3       	ldi	r24, 0x30	; 48
    168a:	95 e7       	ldi	r25, 0x75	; 117
    168c:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <menuExit+0x1>
    1690:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <menuExit>
	ERROR=0;
    1694:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <ERROR>

	return ;
}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	08 95       	ret

000016ae <send_read_arch>:

signed char send_read_arch(unsigned char part,unsigned char addr,unsigned char index)
{
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <send_read_arch+0xa>
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	16 2f       	mov	r17, r22
	unsigned char data[2]={(part==1)?(RD_ARCH_1):(RD_ARCH_2)};
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	11 f0       	breq	.+4      	; 0x16c6 <send_read_arch+0x18>
    16c2:	85 e0       	ldi	r24, 0x05	; 5
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <send_read_arch+0x1a>
    16c6:	84 e0       	ldi	r24, 0x04	; 4
    16c8:	89 83       	std	Y+1, r24	; 0x01

	inSysBDZ[addr].flags=1<<FLT;	//перед посылкой команды обнуляем все флаги.Установленный флаг INL будет говорить о том,что ответ принят
    16ca:	89 e0       	ldi	r24, 0x09	; 9
    16cc:	18 9f       	mul	r17, r24
    16ce:	f0 01       	movw	r30, r0
    16d0:	11 24       	eor	r1, r1
    16d2:	e3 5c       	subi	r30, 0xC3	; 195
    16d4:	fe 4f       	sbci	r31, 0xFE	; 254
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	80 87       	std	Z+8, r24	; 0x08
	data[1]=index;
    16da:	4a 83       	std	Y+2, r20	; 0x02

	CAN_loadTXbuf((unsigned long int)addr,2,data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    16dc:	61 2f       	mov	r22, r17
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	07 ef       	ldi	r16, 0xF7	; 247
    16e6:	9e 01       	movw	r18, r28
    16e8:	2f 5f       	subi	r18, 0xFF	; 255
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	42 e0       	ldi	r20, 0x02	; 2
    16ee:	0e 94 52 07 	call	0xea4	; 0xea4 <CAN_loadTXbuf>
	return 	checkTOUT(addr);
    16f2:	81 2f       	mov	r24, r17
    16f4:	0e 94 36 01 	call	0x26c	; 0x26c <checkTOUT>
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	08 95       	ret

00001706 <send_prog>:

signed char send_prog(unsigned char addr,volatile unsigned char *param)
{
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	00 d0       	rcall	.+0      	; 0x1710 <send_prog+0xa>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <send_prog+0xc>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <send_prog+0xe>
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	18 2f       	mov	r17, r24
	unsigned char data[6]={PROG};
    171a:	86 e0       	ldi	r24, 0x06	; 6
    171c:	9e 01       	movw	r18, r28
    171e:	2f 5f       	subi	r18, 0xFF	; 255
    1720:	3f 4f       	sbci	r19, 0xFF	; 255
    1722:	f9 01       	movw	r30, r18
    1724:	98 2f       	mov	r25, r24
    1726:	11 92       	st	Z+, r1
    1728:	9a 95       	dec	r25
    172a:	e9 f7       	brne	.-6      	; 0x1726 <send_prog+0x20>
    172c:	89 83       	std	Y+1, r24	; 0x01

	if(param != NULL) for(unsigned char i=0;i<6;i++)  data[i]=*(param+i);
    172e:	61 15       	cp	r22, r1
    1730:	71 05       	cpc	r23, r1
    1732:	61 f4       	brne	.+24     	; 0x174c <send_prog+0x46>
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    1734:	89 e0       	ldi	r24, 0x09	; 9
    1736:	18 9f       	mul	r17, r24
    1738:	f0 01       	movw	r30, r0
    173a:	11 24       	eor	r1, r1
    173c:	e3 5c       	subi	r30, 0xC3	; 195
    173e:	fe 4f       	sbci	r31, 0xFE	; 254
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,(param != NULL)?(6):(1),data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    1744:	67 2b       	or	r22, r23
    1746:	79 f4       	brne	.+30     	; 0x1766 <send_prog+0x60>
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	0e c0       	rjmp	.+28     	; 0x1768 <send_prog+0x62>
    174c:	f9 01       	movw	r30, r18

signed char send_prog(unsigned char addr,volatile unsigned char *param)
{
	unsigned char data[6]={PROG};

	if(param != NULL) for(unsigned char i=0;i<6;i++)  data[i]=*(param+i);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	db 01       	movw	r26, r22
    1754:	a8 0f       	add	r26, r24
    1756:	b9 1f       	adc	r27, r25
    1758:	4c 91       	ld	r20, X
    175a:	41 93       	st	Z+, r20
    175c:	01 96       	adiw	r24, 0x01	; 1
    175e:	86 30       	cpi	r24, 0x06	; 6
    1760:	91 05       	cpc	r25, r1
    1762:	b9 f7       	brne	.-18     	; 0x1752 <send_prog+0x4c>
    1764:	e7 cf       	rjmp	.-50     	; 0x1734 <send_prog+0x2e>
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
	CAN_loadTXbuf((unsigned long int)addr,(param != NULL)?(6):(1),data,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    1766:	46 e0       	ldi	r20, 0x06	; 6
    1768:	81 2f       	mov	r24, r17
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a0 e0       	ldi	r26, 0x00	; 0
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	07 ef       	ldi	r16, 0xF7	; 247
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 52 07 	call	0xea4	; 0xea4 <CAN_loadTXbuf>

	//если программируем широковещательно то ответа не будет
	return (addr==0)?(1):(checkTOUT(addr));
    177a:	11 23       	and	r17, r17
    177c:	21 f0       	breq	.+8      	; 0x1786 <send_prog+0x80>
    177e:	81 2f       	mov	r24, r17
    1780:	0e 94 36 01 	call	0x26c	; 0x26c <checkTOUT>
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <send_prog+0x82>
    1786:	81 e0       	ldi	r24, 0x01	; 1
}
    1788:	26 96       	adiw	r28, 0x06	; 6
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	08 95       	ret

0000179e <send_cmd>:

signed char send_cmd(unsigned char addr,unsigned char cmd)
{
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	1f 92       	push	r1
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	18 2f       	mov	r17, r24
    17ae:	69 83       	std	Y+1, r22	; 0x01
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
    17b0:	89 e0       	ldi	r24, 0x09	; 9
    17b2:	18 9f       	mul	r17, r24
    17b4:	f0 01       	movw	r30, r0
    17b6:	11 24       	eor	r1, r1
    17b8:	e3 5c       	subi	r30, 0xC3	; 195
    17ba:	fe 4f       	sbci	r31, 0xFE	; 254
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	80 87       	std	Z+8, r24	; 0x08
	CAN_loadTXbuf((unsigned long int)addr,1,&cmd,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);
    17c0:	61 2f       	mov	r22, r17
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	07 ef       	ldi	r16, 0xF7	; 247
    17ca:	9e 01       	movw	r18, r28
    17cc:	2f 5f       	subi	r18, 0xFF	; 255
    17ce:	3f 4f       	sbci	r19, 0xFF	; 255
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	0e 94 52 07 	call	0xea4	; 0xea4 <CAN_loadTXbuf>

	if(cmd==RESET) return 1;	//не требует ответа
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	82 30       	cpi	r24, 0x02	; 2
    17da:	21 f0       	breq	.+8      	; 0x17e4 <send_cmd+0x46>
	return 	checkTOUT(addr);
    17dc:	81 2f       	mov	r24, r17
    17de:	0e 94 36 01 	call	0x26c	; 0x26c <checkTOUT>
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <send_cmd+0x48>
{
	//перед посылкой команды обнуляем флаги ALM,INL,устанавливаем FLT.Установленный флаг INL будет говорить о том,что ответ принят
	inSysBDZ[addr].flags=1<<FLT;
	CAN_loadTXbuf((unsigned long int)addr,1,&cmd,CAN_TX_PRIORITY_3 & CAN_SID_FRAME);

	if(cmd==RESET) return 1;	//не требует ответа
    17e4:	81 e0       	ldi	r24, 0x01	; 1
	return 	checkTOUT(addr);
}
    17e6:	0f 90       	pop	r0
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	08 95       	ret

000017f2 <__vector_1>:
}


//чтение принятого сообщения из буфера MCP2515 (CAN)
ISR(INT0_vect)
{
    17f2:	1f 92       	push	r1
    17f4:	0f 92       	push	r0
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	0f 92       	push	r0
    17fa:	11 24       	eor	r1, r1
    17fc:	8f 92       	push	r8
    17fe:	9f 92       	push	r9
    1800:	af 92       	push	r10
    1802:	bf 92       	push	r11
    1804:	cf 92       	push	r12
    1806:	df 92       	push	r13
    1808:	ef 92       	push	r14
    180a:	ff 92       	push	r15
    180c:	2f 93       	push	r18
    180e:	3f 93       	push	r19
    1810:	4f 93       	push	r20
    1812:	5f 93       	push	r21
    1814:	6f 93       	push	r22
    1816:	7f 93       	push	r23
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
    1820:	ef 93       	push	r30
    1822:	ff 93       	push	r31
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	2e 97       	sbiw	r28, 0x0e	; 14
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	cd bf       	out	0x3d, r28	; 61
		unsigned char dataLength;
		unsigned char data[8];
		unsigned char msg_flags;
	}tmpBuf;

	CAN_readRXbuf(&tmpBuf.ID, tmpBuf.data, &tmpBuf.dataLength, &tmpBuf.msg_flags);
    1832:	9e 01       	movw	r18, r28
    1834:	22 5f       	subi	r18, 0xF2	; 242
    1836:	3f 4f       	sbci	r19, 0xFF	; 255
    1838:	ae 01       	movw	r20, r28
    183a:	4b 5f       	subi	r20, 0xFB	; 251
    183c:	5f 4f       	sbci	r21, 0xFF	; 255
    183e:	be 01       	movw	r22, r28
    1840:	6a 5f       	subi	r22, 0xFA	; 250
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	ce 01       	movw	r24, r28
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	0e 94 24 08 	call	0x1048	; 0x1048 <CAN_readRXbuf>
	if(chkBit(sys_state,SCAN)) inSysBDZ[BDZ_ID].data[7]=BDZ_ID;								//если производится сканирование сохраняем откликнувшиеся ID в inSysBDZ[BDZ_ID].data[7]
    184c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    1850:	89 80       	ldd	r8, Y+1	; 0x01
    1852:	9a 80       	ldd	r9, Y+2	; 0x02
    1854:	ab 80       	ldd	r10, Y+3	; 0x03
    1856:	bc 80       	ldd	r11, Y+4	; 0x04
    1858:	84 ff       	sbrs	r24, 4
    185a:	11 c0       	rjmp	.+34     	; 0x187e <__vector_1+0x8c>
    185c:	d5 01       	movw	r26, r10
    185e:	c4 01       	movw	r24, r8
    1860:	8f 77       	andi	r24, 0x7F	; 127
    1862:	99 27       	eor	r25, r25
    1864:	aa 27       	eor	r26, r26
    1866:	bb 27       	eor	r27, r27
    1868:	29 e0       	ldi	r18, 0x09	; 9
    186a:	28 9f       	mul	r18, r24
    186c:	f0 01       	movw	r30, r0
    186e:	29 9f       	mul	r18, r25
    1870:	f0 0d       	add	r31, r0
    1872:	11 24       	eor	r1, r1
    1874:	e3 5c       	subi	r30, 0xC3	; 195
    1876:	fe 4f       	sbci	r31, 0xFE	; 254
    1878:	88 2d       	mov	r24, r8
    187a:	8f 77       	andi	r24, 0x7F	; 127
    187c:	87 83       	std	Z+7, r24	; 0x07

	if(readID(BDZ_ID) != BDZ_ID) {ERROR=ID;return;}											//проверка валидности (если ID не зарегистрирован)
    187e:	75 01       	movw	r14, r10
    1880:	64 01       	movw	r12, r8
    1882:	e8 94       	clt
    1884:	c7 f8       	bld	r12, 7
    1886:	dd 24       	eor	r13, r13
    1888:	ee 24       	eor	r14, r14
    188a:	ff 24       	eor	r15, r15
    188c:	c6 01       	movw	r24, r12
    188e:	87 5f       	subi	r24, 0xF7	; 247
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a0 e0       	ldi	r26, 0x00	; 0
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	c8 16       	cp	r12, r24
    189e:	d9 06       	cpc	r13, r25
    18a0:	ea 06       	cpc	r14, r26
    18a2:	fb 06       	cpc	r15, r27
    18a4:	21 f0       	breq	.+8      	; 0x18ae <__vector_1+0xbc>
    18a6:	84 e0       	ldi	r24, 0x04	; 4
    18a8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>
    18ac:	40 c0       	rjmp	.+128    	; 0x192e <__vector_1+0x13c>

	setBit(inSysBDZ[BDZ_ID].flags,INL);														//ставим флаг инлайн
    18ae:	89 e0       	ldi	r24, 0x09	; 9
    18b0:	8c 9d       	mul	r24, r12
    18b2:	f0 01       	movw	r30, r0
    18b4:	8d 9d       	mul	r24, r13
    18b6:	f0 0d       	add	r31, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	e3 5c       	subi	r30, 0xC3	; 195
    18bc:	fe 4f       	sbci	r31, 0xFE	; 254
    18be:	80 85       	ldd	r24, Z+8	; 0x08
    18c0:	84 60       	ori	r24, 0x04	; 4
    18c2:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,10)==1) setBit(inSysBDZ[BDZ_ID].flags,CONF);
    18c4:	92 fe       	sbrs	r9, 2
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <__vector_1+0xdc>
    18c8:	80 85       	ldd	r24, Z+8	; 0x08
    18ca:	80 62       	ori	r24, 0x20	; 32
    18cc:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,9) ==0) setBit(inSysBDZ[BDZ_ID].flags,ALM);							//если есть авариz ставим флаг в БДЗ
    18ce:	91 fc       	sbrc	r9, 1
    18d0:	0b c0       	rjmp	.+22     	; 0x18e8 <__vector_1+0xf6>
    18d2:	89 e0       	ldi	r24, 0x09	; 9
    18d4:	8c 9d       	mul	r24, r12
    18d6:	f0 01       	movw	r30, r0
    18d8:	8d 9d       	mul	r24, r13
    18da:	f0 0d       	add	r31, r0
    18dc:	11 24       	eor	r1, r1
    18de:	e3 5c       	subi	r30, 0xC3	; 195
    18e0:	fe 4f       	sbci	r31, 0xFE	; 254
    18e2:	80 85       	ldd	r24, Z+8	; 0x08
    18e4:	81 60       	ori	r24, 0x01	; 1
    18e6:	80 87       	std	Z+8, r24	; 0x08
	if(chkBit(tmpBuf.ID,8) ==1) clrBit(inSysBDZ[BDZ_ID].flags,FLT);							//если нету неисправности обнуляем флаг в БДЗ
    18e8:	90 fe       	sbrs	r9, 0
    18ea:	0b c0       	rjmp	.+22     	; 0x1902 <__vector_1+0x110>
    18ec:	89 e0       	ldi	r24, 0x09	; 9
    18ee:	8c 9d       	mul	r24, r12
    18f0:	f0 01       	movw	r30, r0
    18f2:	8d 9d       	mul	r24, r13
    18f4:	f0 0d       	add	r31, r0
    18f6:	11 24       	eor	r1, r1
    18f8:	e3 5c       	subi	r30, 0xC3	; 195
    18fa:	fe 4f       	sbci	r31, 0xFE	; 254
    18fc:	80 85       	ldd	r24, Z+8	; 0x08
    18fe:	8d 7f       	andi	r24, 0xFD	; 253
    1900:	80 87       	std	Z+8, r24	; 0x08
	//inSysBDZ[BDZ_ID].data[0] = tmpBuf.ID>>8;
	for(unsigned char i=0;i<tmpBuf.dataLength;i++)inSysBDZ[BDZ_ID].data[i] = tmpBuf.data[i];//копируем данные
    1902:	4d 81       	ldd	r20, Y+5	; 0x05
    1904:	fe 01       	movw	r30, r28
    1906:	36 96       	adiw	r30, 0x06	; 6
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	59 e0       	ldi	r21, 0x09	; 9
    190e:	5c 9d       	mul	r21, r12
    1910:	90 01       	movw	r18, r0
    1912:	5d 9d       	mul	r21, r13
    1914:	30 0d       	add	r19, r0
    1916:	11 24       	eor	r1, r1
    1918:	23 5c       	subi	r18, 0xC3	; 195
    191a:	3e 4f       	sbci	r19, 0xFE	; 254
    191c:	84 17       	cp	r24, r20
    191e:	38 f4       	brcc	.+14     	; 0x192e <__vector_1+0x13c>
    1920:	51 91       	ld	r21, Z+
    1922:	d9 01       	movw	r26, r18
    1924:	a8 0f       	add	r26, r24
    1926:	b9 1f       	adc	r27, r25
    1928:	5c 93       	st	X, r21
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	f7 cf       	rjmp	.-18     	; 0x191c <__vector_1+0x12a>
}
    192e:	2e 96       	adiw	r28, 0x0e	; 14
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	ff 91       	pop	r31
    1940:	ef 91       	pop	r30
    1942:	bf 91       	pop	r27
    1944:	af 91       	pop	r26
    1946:	9f 91       	pop	r25
    1948:	8f 91       	pop	r24
    194a:	7f 91       	pop	r23
    194c:	6f 91       	pop	r22
    194e:	5f 91       	pop	r21
    1950:	4f 91       	pop	r20
    1952:	3f 91       	pop	r19
    1954:	2f 91       	pop	r18
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	df 90       	pop	r13
    195c:	cf 90       	pop	r12
    195e:	bf 90       	pop	r11
    1960:	af 90       	pop	r10
    1962:	9f 90       	pop	r9
    1964:	8f 90       	pop	r8
    1966:	0f 90       	pop	r0
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	0f 90       	pop	r0
    196c:	1f 90       	pop	r1
    196e:	18 95       	reti

00001970 <scanID>:
//	while(1);
	return 3;					//длина сообщения об ошибке фиксирована
}

unsigned char scanID(unsigned char i)
{
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	18 2f       	mov	r17, r24
    1978:	cc e6       	ldi	r28, 0x6C	; 108
    197a:	d0 e0       	ldi	r29, 0x00	; 0
	for(unsigned char n=0;n<MAXQDEV;n++)
		if(readIDnew(n)==i) return 0;
    197c:	ce 01       	movw	r24, r28
    197e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    1982:	81 17       	cp	r24, r17
    1984:	39 f0       	breq	.+14     	; 0x1994 <scanID+0x24>
    1986:	21 96       	adiw	r28, 0x01	; 1
	return 3;					//длина сообщения об ошибке фиксирована
}

unsigned char scanID(unsigned char i)
{
	for(unsigned char n=0;n<MAXQDEV;n++)
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	cf 3c       	cpi	r28, 0xCF	; 207
    198c:	d8 07       	cpc	r29, r24
    198e:	b1 f7       	brne	.-20     	; 0x197c <scanID+0xc>
		if(readIDnew(n)==i) return 0;
	return 1;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <scanID+0x26>
}

unsigned char scanID(unsigned char i)
{
	for(unsigned char n=0;n<MAXQDEV;n++)
		if(readIDnew(n)==i) return 0;
    1994:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
}
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	08 95       	ret

0000199e <scanKBD>:

unsigned char scanKBD(void)
{
	unsigned char kbd = (((PIND&0x38)>>1) | (PINC&0xE0)) & 0xFC;
    199e:	20 b3       	in	r18, 0x10	; 16
    19a0:	83 b3       	in	r24, 0x13	; 19
    19a2:	28 73       	andi	r18, 0x38	; 56
    19a4:	26 95       	lsr	r18
    19a6:	80 7e       	andi	r24, 0xE0	; 224
    19a8:	28 2b       	or	r18, r24
	static unsigned char prevkbd;

	if((kbd)==0xFC){prevkbd=0xFC; return NOKEY;}	//клавиша не нажата,вернули FF
    19aa:	2c 3f       	cpi	r18, 0xFC	; 252
    19ac:	19 f4       	brne	.+6      	; 0x19b4 <scanKBD+0x16>
    19ae:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <__data_end>
    19b2:	32 c0       	rjmp	.+100    	; 0x1a18 <scanKBD+0x7a>
//	beep(10);					//пикалка + антидребезг

	if(prevkbd != kbd)
    19b4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
    19b8:	28 17       	cp	r18, r24
    19ba:	71 f0       	breq	.+28     	; 0x19d8 <scanKBD+0x3a>
	return NOKEY;						//кнопка не нашлась.типа помеха.
}

static inline void beep(unsigned int lenght)
{
	setBit(PORTA,BEEP);					//пикалка + антидребезг
    19bc:	dc 9a       	sbi	0x1b, 4	; 27
    19be:	8a e0       	ldi	r24, 0x0A	; 10
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	ef e9       	ldi	r30, 0x9F	; 159
    19c4:	ff e0       	ldi	r31, 0x0F	; 15
    19c6:	31 97       	sbiw	r30, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <scanKBD+0x28>
    19ca:	00 c0       	rjmp	.+0      	; 0x19cc <scanKBD+0x2e>
    19cc:	00 00       	nop
    19ce:	01 97       	sbiw	r24, 0x01	; 1
	for(unsigned int i=0;i<lenght;i++)_delay_ms(1);
    19d0:	c1 f7       	brne	.-16     	; 0x19c2 <scanKBD+0x24>
	clrBit(PORTA,BEEP);
    19d2:	dc 98       	cbi	0x1b, 4	; 27
//	beep(10);					//пикалка + антидребезг

	if(prevkbd != kbd)
	{
		beep(10);					//пикалка + антидребезг
		prevkbd = kbd;
    19d4:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <__data_end>
	}

	menuExit=EXITMENU;						//взводим таймер автовыхода
    19d8:	80 e3       	ldi	r24, 0x30	; 48
    19da:	95 e7       	ldi	r25, 0x75	; 117
    19dc:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <menuExit+0x1>
    19e0:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <menuExit>
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	90 e0       	ldi	r25, 0x00	; 0
	for(char i=2;i<8;i++)
	{
		if(chkBit(kbd,i) ==0)return i;	//найдена нажатая кнопка.вернули код кнопки
    19e8:	61 e0       	ldi	r22, 0x01	; 1
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	ab 01       	movw	r20, r22
    19f0:	08 2e       	mov	r0, r24
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <scanKBD+0x5a>
    19f4:	44 0f       	add	r20, r20
    19f6:	55 1f       	adc	r21, r21
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <scanKBD+0x56>
    19fc:	42 23       	and	r20, r18
    19fe:	53 23       	and	r21, r19
    1a00:	08 2e       	mov	r0, r24
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <scanKBD+0x6a>
    1a04:	55 95       	asr	r21
    1a06:	47 95       	ror	r20
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <scanKBD+0x66>
    1a0c:	45 2b       	or	r20, r21
    1a0e:	29 f0       	breq	.+10     	; 0x1a1a <scanKBD+0x7c>
    1a10:	01 96       	adiw	r24, 0x01	; 1
		beep(10);					//пикалка + антидребезг
		prevkbd = kbd;
	}

	menuExit=EXITMENU;						//взводим таймер автовыхода
	for(char i=2;i<8;i++)
    1a12:	88 30       	cpi	r24, 0x08	; 8
    1a14:	91 05       	cpc	r25, r1
    1a16:	59 f7       	brne	.-42     	; 0x19ee <scanKBD+0x50>
	{
		if(chkBit(kbd,i) ==0)return i;	//найдена нажатая кнопка.вернули код кнопки
	}
	return NOKEY;						//кнопка не нашлась.типа помеха.
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
}
    1a1a:	08 95       	ret

00001a1c <whileKey>:
	LCD_puts(buffer,20);

}

static inline unsigned char whileKey(void)
{
    1a1c:	cf 93       	push	r28
	unsigned char tmpKey;

	while((tmpKey=scanKBD())==NOKEY) if(menuExit==0)return NOKEY;	//ждем нажатия кнопки или автовыхода
    1a1e:	0e 94 cf 0c 	call	0x199e	; 0x199e <scanKBD>
    1a22:	c8 2f       	mov	r28, r24
    1a24:	8f 3f       	cpi	r24, 0xFF	; 255
    1a26:	41 f4       	brne	.+16     	; 0x1a38 <whileKey+0x1c>
    1a28:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <menuExit>
    1a2c:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <menuExit+0x1>
    1a30:	89 2b       	or	r24, r25
    1a32:	a9 f7       	brne	.-22     	; 0x1a1e <whileKey+0x2>
    1a34:	8f ef       	ldi	r24, 0xFF	; 255
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <whileKey+0x26>
	while(scanKBD()!=NOKEY);										//...отпускания кнопки
    1a38:	0e 94 cf 0c 	call	0x199e	; 0x199e <scanKBD>
    1a3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a3e:	e1 f7       	brne	.-8      	; 0x1a38 <whileKey+0x1c>

static inline unsigned char whileKey(void)
{
	unsigned char tmpKey;

	while((tmpKey=scanKBD())==NOKEY) if(menuExit==0)return NOKEY;	//ждем нажатия кнопки или автовыхода
    1a40:	8c 2f       	mov	r24, r28
	while(scanKBD()!=NOKEY);										//...отпускания кнопки

	return tmpKey;
}
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <change_param>:
		}
	}
}

static void change_param(unsigned char nParam)
{
    1a46:	2f 92       	push	r2
    1a48:	3f 92       	push	r3
    1a4a:	4f 92       	push	r4
    1a4c:	5f 92       	push	r5
    1a4e:	6f 92       	push	r6
    1a50:	7f 92       	push	r7
    1a52:	8f 92       	push	r8
    1a54:	9f 92       	push	r9
    1a56:	af 92       	push	r10
    1a58:	bf 92       	push	r11
    1a5a:	cf 92       	push	r12
    1a5c:	df 92       	push	r13
    1a5e:	ef 92       	push	r14
    1a60:	ff 92       	push	r15
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <change_param+0x26>
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <change_param+0x28>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <change_param+0x2a>
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	28 2e       	mov	r2, r24
	signed char numBDZ=0;	//кол-во инлайновых БДЗ;
	unsigned char addr=0xFF,step;
	signed int param=0,max,staroe=0;

	scansys();
    1a76:	0e 94 c0 0a 	call	0x1580	; 0x1580 <scansys>
    1a7a:	01 e0       	ldi	r16, 0x01	; 1
    1a7c:	10 e0       	ldi	r17, 0x00	; 0
	//считаем кол-во БДЗ инлайн
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) {numBDZ++;/*addr=readID(i);*/}
    1a7e:	59 e0       	ldi	r21, 0x09	; 9
    1a80:	f5 2e       	mov	r15, r21
    1a82:	c8 01       	movw	r24, r16
    1a84:	87 5f       	subi	r24, 0xF7	; 247
    1a86:	9f 4f       	sbci	r25, 0xFF	; 255
    1a88:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    1a8c:	80 13       	cpse	r24, r16
    1a8e:	08 c0       	rjmp	.+16     	; 0x1aa0 <change_param+0x5a>
    1a90:	f0 9e       	mul	r15, r16
    1a92:	f0 01       	movw	r30, r0
    1a94:	f1 9e       	mul	r15, r17
    1a96:	f0 0d       	add	r31, r0
    1a98:	11 24       	eor	r1, r1
    1a9a:	e3 5c       	subi	r30, 0xC3	; 195
    1a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9e:	80 85       	ldd	r24, Z+8	; 0x08
    1aa0:	0f 5f       	subi	r16, 0xFF	; 255
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	03 36       	cpi	r16, 0x63	; 99
    1aa6:	11 05       	cpc	r17, r1
    1aa8:	61 f7       	brne	.-40     	; 0x1a82 <change_param+0x3c>
}

static unsigned char numm(void)
{
	unsigned char i=0;
	printMenuHeader(NUMM);	//прорисовываем заголовок
    1aaa:	8d ed       	ldi	r24, 0xDD	; 221
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	0e 94 46 06 	call	0xc8c	; 0xc8c <printMenuHeader>
	return 0;
}

static unsigned char numm(void)
{
	unsigned char i=0;
    1ab2:	31 2c       	mov	r3, r1
	printMenuHeader(NUMM);	//прорисовываем заголовок
	while (1)
	{
		char str[2];
		LCD_gotoXY(0,2);
		sprintf(str,"%02d",i);
    1ab4:	03 ef       	ldi	r16, 0xF3	; 243
    1ab6:	10 e0       	ldi	r17, 0x00	; 0
    1ab8:	9e 01       	movw	r18, r28
    1aba:	2f 5f       	subi	r18, 0xFF	; 255
    1abc:	3f 4f       	sbci	r19, 0xFF	; 255
    1abe:	69 01       	movw	r12, r18
	unsigned char i=0;
	printMenuHeader(NUMM);	//прорисовываем заголовок
	while (1)
	{
		char str[2];
		LCD_gotoXY(0,2);
    1ac0:	62 e0       	ldi	r22, 0x02	; 2
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		sprintf(str,"%02d",i);
    1ac8:	a3 2c       	mov	r10, r3
    1aca:	b1 2c       	mov	r11, r1
    1acc:	1f 92       	push	r1
    1ace:	3f 92       	push	r3
    1ad0:	1f 93       	push	r17
    1ad2:	0f 93       	push	r16
    1ad4:	df 92       	push	r13
    1ad6:	cf 92       	push	r12
    1ad8:	0e 94 41 1b 	call	0x3682	; 0x3682 <sprintf>
		LCD_puts(str,4);
    1adc:	64 e0       	ldi	r22, 0x04	; 4
    1ade:	c6 01       	movw	r24, r12
    1ae0:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1ae4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	85 30       	cpi	r24, 0x05	; 5
    1af6:	79 f0       	breq	.+30     	; 0x1b16 <change_param+0xd0>
    1af8:	18 f4       	brcc	.+6      	; 0x1b00 <change_param+0xba>
    1afa:	82 30       	cpi	r24, 0x02	; 2
    1afc:	89 f0       	breq	.+34     	; 0x1b20 <change_param+0xda>
    1afe:	e0 cf       	rjmp	.-64     	; 0x1ac0 <change_param+0x7a>
    1b00:	86 30       	cpi	r24, 0x06	; 6
    1b02:	29 f0       	breq	.+10     	; 0x1b0e <change_param+0xc8>
    1b04:	8f 3f       	cpi	r24, 0xFF	; 255
    1b06:	e1 f6       	brne	.-72     	; 0x1ac0 <change_param+0x7a>
		break;
		case UP:if(i==99) i=0; else i++;
		break;
		case ENT:return i;	//выход по ENT (отсылка новых параметров)
		break;
		case NOKEY:asm("jmp 0");
    1b08:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1b0c:	d9 cf       	rjmp	.-78     	; 0x1ac0 <change_param+0x7a>
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(i==0) i=99; else i--;
    1b0e:	33 20       	and	r3, r3
    1b10:	51 f0       	breq	.+20     	; 0x1b26 <change_param+0xe0>
    1b12:	3a 94       	dec	r3
    1b14:	d5 cf       	rjmp	.-86     	; 0x1ac0 <change_param+0x7a>
		break;
		case UP:if(i==99) i=0; else i++;
    1b16:	33 e6       	ldi	r19, 0x63	; 99
    1b18:	33 16       	cp	r3, r19
    1b1a:	41 f0       	breq	.+16     	; 0x1b2c <change_param+0xe6>
    1b1c:	33 94       	inc	r3
    1b1e:	d0 cf       	rjmp	.-96     	; 0x1ac0 <change_param+0x7a>
	//считаем кол-во БДЗ инлайн
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) {numBDZ++;/*addr=readID(i);*/}

	addr=numm();//адрес БДЗ в котором будем менять, если addr=0 значит запрос широковещательный

	if(nParam==0 && addr==0) {printUNAVALIABLE();_delay_ms(2000);return;} //нельзя менять адрес во всех БДЗ разом
    1b20:	22 20       	and	r2, r2
    1b22:	31 f0       	breq	.+12     	; 0x1b30 <change_param+0xea>
    1b24:	18 c0       	rjmp	.+48     	; 0x1b56 <change_param+0x110>
		sprintf(str,"%02d",i);
		LCD_puts(str,4);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(i==0) i=99; else i--;
    1b26:	43 e6       	ldi	r20, 0x63	; 99
    1b28:	34 2e       	mov	r3, r20
    1b2a:	ca cf       	rjmp	.-108    	; 0x1ac0 <change_param+0x7a>
		break;
		case UP:if(i==99) i=0; else i++;
    1b2c:	31 2c       	mov	r3, r1
    1b2e:	c8 cf       	rjmp	.-112    	; 0x1ac0 <change_param+0x7a>
	//считаем кол-во БДЗ инлайн
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) {numBDZ++;/*addr=readID(i);*/}

	addr=numm();//адрес БДЗ в котором будем менять, если addr=0 значит запрос широковещательный

	if(nParam==0 && addr==0) {printUNAVALIABLE();_delay_ms(2000);return;} //нельзя менять адрес во всех БДЗ разом
    1b30:	31 10       	cpse	r3, r1
    1b32:	13 c0       	rjmp	.+38     	; 0x1b5a <change_param+0x114>
	LCD_gotoXY(0,2);LCD_puts_P(NET_SVYAZI,20);
}

static inline void printUNAVALIABLE(void)
{
	LCD_gotoXY(0,2);LCD_puts_P(NEDOSTUPNO,20);
    1b34:	62 e0       	ldi	r22, 0x02	; 2
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
    1b3c:	64 e1       	ldi	r22, 0x14	; 20
    1b3e:	84 e5       	ldi	r24, 0x54	; 84
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
    1b48:	97 ea       	ldi	r25, 0xA7	; 167
    1b4a:	e1 e6       	ldi	r30, 0x61	; 97
    1b4c:	81 50       	subi	r24, 0x01	; 1
    1b4e:	90 40       	sbci	r25, 0x00	; 0
    1b50:	e0 40       	sbci	r30, 0x00	; 0
    1b52:	e1 f7       	brne	.-8      	; 0x1b4c <change_param+0x106>
    1b54:	1d c0       	rjmp	.+58     	; 0x1b90 <change_param+0x14a>
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,INL)) {numBDZ++;/*addr=readID(i);*/}

	addr=numm();//адрес БДЗ в котором будем менять, если addr=0 значит запрос широковещательный

	if(nParam==0 && addr==0) {printUNAVALIABLE();_delay_ms(2000);return;} //нельзя менять адрес во всех БДЗ разом
	if (addr!=0) //если запрос не широковещательный, то считываем показания БДЗ под № "addr"
    1b56:	33 20       	and	r3, r3
    1b58:	f1 f0       	breq	.+60     	; 0x1b96 <change_param+0x150>
	{
		if((send_prog(addr,NULL) <0)||(inSysBDZ[addr].data[0] !=PROG))	{printTOUT();_delay_ms(2000);return;}
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	83 2d       	mov	r24, r3
    1b60:	0e 94 83 0b 	call	0x1706	; 0x1706 <send_prog>
    1b64:	87 fd       	sbrc	r24, 7
    1b66:	0b c0       	rjmp	.+22     	; 0x1b7e <change_param+0x138>
    1b68:	89 e0       	ldi	r24, 0x09	; 9
    1b6a:	8a 9d       	mul	r24, r10
    1b6c:	f0 01       	movw	r30, r0
    1b6e:	8b 9d       	mul	r24, r11
    1b70:	f0 0d       	add	r31, r0
    1b72:	11 24       	eor	r1, r1
    1b74:	e3 5c       	subi	r30, 0xC3	; 195
    1b76:	fe 4f       	sbci	r31, 0xFE	; 254
    1b78:	80 81       	ld	r24, Z
    1b7a:	86 30       	cpi	r24, 0x06	; 6
    1b7c:	61 f0       	breq	.+24     	; 0x1b96 <change_param+0x150>
    1b7e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <printTOUT>
    1b82:	ff ef       	ldi	r31, 0xFF	; 255
    1b84:	27 ea       	ldi	r18, 0xA7	; 167
    1b86:	31 e6       	ldi	r19, 0x61	; 97
    1b88:	f1 50       	subi	r31, 0x01	; 1
    1b8a:	20 40       	sbci	r18, 0x00	; 0
    1b8c:	30 40       	sbci	r19, 0x00	; 0
    1b8e:	e1 f7       	brne	.-8      	; 0x1b88 <change_param+0x142>
    1b90:	00 c0       	rjmp	.+0      	; 0x1b92 <change_param+0x14c>
    1b92:	00 00       	nop
    1b94:	18 c1       	rjmp	.+560    	; 0x1dc6 <change_param+0x380>
	}

	switch(nParam)
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	28 16       	cp	r2, r24
    1b9a:	21 f1       	breq	.+72     	; 0x1be4 <change_param+0x19e>
    1b9c:	28 16       	cp	r2, r24
    1b9e:	98 f0       	brcs	.+38     	; 0x1bc6 <change_param+0x180>
    1ba0:	92 e0       	ldi	r25, 0x02	; 2
    1ba2:	29 12       	cpse	r2, r25
    1ba4:	10 c1       	rjmp	.+544    	; 0x1dc6 <change_param+0x380>
	}
	break;
	//время УРОВ:если на связи 1 БДЗ пишем его время УРОВ, если больше то 0мс
	case 2:
	{
		staroe=(signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5];
    1ba6:	89 e0       	ldi	r24, 0x09	; 9
    1ba8:	8a 9d       	mul	r24, r10
    1baa:	f0 01       	movw	r30, r0
    1bac:	8b 9d       	mul	r24, r11
    1bae:	f0 0d       	add	r31, r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	e3 5c       	subi	r30, 0xC3	; 195
    1bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb6:	84 81       	ldd	r24, Z+4	; 0x04
    1bb8:	e5 80       	ldd	r14, Z+5	; 0x05
    1bba:	f1 2c       	mov	r15, r1
    1bbc:	f8 2a       	or	r15, r24
		//param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5]):(0);
		inSysBDZ[addr].data[2]=inSysBDZ[addr].data[3]=-1;	//в неизменяемый параметр пишем -1
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	83 83       	std	Z+3, r24	; 0x03
    1bc2:	82 83       	std	Z+2, r24	; 0x02
    1bc4:	1e c0       	rjmp	.+60     	; 0x1c02 <change_param+0x1bc>
	}

	switch(nParam)
	{
	//изменение адреса
	case 0:{staroe=inSysBDZ[addr].data[1];max=99;step=1;}
    1bc6:	89 e0       	ldi	r24, 0x09	; 9
    1bc8:	8a 9d       	mul	r24, r10
    1bca:	f0 01       	movw	r30, r0
    1bcc:	8b 9d       	mul	r24, r11
    1bce:	f0 0d       	add	r31, r0
    1bd0:	11 24       	eor	r1, r1
    1bd2:	e3 5c       	subi	r30, 0xC3	; 195
    1bd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd6:	e1 80       	ldd	r14, Z+1	; 0x01
    1bd8:	f1 2c       	mov	r15, r1
    1bda:	33 e6       	ldi	r19, 0x63	; 99
    1bdc:	83 2e       	mov	r8, r19
    1bde:	91 2c       	mov	r9, r1
    1be0:	81 e0       	ldi	r24, 0x01	; 1
	break;
    1be2:	14 c0       	rjmp	.+40     	; 0x1c0c <change_param+0x1c6>
	//время МТЗ:если на связи 1 БДЗ пишем его время МТЗ, если больше то 0мс
	case 1:
	{

		staroe=(signed int)inSysBDZ[addr].data[2]<<8 | inSysBDZ[addr].data[3];
    1be4:	89 e0       	ldi	r24, 0x09	; 9
    1be6:	8a 9d       	mul	r24, r10
    1be8:	f0 01       	movw	r30, r0
    1bea:	8b 9d       	mul	r24, r11
    1bec:	f0 0d       	add	r31, r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	e3 5c       	subi	r30, 0xC3	; 195
    1bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	e3 80       	ldd	r14, Z+3	; 0x03
    1bf8:	f1 2c       	mov	r15, r1
    1bfa:	f8 2a       	or	r15, r24
		//param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[2]<<8 | inSysBDZ[addr].data[3]):(0);
		inSysBDZ[addr].data[4]=inSysBDZ[addr].data[5]=-1;	//в неизменяемый параметр пишем -1
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	85 83       	std	Z+5, r24	; 0x05
    1c00:	84 83       	std	Z+4, r24	; 0x04
	case 2:
	{
		staroe=(signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5];
		//param=(numBDZ==1)?((signed int)inSysBDZ[addr].data[4]<<8 | inSysBDZ[addr].data[5]):(0);
		inSysBDZ[addr].data[2]=inSysBDZ[addr].data[3]=-1;	//в неизменяемый параметр пишем -1
		max=30000;
    1c02:	20 e3       	ldi	r18, 0x30	; 48
    1c04:	82 2e       	mov	r8, r18
    1c06:	25 e7       	ldi	r18, 0x75	; 117
    1c08:	92 2e       	mov	r9, r18
		step=10;
    1c0a:	8a e0       	ldi	r24, 0x0A	; 10
    1c0c:	00 e0       	ldi	r16, 0x00	; 0
    1c0e:	10 e0       	ldi	r17, 0x00	; 0
		if(addr!=0)
		{
			LCD_gotoXY(0,0);
			LCD_puts_P(STAROE_ZNACHENIE,16);
			LCD_putchar(0x3A);
			sprintf(str,"%d",staroe);
    1c10:	98 ef       	ldi	r25, 0xF8	; 248
    1c12:	49 2e       	mov	r4, r25
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	59 2e       	mov	r5, r25
		if(nParam!=0)LCD_puts_P(MS,2);
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(param>(nParam==0)?(1):(0))param-=step;
		break;
		case UP:if(param<max)param+=step;
    1c18:	68 2e       	mov	r6, r24
    1c1a:	71 2c       	mov	r7, r1
	}

	while(1)
	{
		char str[6];
		LCD_clr();
    1c1c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_clr>
		if(addr!=0)
    1c20:	33 20       	and	r3, r3
    1c22:	81 f1       	breq	.+96     	; 0x1c84 <change_param+0x23e>
		{
			LCD_gotoXY(0,0);
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
			LCD_puts_P(STAROE_ZNACHENIE,16);
    1c2c:	60 e1       	ldi	r22, 0x10	; 16
    1c2e:	8d ec       	ldi	r24, 0xCD	; 205
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
			LCD_putchar(0x3A);
    1c36:	8a e3       	ldi	r24, 0x3A	; 58
    1c38:	0e 94 08 04 	call	0x810	; 0x810 <LCD_putchar>
			sprintf(str,"%d",staroe);
    1c3c:	ff 92       	push	r15
    1c3e:	ef 92       	push	r14
    1c40:	5f 92       	push	r5
    1c42:	4f 92       	push	r4
    1c44:	df 92       	push	r13
    1c46:	cf 92       	push	r12
    1c48:	0e 94 41 1b 	call	0x3682	; 0x3682 <sprintf>
			LCD_gotoXY(0,1);
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
			LCD_puts(str,strlen(str));
    1c54:	f6 01       	movw	r30, r12
    1c56:	01 90       	ld	r0, Z+
    1c58:	00 20       	and	r0, r0
    1c5a:	e9 f7       	brne	.-6      	; 0x1c56 <change_param+0x210>
    1c5c:	31 97       	sbiw	r30, 0x01	; 1
    1c5e:	bf 01       	movw	r22, r30
    1c60:	6c 19       	sub	r22, r12
    1c62:	7d 09       	sbc	r23, r13
    1c64:	c6 01       	movw	r24, r12
    1c66:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
			if(nParam!=0)LCD_puts_P(MS,2);
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	22 20       	and	r2, r2
    1c78:	29 f0       	breq	.+10     	; 0x1c84 <change_param+0x23e>
    1c7a:	62 e0       	ldi	r22, 0x02	; 2
    1c7c:	85 e7       	ldi	r24, 0x75	; 117
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
		}

		LCD_gotoXY(0,2);
    1c84:	62 e0       	ldi	r22, 0x02	; 2
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		LCD_puts_P(NOVOE_ZNACHENIE,strlen_P(NOVOE_ZNACHENIE));
    1c8c:	6e e0       	ldi	r22, 0x0E	; 14
    1c8e:	8f e5       	ldi	r24, 0x5F	; 95
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
		LCD_putchar(0x3A);
    1c96:	8a e3       	ldi	r24, 0x3A	; 58
    1c98:	0e 94 08 04 	call	0x810	; 0x810 <LCD_putchar>
		sprintf(str,"%d",param);
    1c9c:	1f 93       	push	r17
    1c9e:	0f 93       	push	r16
    1ca0:	5f 92       	push	r5
    1ca2:	4f 92       	push	r4
    1ca4:	df 92       	push	r13
    1ca6:	cf 92       	push	r12
    1ca8:	0e 94 41 1b 	call	0x3682	; 0x3682 <sprintf>
		LCD_gotoXY(0,3);
    1cac:	63 e0       	ldi	r22, 0x03	; 3
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		LCD_puts(str,strlen(str));
    1cb4:	f6 01       	movw	r30, r12
    1cb6:	01 90       	ld	r0, Z+
    1cb8:	00 20       	and	r0, r0
    1cba:	e9 f7       	brne	.-6      	; 0x1cb6 <change_param+0x270>
    1cbc:	31 97       	sbiw	r30, 0x01	; 1
    1cbe:	bf 01       	movw	r22, r30
    1cc0:	6c 19       	sub	r22, r12
    1cc2:	7d 09       	sbc	r23, r13
    1cc4:	c6 01       	movw	r24, r12
    1cc6:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
		if(nParam!=0)LCD_puts_P(MS,2);
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	22 20       	and	r2, r2
    1cd8:	29 f0       	breq	.+10     	; 0x1ce4 <change_param+0x29e>
    1cda:	62 e0       	ldi	r22, 0x02	; 2
    1cdc:	85 e7       	ldi	r24, 0x75	; 117
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1ce4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    1ce8:	85 30       	cpi	r24, 0x05	; 5
    1cea:	e1 f0       	breq	.+56     	; 0x1d24 <change_param+0x2de>
    1cec:	30 f4       	brcc	.+12     	; 0x1cfa <change_param+0x2b4>
    1cee:	82 30       	cpi	r24, 0x02	; 2
    1cf0:	01 f1       	breq	.+64     	; 0x1d32 <change_param+0x2ec>
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <change_param+0x2b2>
    1cf6:	67 c0       	rjmp	.+206    	; 0x1dc6 <change_param+0x380>
    1cf8:	91 cf       	rjmp	.-222    	; 0x1c1c <change_param+0x1d6>
    1cfa:	86 30       	cpi	r24, 0x06	; 6
    1cfc:	31 f0       	breq	.+12     	; 0x1d0a <change_param+0x2c4>
    1cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1d00:	09 f0       	breq	.+2      	; 0x1d04 <change_param+0x2be>
    1d02:	8c cf       	rjmp	.-232    	; 0x1c1c <change_param+0x1d6>
		break;
		case ENT:goto SEND;	//выход по ENT (отсылка новых параметров)
		break;
		case ESC:return;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");
    1d04:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
		}
	}
    1d08:	89 cf       	rjmp	.-238    	; 0x1c1c <change_param+0x1d6>
		LCD_gotoXY(0,3);
		LCD_puts(str,strlen(str));
		if(nParam!=0)LCD_puts_P(MS,2);
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:if(param>(nParam==0)?(1):(0))param-=step;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	22 20       	and	r2, r2
    1d10:	11 f0       	breq	.+4      	; 0x1d16 <change_param+0x2d0>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	80 17       	cp	r24, r16
    1d18:	91 07       	cpc	r25, r17
    1d1a:	0c f0       	brlt	.+2      	; 0x1d1e <change_param+0x2d8>
    1d1c:	7f cf       	rjmp	.-258    	; 0x1c1c <change_param+0x1d6>
    1d1e:	06 19       	sub	r16, r6
    1d20:	17 09       	sbc	r17, r7
    1d22:	7c cf       	rjmp	.-264    	; 0x1c1c <change_param+0x1d6>
		break;
		case UP:if(param<max)param+=step;
    1d24:	08 15       	cp	r16, r8
    1d26:	19 05       	cpc	r17, r9
    1d28:	0c f0       	brlt	.+2      	; 0x1d2c <change_param+0x2e6>
    1d2a:	78 cf       	rjmp	.-272    	; 0x1c1c <change_param+0x1d6>
    1d2c:	06 0d       	add	r16, r6
    1d2e:	17 1d       	adc	r17, r7
    1d30:	75 cf       	rjmp	.-278    	; 0x1c1c <change_param+0x1d6>
	}
SEND:
	//отсылка новых параметров
	//if(eeprom_read_byte(&inSysBDZaddr[addr])!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}

	inSysBDZ[addr].data[0]=PROG;
    1d32:	29 e0       	ldi	r18, 0x09	; 9
    1d34:	2a 9d       	mul	r18, r10
    1d36:	c0 01       	movw	r24, r0
    1d38:	2b 9d       	mul	r18, r11
    1d3a:	90 0d       	add	r25, r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e3 5c       	subi	r30, 0xC3	; 195
    1d42:	fe 4f       	sbci	r31, 0xFE	; 254
    1d44:	7f 01       	movw	r14, r30
    1d46:	86 e0       	ldi	r24, 0x06	; 6
    1d48:	80 83       	st	Z, r24
	switch(nParam)
    1d4a:	f1 e0       	ldi	r31, 0x01	; 1
    1d4c:	2f 16       	cp	r2, r31
    1d4e:	31 f1       	breq	.+76     	; 0x1d9c <change_param+0x356>
    1d50:	2f 16       	cp	r2, r31
    1d52:	38 f0       	brcs	.+14     	; 0x1d62 <change_param+0x31c>
    1d54:	22 e0       	ldi	r18, 0x02	; 2
    1d56:	22 12       	cpse	r2, r18
    1d58:	36 c0       	rjmp	.+108    	; 0x1dc6 <change_param+0x380>
	case 0:	if(readID(param)!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}
			inSysBDZ[addr].data[1]=param;
	break;
	case 1:{inSysBDZ[addr].data[2]=param >>8; inSysBDZ[addr].data[3]=param & 0x00FF;}
	break;
	case 2:{inSysBDZ[addr].data[4]=param >>8; inSysBDZ[addr].data[5]=param & 0x00FF;}
    1d5a:	f7 01       	movw	r30, r14
    1d5c:	14 83       	std	Z+4, r17	; 0x04
    1d5e:	05 83       	std	Z+5, r16	; 0x05
	break;
    1d60:	20 c0       	rjmp	.+64     	; 0x1da2 <change_param+0x35c>
	//if(eeprom_read_byte(&inSysBDZaddr[addr])!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}

	inSysBDZ[addr].data[0]=PROG;
	switch(nParam)
	{
	case 0:	if(readID(param)!=0) {LCD_clr(); LCD_gotoXY(0,0);LCD_puts_P(OSHIBKA_ADDR,20);_delay_ms(2000);return;}
    1d62:	c8 01       	movw	r24, r16
    1d64:	87 5f       	subi	r24, 0xF7	; 247
    1d66:	9f 4f       	sbci	r25, 0xFF	; 255
    1d68:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    1d6c:	88 23       	and	r24, r24
    1d6e:	99 f0       	breq	.+38     	; 0x1d96 <change_param+0x350>
    1d70:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_clr>
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
    1d7c:	64 e1       	ldi	r22, 0x14	; 20
    1d7e:	8a eb       	ldi	r24, 0xBA	; 186
    1d80:	91 e0       	ldi	r25, 0x01	; 1
    1d82:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	87 ea       	ldi	r24, 0xA7	; 167
    1d8a:	91 e6       	ldi	r25, 0x61	; 97
    1d8c:	31 50       	subi	r19, 0x01	; 1
    1d8e:	80 40       	sbci	r24, 0x00	; 0
    1d90:	90 40       	sbci	r25, 0x00	; 0
    1d92:	e1 f7       	brne	.-8      	; 0x1d8c <change_param+0x346>
    1d94:	fd ce       	rjmp	.-518    	; 0x1b90 <change_param+0x14a>
			inSysBDZ[addr].data[1]=param;
    1d96:	f7 01       	movw	r30, r14
    1d98:	01 83       	std	Z+1, r16	; 0x01
	break;
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <change_param+0x35c>
	case 1:{inSysBDZ[addr].data[2]=param >>8; inSysBDZ[addr].data[3]=param & 0x00FF;}
    1d9c:	f7 01       	movw	r30, r14
    1d9e:	12 83       	std	Z+2, r17	; 0x02
    1da0:	03 83       	std	Z+3, r16	; 0x03
	break;
	case 2:{inSysBDZ[addr].data[4]=param >>8; inSysBDZ[addr].data[5]=param & 0x00FF;}
	break;
	default:return;
	}
	if((send_prog(addr,inSysBDZ[addr].data)<0) && (param!=0)){printTOUT();_delay_ms(2000);return;}
    1da2:	89 e0       	ldi	r24, 0x09	; 9
    1da4:	8a 9d       	mul	r24, r10
    1da6:	b0 01       	movw	r22, r0
    1da8:	8b 9d       	mul	r24, r11
    1daa:	70 0d       	add	r23, r0
    1dac:	11 24       	eor	r1, r1
    1dae:	63 5c       	subi	r22, 0xC3	; 195
    1db0:	7e 4f       	sbci	r23, 0xFE	; 254
    1db2:	83 2d       	mov	r24, r3
    1db4:	0e 94 83 0b 	call	0x1706	; 0x1706 <send_prog>
    1db8:	87 ff       	sbrs	r24, 7
    1dba:	03 c0       	rjmp	.+6      	; 0x1dc2 <change_param+0x37c>
    1dbc:	01 2b       	or	r16, r17
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <change_param+0x37c>
    1dc0:	de ce       	rjmp	.-580    	; 0x1b7e <change_param+0x138>
	scansys();
    1dc2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <scansys>

	return;
}
    1dc6:	26 96       	adiw	r28, 0x06	; 6
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	bf 90       	pop	r11
    1de4:	af 90       	pop	r10
    1de6:	9f 90       	pop	r9
    1de8:	8f 90       	pop	r8
    1dea:	7f 90       	pop	r7
    1dec:	6f 90       	pop	r6
    1dee:	5f 90       	pop	r5
    1df0:	4f 90       	pop	r4
    1df2:	3f 90       	pop	r3
    1df4:	2f 90       	pop	r2
    1df6:	08 95       	ret

00001df8 <vremya_urov>:
	change_param(1);
}

static void vremya_urov(void)
{
	change_param(2);
    1df8:	82 e0       	ldi	r24, 0x02	; 2
    1dfa:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <change_param>

00001dfe <vremya_mtz>:
	naviMenu(LVL_prog);
}

static void vremya_mtz(void)
{
	change_param(1);
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <change_param>

00001e04 <adres>:
	change_param(2);
}

static void adres(void)
{
	change_param(0);
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <change_param>

00001e0a <datavremya>:
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}

static void datavremya(void)
{
    1e0a:	cf 92       	push	r12
    1e0c:	df 92       	push	r13
    1e0e:	ef 92       	push	r14
    1e10:	ff 92       	push	r15
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	a6 97       	sbiw	r28, 0x26	; 38
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
	char buffer[20],max[]={31,12,99,23,59,59},min;
    1e2a:	86 e0       	ldi	r24, 0x06	; 6
    1e2c:	e0 ec       	ldi	r30, 0xC0	; 192
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	de 01       	movw	r26, r28
    1e32:	91 96       	adiw	r26, 0x21	; 33
    1e34:	01 90       	ld	r0, Z+
    1e36:	0d 92       	st	X+, r0
    1e38:	8a 95       	dec	r24
    1e3a:	e1 f7       	brne	.-8      	; 0x1e34 <datavremya+0x2a>
	unsigned char cursorPos=0;
	unsigned char *ptr[] = {&rtc.day,&rtc.month,&rtc.year,&rtc.hours,&rtc.minutes,&rtc.seconds};
    1e3c:	8c e0       	ldi	r24, 0x0C	; 12
    1e3e:	e6 ec       	ldi	r30, 0xC6	; 198
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	de 01       	movw	r26, r28
    1e44:	55 96       	adiw	r26, 0x15	; 21
    1e46:	01 90       	ld	r0, Z+
    1e48:	0d 92       	st	X+, r0
    1e4a:	8a 95       	dec	r24
    1e4c:	e1 f7       	brne	.-8      	; 0x1e46 <datavremya+0x3c>

	printMenuHeader(DATAVREMYA);
    1e4e:	83 e6       	ldi	r24, 0x63	; 99
    1e50:	91 e0       	ldi	r25, 0x01	; 1
    1e52:	0e 94 46 06 	call	0xc8c	; 0xc8c <printMenuHeader>

	if(rtc_get(&rtc) < 0) {ERROR=RTC;/*return -1;*/}
    1e56:	8c ec       	ldi	r24, 0xCC	; 204
    1e58:	94 e0       	ldi	r25, 0x04	; 4
    1e5a:	0e 94 9d 02 	call	0x53a	; 0x53a <rtc_get>
    1e5e:	87 ff       	sbrs	r24, 7
    1e60:	03 c0       	rjmp	.+6      	; 0x1e68 <datavremya+0x5e>
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}

static void datavremya(void)
{
    1e68:	10 e0       	ldi	r17, 0x00	; 0
	if(rtc_get(&rtc) < 0) {ERROR=RTC;/*return -1;*/}


	while(1)
	{
		sprintf(buffer," %02u.%02u.%02u %02u:%02u:%02u",*ptr[0],*ptr[1],*ptr[2],*ptr[3],*ptr[4],*ptr[5]);
    1e6a:	5b ef       	ldi	r21, 0xFB	; 251
    1e6c:	c5 2e       	mov	r12, r21
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	d5 2e       	mov	r13, r21
    1e72:	ce 01       	movw	r24, r28
    1e74:	01 96       	adiw	r24, 0x01	; 1
    1e76:	7c 01       	movw	r14, r24
    1e78:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <rtc+0x5>
    1e7c:	1f 92       	push	r1
    1e7e:	8f 93       	push	r24
    1e80:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <rtc+0x4>
    1e84:	1f 92       	push	r1
    1e86:	8f 93       	push	r24
    1e88:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <rtc+0x3>
    1e8c:	1f 92       	push	r1
    1e8e:	8f 93       	push	r24
    1e90:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <rtc>
    1e94:	1f 92       	push	r1
    1e96:	8f 93       	push	r24
    1e98:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <rtc+0x1>
    1e9c:	1f 92       	push	r1
    1e9e:	8f 93       	push	r24
    1ea0:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <rtc+0x2>
    1ea4:	1f 92       	push	r1
    1ea6:	8f 93       	push	r24
    1ea8:	df 92       	push	r13
    1eaa:	cf 92       	push	r12
    1eac:	ff 92       	push	r15
    1eae:	ef 92       	push	r14
    1eb0:	0e 94 41 1b 	call	0x3682	; 0x3682 <sprintf>
		LCD_gotoXY(0,3);
    1eb4:	63 e0       	ldi	r22, 0x03	; 3
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		LCD_puts(buffer,18);
    1ebc:	62 e1       	ldi	r22, 0x12	; 18
    1ebe:	c7 01       	movw	r24, r14
    1ec0:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
		LCD_gotoXY(cursorPos*3,3);
    1ec4:	63 e0       	ldi	r22, 0x03	; 3
    1ec6:	81 2f       	mov	r24, r17
    1ec8:	88 0f       	add	r24, r24
    1eca:	81 0f       	add	r24, r17
    1ecc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		LCD_putchar(0x84);
    1ed0:	84 e8       	ldi	r24, 0x84	; 132
    1ed2:	0e 94 08 04 	call	0x810	; 0x810 <LCD_putchar>
		min=(cursorPos < 2)?(1):(0);
    1ed6:	01 e0       	ldi	r16, 0x01	; 1
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	12 30       	cpi	r17, 0x02	; 2
    1ee4:	08 f0       	brcs	.+2      	; 0x1ee8 <datavremya+0xde>
    1ee6:	00 e0       	ldi	r16, 0x00	; 0

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1ee8:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    1eec:	85 30       	cpi	r24, 0x05	; 5
    1eee:	b1 f0       	breq	.+44     	; 0x1f1c <datavremya+0x112>
    1ef0:	30 f4       	brcc	.+12     	; 0x1efe <datavremya+0xf4>
    1ef2:	82 30       	cpi	r24, 0x02	; 2
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <datavremya+0xee>
    1ef6:	43 c0       	rjmp	.+134    	; 0x1f7e <datavremya+0x174>
    1ef8:	84 30       	cpi	r24, 0x04	; 4
    1efa:	59 f0       	breq	.+22     	; 0x1f12 <datavremya+0x108>
    1efc:	44 c0       	rjmp	.+136    	; 0x1f86 <datavremya+0x17c>
    1efe:	86 30       	cpi	r24, 0x06	; 6
    1f00:	29 f1       	breq	.+74     	; 0x1f4c <datavremya+0x142>
    1f02:	87 30       	cpi	r24, 0x07	; 7
    1f04:	09 f0       	breq	.+2      	; 0x1f08 <datavremya+0xfe>
    1f06:	3f c0       	rjmp	.+126    	; 0x1f86 <datavremya+0x17c>
		{
		case RIGHT: if(cursorPos < 5) cursorPos++;
    1f08:	15 30       	cpi	r17, 0x05	; 5
    1f0a:	08 f0       	brcs	.+2      	; 0x1f0e <datavremya+0x104>
    1f0c:	b5 cf       	rjmp	.-150    	; 0x1e78 <datavremya+0x6e>
    1f0e:	1f 5f       	subi	r17, 0xFF	; 255
    1f10:	b3 cf       	rjmp	.-154    	; 0x1e78 <datavremya+0x6e>
		break;
		case LEFT: if(cursorPos >0) cursorPos--;
    1f12:	11 23       	and	r17, r17
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <datavremya+0x10e>
    1f16:	b0 cf       	rjmp	.-160    	; 0x1e78 <datavremya+0x6e>
    1f18:	11 50       	subi	r17, 0x01	; 1
    1f1a:	ae cf       	rjmp	.-164    	; 0x1e78 <datavremya+0x6e>
		break;
		case UP:(*ptr[cursorPos] < max[cursorPos])?((*ptr[cursorPos])++):(*ptr[cursorPos]=min);
    1f1c:	21 2f       	mov	r18, r17
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	f9 01       	movw	r30, r18
    1f22:	ee 0f       	add	r30, r30
    1f24:	ff 1f       	adc	r31, r31
    1f26:	ee 0d       	add	r30, r14
    1f28:	ff 1d       	adc	r31, r15
    1f2a:	04 88       	ldd	r0, Z+20	; 0x14
    1f2c:	f5 89       	ldd	r31, Z+21	; 0x15
    1f2e:	e0 2d       	mov	r30, r0
    1f30:	80 81       	ld	r24, Z
    1f32:	a1 e2       	ldi	r26, 0x21	; 33
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	ac 0f       	add	r26, r28
    1f38:	bd 1f       	adc	r27, r29
    1f3a:	a2 0f       	add	r26, r18
    1f3c:	b3 1f       	adc	r27, r19
    1f3e:	9c 91       	ld	r25, X
    1f40:	89 17       	cp	r24, r25
    1f42:	10 f4       	brcc	.+4      	; 0x1f48 <datavremya+0x13e>
    1f44:	8f 5f       	subi	r24, 0xFF	; 255
    1f46:	19 c0       	rjmp	.+50     	; 0x1f7a <datavremya+0x170>
    1f48:	00 83       	st	Z, r16
    1f4a:	96 cf       	rjmp	.-212    	; 0x1e78 <datavremya+0x6e>
		break;
		case DOWN:(*ptr[cursorPos] > min)?((*ptr[cursorPos])--):(*ptr[cursorPos]=max[cursorPos]);
    1f4c:	81 2f       	mov	r24, r17
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	fc 01       	movw	r30, r24
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	ee 0d       	add	r30, r14
    1f58:	ff 1d       	adc	r31, r15
    1f5a:	04 88       	ldd	r0, Z+20	; 0x14
    1f5c:	f5 89       	ldd	r31, Z+21	; 0x15
    1f5e:	e0 2d       	mov	r30, r0
    1f60:	20 81       	ld	r18, Z
    1f62:	02 17       	cp	r16, r18
    1f64:	18 f4       	brcc	.+6      	; 0x1f6c <datavremya+0x162>
    1f66:	21 50       	subi	r18, 0x01	; 1
    1f68:	20 83       	st	Z, r18
    1f6a:	86 cf       	rjmp	.-244    	; 0x1e78 <datavremya+0x6e>
    1f6c:	a1 e2       	ldi	r26, 0x21	; 33
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	ac 0f       	add	r26, r28
    1f72:	bd 1f       	adc	r27, r29
    1f74:	a8 0f       	add	r26, r24
    1f76:	b9 1f       	adc	r27, r25
    1f78:	8c 91       	ld	r24, X
    1f7a:	80 83       	st	Z, r24
    1f7c:	7d cf       	rjmp	.-262    	; 0x1e78 <datavremya+0x6e>
		break;
		case ENT:{rtc_set(&rtc);return;}
    1f7e:	8c ec       	ldi	r24, 0xCC	; 204
    1f80:	94 e0       	ldi	r25, 0x04	; 4
    1f82:	0e 94 38 02 	call	0x470	; 0x470 <rtc_set>
		default: return;
		}
	}


}
    1f86:	a6 96       	adiw	r28, 0x26	; 38
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	08 95       	ret

00001fa4 <chetnost>:
		}
	}
}

static void chetnost(void)
{
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
	printMenuHeader(CHETNOST);
    1faa:	87 e1       	ldi	r24, 0x17	; 23
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	0e 94 46 06 	call	0xc8c	; 0xc8c <printMenuHeader>
	unsigned char mparity=eeprom_read_byte(&parity);
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    1fba:	c8 2f       	mov	r28, r24
	PGM_P ptr=0;
    1fbc:	00 e0       	ldi	r16, 0x00	; 0
    1fbe:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		LCD_gotoXY(10,0);
    1fc0:	60 e0       	ldi	r22, 0x00	; 0
    1fc2:	8a e0       	ldi	r24, 0x0A	; 10
    1fc4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		switch(mparity)
    1fc8:	c0 32       	cpi	r28, 0x20	; 32
    1fca:	19 f1       	breq	.+70     	; 0x2012 <chetnost+0x6e>
    1fcc:	c0 33       	cpi	r28, 0x30	; 48
    1fce:	61 f0       	breq	.+24     	; 0x1fe8 <chetnost+0x44>
    1fd0:	c1 11       	cpse	r28, r1
    1fd2:	0d c0       	rjmp	.+26     	; 0x1fee <chetnost+0x4a>
		{
		case NONE:ptr=C_NONE;
    1fd4:	09 e0       	ldi	r16, 0x09	; 9
    1fd6:	11 e0       	ldi	r17, 0x01	; 1
    1fd8:	c0 e0       	ldi	r28, 0x00	; 0
		break;
    1fda:	09 c0       	rjmp	.+18     	; 0x1fee <chetnost+0x4a>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mparity==EVEN) mparity=ODD;
    1fdc:	c0 32       	cpi	r28, 0x20	; 32
    1fde:	39 f5       	brne	.+78     	; 0x202e <chetnost+0x8a>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	8a e0       	ldi	r24, 0x0A	; 10
    1fe4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		{
		case NONE:ptr=C_NONE;
		break;
		case EVEN:ptr=C_EVEN;
		break;
		case ODD:ptr=C_ODD;
    1fe8:	03 e1       	ldi	r16, 0x13	; 19
    1fea:	11 e0       	ldi	r17, 0x01	; 1
    1fec:	c0 e3       	ldi	r28, 0x30	; 48
		break;
		}
		LCD_puts_P(ptr,5);
    1fee:	65 e0       	ldi	r22, 0x05	; 5
    1ff0:	c8 01       	movw	r24, r16
    1ff2:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    1ff6:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    1ffa:	85 30       	cpi	r24, 0x05	; 5
    1ffc:	79 f3       	breq	.-34     	; 0x1fdc <chetnost+0x38>
    1ffe:	86 30       	cpi	r24, 0x06	; 6
    2000:	61 f4       	brne	.+24     	; 0x201a <chetnost+0x76>
			else if(mparity==ODD)mparity=NONE;
		}
		break;
		case DOWN:
		{
			if(mparity==NONE) mparity=ODD;
    2002:	cc 23       	and	r28, r28
    2004:	69 f3       	breq	.-38     	; 0x1fe0 <chetnost+0x3c>
			else if(mparity==ODD)mparity=EVEN;
    2006:	c0 33       	cpi	r28, 0x30	; 48
    2008:	d9 f6       	brne	.-74     	; 0x1fc0 <chetnost+0x1c>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	8a e0       	ldi	r24, 0x0A	; 10
    200e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		switch(mparity)
		{
		case NONE:ptr=C_NONE;
		break;
		case EVEN:ptr=C_EVEN;
    2012:	0e e0       	ldi	r16, 0x0E	; 14
    2014:	11 e0       	ldi	r17, 0x01	; 1
    2016:	c0 e2       	ldi	r28, 0x20	; 32
		break;
    2018:	ea cf       	rjmp	.-44     	; 0x1fee <chetnost+0x4a>
		case ODD:ptr=C_ODD;
		break;
		}
		LCD_puts_P(ptr,5);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    201a:	82 30       	cpi	r24, 0x02	; 2
    201c:	79 f4       	brne	.+30     	; 0x203c <chetnost+0x98>
			else if(mparity==ODD)mparity=EVEN;
		}
		break;
		case ENT:
		{
			eeprom_write_byte(&parity,mparity);
    201e:	6c 2f       	mov	r22, r28
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		default: return;
		}
	}
}
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
			else if(mparity==ODD)mparity=EVEN;
		}
		break;
		case ENT:
		{
			eeprom_write_byte(&parity,mparity);
    202a:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <eeprom_write_byte>
		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mparity==EVEN) mparity=ODD;
			else if(mparity==ODD)mparity=NONE;
    202e:	c0 33       	cpi	r28, 0x30	; 48
    2030:	39 f6       	brne	.-114    	; 0x1fc0 <chetnost+0x1c>
	unsigned char mparity=eeprom_read_byte(&parity);
	PGM_P ptr=0;

	while(1)
	{
		LCD_gotoXY(10,0);
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	8a e0       	ldi	r24, 0x0A	; 10
    2036:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
    203a:	cc cf       	rjmp	.-104    	; 0x1fd4 <chetnost+0x30>
			return;
		}
		default: return;
		}
	}
}
    203c:	cf 91       	pop	r28
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	08 95       	ret

00002044 <skorost>:
		}
	}
}

static void skorost(void)
{
    2044:	cf 92       	push	r12
    2046:	df 92       	push	r13
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	27 97       	sbiw	r28, 0x07	; 7
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61

//	unsigned int speeds_table[SPEED_INDEX]={9600,19200,38400,76800};
	unsigned long int mspeed=eeprom_read_dword(&speed);
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <eeprom_read_dword>
    2068:	6b 01       	movw	r12, r22
    206a:	7c 01       	movw	r14, r24
	char buf[7];

	printMenuHeader(SKOROST);
    206c:	80 e2       	ldi	r24, 0x20	; 32
    206e:	91 e0       	ldi	r25, 0x01	; 1
    2070:	0e 94 46 06 	call	0xc8c	; 0xc8c <printMenuHeader>

	while(1)
	{
		LCD_gotoXY(10,0);
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	8a e0       	ldi	r24, 0x0A	; 10
    2078:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    207c:	2a e0       	ldi	r18, 0x0A	; 10
    207e:	ae 01       	movw	r20, r28
    2080:	4f 5f       	subi	r20, 0xFF	; 255
    2082:	5f 4f       	sbci	r21, 0xFF	; 255
    2084:	c7 01       	movw	r24, r14
    2086:	b6 01       	movw	r22, r12
    2088:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__ltoa_ncheck>
		LCD_puts(ltoa(mspeed,buf,10),5);
    208c:	65 e0       	ldi	r22, 0x05	; 5
    208e:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>


		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2092:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    2096:	85 30       	cpi	r24, 0x05	; 5
    2098:	59 f0       	breq	.+22     	; 0x20b0 <skorost+0x6c>
    209a:	86 30       	cpi	r24, 0x06	; 6
    209c:	a9 f0       	breq	.+42     	; 0x20c8 <skorost+0x84>
    209e:	82 30       	cpi	r24, 0x02	; 2
    20a0:	f9 f4       	brne	.+62     	; 0x20e0 <skorost+0x9c>
		{
			if(mspeed>9600) mspeed/=2;
		}

		break;
		case ENT:{eeprom_write_dword(&speed,mspeed);return;}
    20a2:	b7 01       	movw	r22, r14
    20a4:	a6 01       	movw	r20, r12
    20a6:	82 e0       	ldi	r24, 0x02	; 2
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <eeprom_write_dword>
    20ae:	18 c0       	rjmp	.+48     	; 0x20e0 <skorost+0x9c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:
		{
			if(mspeed<76800) mspeed*=2;
    20b0:	c1 14       	cp	r12, r1
    20b2:	8c e2       	ldi	r24, 0x2C	; 44
    20b4:	d8 06       	cpc	r13, r24
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	e8 06       	cpc	r14, r24
    20ba:	f1 04       	cpc	r15, r1
    20bc:	d8 f6       	brcc	.-74     	; 0x2074 <skorost+0x30>
    20be:	cc 0c       	add	r12, r12
    20c0:	dd 1c       	adc	r13, r13
    20c2:	ee 1c       	adc	r14, r14
    20c4:	ff 1c       	adc	r15, r15
    20c6:	d6 cf       	rjmp	.-84     	; 0x2074 <skorost+0x30>
		}
		break;
		case DOWN:
		{
			if(mspeed>9600) mspeed/=2;
    20c8:	81 e8       	ldi	r24, 0x81	; 129
    20ca:	c8 16       	cp	r12, r24
    20cc:	85 e2       	ldi	r24, 0x25	; 37
    20ce:	d8 06       	cpc	r13, r24
    20d0:	e1 04       	cpc	r14, r1
    20d2:	f1 04       	cpc	r15, r1
    20d4:	78 f2       	brcs	.-98     	; 0x2074 <skorost+0x30>
    20d6:	f6 94       	lsr	r15
    20d8:	e7 94       	ror	r14
    20da:	d7 94       	ror	r13
    20dc:	c7 94       	ror	r12
    20de:	ca cf       	rjmp	.-108    	; 0x2074 <skorost+0x30>
		break;
		case ENT:{eeprom_write_dword(&speed,mspeed);return;}
		default: return;
		}
	}
}
    20e0:	27 96       	adiw	r28, 0x07	; 7
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	ff 90       	pop	r15
    20f2:	ef 90       	pop	r14
    20f4:	df 90       	pop	r13
    20f6:	cf 90       	pop	r12
    20f8:	08 95       	ret

000020fa <rezhim>:
	naviMenu(LVL_svyaz);
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
}

static void rezhim(void)
{
    20fa:	cf 93       	push	r28
	printMenuHeader(REZHIM);
    20fc:	83 e3       	ldi	r24, 0x33	; 51
    20fe:	91 e0       	ldi	r25, 0x01	; 1
    2100:	0e 94 46 06 	call	0xc8c	; 0xc8c <printMenuHeader>
	unsigned char mmode=eeprom_read_byte(&mode);
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    210c:	c8 2f       	mov	r28, r24

	while(1)
	{
		LCD_gotoXY(10,0);
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	8a e0       	ldi	r24, 0x0A	; 10
    2112:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		(mmode==RTU)?(LCD_puts_P(RTU_M,5)):(LCD_puts_P(ASCII_M,5));
    2116:	65 e0       	ldi	r22, 0x05	; 5
    2118:	c1 11       	cpse	r28, r1
    211a:	03 c0       	rjmp	.+6      	; 0x2122 <rezhim+0x28>
    211c:	8f e2       	ldi	r24, 0x2F	; 47
    211e:	91 e0       	ldi	r25, 0x01	; 1
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <rezhim+0x2c>
    2122:	89 e2       	ldi	r24, 0x29	; 41
    2124:	91 e0       	ldi	r25, 0x01	; 1
    2126:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    212a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    212e:	85 30       	cpi	r24, 0x05	; 5
    2130:	51 f0       	breq	.+20     	; 0x2146 <rezhim+0x4c>
    2132:	86 30       	cpi	r24, 0x06	; 6
    2134:	61 f0       	breq	.+24     	; 0x214e <rezhim+0x54>
    2136:	82 30       	cpi	r24, 0x02	; 2
    2138:	71 f4       	brne	.+28     	; 0x2156 <rezhim+0x5c>
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
		break;
		case ENT:
		{
			eeprom_write_byte(&mode,mmode);
    213a:	6c 2f       	mov	r22, r28
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		default: return;
		}
	}
}
    2140:	cf 91       	pop	r28
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
		break;
		case ENT:
		{
			eeprom_write_byte(&mode,mmode);
    2142:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <eeprom_write_byte>
		LCD_gotoXY(10,0);
		(mmode==RTU)?(LCD_puts_P(RTU_M,5)):(LCD_puts_P(ASCII_M,5));

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:if(mmode==RTU)mmode=ASCII;
    2146:	c1 11       	cpse	r28, r1
    2148:	e2 cf       	rjmp	.-60     	; 0x210e <rezhim+0x14>
    214a:	c1 e0       	ldi	r28, 0x01	; 1
    214c:	e0 cf       	rjmp	.-64     	; 0x210e <rezhim+0x14>
		break;
		case DOWN:if(mmode==ASCII)mmode=RTU;
    214e:	c1 30       	cpi	r28, 0x01	; 1
    2150:	f1 f6       	brne	.-68     	; 0x210e <rezhim+0x14>
    2152:	c0 e0       	ldi	r28, 0x00	; 0
    2154:	dc cf       	rjmp	.-72     	; 0x210e <rezhim+0x14>
			return;
		}
		default: return;
		}
	}
}
    2156:	cf 91       	pop	r28
    2158:	08 95       	ret

0000215a <printSubMenu>:
}



static inline unsigned char printSubMenu(const char *flashName,unsigned char flag)
{
    215a:	2f 92       	push	r2
    215c:	3f 92       	push	r3
    215e:	4f 92       	push	r4
    2160:	5f 92       	push	r5
    2162:	6f 92       	push	r6
    2164:	7f 92       	push	r7
    2166:	8f 92       	push	r8
    2168:	9f 92       	push	r9
    216a:	af 92       	push	r10
    216c:	bf 92       	push	r11
    216e:	cf 92       	push	r12
    2170:	df 92       	push	r13
    2172:	ef 92       	push	r14
    2174:	ff 92       	push	r15
    2176:	0f 93       	push	r16
    2178:	1f 93       	push	r17
    217a:	cf 93       	push	r28
    217c:	df 93       	push	r29
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	c8 56       	subi	r28, 0x68	; 104
    2184:	d1 09       	sbc	r29, r1
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	4c 01       	movw	r8, r24
	unsigned char addr[MAXQDEV]={0};
    2192:	ce 01       	movw	r24, r28
    2194:	01 96       	adiw	r24, 0x01	; 1
    2196:	7c 01       	movw	r14, r24
    2198:	83 e6       	ldi	r24, 0x63	; 99
    219a:	f7 01       	movw	r30, r14
    219c:	11 92       	st	Z+, r1
    219e:	8a 95       	dec	r24
    21a0:	e9 f7       	brne	.-6      	; 0x219c <printSubMenu+0x42>
	unsigned char screenPos=0;	//указатель на позицию экрана
	unsigned char numPunkt=0,currPunkt=0;	//счетчик пунктов меню,
	char tmpStr[4];

	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);
    21a2:	a6 2e       	mov	r10, r22
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	6c 01       	movw	r12, r24
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <printSubMenu+0x56>
    21ac:	cc 0c       	add	r12, r12
    21ae:	dd 1c       	adc	r13, r13
    21b0:	6a 95       	dec	r22
    21b2:	e2 f7       	brpl	.-8      	; 0x21ac <printSubMenu+0x52>
    21b4:	01 e0       	ldi	r16, 0x01	; 1
    21b6:	10 e0       	ldi	r17, 0x00	; 0
static inline unsigned char printSubMenu(const char *flashName,unsigned char flag)
{
	unsigned char addr[MAXQDEV]={0};
	unsigned char cursorPos=1;	//указатель на текущий пункт
	unsigned char screenPos=0;	//указатель на позицию экрана
	unsigned char numPunkt=0,currPunkt=0;	//счетчик пунктов меню,
    21b8:	41 2c       	mov	r4, r1
	char tmpStr[4];

	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);
    21ba:	89 e0       	ldi	r24, 0x09	; 9
    21bc:	78 2e       	mov	r7, r24
    21be:	c8 01       	movw	r24, r16
    21c0:	87 5f       	subi	r24, 0xF7	; 247
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    21c8:	80 13       	cpse	r24, r16
    21ca:	18 c0       	rjmp	.+48     	; 0x21fc <printSubMenu+0xa2>
    21cc:	70 9e       	mul	r7, r16
    21ce:	f0 01       	movw	r30, r0
    21d0:	71 9e       	mul	r7, r17
    21d2:	f0 0d       	add	r31, r0
    21d4:	11 24       	eor	r1, r1
    21d6:	e3 5c       	subi	r30, 0xC3	; 195
    21d8:	fe 4f       	sbci	r31, 0xFE	; 254
    21da:	20 85       	ldd	r18, Z+8	; 0x08
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	2c 21       	and	r18, r12
    21e0:	3d 21       	and	r19, r13
    21e2:	0a 2c       	mov	r0, r10
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <printSubMenu+0x90>
    21e6:	35 95       	asr	r19
    21e8:	27 95       	ror	r18
    21ea:	0a 94       	dec	r0
    21ec:	e2 f7       	brpl	.-8      	; 0x21e6 <printSubMenu+0x8c>
    21ee:	23 2b       	or	r18, r19
    21f0:	29 f0       	breq	.+10     	; 0x21fc <printSubMenu+0xa2>
    21f2:	f7 01       	movw	r30, r14
    21f4:	e4 0d       	add	r30, r4
    21f6:	f1 1d       	adc	r31, r1
    21f8:	80 83       	st	Z, r24
    21fa:	43 94       	inc	r4
    21fc:	0f 5f       	subi	r16, 0xFF	; 255
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2200:	03 36       	cpi	r16, 0x63	; 99
    2202:	11 05       	cpc	r17, r1
    2204:	e1 f6       	brne	.-72     	; 0x21be <printSubMenu+0x64>
    2206:	61 2c       	mov	r6, r1
    2208:	51 2c       	mov	r5, r1
    220a:	77 24       	eor	r7, r7
    220c:	73 94       	inc	r7

	while(1)
	{	//рисуем: "NAME:XX БДЗ"
		printMenuHeader(flashName);
		itoa(numPunkt,tmpStr,10);
    220e:	04 2d       	mov	r16, r4
    2210:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2212:	6e 01       	movw	r12, r28
    2214:	f4 e6       	ldi	r31, 0x64	; 100
    2216:	cf 0e       	add	r12, r31
    2218:	d1 1c       	adc	r13, r1

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt-1)
    221a:	18 01       	movw	r2, r16
    221c:	21 e0       	ldi	r18, 0x01	; 1
    221e:	22 1a       	sub	r2, r18
    2220:	31 08       	sbc	r3, r1
	//считываем адреса зареганых девайсов с интересующими нас установленными флагами (inLine,fault,alarm...)
	for(unsigned char i=1;i<MAXQDEV;i++) if(readID(i)==i && chkBit(inSysBDZ[i].flags,flag)) addr[numPunkt++]=readID(i);

	while(1)
	{	//рисуем: "NAME:XX БДЗ"
		printMenuHeader(flashName);
    2222:	c4 01       	movw	r24, r8
    2224:	0e 94 46 06 	call	0xc8c	; 0xc8c <printMenuHeader>
    2228:	4a e0       	ldi	r20, 0x0A	; 10
    222a:	b6 01       	movw	r22, r12
    222c:	c8 01       	movw	r24, r16
    222e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
		itoa(numPunkt,tmpStr,10);
		LCD_puts(tmpStr,strlen(tmpStr)+1);
    2232:	f6 01       	movw	r30, r12
    2234:	01 90       	ld	r0, Z+
    2236:	00 20       	and	r0, r0
    2238:	e9 f7       	brne	.-6      	; 0x2234 <printSubMenu+0xda>
    223a:	6e 2f       	mov	r22, r30
    223c:	6c 19       	sub	r22, r12
    223e:	c6 01       	movw	r24, r12
    2240:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
		LCD_puts_P(BDZ,3);
    2244:	63 e0       	ldi	r22, 0x03	; 3
    2246:	8b e7       	ldi	r24, 0x7B	; 123
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
    224e:	57 01       	movw	r10, r14
    2250:	a5 0c       	add	r10, r5
    2252:	b1 1c       	adc	r11, r1

		for(unsigned char i=0;(i<NUMOFMENUSTRING) && (addr[i+screenPos]);i++)		//прорисовываем не более NUMOFMENUSTRING строк меню
    2254:	41 2c       	mov	r4, r1
    2256:	f5 01       	movw	r30, r10
    2258:	21 91       	ld	r18, Z+
    225a:	5f 01       	movw	r10, r30
    225c:	a9 96       	adiw	r28, 0x29	; 41
    225e:	2f af       	std	Y+63, r18	; 0x3f
    2260:	a9 97       	sbiw	r28, 0x29	; 41
    2262:	22 23       	and	r18, r18
    2264:	c9 f0       	breq	.+50     	; 0x2298 <printSubMenu+0x13e>
		{
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
    2266:	43 94       	inc	r4
    2268:	64 2d       	mov	r22, r4
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
    2270:	64 e0       	ldi	r22, 0x04	; 4
    2272:	8b e7       	ldi	r24, 0x7B	; 123
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
    227a:	4a e0       	ldi	r20, 0x0A	; 10
    227c:	b6 01       	movw	r22, r12
    227e:	a9 96       	adiw	r28, 0x29	; 41
    2280:	ef ad       	ldd	r30, Y+63	; 0x3f
    2282:	a9 97       	sbiw	r28, 0x29	; 41
    2284:	8e 2f       	mov	r24, r30
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
    228c:	63 e0       	ldi	r22, 0x03	; 3
    228e:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
		printMenuHeader(flashName);
		itoa(numPunkt,tmpStr,10);
		LCD_puts(tmpStr,strlen(tmpStr)+1);
		LCD_puts_P(BDZ,3);

		for(unsigned char i=0;(i<NUMOFMENUSTRING) && (addr[i+screenPos]);i++)		//прорисовываем не более NUMOFMENUSTRING строк меню
    2292:	f3 e0       	ldi	r31, 0x03	; 3
    2294:	4f 12       	cpse	r4, r31
    2296:	df cf       	rjmp	.-66     	; 0x2256 <printSubMenu+0xfc>
		{
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
		}
		LCD_gotoXY(0,cursorPos);LCD_putchar(0x84);			//...и курсор (символ >)
    2298:	67 2d       	mov	r22, r7
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
    22a0:	84 e8       	ldi	r24, 0x84	; 132
    22a2:	0e 94 08 04 	call	0x810	; 0x810 <LCD_putchar>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    22a6:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    22aa:	85 30       	cpi	r24, 0x05	; 5
    22ac:	f1 f0       	breq	.+60     	; 0x22ea <printSubMenu+0x190>
    22ae:	38 f4       	brcc	.+14     	; 0x22be <printSubMenu+0x164>
    22b0:	82 30       	cpi	r24, 0x02	; 2
    22b2:	31 f1       	breq	.+76     	; 0x2300 <printSubMenu+0x1a6>
    22b4:	83 30       	cpi	r24, 0x03	; 3
    22b6:	09 f0       	breq	.+2      	; 0x22ba <printSubMenu+0x160>
    22b8:	b4 cf       	rjmp	.-152    	; 0x2222 <printSubMenu+0xc8>
			}
		}
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
		break;
		case ESC:return 0;	//выход по ESC
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	25 c0       	rjmp	.+74     	; 0x2308 <printSubMenu+0x1ae>
			LCD_gotoXY(1,i+1);LCD_puts_P(BDZ,4);
			LCD_puts(itoa(addr[i+screenPos],tmpStr,10),3);
		}
		LCD_gotoXY(0,cursorPos);LCD_putchar(0x84);			//...и курсор (символ >)

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    22be:	86 30       	cpi	r24, 0x06	; 6
    22c0:	31 f0       	breq	.+12     	; 0x22ce <printSubMenu+0x174>
    22c2:	8f 3f       	cpi	r24, 0xFF	; 255
    22c4:	09 f0       	breq	.+2      	; 0x22c8 <printSubMenu+0x16e>
    22c6:	ad cf       	rjmp	.-166    	; 0x2222 <printSubMenu+0xc8>
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
		break;
		case ESC:return 0;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");//автовыход
    22c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    22cc:	aa cf       	rjmp	.-172    	; 0x2222 <printSubMenu+0xc8>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt-1)
    22ce:	86 2d       	mov	r24, r6
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	82 15       	cp	r24, r2
    22d4:	93 05       	cpc	r25, r3
    22d6:	0c f0       	brlt	.+2      	; 0x22da <printSubMenu+0x180>
    22d8:	a4 cf       	rjmp	.-184    	; 0x2222 <printSubMenu+0xc8>
			{
				++currPunkt;
    22da:	63 94       	inc	r6
				(cursorPos < NUMOFMENUSTRING)?(cursorPos++):(screenPos++);
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	87 15       	cp	r24, r7
    22e0:	10 f0       	brcs	.+4      	; 0x22e6 <printSubMenu+0x18c>
    22e2:	73 94       	inc	r7
    22e4:	9e cf       	rjmp	.-196    	; 0x2222 <printSubMenu+0xc8>
    22e6:	53 94       	inc	r5
    22e8:	9c cf       	rjmp	.-200    	; 0x2222 <printSubMenu+0xc8>
			}
		}
		break;
		case UP:
		{
			if(currPunkt > 0 )
    22ea:	66 20       	and	r6, r6
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <printSubMenu+0x196>
    22ee:	99 cf       	rjmp	.-206    	; 0x2222 <printSubMenu+0xc8>
			{
				--currPunkt;
    22f0:	6a 94       	dec	r6
				(cursorPos > 1)?(cursorPos--):(screenPos--);
    22f2:	91 e0       	ldi	r25, 0x01	; 1
    22f4:	79 16       	cp	r7, r25
    22f6:	11 f0       	breq	.+4      	; 0x22fc <printSubMenu+0x1a2>
    22f8:	7a 94       	dec	r7
    22fa:	93 cf       	rjmp	.-218    	; 0x2222 <printSubMenu+0xc8>
    22fc:	5a 94       	dec	r5
    22fe:	91 cf       	rjmp	.-222    	; 0x2222 <printSubMenu+0xc8>
			}
		}
		break;
		case ENT:return addr[currPunkt];	//возвращаем адрес блока с кот.надо че-то сделать
    2300:	f7 01       	movw	r30, r14
    2302:	e6 0d       	add	r30, r6
    2304:	f1 1d       	adc	r31, r1
    2306:	80 81       	ld	r24, Z
		default:continue;	//любая другая клавиша
		break;
		}
	}
	return NOKEY;
}
    2308:	c8 59       	subi	r28, 0x98	; 152
    230a:	df 4f       	sbci	r29, 0xFF	; 255
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	1f 91       	pop	r17
    231c:	0f 91       	pop	r16
    231e:	ff 90       	pop	r15
    2320:	ef 90       	pop	r14
    2322:	df 90       	pop	r13
    2324:	cf 90       	pop	r12
    2326:	bf 90       	pop	r11
    2328:	af 90       	pop	r10
    232a:	9f 90       	pop	r9
    232c:	8f 90       	pop	r8
    232e:	7f 90       	pop	r7
    2330:	6f 90       	pop	r6
    2332:	5f 90       	pop	r5
    2334:	4f 90       	pop	r4
    2336:	3f 90       	pop	r3
    2338:	2f 90       	pop	r2
    233a:	08 95       	ret

0000233c <in_line>:

static void in_line(void)
{
	printSubMenu(NA_SVYAZI,INL);
    233c:	62 e0       	ldi	r22, 0x02	; 2
    233e:	8f e8       	ldi	r24, 0x8F	; 143
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	0c 94 ad 10 	jmp	0x215a	; 0x215a <printSubMenu>

00002346 <viewArch>:

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
}

static unsigned char viewArch(unsigned char currBDZaddr,unsigned char index)
{
    2346:	cf 92       	push	r12
    2348:	df 92       	push	r13
    234a:	ff 92       	push	r15
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	a9 97       	sbiw	r28, 0x29	; 41
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	f8 2e       	mov	r15, r24
    2366:	d6 2e       	mov	r13, r22
	char tmpStr[7];
	unsigned char tmpData[14];
	unsigned char i,page=0;

	printMenuHeader(ARHIV);
    2368:	89 e8       	ldi	r24, 0x89	; 137
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	0e 94 46 06 	call	0xc8c	; 0xc8c <printMenuHeader>

	LCD_puts_P(BDZ,4);
    2370:	64 e0       	ldi	r22, 0x04	; 4
    2372:	8b e7       	ldi	r24, 0x7B	; 123
    2374:	91 e0       	ldi	r25, 0x01	; 1
    2376:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
	LCD_puts(itoa(currBDZaddr,tmpStr,10),3);
    237a:	0f 2d       	mov	r16, r15
    237c:	10 e0       	ldi	r17, 0x00	; 0
    237e:	4a e0       	ldi	r20, 0x0A	; 10
    2380:	be 01       	movw	r22, r28
    2382:	6d 5d       	subi	r22, 0xDD	; 221
    2384:	7f 4f       	sbci	r23, 0xFF	; 255
    2386:	c8 01       	movw	r24, r16
    2388:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
    238c:	63 e0       	ldi	r22, 0x03	; 3
    238e:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
	LCD_gotoXY(18,0);
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	82 e1       	ldi	r24, 0x12	; 18
    2396:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
    239a:	8d 2d       	mov	r24, r13
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	4a e0       	ldi	r20, 0x0A	; 10
    23a0:	be 01       	movw	r22, r28
    23a2:	6d 5d       	subi	r22, 0xDD	; 221
    23a4:	7f 4f       	sbci	r23, 0xFF	; 255
    23a6:	01 96       	adiw	r24, 0x01	; 1
    23a8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
	LCD_puts(itoa(index+1,tmpStr,10),2);
    23ac:	62 e0       	ldi	r22, 0x02	; 2
    23ae:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>

	//первая часть архива
	if(send_read_arch(1,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
    23b2:	4d 2d       	mov	r20, r13
    23b4:	6f 2d       	mov	r22, r15
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <send_read_arch>
    23bc:	87 ff       	sbrs	r24, 7
    23be:	03 c0       	rjmp	.+6      	; 0x23c6 <viewArch+0x80>
    23c0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <printTOUT>
    23c4:	1c c0       	rjmp	.+56     	; 0x23fe <viewArch+0xb8>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
    23c6:	89 e0       	ldi	r24, 0x09	; 9
    23c8:	80 9f       	mul	r24, r16
    23ca:	f0 01       	movw	r30, r0
    23cc:	81 9f       	mul	r24, r17
    23ce:	f0 0d       	add	r31, r0
    23d0:	11 24       	eor	r1, r1
    23d2:	e3 5c       	subi	r30, 0xC3	; 195
    23d4:	fe 4f       	sbci	r31, 0xFE	; 254
    23d6:	80 81       	ld	r24, Z
    23d8:	84 30       	cpi	r24, 0x04	; 4
    23da:	11 f0       	breq	.+4      	; 0x23e0 <viewArch+0x9a>
	else return 0;
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	c6 c0       	rjmp	.+396    	; 0x256c <viewArch+0x226>
    23e0:	de 01       	movw	r26, r28
    23e2:	55 96       	adiw	r26, 0x15	; 21
	LCD_gotoXY(18,0);
	LCD_puts(itoa(index+1,tmpStr,10),2);

	//первая часть архива
	if(send_read_arch(1,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	af 01       	movw	r20, r30
    23ea:	9a 01       	movw	r18, r20
    23ec:	28 0f       	add	r18, r24
    23ee:	39 1f       	adc	r19, r25
    23f0:	f9 01       	movw	r30, r18
    23f2:	20 81       	ld	r18, Z
    23f4:	2d 93       	st	X+, r18
    23f6:	01 96       	adiw	r24, 0x01	; 1
    23f8:	87 30       	cpi	r24, 0x07	; 7
    23fa:	91 05       	cpc	r25, r1
    23fc:	b1 f7       	brne	.-20     	; 0x23ea <viewArch+0xa4>
	else return 0;

	//вторая часть архива
	if(send_read_arch(2,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
    23fe:	4d 2d       	mov	r20, r13
    2400:	6f 2d       	mov	r22, r15
    2402:	82 e0       	ldi	r24, 0x02	; 2
    2404:	0e 94 57 0b 	call	0x16ae	; 0x16ae <send_read_arch>
    2408:	87 ff       	sbrs	r24, 7
    240a:	07 c0       	rjmp	.+14     	; 0x241a <viewArch+0xd4>
    240c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <printTOUT>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_2) for(i=7;i<14;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i-7];	//скопировали данные
    2410:	f1 2c       	mov	r15, r1

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
    2412:	cc 24       	eor	r12, r12
    2414:	c3 94       	inc	r12
    2416:	d1 2c       	mov	r13, r1
    2418:	51 c0       	rjmp	.+162    	; 0x24bc <viewArch+0x176>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_1) for(i=0;i<7;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i];	//скопировали данные
	else return 0;

	//вторая часть архива
	if(send_read_arch(2,currBDZaddr,index) <0)printTOUT();												//дождались таймаута третья строка-"нет связи"
	else if(inSysBDZ[currBDZaddr].data[0]==RD_ARCH_2) for(i=7;i<14;i++) tmpData[i]=inSysBDZ[currBDZaddr].data[i-7];	//скопировали данные
    241a:	89 e0       	ldi	r24, 0x09	; 9
    241c:	80 9f       	mul	r24, r16
    241e:	f0 01       	movw	r30, r0
    2420:	81 9f       	mul	r24, r17
    2422:	f0 0d       	add	r31, r0
    2424:	11 24       	eor	r1, r1
    2426:	e3 5c       	subi	r30, 0xC3	; 195
    2428:	fe 4f       	sbci	r31, 0xFE	; 254
    242a:	80 81       	ld	r24, Z
    242c:	85 30       	cpi	r24, 0x05	; 5
    242e:	b1 f6       	brne	.-84     	; 0x23dc <viewArch+0x96>
    2430:	de 01       	movw	r26, r28
    2432:	5c 96       	adiw	r26, 0x1c	; 28
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	af 01       	movw	r20, r30
    243a:	9a 01       	movw	r18, r20
    243c:	28 0f       	add	r18, r24
    243e:	39 1f       	adc	r19, r25
    2440:	f9 01       	movw	r30, r18
    2442:	20 81       	ld	r18, Z
    2444:	2d 93       	st	X+, r18
    2446:	01 96       	adiw	r24, 0x01	; 1
    2448:	87 30       	cpi	r24, 0x07	; 7
    244a:	91 05       	cpc	r25, r1
    244c:	b1 f7       	brne	.-20     	; 0x243a <viewArch+0xf4>
    244e:	e0 cf       	rjmp	.-64     	; 0x2410 <viewArch+0xca>

		if(tmpData[3]==0xFF) {LCD_gotoXY(0,2);LCD_puts_P(PUSTO,7);}	//если год 0xFF строка 0 "пусто"
		else
		{
			//строка 1 дата/время
			printTimeStr(&tmpData[1],0,1);
    2450:	ce 01       	movw	r24, r28
    2452:	46 96       	adiw	r24, 0x16	; 22
    2454:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <printTimeStr.constprop.2>

			switch(page)
    2458:	f1 10       	cpse	r15, r1
    245a:	3d c0       	rjmp	.+122    	; 0x24d6 <viewArch+0x190>
			{
			case 0:
			{
				//строка ВОД1234 ДВХ1234
				printIOStr(&tmpData[8]);
    245c:	ce 01       	movw	r24, r28
    245e:	4d 96       	adiw	r24, 0x1d	; 29
    2460:	0e 94 b4 04 	call	0x968	; 0x968 <printIOStr>

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
    2464:	63 e0       	ldi	r22, 0x03	; 3
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
    246c:	6e e6       	ldi	r22, 0x6E	; 110
    246e:	71 e0       	ldi	r23, 0x01	; 1
    2470:	ce 01       	movw	r24, r28
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <strcpy_P>
    2478:	62 ed       	ldi	r22, 0xD2	; 210
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	ce 01       	movw	r24, r28
    247e:	01 96       	adiw	r24, 0x01	; 1
    2480:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <strcat>
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
    2484:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2486:	8f 70       	andi	r24, 0x0F	; 15
    2488:	b1 f5       	brne	.+108    	; 0x24f6 <viewArch+0x1b0>
    248a:	67 eb       	ldi	r22, 0xB7	; 183
    248c:	70 e0       	ldi	r23, 0x00	; 0
    248e:	ce 01       	movw	r24, r28
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	0e 94 c5 1a 	call	0x358a	; 0x358a <strcat_P>
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
				LCD_puts(buffer,20);
    2496:	64 e1       	ldi	r22, 0x14	; 20
    2498:	ce 01       	movw	r24, r28
    249a:	01 96       	adiw	r24, 0x01	; 1
    249c:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
			break;
			}//switch

		}

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    24a0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    24a4:	87 30       	cpi	r24, 0x07	; 7
    24a6:	08 f0       	brcs	.+2      	; 0x24aa <viewArch+0x164>
    24a8:	4f c0       	rjmp	.+158    	; 0x2548 <viewArch+0x202>
    24aa:	85 30       	cpi	r24, 0x05	; 5
    24ac:	08 f0       	brcs	.+2      	; 0x24b0 <viewArch+0x16a>
    24ae:	5e c0       	rjmp	.+188    	; 0x256c <viewArch+0x226>
    24b0:	83 30       	cpi	r24, 0x03	; 3
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <viewArch+0x170>
    24b4:	5b c0       	rjmp	.+182    	; 0x256c <viewArch+0x226>
    24b6:	84 30       	cpi	r24, 0x04	; 4
    24b8:	09 f4       	brne	.+2      	; 0x24bc <viewArch+0x176>
    24ba:	53 c0       	rjmp	.+166    	; 0x2562 <viewArch+0x21c>

	while(1)
	{
		char buffer[20];

		if(tmpData[3]==0xFF) {LCD_gotoXY(0,2);LCD_puts_P(PUSTO,7);}	//если год 0xFF строка 0 "пусто"
    24bc:	88 8d       	ldd	r24, Y+24	; 0x18
    24be:	8f 3f       	cpi	r24, 0xFF	; 255
    24c0:	39 f6       	brne	.-114    	; 0x2450 <viewArch+0x10a>
    24c2:	62 e0       	ldi	r22, 0x02	; 2
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
    24ca:	67 e0       	ldi	r22, 0x07	; 7
    24cc:	8b e8       	ldi	r24, 0x8B	; 139
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
    24d4:	e5 cf       	rjmp	.-54     	; 0x24a0 <viewArch+0x15a>
		else
		{
			//строка 1 дата/время
			printTimeStr(&tmpData[1],0,1);

			switch(page)
    24d6:	f1 e0       	ldi	r31, 0x01	; 1
    24d8:	ff 12       	cpse	r15, r31
    24da:	e2 cf       	rjmp	.-60     	; 0x24a0 <viewArch+0x15a>
			}
			break;
			case 1:
			{
				//строки вкл/откл МТЗ
				printMTZStr((unsigned int)tmpData[10]<<8 | tmpData[11],(unsigned int)tmpData[12]<<8 | tmpData[13]);
    24dc:	69 a1       	ldd	r22, Y+33	; 0x21
    24de:	7a a1       	ldd	r23, Y+34	; 0x22
    24e0:	76 27       	eor	r23, r22
    24e2:	67 27       	eor	r22, r23
    24e4:	76 27       	eor	r23, r22
    24e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24e8:	98 a1       	ldd	r25, Y+32	; 0x20
    24ea:	98 27       	eor	r25, r24
    24ec:	89 27       	eor	r24, r25
    24ee:	98 27       	eor	r25, r24
    24f0:	0e 94 6c 05 	call	0xad8	; 0xad8 <printMTZStr>
			}
			break;
    24f4:	d5 cf       	rjmp	.-86     	; 0x24a0 <viewArch+0x15a>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0

				//строка 3 "РЕЛЕ:"
				LCD_gotoXY(0,3);
				strcpy_P(buffer,RELE);strcat(buffer,":");	//РЕЛЕ:
				if((tmpData[9]& 0x0F) ==0) strcat_P(buffer,NET);	//"нет"
				else for(i=0;i<4;i++) if( chkBit(tmpData[9],i) ) strcat(buffer,itoa(i+1,tmpStr,10));	//рисуем номера неисправных
    24fa:	2e 8d       	ldd	r18, Y+30	; 0x1e
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	a6 01       	movw	r20, r12
    2500:	08 2e       	mov	r0, r24
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <viewArch+0x1c2>
    2504:	44 0f       	add	r20, r20
    2506:	55 1f       	adc	r21, r21
    2508:	0a 94       	dec	r0
    250a:	e2 f7       	brpl	.-8      	; 0x2504 <viewArch+0x1be>
    250c:	24 23       	and	r18, r20
    250e:	35 23       	and	r19, r21
    2510:	08 2e       	mov	r0, r24
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <viewArch+0x1d2>
    2514:	35 95       	asr	r19
    2516:	27 95       	ror	r18
    2518:	0a 94       	dec	r0
    251a:	e2 f7       	brpl	.-8      	; 0x2514 <viewArch+0x1ce>
    251c:	8c 01       	movw	r16, r24
    251e:	0f 5f       	subi	r16, 0xFF	; 255
    2520:	1f 4f       	sbci	r17, 0xFF	; 255
    2522:	23 2b       	or	r18, r19
    2524:	61 f0       	breq	.+24     	; 0x253e <viewArch+0x1f8>
    2526:	4a e0       	ldi	r20, 0x0A	; 10
    2528:	be 01       	movw	r22, r28
    252a:	6d 5d       	subi	r22, 0xDD	; 221
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	c8 01       	movw	r24, r16
    2530:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
    2534:	bc 01       	movw	r22, r24
    2536:	ce 01       	movw	r24, r28
    2538:	01 96       	adiw	r24, 0x01	; 1
    253a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <strcat>
    253e:	c8 01       	movw	r24, r16
    2540:	04 30       	cpi	r16, 0x04	; 4
    2542:	11 05       	cpc	r17, r1
    2544:	d1 f6       	brne	.-76     	; 0x24fa <viewArch+0x1b4>
    2546:	a7 cf       	rjmp	.-178    	; 0x2496 <viewArch+0x150>
			break;
			}//switch

		}

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2548:	87 30       	cpi	r24, 0x07	; 7
    254a:	31 f0       	breq	.+12     	; 0x2558 <viewArch+0x212>
    254c:	8f 3f       	cpi	r24, 0xFF	; 255
    254e:	09 f0       	breq	.+2      	; 0x2552 <viewArch+0x20c>
    2550:	b5 cf       	rjmp	.-150    	; 0x24bc <viewArch+0x176>
		break;
		case LEFT:if(page>0)page--;
		break;
		case ESC:return ESC;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    2552:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    2556:	b2 cf       	rjmp	.-156    	; 0x24bc <viewArch+0x176>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case UP:return UP;
		case DOWN:return DOWN;
		case RIGHT:if(page<1)page++;
    2558:	f1 10       	cpse	r15, r1
    255a:	b0 cf       	rjmp	.-160    	; 0x24bc <viewArch+0x176>
    255c:	ff 24       	eor	r15, r15
    255e:	f3 94       	inc	r15
    2560:	ad cf       	rjmp	.-166    	; 0x24bc <viewArch+0x176>
		break;
		case LEFT:if(page>0)page--;
    2562:	ff 20       	and	r15, r15
    2564:	09 f4       	brne	.+2      	; 0x2568 <viewArch+0x222>
    2566:	aa cf       	rjmp	.-172    	; 0x24bc <viewArch+0x176>
    2568:	fa 94       	dec	r15
    256a:	a8 cf       	rjmp	.-176    	; 0x24bc <viewArch+0x176>
		default:continue;	//любая другая клавиша
		break;
		}
	}
	return 0;
}
    256c:	a9 96       	adiw	r28, 0x29	; 41
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	1f 91       	pop	r17
    257e:	0f 91       	pop	r16
    2580:	ff 90       	pop	r15
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	08 95       	ret

00002588 <archieve>:
	if( whileKey() ==ESC)reset(currBDZaddr);//а если ответ был правильный предлагаем ресетнуть

}

static void archieve(void)
{
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
	unsigned char currBDZaddr = printSubMenu(ARHIV,INL); /*выполнить просмотр архива инлайновых*/
    258c:	62 e0       	ldi	r22, 0x02	; 2
    258e:	89 e8       	ldi	r24, 0x89	; 137
    2590:	91 e0       	ldi	r25, 0x01	; 1
    2592:	0e 94 ad 10 	call	0x215a	; 0x215a <printSubMenu>
    2596:	d8 2f       	mov	r29, r24
	unsigned char index=0;

	if(currBDZaddr<1)return;
    2598:	88 23       	and	r24, r24
    259a:	91 f0       	breq	.+36     	; 0x25c0 <archieve+0x38>
    259c:	c0 e0       	ldi	r28, 0x00	; 0

	while(1)
	{
		switch(viewArch(currBDZaddr,index))
    259e:	6c 2f       	mov	r22, r28
    25a0:	8d 2f       	mov	r24, r29
    25a2:	0e 94 a3 11 	call	0x2346	; 0x2346 <viewArch>
    25a6:	85 30       	cpi	r24, 0x05	; 5
    25a8:	19 f0       	breq	.+6      	; 0x25b0 <archieve+0x28>
    25aa:	86 30       	cpi	r24, 0x06	; 6
    25ac:	29 f0       	breq	.+10     	; 0x25b8 <archieve+0x30>
    25ae:	08 c0       	rjmp	.+16     	; 0x25c0 <archieve+0x38>
		{
		case UP:if(index>0)index--;
    25b0:	cc 23       	and	r28, r28
    25b2:	a9 f3       	breq	.-22     	; 0x259e <archieve+0x16>
    25b4:	c1 50       	subi	r28, 0x01	; 1
    25b6:	f3 cf       	rjmp	.-26     	; 0x259e <archieve+0x16>
		break;
		case DOWN:if(index<31)index++;
    25b8:	cf 31       	cpi	r28, 0x1F	; 31
    25ba:	88 f7       	brcc	.-30     	; 0x259e <archieve+0x16>
    25bc:	cf 5f       	subi	r28, 0xFF	; 255
    25be:	ef cf       	rjmp	.-34     	; 0x259e <archieve+0x16>
		break;
		default:return;
		}
	}
}
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	08 95       	ret

000025c6 <reset>:

	return;
}

static void reset(unsigned char currBDZaddr)
{
    25c6:	cf 93       	push	r28
    25c8:	c8 2f       	mov	r28, r24
	whileKey();	//ждем нажатия/отпускания кнопки или автовыхода
    25ca:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>

	LCD_clr();
    25ce:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_clr>
	LCD_puts_P(SBROSIT,20);
    25d2:	64 e1       	ldi	r22, 0x14	; 20
    25d4:	83 ea       	ldi	r24, 0xA3	; 163
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
    25dc:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    25e0:	82 30       	cpi	r24, 0x02	; 2
    25e2:	29 f4       	brne	.+10     	; 0x25ee <reset+0x28>
    25e4:	62 e0       	ldi	r22, 0x02	; 2
    25e6:	8c 2f       	mov	r24, r28
}
    25e8:	cf 91       	pop	r28
	whileKey();	//ждем нажатия/отпускания кнопки или автовыхода

	LCD_clr();
	LCD_puts_P(SBROSIT,20);

	if(whileKey()==ENT)send_cmd(currBDZaddr,RESET);
    25ea:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <send_cmd>
}
    25ee:	cf 91       	pop	r28
    25f0:	08 95       	ret

000025f2 <fault>:
		}
	}
}

static void fault(void)
{
    25f2:	ef 92       	push	r14
    25f4:	ff 92       	push	r15
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <fault+0xc>
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <fault+0xe>
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
	char tmpStr[4];
	unsigned char currBDZaddr = printSubMenu(NEISPRAVNOST,FLT);	//получили адрес выбранного БДЗ
    2604:	61 e0       	ldi	r22, 0x01	; 1
    2606:	8d e9       	ldi	r24, 0x9D	; 157
    2608:	91 e0       	ldi	r25, 0x01	; 1
    260a:	0e 94 ad 10 	call	0x215a	; 0x215a <printSubMenu>
    260e:	18 2f       	mov	r17, r24
//LCD_gotoXY(0,0);
//LCD_putchar(currBDZaddr+'0');
//_delay_ms(2000);
	if(currBDZaddr<1)return;
    2610:	88 23       	and	r24, r24
    2612:	09 f4       	brne	.+2      	; 0x2616 <fault+0x24>
    2614:	4c c0       	rjmp	.+152    	; 0x26ae <fault+0xbc>

	printMenuHeader(NEISPRAVNOST);
    2616:	8d e9       	ldi	r24, 0x9D	; 157
    2618:	91 e0       	ldi	r25, 0x01	; 1
    261a:	0e 94 46 06 	call	0xc8c	; 0xc8c <printMenuHeader>

	LCD_puts_P(BDZ,4);
    261e:	64 e0       	ldi	r22, 0x04	; 4
    2620:	8b e7       	ldi	r24, 0x7B	; 123
    2622:	91 e0       	ldi	r25, 0x01	; 1
    2624:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
	LCD_puts(itoa(currBDZaddr,tmpStr,10),3);
    2628:	e1 2e       	mov	r14, r17
    262a:	f1 2c       	mov	r15, r1
    262c:	4a e0       	ldi	r20, 0x0A	; 10
    262e:	be 01       	movw	r22, r28
    2630:	6f 5f       	subi	r22, 0xFF	; 255
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
    2634:	c7 01       	movw	r24, r14
    2636:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
    263a:	63 e0       	ldi	r22, 0x03	; 3
    263c:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>

	if(send_cmd(currBDZaddr,RD_FAULT) <0) printTOUT();	//послали команду,дождались таймаута -"нет связи"
    2640:	63 e0       	ldi	r22, 0x03	; 3
    2642:	81 2f       	mov	r24, r17
    2644:	0e 94 cf 0b 	call	0x179e	; 0x179e <send_cmd>
    2648:	87 ff       	sbrs	r24, 7
    264a:	03 c0       	rjmp	.+6      	; 0x2652 <fault+0x60>
    264c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <printTOUT>
    2650:	27 c0       	rjmp	.+78     	; 0x26a0 <fault+0xae>
	else if(inSysBDZ[currBDZaddr].data[0]==RD_FAULT)	//иначе если принятое сообщени это ответ на этот запрос
    2652:	29 e0       	ldi	r18, 0x09	; 9
    2654:	2e 9d       	mul	r18, r14
    2656:	c0 01       	movw	r24, r0
    2658:	2f 9d       	mul	r18, r15
    265a:	90 0d       	add	r25, r0
    265c:	11 24       	eor	r1, r1
    265e:	9c 01       	movw	r18, r24
    2660:	23 5c       	subi	r18, 0xC3	; 195
    2662:	3e 4f       	sbci	r19, 0xFE	; 254
    2664:	79 01       	movw	r14, r18
    2666:	f9 01       	movw	r30, r18
    2668:	20 81       	ld	r18, Z
    266a:	23 30       	cpi	r18, 0x03	; 3
    266c:	01 f5       	brne	.+64     	; 0x26ae <fault+0xbc>
	{
//		data[1] -состояния входов	 <7>ЦВХ3; <6>ЦВХ2; <5>ЦВХ1; <4>ЦВХ0; <3>ОВХ3; <2>ОВХ2; <1>ОВХ1; <0>ОВХ0  (неисправный вход ==1)
//		data[2] -код ошибки {TEST=1,DATACRC,WATCHDOG,HARDMEM,SOFTHAND,SOFTTIM,UART,RTC,CAN,MSG}
		printIOStr(&inSysBDZ[currBDZaddr].data[1]);
    266e:	82 5c       	subi	r24, 0xC2	; 194
    2670:	9e 4f       	sbci	r25, 0xFE	; 254
    2672:	0e 94 b4 04 	call	0x968	; 0x968 <printIOStr>

		LCD_gotoXY(0,3);
    2676:	63 e0       	ldi	r22, 0x03	; 3
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		LCD_puts_P(OSHIBKA,7);
    267e:	67 e0       	ldi	r22, 0x07	; 7
    2680:	85 ec       	ldi	r24, 0xC5	; 197
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
		LCD_puts(itoa(inSysBDZ[currBDZaddr].data[2],tmpStr,10),2);
    2688:	f7 01       	movw	r30, r14
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	4a e0       	ldi	r20, 0x0A	; 10
    268e:	be 01       	movw	r22, r28
    2690:	6f 5f       	subi	r22, 0xFF	; 255
    2692:	7f 4f       	sbci	r23, 0xFF	; 255
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
    269a:	62 e0       	ldi	r22, 0x02	; 2
    269c:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
	}
	else return;							//если получен не тот ответ выходим
	if( whileKey() ==ESC)reset(currBDZaddr);//а если ответ был правильный предлагаем ресетнуть
    26a0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    26a4:	83 30       	cpi	r24, 0x03	; 3
    26a6:	19 f4       	brne	.+6      	; 0x26ae <fault+0xbc>
    26a8:	81 2f       	mov	r24, r17
    26aa:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <reset>

}
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	ff 90       	pop	r15
    26be:	ef 90       	pop	r14
    26c0:	08 95       	ret

000026c2 <alarm>:
{
	printSubMenu(NA_SVYAZI,INL);
}

static void alarm(void)
{
    26c2:	8f 92       	push	r8
    26c4:	9f 92       	push	r9
    26c6:	af 92       	push	r10
    26c8:	bf 92       	push	r11
    26ca:	cf 92       	push	r12
    26cc:	df 92       	push	r13
    26ce:	ef 92       	push	r14
    26d0:	ff 92       	push	r15
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	00 d0       	rcall	.+0      	; 0x26dc <alarm+0x1a>
    26dc:	00 d0       	rcall	.+0      	; 0x26de <alarm+0x1c>
    26de:	1f 92       	push	r1
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
	unsigned char Ndev=0,tmpAddr=0;
	char tmpStr[5];

	printMenuHeader(AVARIYA);//рисуем название пункта':'
    26e4:	8b ea       	ldi	r24, 0xAB	; 171
    26e6:	91 e0       	ldi	r25, 0x01	; 1
    26e8:	0e 94 46 06 	call	0xc8c	; 0xc8c <printMenuHeader>
    26ec:	aa 24       	eor	r10, r10
    26ee:	a3 94       	inc	r10
    26f0:	b1 2c       	mov	r11, r1
static void alarm(void)
{
	unsigned char currBDZaddr = 0;
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
	unsigned char Ndev=0,tmpAddr=0;
    26f2:	10 e0       	ldi	r17, 0x00	; 0
    26f4:	00 e0       	ldi	r16, 0x00	; 0

static void alarm(void)
{
	unsigned char currBDZaddr = 0;
	unsigned char index=0;
	unsigned int minMTZ_ontime=0xFFFF,MTZ_offtime=0xFFFF;
    26f6:	ee 24       	eor	r14, r14
    26f8:	ea 94       	dec	r14
    26fa:	fe 2c       	mov	r15, r14
    26fc:	cc 24       	eor	r12, r12
    26fe:	ca 94       	dec	r12
    2700:	dc 2c       	mov	r13, r12

	printMenuHeader(AVARIYA);//рисуем название пункта':'

	for(unsigned char i=1;i<MAXQDEV;i++)
	{
		if(readID(i)==i && chkBit(inSysBDZ[i].flags,ALM))	//обнаружили девайс с флагом авария
    2702:	39 e0       	ldi	r19, 0x09	; 9
    2704:	83 2e       	mov	r8, r19
    2706:	c5 01       	movw	r24, r10
    2708:	87 5f       	subi	r24, 0xF7	; 247
    270a:	9f 4f       	sbci	r25, 0xFF	; 255
    270c:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    2710:	98 2e       	mov	r9, r24
    2712:	8a 11       	cpse	r24, r10
    2714:	2f c0       	rjmp	.+94     	; 0x2774 <alarm+0xb2>
    2716:	8a 9c       	mul	r8, r10
    2718:	f0 01       	movw	r30, r0
    271a:	8b 9c       	mul	r8, r11
    271c:	f0 0d       	add	r31, r0
    271e:	11 24       	eor	r1, r1
    2720:	e3 5c       	subi	r30, 0xC3	; 195
    2722:	fe 4f       	sbci	r31, 0xFE	; 254
    2724:	80 85       	ldd	r24, Z+8	; 0x08
    2726:	80 ff       	sbrs	r24, 0
    2728:	25 c0       	rjmp	.+74     	; 0x2774 <alarm+0xb2>
		{
			if(tmpAddr==0)tmpAddr=i;						//на случай если не найдется БДЗ,зафиксировавщих время сраб.МТЗ
    272a:	11 11       	cpse	r17, r1
    272c:	01 c0       	rjmp	.+2      	; 0x2730 <alarm+0x6e>
    272e:	19 2d       	mov	r17, r9
			Ndev++;											//добавляем кол-во обнаруженных девайсов
    2730:	0f 5f       	subi	r16, 0xFF	; 255
			if(send_read_arch(2,i,0) <0) printTOUT();		//запрашиваем чась архива со значениями МТЗ.Если получен таймаут...
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	69 2d       	mov	r22, r9
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	0e 94 57 0b 	call	0x16ae	; 0x16ae <send_read_arch>
    273c:	87 ff       	sbrs	r24, 7
    273e:	03 c0       	rjmp	.+6      	; 0x2746 <alarm+0x84>
    2740:	0e 94 3d 06 	call	0xc7a	; 0xc7a <printTOUT>
    2744:	17 c0       	rjmp	.+46     	; 0x2774 <alarm+0xb2>
			else if(inSysBDZ[i].data[0]==RD_ARCH_2)			//получили тот ответ который надо
    2746:	8a 9c       	mul	r8, r10
    2748:	f0 01       	movw	r30, r0
    274a:	8b 9c       	mul	r8, r11
    274c:	f0 0d       	add	r31, r0
    274e:	11 24       	eor	r1, r1
    2750:	e3 5c       	subi	r30, 0xC3	; 195
    2752:	fe 4f       	sbci	r31, 0xFE	; 254
    2754:	80 81       	ld	r24, Z
    2756:	85 30       	cpi	r24, 0x05	; 5
    2758:	69 f4       	brne	.+26     	; 0x2774 <alarm+0xb2>
			{
				unsigned int tmpTime=(unsigned int)inSysBDZ[i].data[3]<<8 | inSysBDZ[i].data[4];
    275a:	23 81       	ldd	r18, Z+3	; 0x03
    275c:	84 81       	ldd	r24, Z+4	; 0x04
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	92 2b       	or	r25, r18

				if(tmpTime < minMTZ_ontime)
    2762:	8c 15       	cp	r24, r12
    2764:	9d 05       	cpc	r25, r13
    2766:	30 f4       	brcc	.+12     	; 0x2774 <alarm+0xb2>
				{
					minMTZ_ontime=tmpTime;				//если полученное время меньше сохраненного минимального-перезаписываем
					MTZ_offtime = (unsigned int)inSysBDZ[i].data[5]<<8 | inSysBDZ[i].data[6];	//время отпускания
    2768:	25 81       	ldd	r18, Z+5	; 0x05
    276a:	e6 80       	ldd	r14, Z+6	; 0x06
    276c:	f1 2c       	mov	r15, r1
    276e:	f2 2a       	or	r15, r18
    2770:	19 2d       	mov	r17, r9
    2772:	6c 01       	movw	r12, r24
    2774:	2f ef       	ldi	r18, 0xFF	; 255
    2776:	a2 1a       	sub	r10, r18
    2778:	b2 0a       	sbc	r11, r18
	unsigned char Ndev=0,tmpAddr=0;
	char tmpStr[5];

	printMenuHeader(AVARIYA);//рисуем название пункта':'

	for(unsigned char i=1;i<MAXQDEV;i++)
    277a:	83 e6       	ldi	r24, 0x63	; 99
    277c:	a8 16       	cp	r10, r24
    277e:	b1 04       	cpc	r11, r1
    2780:	11 f6       	brne	.-124    	; 0x2706 <alarm+0x44>
				}
			}
		}
	}

	LCD_puts(itoa(Ndev,tmpStr,10),strlen(tmpStr)+2);LCD_puts_P(BDZ,4);		//ХХX	БД3
    2782:	be 01       	movw	r22, r28
    2784:	6f 5f       	subi	r22, 0xFF	; 255
    2786:	7f 4f       	sbci	r23, 0xFF	; 255
    2788:	fb 01       	movw	r30, r22
    278a:	01 90       	ld	r0, Z+
    278c:	00 20       	and	r0, r0
    278e:	e9 f7       	brne	.-6      	; 0x278a <alarm+0xc8>
    2790:	31 97       	sbiw	r30, 0x01	; 1
    2792:	5f 01       	movw	r10, r30
    2794:	a6 1a       	sub	r10, r22
    2796:	b7 0a       	sbc	r11, r23
    2798:	4a e0       	ldi	r20, 0x0A	; 10
    279a:	80 2f       	mov	r24, r16
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__itoa_ncheck>
    27a2:	62 e0       	ldi	r22, 0x02	; 2
    27a4:	6a 0d       	add	r22, r10
    27a6:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
    27aa:	64 e0       	ldi	r22, 0x04	; 4
    27ac:	8b e7       	ldi	r24, 0x7B	; 123
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
	if(tmpAddr !=0)
    27b4:	11 23       	and	r17, r17
    27b6:	e1 f0       	breq	.+56     	; 0x27f0 <alarm+0x12e>
	{
		if(send_read_arch(1,tmpAddr,0) <0)printTOUT();		//запрашиваем часть архива со значениями RTC. Если получен таймаут...
    27b8:	40 e0       	ldi	r20, 0x00	; 0
    27ba:	61 2f       	mov	r22, r17
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	0e 94 57 0b 	call	0x16ae	; 0x16ae <send_read_arch>
    27c2:	87 ff       	sbrs	r24, 7
    27c4:	03 c0       	rjmp	.+6      	; 0x27cc <alarm+0x10a>
    27c6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <printTOUT>
    27ca:	12 c0       	rjmp	.+36     	; 0x27f0 <alarm+0x12e>
		else if(inSysBDZ[tmpAddr].data[0]==RD_ARCH_1)
    27cc:	29 e0       	ldi	r18, 0x09	; 9
    27ce:	12 9f       	mul	r17, r18
    27d0:	c0 01       	movw	r24, r0
    27d2:	11 24       	eor	r1, r1
    27d4:	fc 01       	movw	r30, r24
    27d6:	e3 5c       	subi	r30, 0xC3	; 195
    27d8:	fe 4f       	sbci	r31, 0xFE	; 254
    27da:	20 81       	ld	r18, Z
    27dc:	24 30       	cpi	r18, 0x04	; 4
    27de:	41 f4       	brne	.+16     	; 0x27f0 <alarm+0x12e>
		{
			//строка дата/время
			printTimeStr(&inSysBDZ[tmpAddr].data[1],0,1);
    27e0:	82 5c       	subi	r24, 0xC2	; 194
    27e2:	9e 4f       	sbci	r25, 0xFE	; 254
    27e4:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <printTimeStr.constprop.2>
			//строки вкл/откл МТЗ
			printMTZStr(minMTZ_ontime,MTZ_offtime);
    27e8:	b7 01       	movw	r22, r14
    27ea:	c6 01       	movw	r24, r12
    27ec:	0e 94 6c 05 	call	0xad8	; 0xad8 <printMTZStr>
		}
	}
LOOP:
	switch(whileKey())	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    27f0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    27f4:	83 30       	cpi	r24, 0x03	; 3
    27f6:	29 f0       	breq	.+10     	; 0x2802 <alarm+0x140>
    27f8:	8f 3f       	cpi	r24, 0xFF	; 255
    27fa:	59 f1       	breq	.+86     	; 0x2852 <alarm+0x190>
    27fc:	82 30       	cpi	r24, 0x02	; 2
    27fe:	c1 f7       	brne	.-16     	; 0x27f0 <alarm+0x12e>
    2800:	06 c0       	rjmp	.+12     	; 0x280e <alarm+0x14c>
	{
	case ESC:	//нажат ESC посылаем общий сброс
	{
		if(Ndev !=0) reset(0);
    2802:	00 23       	and	r16, r16
    2804:	31 f1       	breq	.+76     	; 0x2852 <alarm+0x190>
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <reset>
    280c:	22 c0       	rjmp	.+68     	; 0x2852 <alarm+0x190>
		return;
	}
	break;
	case ENT:if(Ndev==0)return;	//нажат ENT подолжаем далее(если есть аварии)
    280e:	00 23       	and	r16, r16
    2810:	01 f1       	breq	.+64     	; 0x2852 <alarm+0x190>
	break;
	default:goto LOOP;	//любая другая клавиша
	break;
	}

	currBDZaddr = printSubMenu(AVARIYA,ALM);
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	8b ea       	ldi	r24, 0xAB	; 171
    2816:	91 e0       	ldi	r25, 0x01	; 1
    2818:	0e 94 ad 10 	call	0x215a	; 0x215a <printSubMenu>
    281c:	08 2f       	mov	r16, r24
	if(currBDZaddr<1)return;
    281e:	88 23       	and	r24, r24
    2820:	c1 f0       	breq	.+48     	; 0x2852 <alarm+0x190>
    2822:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		switch(viewArch(currBDZaddr,index))
    2824:	61 2f       	mov	r22, r17
    2826:	80 2f       	mov	r24, r16
    2828:	0e 94 a3 11 	call	0x2346	; 0x2346 <viewArch>
    282c:	85 30       	cpi	r24, 0x05	; 5
    282e:	49 f0       	breq	.+18     	; 0x2842 <alarm+0x180>
    2830:	18 f4       	brcc	.+6      	; 0x2838 <alarm+0x176>
    2832:	83 30       	cpi	r24, 0x03	; 3
    2834:	71 f0       	breq	.+28     	; 0x2852 <alarm+0x190>
    2836:	f6 cf       	rjmp	.-20     	; 0x2824 <alarm+0x162>
    2838:	86 30       	cpi	r24, 0x06	; 6
    283a:	39 f0       	breq	.+14     	; 0x284a <alarm+0x188>
    283c:	8f 3f       	cpi	r24, 0xFF	; 255
    283e:	49 f0       	breq	.+18     	; 0x2852 <alarm+0x190>
    2840:	f1 cf       	rjmp	.-30     	; 0x2824 <alarm+0x162>
		{
		case UP:if(index>0)index--;
    2842:	11 23       	and	r17, r17
    2844:	79 f3       	breq	.-34     	; 0x2824 <alarm+0x162>
    2846:	11 50       	subi	r17, 0x01	; 1
    2848:	ed cf       	rjmp	.-38     	; 0x2824 <alarm+0x162>
		break;
		case DOWN:if(index<31)index++;
    284a:	1f 31       	cpi	r17, 0x1F	; 31
    284c:	58 f7       	brcc	.-42     	; 0x2824 <alarm+0x162>
    284e:	1f 5f       	subi	r17, 0xFF	; 255
    2850:	e9 cf       	rjmp	.-46     	; 0x2824 <alarm+0x162>
		break;
		default:continue;	//любая другая клавиша
		break;
		}
	}
}
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	ff 90       	pop	r15
    2866:	ef 90       	pop	r14
    2868:	df 90       	pop	r13
    286a:	cf 90       	pop	r12
    286c:	bf 90       	pop	r11
    286e:	af 90       	pop	r10
    2870:	9f 90       	pop	r9
    2872:	8f 90       	pop	r8
    2874:	08 95       	ret

00002876 <naviMenu>:
		LCD_puts(lowerCase,19);	//прорисовали пункты меню:
	}
}

void naviMenu(struct menu *level)
{
    2876:	7f 92       	push	r7
    2878:	8f 92       	push	r8
    287a:	9f 92       	push	r9
    287c:	af 92       	push	r10
    287e:	bf 92       	push	r11
    2880:	cf 92       	push	r12
    2882:	df 92       	push	r13
    2884:	ef 92       	push	r14
    2886:	ff 92       	push	r15
    2888:	0f 93       	push	r16
    288a:	1f 93       	push	r17
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	64 97       	sbiw	r28, 0x14	; 20
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	5c 01       	movw	r10, r24
	unsigned char cursorPos=1;			//указатель на текущий пункт
	unsigned char screenPos=0;			//указатель на текущий пункт
	unsigned char numPunkt,currPunkt=1;	//счетчик пунктов меню,

	for(numPunkt=0;(level+1+numPunkt)->name != NULL;numPunkt++);	//считаем кол-во пунктов в подменю (level -заголовок; level+1  -первый пункт)
    28a2:	e1 2c       	mov	r14, r1
    28a4:	f5 01       	movw	r30, r10
    28a6:	24 e0       	ldi	r18, 0x04	; 4
    28a8:	e2 9e       	mul	r14, r18
    28aa:	e0 0d       	add	r30, r0
    28ac:	f1 1d       	adc	r31, r1
    28ae:	11 24       	eor	r1, r1
    28b0:	84 81       	ldd	r24, Z+4	; 0x04
    28b2:	95 81       	ldd	r25, Z+5	; 0x05
    28b4:	89 2b       	or	r24, r25
    28b6:	11 f0       	breq	.+4      	; 0x28bc <naviMenu+0x46>
    28b8:	e3 94       	inc	r14
    28ba:	f4 cf       	rjmp	.-24     	; 0x28a4 <naviMenu+0x2e>
    28bc:	01 e0       	ldi	r16, 0x01	; 1
    28be:	f1 2c       	mov	r15, r1
    28c0:	11 e0       	ldi	r17, 0x01	; 1

	while(1)
	{
		printMenuHeader(level->name);		//рисуем заголовок
    28c2:	f5 01       	movw	r30, r10
    28c4:	80 81       	ld	r24, Z
    28c6:	91 81       	ldd	r25, Z+1	; 0x01
    28c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <printMenuHeader>
    28cc:	c5 01       	movw	r24, r10
    28ce:	f4 e0       	ldi	r31, 0x04	; 4
    28d0:	ff 9e       	mul	r15, r31
    28d2:	80 0d       	add	r24, r0
    28d4:	91 1d       	adc	r25, r1
    28d6:	11 24       	eor	r1, r1
    28d8:	9c 01       	movw	r18, r24
    28da:	2c 5f       	subi	r18, 0xFC	; 252
    28dc:	3f 4f       	sbci	r19, 0xFF	; 255
    28de:	69 01       	movw	r12, r18

static inline void printMenuPunkt(struct menu *level)
{
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
    28e0:	91 2c       	mov	r9, r1
	{
		if((level+i)->name == NULL)return;	//если вместо имени заглушка(пункта не существует)
    28e2:	f6 01       	movw	r30, r12
    28e4:	20 81       	ld	r18, Z
    28e6:	31 81       	ldd	r19, Z+1	; 0x01
    28e8:	21 15       	cp	r18, r1
    28ea:	31 05       	cpc	r19, r1
    28ec:	29 f1       	breq	.+74     	; 0x2938 <naviMenu+0xc2>
    28ee:	de 01       	movw	r26, r28
    28f0:	11 96       	adiw	r26, 0x01	; 1
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	7a 2e       	mov	r7, r26
    28f8:	8b 2e       	mov	r8, r27
    28fa:	f9 01       	movw	r30, r18
    28fc:	e8 0f       	add	r30, r24
    28fe:	f9 1f       	adc	r31, r25
		for(unsigned char j=0;j<19;j++)		//преобразуем названия пунктов меню в нижний регистр
		{
			lowerCase[j]=(pgm_read_byte(&(level+i)->name[j]) >= 0xC0)?( pgm_read_byte(&(level+i)->name[j])+0x20 ):(pgm_read_byte(&(level+i)->name[j]));
    2900:	44 91       	lpm	r20, Z
    2902:	40 3c       	cpi	r20, 0xC0	; 192
    2904:	18 f0       	brcs	.+6      	; 0x290c <naviMenu+0x96>
    2906:	e4 91       	lpm	r30, Z
    2908:	e0 5e       	subi	r30, 0xE0	; 224
    290a:	01 c0       	rjmp	.+2      	; 0x290e <naviMenu+0x98>
    290c:	e4 91       	lpm	r30, Z
    290e:	ed 93       	st	X+, r30
    2910:	01 96       	adiw	r24, 0x01	; 1
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
	{
		if((level+i)->name == NULL)return;	//если вместо имени заглушка(пункта не существует)
		for(unsigned char j=0;j<19;j++)		//преобразуем названия пунктов меню в нижний регистр
    2912:	83 31       	cpi	r24, 0x13	; 19
    2914:	91 05       	cpc	r25, r1
    2916:	89 f7       	brne	.-30     	; 0x28fa <naviMenu+0x84>
		{
			lowerCase[j]=(pgm_read_byte(&(level+i)->name[j]) >= 0xC0)?( pgm_read_byte(&(level+i)->name[j])+0x20 ):(pgm_read_byte(&(level+i)->name[j]));
		}
		LCD_gotoXY(1,i+1);
    2918:	93 94       	inc	r9
    291a:	69 2d       	mov	r22, r9
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		LCD_puts(lowerCase,19);	//прорисовали пункты меню:
    2922:	63 e1       	ldi	r22, 0x13	; 19
    2924:	87 2d       	mov	r24, r7
    2926:	98 2d       	mov	r25, r8
    2928:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
    292c:	f4 e0       	ldi	r31, 0x04	; 4
    292e:	cf 0e       	add	r12, r31
    2930:	d1 1c       	adc	r13, r1

static inline void printMenuPunkt(struct menu *level)
{
	char lowerCase[20];

	for(unsigned char i=0;i<3;i++)
    2932:	23 e0       	ldi	r18, 0x03	; 3
    2934:	92 12       	cpse	r9, r18
    2936:	d5 cf       	rjmp	.-86     	; 0x28e2 <naviMenu+0x6c>

	while(1)
	{
		printMenuHeader(level->name);		//рисуем заголовок
		printMenuPunkt(level+screenPos+1);	//пункты меню
		LCD_gotoXY(0,cursorPos);			//и курсор (символ >)
    2938:	61 2f       	mov	r22, r17
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		LCD_putchar(0x84);
    2940:	84 e8       	ldi	r24, 0x84	; 132
    2942:	0e 94 08 04 	call	0x810	; 0x810 <LCD_putchar>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2946:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    294a:	85 30       	cpi	r24, 0x05	; 5
    294c:	61 f1       	breq	.+88     	; 0x29a6 <naviMenu+0x130>
    294e:	c8 f4       	brcc	.+50     	; 0x2982 <naviMenu+0x10c>
    2950:	82 30       	cpi	r24, 0x02	; 2
    2952:	99 f1       	breq	.+102    	; 0x29ba <naviMenu+0x144>
    2954:	83 30       	cpi	r24, 0x03	; 3
    2956:	09 f0       	breq	.+2      	; 0x295a <naviMenu+0xe4>
    2958:	b4 cf       	rjmp	.-152    	; 0x28c2 <naviMenu+0x4c>
		break;
		case NOKEY:asm("jmp 0");	//автовыход
		break;
		}
	}
}
    295a:	64 96       	adiw	r28, 0x14	; 20
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	1f 91       	pop	r17
    296c:	0f 91       	pop	r16
    296e:	ff 90       	pop	r15
    2970:	ef 90       	pop	r14
    2972:	df 90       	pop	r13
    2974:	cf 90       	pop	r12
    2976:	bf 90       	pop	r11
    2978:	af 90       	pop	r10
    297a:	9f 90       	pop	r9
    297c:	8f 90       	pop	r8
    297e:	7f 90       	pop	r7
    2980:	08 95       	ret
		printMenuHeader(level->name);		//рисуем заголовок
		printMenuPunkt(level+screenPos+1);	//пункты меню
		LCD_gotoXY(0,cursorPos);			//и курсор (символ >)
		LCD_putchar(0x84);

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2982:	86 30       	cpi	r24, 0x06	; 6
    2984:	31 f0       	breq	.+12     	; 0x2992 <naviMenu+0x11c>
    2986:	8f 3f       	cpi	r24, 0xFF	; 255
    2988:	09 f0       	breq	.+2      	; 0x298c <naviMenu+0x116>
    298a:	9b cf       	rjmp	.-202    	; 0x28c2 <naviMenu+0x4c>
		break;
		case ENT:(level+currPunkt)->pFunc();	//-запускаем функцию выбранного пункта	(она также может вызвать naviMenu -следующий подуровень)
		break;
		case ESC:return;	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    298c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		break;
    2990:	98 cf       	rjmp	.-208    	; 0x28c2 <naviMenu+0x4c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			if(currPunkt < numPunkt)
    2992:	0e 15       	cp	r16, r14
    2994:	08 f0       	brcs	.+2      	; 0x2998 <naviMenu+0x122>
    2996:	95 cf       	rjmp	.-214    	; 0x28c2 <naviMenu+0x4c>
			{
				++currPunkt;
    2998:	0f 5f       	subi	r16, 0xFF	; 255
				(cursorPos < NUMOFMENUSTRING)?(cursorPos++):(screenPos++);
    299a:	13 30       	cpi	r17, 0x03	; 3
    299c:	10 f4       	brcc	.+4      	; 0x29a2 <naviMenu+0x12c>
    299e:	1f 5f       	subi	r17, 0xFF	; 255
    29a0:	90 cf       	rjmp	.-224    	; 0x28c2 <naviMenu+0x4c>
    29a2:	f3 94       	inc	r15
    29a4:	8e cf       	rjmp	.-228    	; 0x28c2 <naviMenu+0x4c>
			}
		}
		break;
		case UP:
		{
			if(currPunkt > 1 )
    29a6:	02 30       	cpi	r16, 0x02	; 2
    29a8:	08 f4       	brcc	.+2      	; 0x29ac <naviMenu+0x136>
    29aa:	8b cf       	rjmp	.-234    	; 0x28c2 <naviMenu+0x4c>
			{
				--currPunkt;
    29ac:	01 50       	subi	r16, 0x01	; 1
				(cursorPos > 1)?(cursorPos--):(screenPos--);
    29ae:	11 30       	cpi	r17, 0x01	; 1
    29b0:	11 f0       	breq	.+4      	; 0x29b6 <naviMenu+0x140>
    29b2:	11 50       	subi	r17, 0x01	; 1
    29b4:	86 cf       	rjmp	.-244    	; 0x28c2 <naviMenu+0x4c>
    29b6:	fa 94       	dec	r15
    29b8:	84 cf       	rjmp	.-248    	; 0x28c2 <naviMenu+0x4c>
			}
		}
		break;
		case ENT:(level+currPunkt)->pFunc();	//-запускаем функцию выбранного пункта	(она также может вызвать naviMenu -следующий подуровень)
    29ba:	f5 01       	movw	r30, r10
    29bc:	34 e0       	ldi	r19, 0x04	; 4
    29be:	03 9f       	mul	r16, r19
    29c0:	e0 0d       	add	r30, r0
    29c2:	f1 1d       	adc	r31, r1
    29c4:	11 24       	eor	r1, r1
    29c6:	02 80       	ldd	r0, Z+2	; 0x02
    29c8:	f3 81       	ldd	r31, Z+3	; 0x03
    29ca:	e0 2d       	mov	r30, r0
    29cc:	09 95       	icall
		break;
    29ce:	79 cf       	rjmp	.-270    	; 0x28c2 <naviMenu+0x4c>

000029d0 <svyaz>:
{
	change_param(0);
}

static void svyaz(void)
{
    29d0:	cf 92       	push	r12
    29d2:	df 92       	push	r13
    29d4:	ef 92       	push	r14
    29d6:	ff 92       	push	r15
    29d8:	cf 93       	push	r28
	naviMenu(LVL_svyaz);
    29da:	8c e7       	ldi	r24, 0x7C	; 124
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 3b 14 	call	0x2876	; 0x2876 <naviMenu>
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    29e2:	82 e0       	ldi	r24, 0x02	; 2
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <eeprom_read_dword>
    29ea:	6b 01       	movw	r12, r22
    29ec:	7c 01       	movw	r14, r24
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    29f6:	c8 2f       	mov	r28, r24
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    2a00:	a7 01       	movw	r20, r14
    2a02:	96 01       	movw	r18, r12
    2a04:	6c 2f       	mov	r22, r28
}
    2a06:	cf 91       	pop	r28
    2a08:	ff 90       	pop	r15
    2a0a:	ef 90       	pop	r14
    2a0c:	df 90       	pop	r13
    2a0e:	cf 90       	pop	r12
}

static void svyaz(void)
{
	naviMenu(LVL_svyaz);
	MODB_init(eeprom_read_byte(&mode),eeprom_read_byte(&parity),eeprom_read_dword(&speed));
    2a10:	0c 94 ae 18 	jmp	0x315c	; 0x315c <MODB_init>

00002a14 <progsys>:
	return ;
}

static void progsys(void)
{
	naviMenu(LVL_prog);
    2a14:	8c ea       	ldi	r24, 0xAC	; 172
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <naviMenu>

00002a1c <nastroyka>:
		}
	}
}

static void nastroyka(void)
{
    2a1c:	6f 92       	push	r6
    2a1e:	7f 92       	push	r7
    2a20:	8f 92       	push	r8
    2a22:	9f 92       	push	r9
    2a24:	af 92       	push	r10
    2a26:	bf 92       	push	r11
    2a28:	cf 92       	push	r12
    2a2a:	df 92       	push	r13
    2a2c:	ef 92       	push	r14
    2a2e:	ff 92       	push	r15
    2a30:	0f 93       	push	r16
    2a32:	1f 93       	push	r17
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <nastroyka+0x1e>
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <nastroyka+0x20>
    2a3c:	1f 92       	push	r1
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62

static unsigned char passwd(void)
{
	signed int currPasswd=0,step=1;
	char str[5];
	unsigned char cursorPos=3;
    2a42:	33 e0       	ldi	r19, 0x03	; 3
    2a44:	73 2e       	mov	r7, r19
	LCD_gotoXY(0,2);LCD_puts_P(NEDOSTUPNO,20);
}

static unsigned char passwd(void)
{
	signed int currPasswd=0,step=1;
    2a46:	ee 24       	eor	r14, r14
    2a48:	e3 94       	inc	r14
    2a4a:	f1 2c       	mov	r15, r1
    2a4c:	00 e0       	ldi	r16, 0x00	; 0
    2a4e:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		printMenuHeader(PAROL);	//прорисовываем заголовок
		LCD_gotoXY(0,2);
		sprintf(str,"%04d",currPasswd);
    2a50:	5a e1       	ldi	r21, 0x1A	; 26
    2a52:	c5 2e       	mov	r12, r21
    2a54:	51 e0       	ldi	r21, 0x01	; 1
    2a56:	d5 2e       	mov	r13, r21
    2a58:	ce 01       	movw	r24, r28
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	5c 01       	movw	r10, r24
			(cursorPos>0)?(cursorPos--):(cursorPos=3);
		}
		break;
		case RIGHT:
		{
			(step > 1)?(step /= 10):(step=1000);
    2a5e:	6a e0       	ldi	r22, 0x0A	; 10
    2a60:	86 2e       	mov	r8, r22
    2a62:	91 2c       	mov	r9, r1
			currPasswd=((currPasswd + step)>=9999)?(0):(currPasswd+step);
		}
		break;
		case LEFT:
		{
			(step < 1000)?(step *= 10):(step=1);
    2a64:	7a e0       	ldi	r23, 0x0A	; 10
    2a66:	67 2e       	mov	r6, r23
	char str[5];
	unsigned char cursorPos=3;

	while(1)
	{
		printMenuHeader(PAROL);	//прорисовываем заголовок
    2a68:	8e e6       	ldi	r24, 0x6E	; 110
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 94 46 06 	call	0xc8c	; 0xc8c <printMenuHeader>
		LCD_gotoXY(0,2);
    2a70:	62 e0       	ldi	r22, 0x02	; 2
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		sprintf(str,"%04d",currPasswd);
    2a78:	1f 93       	push	r17
    2a7a:	0f 93       	push	r16
    2a7c:	df 92       	push	r13
    2a7e:	cf 92       	push	r12
    2a80:	bf 92       	push	r11
    2a82:	af 92       	push	r10
    2a84:	0e 94 41 1b 	call	0x3682	; 0x3682 <sprintf>
		LCD_puts(str,4);
    2a88:	64 e0       	ldi	r22, 0x04	; 4
    2a8a:	c5 01       	movw	r24, r10
    2a8c:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
		LCD_gotoXY(cursorPos,2);
    2a90:	62 e0       	ldi	r22, 0x02	; 2
    2a92:	87 2d       	mov	r24, r7
    2a94:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		LCD_cursorBlink();
    2a98:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_cursorBlink>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
    2a9c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <whileKey>
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	85 30       	cpi	r24, 0x05	; 5
    2aae:	c1 f0       	breq	.+48     	; 0x2ae0 <nastroyka+0xc4>
    2ab0:	40 f4       	brcc	.+16     	; 0x2ac2 <nastroyka+0xa6>
    2ab2:	83 30       	cpi	r24, 0x03	; 3
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <nastroyka+0x9c>
    2ab6:	57 c0       	rjmp	.+174    	; 0x2b66 <nastroyka+0x14a>
    2ab8:	e8 f4       	brcc	.+58     	; 0x2af4 <nastroyka+0xd8>
    2aba:	82 30       	cpi	r24, 0x02	; 2
    2abc:	09 f4       	brne	.+2      	; 0x2ac0 <nastroyka+0xa4>
    2abe:	45 c0       	rjmp	.+138    	; 0x2b4a <nastroyka+0x12e>
    2ac0:	d3 cf       	rjmp	.-90     	; 0x2a68 <nastroyka+0x4c>
    2ac2:	87 30       	cpi	r24, 0x07	; 7
    2ac4:	69 f1       	breq	.+90     	; 0x2b20 <nastroyka+0x104>
    2ac6:	28 f0       	brcs	.+10     	; 0x2ad2 <nastroyka+0xb6>
    2ac8:	8f 3f       	cpi	r24, 0xFF	; 255
    2aca:	71 f6       	brne	.-100    	; 0x2a68 <nastroyka+0x4c>
			else return 0;
		}
		break;
		case ESC:{LCD_cursorOff();return 0;}	//выход по ESC
		break;
		case NOKEY:asm("jmp 0");	//автовыход
    2acc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2ad0:	cb cf       	rjmp	.-106    	; 0x2a68 <nastroyka+0x4c>

		switch( whileKey() )	//висим тут пока не нажмется-отпустится кнопка (или автовыход)
		{
		case DOWN:
		{
			currPasswd=((currPasswd - step)>=0)?(currPasswd-step):(9999);
    2ad2:	0e 19       	sub	r16, r14
    2ad4:	1f 09       	sbc	r17, r15
    2ad6:	17 ff       	sbrs	r17, 7
    2ad8:	c7 cf       	rjmp	.-114    	; 0x2a68 <nastroyka+0x4c>
    2ada:	0f e0       	ldi	r16, 0x0F	; 15
    2adc:	17 e2       	ldi	r17, 0x27	; 39
    2ade:	c4 cf       	rjmp	.-120    	; 0x2a68 <nastroyka+0x4c>
		}
		break;
		case UP:
		{
			currPasswd=((currPasswd + step)>=9999)?(0):(currPasswd+step);
    2ae0:	0e 0d       	add	r16, r14
    2ae2:	1f 1d       	adc	r17, r15
    2ae4:	0f 30       	cpi	r16, 0x0F	; 15
    2ae6:	97 e2       	ldi	r25, 0x27	; 39
    2ae8:	19 07       	cpc	r17, r25
    2aea:	0c f4       	brge	.+2      	; 0x2aee <nastroyka+0xd2>
    2aec:	bd cf       	rjmp	.-134    	; 0x2a68 <nastroyka+0x4c>
    2aee:	00 e0       	ldi	r16, 0x00	; 0
    2af0:	10 e0       	ldi	r17, 0x00	; 0
    2af2:	ba cf       	rjmp	.-140    	; 0x2a68 <nastroyka+0x4c>
		}
		break;
		case LEFT:
		{
			(step < 1000)?(step *= 10):(step=1);
    2af4:	88 ee       	ldi	r24, 0xE8	; 232
    2af6:	e8 16       	cp	r14, r24
    2af8:	83 e0       	ldi	r24, 0x03	; 3
    2afa:	f8 06       	cpc	r15, r24
    2afc:	3c f4       	brge	.+14     	; 0x2b0c <nastroyka+0xf0>
    2afe:	c7 01       	movw	r24, r14
    2b00:	68 9e       	mul	r6, r24
    2b02:	70 01       	movw	r14, r0
    2b04:	69 9e       	mul	r6, r25
    2b06:	f0 0c       	add	r15, r0
    2b08:	11 24       	eor	r1, r1
    2b0a:	03 c0       	rjmp	.+6      	; 0x2b12 <nastroyka+0xf6>
    2b0c:	ee 24       	eor	r14, r14
    2b0e:	e3 94       	inc	r14
    2b10:	f1 2c       	mov	r15, r1
			(cursorPos>0)?(cursorPos--):(cursorPos=3);
    2b12:	71 10       	cpse	r7, r1
    2b14:	03 c0       	rjmp	.+6      	; 0x2b1c <nastroyka+0x100>
    2b16:	23 e0       	ldi	r18, 0x03	; 3
    2b18:	72 2e       	mov	r7, r18
    2b1a:	a6 cf       	rjmp	.-180    	; 0x2a68 <nastroyka+0x4c>
    2b1c:	7a 94       	dec	r7
    2b1e:	a4 cf       	rjmp	.-184    	; 0x2a68 <nastroyka+0x4c>
		}
		break;
		case RIGHT:
		{
			(step > 1)?(step /= 10):(step=1000);
    2b20:	92 e0       	ldi	r25, 0x02	; 2
    2b22:	e9 16       	cp	r14, r25
    2b24:	f1 04       	cpc	r15, r1
    2b26:	34 f0       	brlt	.+12     	; 0x2b34 <nastroyka+0x118>
    2b28:	c7 01       	movw	r24, r14
    2b2a:	b4 01       	movw	r22, r8
    2b2c:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__divmodhi4>
    2b30:	7b 01       	movw	r14, r22
    2b32:	04 c0       	rjmp	.+8      	; 0x2b3c <nastroyka+0x120>
    2b34:	88 ee       	ldi	r24, 0xE8	; 232
    2b36:	e8 2e       	mov	r14, r24
    2b38:	83 e0       	ldi	r24, 0x03	; 3
    2b3a:	f8 2e       	mov	r15, r24
			(cursorPos<3)?(cursorPos++):(cursorPos=0);
    2b3c:	83 e0       	ldi	r24, 0x03	; 3
    2b3e:	78 12       	cpse	r7, r24
    2b40:	02 c0       	rjmp	.+4      	; 0x2b46 <nastroyka+0x12a>
    2b42:	71 2c       	mov	r7, r1
    2b44:	91 cf       	rjmp	.-222    	; 0x2a68 <nastroyka+0x4c>
    2b46:	73 94       	inc	r7
    2b48:	8f cf       	rjmp	.-226    	; 0x2a68 <nastroyka+0x4c>
		}
		break;
		case ENT:
		{
			LCD_cursorOff();
    2b4a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <LCD_visible>
			if(eeprom_read_word(&password) == currPasswd)return 1;	//
    2b4e:	87 e0       	ldi	r24, 0x07	; 7
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <eeprom_read_word>
    2b56:	08 17       	cp	r16, r24
    2b58:	19 07       	cpc	r17, r25
    2b5a:	39 f4       	brne	.+14     	; 0x2b6a <nastroyka+0x14e>
	}
}

static void nastroyka(void)
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
    2b5c:	80 e9       	ldi	r24, 0x90	; 144
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 3b 14 	call	0x2876	; 0x2876 <naviMenu>
}
    2b64:	02 c0       	rjmp	.+4      	; 0x2b6a <nastroyka+0x14e>
			LCD_cursorOff();
			if(eeprom_read_word(&password) == currPasswd)return 1;	//
			else return 0;
		}
		break;
		case ESC:{LCD_cursorOff();return 0;}	//выход по ESC
    2b66:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <LCD_visible>
}

static void nastroyka(void)
{
	if(passwd() != 0)naviMenu(LVL_nastroyka);
}
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	1f 91       	pop	r17
    2b7a:	0f 91       	pop	r16
    2b7c:	ff 90       	pop	r15
    2b7e:	ef 90       	pop	r14
    2b80:	df 90       	pop	r13
    2b82:	cf 90       	pop	r12
    2b84:	bf 90       	pop	r11
    2b86:	af 90       	pop	r10
    2b88:	9f 90       	pop	r9
    2b8a:	8f 90       	pop	r8
    2b8c:	7f 90       	pop	r7
    2b8e:	6f 90       	pop	r6
    2b90:	08 95       	ret

00002b92 <main>:
#include "menu.c"



int main(void)
{
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	64 97       	sbiw	r28, 0x14	; 20
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	de bf       	out	0x3e, r29	; 62
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	cd bf       	out	0x3d, r28	; 61
	bki_init();
    2ba6:	0e 94 1d 0a 	call	0x143a	; 0x143a <bki_init>
		//PGM_P title=RABOTA;
		PGM_P title;

		if(!(chkBit(sys_state,ALM))&&!(chkBit(sys_state,FLT))) title=RABOTA;
		//заголовок
		(ind_state==0)?(ind_state++):(ind_state=0);
    2baa:	33 24       	eor	r3, r3
    2bac:	33 94       	inc	r3
		if(chkBit(sys_state,ERR))                  title=NET_GOTOVNOSTI;
		LCD_gotoXY(0,0);LCD_puts_P(title,20);

		//читаем время
		rtc_get(&rtc);
		sprintf(buffer,"%02u.%02u.%02u %02u:%02u:%02u",rtc.day,rtc.month,rtc.year,rtc.hours,rtc.minutes,rtc.seconds);
    2bae:	ec ef       	ldi	r30, 0xFC	; 252
    2bb0:	6e 2e       	mov	r6, r30
    2bb2:	e0 e0       	ldi	r30, 0x00	; 0
    2bb4:	7e 2e       	mov	r7, r30
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	6c 01       	movw	r12, r24
		{
			LCD_puts(buffer,20);
		}


		sprintf(buffer, "%u", sys_state);
    2bbc:	ff e1       	ldi	r31, 0x1F	; 31
    2bbe:	af 2e       	mov	r10, r31
    2bc0:	f1 e0       	ldi	r31, 0x01	; 1
    2bc2:	bf 2e       	mov	r11, r31
		/*sprintf(buffer, "%u", inSysBDZ[13].data[0]);
		LCD_gotoXY(0,2);
		LCD_puts(buffer,20);*/

		//новое в версии
		if(TWI_ERR)ERROR=RTC;
    2bc4:	a2 e0       	ldi	r26, 0x02	; 2
    2bc6:	4a 2e       	mov	r4, r26
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
		{
			if(readID(i)==i)	//если блок есть в списке
			{
				modbusRegisters[BDZ_INSYS]++;																//счетчик инлайн блоков
				if(chkBit(inSysBDZ[i].flags,CONF)) setBit(sys_state,CONF);
    2bc8:	b9 e0       	ldi	r27, 0x09	; 9
    2bca:	5b 2e       	mov	r5, r27

		//здесь можно пингануть.После пинга пройдет "пауза со сканированием"-за это время должны прийти все отклики
		if(pingTime ==0)
		{
			ping();
			pingTime=PINGTIME;
    2bcc:	18 e8       	ldi	r17, 0x88	; 136
    2bce:	81 2e       	mov	r8, r17
    2bd0:	13 e1       	ldi	r17, 0x13	; 19
    2bd2:	91 2e       	mov	r9, r17
	{
		char buffer[20];
		//PGM_P title=RABOTA;
		PGM_P title;

		if(!(chkBit(sys_state,ALM))&&!(chkBit(sys_state,FLT))) title=RABOTA;
    2bd4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2bd8:	98 2f       	mov	r25, r24
    2bda:	92 70       	andi	r25, 0x02	; 2
    2bdc:	28 2f       	mov	r18, r24
    2bde:	21 70       	andi	r18, 0x01	; 1
    2be0:	80 fd       	sbrc	r24, 0
    2be2:	06 c0       	rjmp	.+12     	; 0x2bf0 <main+0x5e>
    2be4:	91 11       	cpse	r25, r1
    2be6:	04 c0       	rjmp	.+8      	; 0x2bf0 <main+0x5e>
    2be8:	72 eb       	ldi	r23, 0xB2	; 178
    2bea:	e7 2e       	mov	r14, r23
    2bec:	71 e0       	ldi	r23, 0x01	; 1
    2bee:	f7 2e       	mov	r15, r23
		//заголовок
		(ind_state==0)?(ind_state++):(ind_state=0);
    2bf0:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <ind_state>
    2bf4:	31 11       	cpse	r19, r1
    2bf6:	03 c0       	rjmp	.+6      	; 0x2bfe <main+0x6c>
    2bf8:	30 92 28 01 	sts	0x0128, r3	; 0x800128 <ind_state>
    2bfc:	08 c0       	rjmp	.+16     	; 0x2c0e <main+0x7c>
    2bfe:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <ind_state>
		if(chkBit(sys_state,ALM) && ind_state==0)  title=AVARIYA;
    2c02:	22 23       	and	r18, r18
    2c04:	21 f0       	breq	.+8      	; 0x2c0e <main+0x7c>
    2c06:	6b ea       	ldi	r22, 0xAB	; 171
    2c08:	e6 2e       	mov	r14, r22
    2c0a:	61 e0       	ldi	r22, 0x01	; 1
    2c0c:	f6 2e       	mov	r15, r22
		if(chkBit(sys_state,FLT) && ind_state==1)  title=NEISPRAVNOST;
    2c0e:	99 23       	and	r25, r25
    2c10:	41 f0       	breq	.+16     	; 0x2c22 <main+0x90>
    2c12:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <ind_state>
    2c16:	91 30       	cpi	r25, 0x01	; 1
    2c18:	21 f4       	brne	.+8      	; 0x2c22 <main+0x90>
    2c1a:	5d e9       	ldi	r21, 0x9D	; 157
    2c1c:	e5 2e       	mov	r14, r21
    2c1e:	51 e0       	ldi	r21, 0x01	; 1
    2c20:	f5 2e       	mov	r15, r21
		if(chkBit(sys_state,ERR))                  title=NET_GOTOVNOSTI;
    2c22:	83 ff       	sbrs	r24, 3
    2c24:	04 c0       	rjmp	.+8      	; 0x2c2e <main+0x9c>
    2c26:	4c ec       	ldi	r20, 0xCC	; 204
    2c28:	e4 2e       	mov	r14, r20
    2c2a:	40 e0       	ldi	r20, 0x00	; 0
    2c2c:	f4 2e       	mov	r15, r20
		LCD_gotoXY(0,0);LCD_puts_P(title,20);
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
    2c36:	64 e1       	ldi	r22, 0x14	; 20
    2c38:	c7 01       	movw	r24, r14
    2c3a:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>

		//читаем время
		rtc_get(&rtc);
    2c3e:	8c ec       	ldi	r24, 0xCC	; 204
    2c40:	94 e0       	ldi	r25, 0x04	; 4
    2c42:	0e 94 9d 02 	call	0x53a	; 0x53a <rtc_get>
		sprintf(buffer,"%02u.%02u.%02u %02u:%02u:%02u",rtc.day,rtc.month,rtc.year,rtc.hours,rtc.minutes,rtc.seconds);
    2c46:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <rtc+0x5>
    2c4a:	1f 92       	push	r1
    2c4c:	8f 93       	push	r24
    2c4e:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <rtc+0x4>
    2c52:	1f 92       	push	r1
    2c54:	8f 93       	push	r24
    2c56:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <rtc+0x3>
    2c5a:	1f 92       	push	r1
    2c5c:	8f 93       	push	r24
    2c5e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <rtc>
    2c62:	1f 92       	push	r1
    2c64:	8f 93       	push	r24
    2c66:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <rtc+0x1>
    2c6a:	1f 92       	push	r1
    2c6c:	8f 93       	push	r24
    2c6e:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <rtc+0x2>
    2c72:	1f 92       	push	r1
    2c74:	8f 93       	push	r24
    2c76:	7f 92       	push	r7
    2c78:	6f 92       	push	r6
    2c7a:	df 92       	push	r13
    2c7c:	cf 92       	push	r12
    2c7e:	0e 94 41 1b 	call	0x3682	; 0x3682 <sprintf>
		//обновляем модбас
		modbusRegisters[TIME_YYMM]=(unsigned int)rtc.year<<8 | rtc.month;
    2c82:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <rtc>
    2c86:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <rtc+0x1>
    2c8a:	98 27       	eor	r25, r24
    2c8c:	89 27       	eor	r24, r25
    2c8e:	98 27       	eor	r25, r24
    2c90:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <modbusRegisters+0xb>
    2c94:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <modbusRegisters+0xa>
		modbusRegisters[TIME_DDHH]=(unsigned int)rtc.day<<8 | rtc.hours;
    2c98:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <rtc+0x2>
    2c9c:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <rtc+0x3>
    2ca0:	98 27       	eor	r25, r24
    2ca2:	89 27       	eor	r24, r25
    2ca4:	98 27       	eor	r25, r24
    2ca6:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <modbusRegisters+0xd>
    2caa:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <modbusRegisters+0xc>
		modbusRegisters[TIME_MMSS]=(unsigned int)rtc.minutes<<8 | rtc.seconds;
    2cae:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <rtc+0x4>
    2cb2:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <rtc+0x5>
    2cb6:	98 27       	eor	r25, r24
    2cb8:	89 27       	eor	r24, r25
    2cba:	98 27       	eor	r25, r24
    2cbc:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <modbusRegisters+0xf>
    2cc0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <modbusRegisters+0xe>

		//экран:код ошибки или строка RTC
		LCD_gotoXY(0,3);
    2cc4:	63 e0       	ldi	r22, 0x03	; 3
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		if(ERROR)
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	f8 94       	cli
    2cd0:	de bf       	out	0x3e, r29	; 62
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	cd bf       	out	0x3d, r28	; 61
    2cd6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ERROR>
    2cda:	88 23       	and	r24, r24
    2cdc:	a1 f0       	breq	.+40     	; 0x2d06 <main+0x174>
		{
			setBit(sys_state,ERR);
    2cde:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2ce2:	88 60       	ori	r24, 0x08	; 8
    2ce4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <sys_state>
			LCD_puts_P(OSHIBKA,20);
    2ce8:	64 e1       	ldi	r22, 0x14	; 20
    2cea:	85 ec       	ldi	r24, 0xC5	; 197
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_puts_P>
			LCD_gotoXY(7,3);
    2cf2:	63 e0       	ldi	r22, 0x03	; 3
    2cf4:	87 e0       	ldi	r24, 0x07	; 7
    2cf6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
			LCD_putchar(ERROR+'0');
    2cfa:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ERROR>
    2cfe:	80 5d       	subi	r24, 0xD0	; 208
    2d00:	0e 94 08 04 	call	0x810	; 0x810 <LCD_putchar>
    2d04:	04 c0       	rjmp	.+8      	; 0x2d0e <main+0x17c>
		}
		else
		{
			LCD_puts(buffer,20);
    2d06:	64 e1       	ldi	r22, 0x14	; 20
    2d08:	c6 01       	movw	r24, r12
    2d0a:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
		}


		sprintf(buffer, "%u", sys_state);
    2d0e:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2d12:	1f 92       	push	r1
    2d14:	8f 93       	push	r24
    2d16:	bf 92       	push	r11
    2d18:	af 92       	push	r10
    2d1a:	df 92       	push	r13
    2d1c:	cf 92       	push	r12
    2d1e:	0e 94 41 1b 	call	0x3682	; 0x3682 <sprintf>
		LCD_gotoXY(0,1);
    2d22:	61 e0       	ldi	r22, 0x01	; 1
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
		LCD_puts(buffer,20);
    2d2a:	64 e1       	ldi	r22, 0x14	; 20
    2d2c:	c6 01       	movw	r24, r12
    2d2e:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_puts>
		/*sprintf(buffer, "%u", inSysBDZ[13].data[0]);
		LCD_gotoXY(0,2);
		LCD_puts(buffer,20);*/

		//новое в версии
		if(TWI_ERR)ERROR=RTC;
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	0f 90       	pop	r0
    2d3e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <TWI_ERR>
    2d42:	81 11       	cpse	r24, r1
    2d44:	40 92 27 01 	sts	0x0127, r4	; 0x800127 <ERROR>
		if(MODB_ERR)ERROR=MODB;
    2d48:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <MODB_ERR>
    2d4c:	88 23       	and	r24, r24
    2d4e:	19 f0       	breq	.+6      	; 0x2d56 <main+0x1c4>
    2d50:	85 e0       	ldi	r24, 0x05	; 5
    2d52:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>
		if(CAN_ERR)ERROR=CAN;
    2d56:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <CAN_ERR>
    2d5a:	88 23       	and	r24, r24
    2d5c:	19 f0       	breq	.+6      	; 0x2d64 <main+0x1d2>
    2d5e:	83 e0       	ldi	r24, 0x03	; 3
    2d60:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>



		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
    2d64:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <sys_state>
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
    2d68:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <modbusRegisters+0x9>
    2d6c:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <modbusRegisters+0x8>
    2d70:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <modbusRegisters+0x7>
    2d74:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <modbusRegisters+0x6>
    2d78:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <modbusRegisters+0x5>
    2d7c:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <modbusRegisters+0x4>
    2d80:	01 e0       	ldi	r16, 0x01	; 1
    2d82:	10 e0       	ldi	r17, 0x00	; 0
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
		{
			if(readID(i)==i)	//если блок есть в списке
    2d84:	c8 01       	movw	r24, r16
    2d86:	87 5f       	subi	r24, 0xF7	; 247
    2d88:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8a:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    2d8e:	80 13       	cpse	r24, r16
    2d90:	53 c0       	rjmp	.+166    	; 0x2e38 <main+0x2a6>
			{
				modbusRegisters[BDZ_INSYS]++;																//счетчик инлайн блоков
    2d92:	20 91 c0 04 	lds	r18, 0x04C0	; 0x8004c0 <modbusRegisters+0x4>
    2d96:	30 91 c1 04 	lds	r19, 0x04C1	; 0x8004c1 <modbusRegisters+0x5>
    2d9a:	2f 5f       	subi	r18, 0xFF	; 255
    2d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9e:	30 93 c1 04 	sts	0x04C1, r19	; 0x8004c1 <modbusRegisters+0x5>
    2da2:	20 93 c0 04 	sts	0x04C0, r18	; 0x8004c0 <modbusRegisters+0x4>
				if(chkBit(inSysBDZ[i].flags,CONF)) setBit(sys_state,CONF);
    2da6:	50 9e       	mul	r5, r16
    2da8:	f0 01       	movw	r30, r0
    2daa:	51 9e       	mul	r5, r17
    2dac:	f0 0d       	add	r31, r0
    2dae:	11 24       	eor	r1, r1
    2db0:	e3 5c       	subi	r30, 0xC3	; 195
    2db2:	fe 4f       	sbci	r31, 0xFE	; 254
    2db4:	90 85       	ldd	r25, Z+8	; 0x08
    2db6:	95 ff       	sbrs	r25, 5
    2db8:	05 c0       	rjmp	.+10     	; 0x2dc4 <main+0x232>
    2dba:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <sys_state>
    2dbe:	90 62       	ori	r25, 0x20	; 32
    2dc0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <sys_state>
				if(chkBit(inSysBDZ[i].flags,ALM))
    2dc4:	50 9e       	mul	r5, r16
    2dc6:	f0 01       	movw	r30, r0
    2dc8:	51 9e       	mul	r5, r17
    2dca:	f0 0d       	add	r31, r0
    2dcc:	11 24       	eor	r1, r1
    2dce:	e3 5c       	subi	r30, 0xC3	; 195
    2dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd2:	90 85       	ldd	r25, Z+8	; 0x08
    2dd4:	90 ff       	sbrs	r25, 0
    2dd6:	18 c0       	rjmp	.+48     	; 0x2e08 <main+0x276>
				{
					modbusRegisters[BDZ_ALARM]++;
    2dd8:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <modbusRegisters+0x8>
    2ddc:	30 91 c5 04 	lds	r19, 0x04C5	; 0x8004c5 <modbusRegisters+0x9>
    2de0:	2f 5f       	subi	r18, 0xFF	; 255
    2de2:	3f 4f       	sbci	r19, 0xFF	; 255
    2de4:	30 93 c5 04 	sts	0x04C5, r19	; 0x8004c5 <modbusRegisters+0x9>
    2de8:	20 93 c4 04 	sts	0x04C4, r18	; 0x8004c4 <modbusRegisters+0x8>
					setBit(sys_state,ALM);
    2dec:	20 90 29 01 	lds	r2, 0x0129	; 0x800129 <sys_state>
    2df0:	92 2d       	mov	r25, r2
    2df2:	91 60       	ori	r25, 0x01	; 1
    2df4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <sys_state>
					if (scanID(i)) setBit(sys_state,NEW);
    2df8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <scanID>
    2dfc:	88 23       	and	r24, r24
    2dfe:	21 f0       	breq	.+8      	; 0x2e08 <main+0x276>
    2e00:	82 2d       	mov	r24, r2
    2e02:	81 64       	ori	r24, 0x41	; 65
    2e04:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <sys_state>
				}	//счетчик аварийных блоков и установка флага общей аварии
				if(chkBit(inSysBDZ[i].flags,FLT)) {modbusRegisters[BDZ_FAULT]++; setBit(sys_state,FLT);}	//счетчик неисправный блоков и установка флага общей неисправности
    2e08:	50 9e       	mul	r5, r16
    2e0a:	f0 01       	movw	r30, r0
    2e0c:	51 9e       	mul	r5, r17
    2e0e:	f0 0d       	add	r31, r0
    2e10:	11 24       	eor	r1, r1
    2e12:	e3 5c       	subi	r30, 0xC3	; 195
    2e14:	fe 4f       	sbci	r31, 0xFE	; 254
    2e16:	80 85       	ldd	r24, Z+8	; 0x08
    2e18:	81 ff       	sbrs	r24, 1
    2e1a:	0e c0       	rjmp	.+28     	; 0x2e38 <main+0x2a6>
    2e1c:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <modbusRegisters+0x6>
    2e20:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <modbusRegisters+0x7>
    2e24:	01 96       	adiw	r24, 0x01	; 1
    2e26:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <modbusRegisters+0x7>
    2e2a:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <modbusRegisters+0x6>
    2e2e:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2e32:	82 60       	ori	r24, 0x02	; 2
    2e34:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <sys_state>
				//if(new==i) setBit(sys_state,NEW);
				//sys_state |= inSysBDZ[i].flags & 0x03;				//два мл.бита-это флаги аварии и неисправности
			}

			(chkBit(sys_state,CONF))?(PORTA|=1<<OUT2):(PORTA &= ~(1<<OUT2));
    2e38:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2e3c:	85 ff       	sbrs	r24, 5
    2e3e:	02 c0       	rjmp	.+4      	; 0x2e44 <main+0x2b2>
    2e40:	da 9a       	sbi	0x1b, 2	; 27
    2e42:	01 c0       	rjmp	.+2      	; 0x2e46 <main+0x2b4>
    2e44:	da 98       	cbi	0x1b, 2	; 27
			(chkBit(sys_state,ALM))?(PORTA|=1<<OUT1):(PORTA &= ~(1<<OUT1));	//обнаружили аварию ОТКЛЮЧАЕМ
    2e46:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2e4a:	80 ff       	sbrs	r24, 0
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <main+0x2c0>
    2e4e:	db 9a       	sbi	0x1b, 3	; 27
    2e50:	01 c0       	rjmp	.+2      	; 0x2e54 <main+0x2c2>
    2e52:	db 98       	cbi	0x1b, 3	; 27
			(chkBit(sys_state,NEW))?(PORTA|=1<<OUT3):(PORTA &= ~(1<<OUT3));
    2e54:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2e58:	86 ff       	sbrs	r24, 6
    2e5a:	02 c0       	rjmp	.+4      	; 0x2e60 <main+0x2ce>
    2e5c:	d9 9a       	sbi	0x1b, 1	; 27
    2e5e:	01 c0       	rjmp	.+2      	; 0x2e62 <main+0x2d0>
    2e60:	d9 98       	cbi	0x1b, 1	; 27
			(chkBit(sys_state,FLT) || ERROR)?(clrBit(PORTA,OUT4)):(setBit(PORTA,OUT4));
    2e62:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sys_state>
    2e66:	81 fd       	sbrc	r24, 1
    2e68:	04 c0       	rjmp	.+8      	; 0x2e72 <main+0x2e0>
    2e6a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ERROR>
    2e6e:	88 23       	and	r24, r24
    2e70:	11 f0       	breq	.+4      	; 0x2e76 <main+0x2e4>
    2e72:	d8 98       	cbi	0x1b, 0	; 27
    2e74:	01 c0       	rjmp	.+2      	; 0x2e78 <main+0x2e6>
    2e76:	d8 9a       	sbi	0x1b, 0	; 27
    2e78:	0f 5f       	subi	r16, 0xFF	; 255
    2e7a:	1f 4f       	sbci	r17, 0xFF	; 255


		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
		for(unsigned char i=1;i<MAXQDEV;i++)	//если БДЗ зареган
    2e7c:	03 36       	cpi	r16, 0x63	; 99
    2e7e:	11 05       	cpc	r17, r1
    2e80:	09 f0       	breq	.+2      	; 0x2e84 <main+0x2f2>
    2e82:	80 cf       	rjmp	.-256    	; 0x2d84 <main+0x1f2>
			(chkBit(sys_state,ALM))?(PORTA|=1<<OUT1):(PORTA &= ~(1<<OUT1));	//обнаружили аварию ОТКЛЮЧАЕМ
			(chkBit(sys_state,NEW))?(PORTA|=1<<OUT3):(PORTA &= ~(1<<OUT3));
			(chkBit(sys_state,FLT) || ERROR)?(clrBit(PORTA,OUT4)):(setBit(PORTA,OUT4));
		}
		//сохраняем ошибку, статус системы и состояния выходов
		modbusRegisters[BKI_STATE]=(unsigned int)ERROR<<8 | sys_state;
    2e84:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ERROR>
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	98 2f       	mov	r25, r24
    2e8c:	88 27       	eor	r24, r24
    2e8e:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <sys_state>
    2e92:	82 2b       	or	r24, r18
    2e94:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <modbusRegisters+0x1>
    2e98:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <modbusRegisters>
		modbusRegisters[BKI_OUTS]= PINA & 0x0F;
    2e9c:	89 b3       	in	r24, 0x19	; 25
    2e9e:	8f 70       	andi	r24, 0x0F	; 15
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <modbusRegisters+0x3>
    2ea6:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <modbusRegisters+0x2>

		//здесь можно пингануть.После пинга пройдет "пауза со сканированием"-за это время должны прийти все отклики
		if(pingTime ==0)
    2eaa:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <pingTime>
    2eae:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <pingTime+0x1>
    2eb2:	89 2b       	or	r24, r25
    2eb4:	69 f4       	brne	.+26     	; 0x2ed0 <main+0x33e>
		{
			ping();
    2eb6:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <ping>
			pingTime=PINGTIME;
    2eba:	90 92 39 01 	sts	0x0139, r9	; 0x800139 <pingTime+0x1>
    2ebe:	80 92 38 01 	sts	0x0138, r8	; 0x800138 <pingTime>
			LCD_gotoXY(19,0);
    2ec2:	60 e0       	ldi	r22, 0x00	; 0
    2ec4:	83 e1       	ldi	r24, 0x13	; 19
    2ec6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_gotoXY>
			LCD_putchar('*');
    2eca:	8a e2       	ldi	r24, 0x2A	; 42
    2ecc:	0e 94 08 04 	call	0x810	; 0x810 <LCD_putchar>



		//сканируем блоки на предмет аварий и неисправностей
		sys_state=0;																		//обнуляем все ошибки и тд
		modbusRegisters[BDZ_INSYS]=modbusRegisters[BDZ_FAULT]=modbusRegisters[BDZ_ALARM]=0;//обнуляем регистры.
    2ed0:	08 ee       	ldi	r16, 0xE8	; 232
    2ed2:	13 e0       	ldi	r17, 0x03	; 3
		}



		//пауза со сканированием клавы.Если появился RX прерываемся
		for(unsigned int i=0;(i<1000) && (!rx_counter);i++)
    2ed4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rx_counter>
    2ed8:	81 11       	cpse	r24, r1
    2eda:	19 c0       	rjmp	.+50     	; 0x2f0e <main+0x37c>
    2edc:	8f e9       	ldi	r24, 0x9F	; 159
    2ede:	9f e0       	ldi	r25, 0x0F	; 15
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	f1 f7       	brne	.-4      	; 0x2ee0 <main+0x34e>
    2ee4:	00 c0       	rjmp	.+0      	; 0x2ee6 <main+0x354>
    2ee6:	00 00       	nop
		{
			_delay_ms(1);
			//нажат ENT-висим пока не отпустят-по выходу из меню очищаем экран,обнуляем статус
			if(scanKBD()==ENT){while(scanKBD()!=NOKEY);naviMenu(LVL_main);LCD_clr();sys_state=0;}
    2ee8:	0e 94 cf 0c 	call	0x199e	; 0x199e <scanKBD>
    2eec:	82 30       	cpi	r24, 0x02	; 2
    2eee:	61 f4       	brne	.+24     	; 0x2f08 <main+0x376>
    2ef0:	0e 94 cf 0c 	call	0x199e	; 0x199e <scanKBD>
    2ef4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ef6:	e1 f7       	brne	.-8      	; 0x2ef0 <main+0x35e>
    2ef8:	80 e6       	ldi	r24, 0x60	; 96
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	0e 94 3b 14 	call	0x2876	; 0x2876 <naviMenu>
    2f00:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_clr>
    2f04:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <sys_state>
    2f08:	01 50       	subi	r16, 0x01	; 1
    2f0a:	11 09       	sbc	r17, r1
		}



		//пауза со сканированием клавы.Если появился RX прерываемся
		for(unsigned int i=0;(i<1000) && (!rx_counter);i++)
    2f0c:	19 f7       	brne	.-58     	; 0x2ed4 <main+0x342>
			//нажат ENT-висим пока не отпустят-по выходу из меню очищаем экран,обнуляем статус
			if(scanKBD()==ENT){while(scanKBD()!=NOKEY);naviMenu(LVL_main);LCD_clr();sys_state=0;}
		}

		//отработка модбаса.если что то есть в буфере читаем сообщение
		if(rx_counter)
    2f0e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rx_counter>
    2f12:	88 23       	and	r24, r24
    2f14:	09 f4       	brne	.+2      	; 0x2f18 <main+0x386>
    2f16:	5e ce       	rjmp	.-836    	; 0x2bd4 <main+0x42>
		{
			signed char a=getModbMsg();
    2f18:	0e 94 a2 19 	call	0x3344	; 0x3344 <getModbMsg>
			if(a<1)ERROR=MODB;
    2f1c:	18 16       	cp	r1, r24
    2f1e:	24 f0       	brlt	.+8      	; 0x2f28 <main+0x396>
    2f20:	85 e0       	ldi	r24, 0x05	; 5
    2f22:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ERROR>
    2f26:	56 ce       	rjmp	.-852    	; 0x2bd4 <main+0x42>
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
    2f28:	dd 98       	cbi	0x1b, 5	; 27
				if(ERROR==MODB)ERROR=0;
    2f2a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ERROR>
    2f2e:	85 30       	cpi	r24, 0x05	; 5
    2f30:	11 f4       	brne	.+4      	; 0x2f36 <main+0x3a4>
    2f32:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <ERROR>


static signed char modbDecoder(void)
{
	//адрес не наш
	if(MODB_ADDR != eeprom_read_byte(&bki_addr)) return -1;
    2f36:	10 91 7e 05 	lds	r17, 0x057E	; 0x80057e <modb_message>
    2f3a:	86 e0       	ldi	r24, 0x06	; 6
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read_byte>
    2f42:	18 13       	cpse	r17, r24
    2f44:	41 c0       	rjmp	.+130    	; 0x2fc8 <main+0x436>
    2f46:	e0 91 80 05 	lds	r30, 0x0580	; 0x800580 <modb_message+0x2>
    2f4a:	f0 91 81 05 	lds	r31, 0x0581	; 0x800581 <modb_message+0x3>
    2f4e:	fe 27       	eor	r31, r30
    2f50:	ef 27       	eor	r30, r31
    2f52:	fe 27       	eor	r31, r30
    2f54:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <modb_message+0x4>
    2f58:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <modb_message+0x5>
    2f5c:	98 27       	eor	r25, r24
    2f5e:	89 27       	eor	r24, r25
    2f60:	98 27       	eor	r25, r24
	//неправильный регистр или их кол-во
	if((MODB_START_REG+MODB_QUANT_REG) > MAX_QUANT_MODB_REG) return modbErr(ILLEGAL_DATA_ADDR);
    2f62:	af 01       	movw	r20, r30
    2f64:	48 0f       	add	r20, r24
    2f66:	59 1f       	adc	r21, r25
    2f68:	20 91 7f 05 	lds	r18, 0x057F	; 0x80057f <modb_message+0x1>
    2f6c:	49 30       	cpi	r20, 0x09	; 9
    2f6e:	51 05       	cpc	r21, r1
    2f70:	38 f0       	brcs	.+14     	; 0x2f80 <main+0x3ee>
	return 0;
}

static unsigned char modbErr(unsigned char errCode)
{
	MODB_FUNC |= 0x80;			//установили флаг ошибки
    2f72:	20 68       	ori	r18, 0x80	; 128
    2f74:	20 93 7f 05 	sts	0x057F, r18	; 0x80057f <modb_message+0x1>
	MOBD_ERROR_CODE = errCode; 	//код ошибки
    2f78:	40 92 80 05 	sts	0x0580, r4	; 0x800580 <modb_message+0x2>
static signed char modbDecoder(void)
{
	//адрес не наш
	if(MODB_ADDR != eeprom_read_byte(&bki_addr)) return -1;
	//неправильный регистр или их кол-во
	if((MODB_START_REG+MODB_QUANT_REG) > MAX_QUANT_MODB_REG) return modbErr(ILLEGAL_DATA_ADDR);
    2f7c:	83 e0       	ldi	r24, 0x03	; 3
    2f7e:	26 c0       	rjmp	.+76     	; 0x2fcc <main+0x43a>
	//обрабатываем функцию
	switch(MODB_FUNC)
    2f80:	23 30       	cpi	r18, 0x03	; 3
    2f82:	e9 f4       	brne	.+58     	; 0x2fbe <main+0x42c>
    2f84:	ee 0f       	add	r30, r30
    2f86:	ff 1f       	adc	r31, r31
    2f88:	e4 54       	subi	r30, 0x44	; 68
    2f8a:	fb 4f       	sbci	r31, 0xFB	; 251
    2f8c:	ae e7       	ldi	r26, 0x7E	; 126
    2f8e:	b5 e0       	ldi	r27, 0x05	; 5
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	12 96       	adiw	r26, 0x02	; 2
	{
		unsigned char j=MOBD_START_DATA;
		unsigned int  s=MODB_START_REG;
		unsigned int  e=MODB_QUANT_REG;

		for(unsigned int i=0; i<e; i++)
    2f96:	82 17       	cp	r24, r18
    2f98:	93 07       	cpc	r25, r19
    2f9a:	61 f0       	breq	.+24     	; 0x2fb4 <main+0x422>
		{
			modb_message[j++] =modbusRegisters[i+s] >>8;		//старший байт данных
    2f9c:	40 81       	ld	r20, Z
    2f9e:	51 81       	ldd	r21, Z+1	; 0x01
    2fa0:	32 96       	adiw	r30, 0x02	; 2
    2fa2:	11 96       	adiw	r26, 0x01	; 1
    2fa4:	5c 93       	st	X, r21
    2fa6:	11 97       	sbiw	r26, 0x01	; 1
			modb_message[j++] =modbusRegisters[i+s] & 0x00FF;	//младший
    2fa8:	12 96       	adiw	r26, 0x02	; 2
    2faa:	4c 93       	st	X, r20
    2fac:	12 97       	sbiw	r26, 0x02	; 2
	{
		unsigned char j=MOBD_START_DATA;
		unsigned int  s=MODB_START_REG;
		unsigned int  e=MODB_QUANT_REG;

		for(unsigned int i=0; i<e; i++)
    2fae:	2f 5f       	subi	r18, 0xFF	; 255
    2fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb2:	f0 cf       	rjmp	.-32     	; 0x2f94 <main+0x402>
    2fb4:	88 0f       	add	r24, r24
		{
			modb_message[j++] =modbusRegisters[i+s] >>8;		//старший байт данных
			modb_message[j++] =modbusRegisters[i+s] & 0x00FF;	//младший
		}
		MOBD_BYTE_COUNT = j-MOBD_START_DATA;				//счетчик байт в сообщении
    2fb6:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <modb_message+0x2>
		return MOBD_BYTE_COUNT+3;
    2fba:	8d 5f       	subi	r24, 0xFD	; 253
    2fbc:	07 c0       	rjmp	.+14     	; 0x2fcc <main+0x43a>
	return 0;
}

static unsigned char modbErr(unsigned char errCode)
{
	MODB_FUNC |= 0x80;			//установили флаг ошибки
    2fbe:	20 68       	ori	r18, 0x80	; 128
    2fc0:	20 93 7f 05 	sts	0x057F, r18	; 0x80057f <modb_message+0x1>
	MOBD_ERROR_CODE = errCode; 	//код ошибки
    2fc4:	30 92 80 05 	sts	0x0580, r3	; 0x800580 <modb_message+0x2>
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
				if(ERROR==MODB)ERROR=0;
				if((a=modbDecoder()) >0)putModbMsg(a);
				PORTA |= 1<<5;	//зажигаем СД
    2fc8:	dd 9a       	sbi	0x1b, 5	; 27
			}
		}


	}
    2fca:	04 ce       	rjmp	.-1016   	; 0x2bd4 <main+0x42>
			if(a<1)ERROR=MODB;
			else //удачный прием.сбрасываем ошибки,декодируем,отвечаем
			{
				PORTA &= ~(1<<5);	//гасим СД
				if(ERROR==MODB)ERROR=0;
				if((a=modbDecoder()) >0)putModbMsg(a);
    2fcc:	0e 94 ff 18 	call	0x31fe	; 0x31fe <putModbMsg>
    2fd0:	fb cf       	rjmp	.-10     	; 0x2fc8 <main+0x436>

00002fd2 <__vector_7>:
	clrBit(PORTA,BEEP);
}

//таймер 1ms
ISR(TIMER1_COMPA_vect)
{
    2fd2:	1f 92       	push	r1
    2fd4:	0f 92       	push	r0
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	0f 92       	push	r0
    2fda:	11 24       	eor	r1, r1
    2fdc:	8f 93       	push	r24
    2fde:	9f 93       	push	r25
    2fe0:	af 93       	push	r26
    2fe2:	bf 93       	push	r27
	if(CAN_timeout)CAN_timeout--;
    2fe4:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <CAN_timeout>
    2fe8:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <CAN_timeout+0x1>
    2fec:	89 2b       	or	r24, r25
    2fee:	49 f0       	breq	.+18     	; 0x3002 <__vector_7+0x30>
    2ff0:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <CAN_timeout>
    2ff4:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <CAN_timeout+0x1>
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <CAN_timeout+0x1>
    2ffe:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <CAN_timeout>
	if(SPI_timeout)SPI_timeout--;
    3002:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <SPI_timeout>
    3006:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <SPI_timeout+0x1>
    300a:	89 2b       	or	r24, r25
    300c:	49 f0       	breq	.+18     	; 0x3020 <__vector_7+0x4e>
    300e:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <SPI_timeout>
    3012:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <SPI_timeout+0x1>
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <SPI_timeout+0x1>
    301c:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <SPI_timeout>
	if(menuExit)menuExit--;
    3020:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <menuExit>
    3024:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <menuExit+0x1>
    3028:	89 2b       	or	r24, r25
    302a:	49 f0       	breq	.+18     	; 0x303e <__vector_7+0x6c>
    302c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <menuExit>
    3030:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <menuExit+0x1>
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <menuExit+0x1>
    303a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <menuExit>
	if(pingTime)pingTime--;
    303e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <pingTime>
    3042:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <pingTime+0x1>
    3046:	89 2b       	or	r24, r25
    3048:	49 f0       	breq	.+18     	; 0x305c <__vector_7+0x8a>
    304a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <pingTime>
    304e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <pingTime+0x1>
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <pingTime+0x1>
    3058:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <pingTime>

	if(MODB_timeout)MODB_timeout--;
    305c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MODB_timeout>
    3060:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <MODB_timeout+0x1>
    3064:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <MODB_timeout+0x2>
    3068:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <MODB_timeout+0x3>
    306c:	89 2b       	or	r24, r25
    306e:	8a 2b       	or	r24, r26
    3070:	8b 2b       	or	r24, r27
    3072:	99 f0       	breq	.+38     	; 0x309a <__vector_7+0xc8>
    3074:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MODB_timeout>
    3078:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <MODB_timeout+0x1>
    307c:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <MODB_timeout+0x2>
    3080:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <MODB_timeout+0x3>
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	a1 09       	sbc	r26, r1
    3088:	b1 09       	sbc	r27, r1
    308a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <MODB_timeout>
    308e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <MODB_timeout+0x1>
    3092:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <MODB_timeout+0x2>
    3096:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <MODB_timeout+0x3>

}
    309a:	bf 91       	pop	r27
    309c:	af 91       	pop	r26
    309e:	9f 91       	pop	r25
    30a0:	8f 91       	pop	r24
    30a2:	0f 90       	pop	r0
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	0f 90       	pop	r0
    30a8:	1f 90       	pop	r1
    30aa:	18 95       	reti

000030ac <__vector_13>:

//чтение данный UART
ISR(USART_RXC_vect)
{
    30ac:	1f 92       	push	r1
    30ae:	0f 92       	push	r0
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	0f 92       	push	r0
    30b4:	11 24       	eor	r1, r1
    30b6:	8f 93       	push	r24
    30b8:	9f 93       	push	r25
    30ba:	ef 93       	push	r30
    30bc:	ff 93       	push	r31
//отправить сообщение из модбас буфера. На входе RTU сообщение, передаем его длину
extern void putModbMsg(unsigned char lenght);
//прием символа и помещение в приемный буфер. Вставляется,например в прерывание
inline void read_raw_data(void)
{
	char status=UCSRA,data=UDR;
    30be:	8b b1       	in	r24, 0x0b	; 11
    30c0:	9c b1       	in	r25, 0x0c	; 12

	if ((status & (1<<FE | 1<<PE | 1<<DOR))!=0) {MODB_ERR=MODBHW;return;}
    30c2:	8c 71       	andi	r24, 0x1C	; 28
    30c4:	11 f0       	breq	.+4      	; 0x30ca <__vector_13+0x1e>
    30c6:	83 e0       	ldi	r24, 0x03	; 3
    30c8:	19 c0       	rjmp	.+50     	; 0x30fc <__vector_13+0x50>
	rx_buffer[wr_index]=data;
    30ca:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <wr_index>
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	ea 5a       	subi	r30, 0xAA	; 170
    30d2:	fa 4f       	sbci	r31, 0xFA	; 250
    30d4:	90 83       	st	Z, r25
	if (++wr_index == MODB_MESSSIZE) wr_index=0;
    30d6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <wr_index>
    30da:	8f 5f       	subi	r24, 0xFF	; 255
    30dc:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <wr_index>
    30e0:	88 32       	cpi	r24, 0x28	; 40
    30e2:	11 f4       	brne	.+4      	; 0x30e8 <__vector_13+0x3c>
    30e4:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <wr_index>
	if (++rx_counter == MODB_MESSSIZE) {rx_counter=0;MODB_ERR=MODBBUFOVF;return;}
    30e8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rx_counter>
    30ec:	8f 5f       	subi	r24, 0xFF	; 255
    30ee:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rx_counter>
    30f2:	88 32       	cpi	r24, 0x28	; 40
    30f4:	29 f4       	brne	.+10     	; 0x3100 <__vector_13+0x54>
    30f6:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_counter>
    30fa:	82 e0       	ldi	r24, 0x02	; 2
    30fc:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <MODB_ERR>
	read_raw_data();
}
    3100:	ff 91       	pop	r31
    3102:	ef 91       	pop	r30
    3104:	9f 91       	pop	r25
    3106:	8f 91       	pop	r24
    3108:	0f 90       	pop	r0
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	0f 90       	pop	r0
    310e:	1f 90       	pop	r1
    3110:	18 95       	reti

00003112 <modb_putchar>:
}

//отсылка символа по УАРТу
static void modb_putchar(char c)
{
	while((UCSRA&(1<<UDRE))==0);
    3112:	5d 9b       	sbis	0x0b, 5	; 11
    3114:	fe cf       	rjmp	.-4      	; 0x3112 <modb_putchar>
	UDR=c;
    3116:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<TXC))==0);	//ждем окончания передачи
    3118:	5e 9b       	sbis	0x0b, 6	; 11
    311a:	fe cf       	rjmp	.-4      	; 0x3118 <modb_putchar+0x6>
	UCSRA |= 1<<TXC;			//сброс флага окончания передачи
    311c:	5e 9a       	sbi	0x0b, 6	; 11
    311e:	08 95       	ret

00003120 <CRC.constprop.0>:
  while(lenght--) {lrc+=*data++;}
  return ((unsigned char) (-(signed char) lrc));
}

//вычисление CRC
static unsigned int CRC(volatile unsigned char *data, unsigned char lenght)
    3120:	28 2f       	mov	r18, r24
{
  unsigned int crc=0xFFFF;
    3122:	8f ef       	ldi	r24, 0xFF	; 255
    3124:	9f ef       	ldi	r25, 0xFF	; 255
    3126:	ee e7       	ldi	r30, 0x7E	; 126
    3128:	f5 e0       	ldi	r31, 0x05	; 5

  while(lenght--)
    312a:	21 50       	subi	r18, 0x01	; 1
    312c:	b0 f0       	brcs	.+44     	; 0x315a <CRC.constprop.0+0x3a>
  {
    crc ^= *data++;
    312e:	bf 01       	movw	r22, r30
    3130:	6f 5f       	subi	r22, 0xFF	; 255
    3132:	7f 4f       	sbci	r23, 0xFF	; 255
    3134:	30 81       	ld	r19, Z
    3136:	83 27       	eor	r24, r19
    3138:	38 e0       	ldi	r19, 0x08	; 8
    313a:	ac 01       	movw	r20, r24
    313c:	56 95       	lsr	r21
    313e:	47 95       	ror	r20
    for (unsigned char i = 0; i < 8; ++i)
    {
	if (crc & 1) crc = (crc >> 1) ^ 0xA001;
    3140:	80 ff       	sbrs	r24, 0
    3142:	06 c0       	rjmp	.+12     	; 0x3150 <CRC.constprop.0+0x30>
    3144:	ca 01       	movw	r24, r20
    3146:	e1 e0       	ldi	r30, 0x01	; 1
    3148:	8e 27       	eor	r24, r30
    314a:	e0 ea       	ldi	r30, 0xA0	; 160
    314c:	9e 27       	eor	r25, r30
    314e:	01 c0       	rjmp	.+2      	; 0x3152 <CRC.constprop.0+0x32>
	else crc = (crc >> 1);
    3150:	ca 01       	movw	r24, r20
    3152:	31 50       	subi	r19, 0x01	; 1
  unsigned int crc=0xFFFF;

  while(lenght--)
  {
    crc ^= *data++;
    for (unsigned char i = 0; i < 8; ++i)
    3154:	91 f7       	brne	.-28     	; 0x313a <CRC.constprop.0+0x1a>
{
  unsigned int crc=0xFFFF;

  while(lenght--)
  {
    crc ^= *data++;
    3156:	fb 01       	movw	r30, r22
    3158:	e8 cf       	rjmp	.-48     	; 0x312a <CRC.constprop.0+0xa>
	else crc = (crc >> 1);
    }
  }

  return crc;
}
    315a:	08 95       	ret

0000315c <MODB_init>:
static void modb_putchar(char);


//Инициализация.Выглядит примерно так:  MODB_init(RTU,EVEN,9600);
void MODB_init(unsigned char type,unsigned char parity,unsigned long int speed)
{
    315c:	0f 93       	push	r16
    315e:	1f 93       	push	r17
    3160:	cf 93       	push	r28
    3162:	df 93       	push	r29
    3164:	18 2f       	mov	r17, r24
    3166:	c6 2f       	mov	r28, r22
  unsigned char stop=(parity ==NONE)?(2):(1);	//1 стоп бит если есть паритет; 2 бита если нет паритета
    3168:	66 23       	and	r22, r22
    316a:	11 f0       	breq	.+4      	; 0x3170 <MODB_init+0x14>
    316c:	01 e0       	ldi	r16, 0x01	; 1
    316e:	01 c0       	rjmp	.+2      	; 0x3172 <MODB_init+0x16>
    3170:	02 e0       	ldi	r16, 0x02	; 2
  unsigned char size=(type ==ASCII)?(7):(8);	//если ASCII-7 бит данных MSB, если RTU-8 бит данных MSB
    3172:	11 30       	cpi	r17, 0x01	; 1
    3174:	11 f0       	breq	.+4      	; 0x317a <MODB_init+0x1e>
    3176:	d8 e0       	ldi	r29, 0x08	; 8
    3178:	01 c0       	rjmp	.+2      	; 0x317c <MODB_init+0x20>
    317a:	d7 e0       	ldi	r29, 0x07	; 7
  unsigned int baud=0x7F & (unsigned int)((F_CPU/(16*speed))-1);
    317c:	84 e0       	ldi	r24, 0x04	; 4
    317e:	22 0f       	add	r18, r18
    3180:	33 1f       	adc	r19, r19
    3182:	44 1f       	adc	r20, r20
    3184:	55 1f       	adc	r21, r21
    3186:	8a 95       	dec	r24
    3188:	d1 f7       	brne	.-12     	; 0x317e <MODB_init+0x22>
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	74 e2       	ldi	r23, 0x24	; 36
    318e:	84 ef       	ldi	r24, 0xF4	; 244
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	0e 94 8f 1a 	call	0x351e	; 0x351e <__udivmodsi4>
    3196:	21 50       	subi	r18, 0x01	; 1
    3198:	31 09       	sbc	r19, r1
    319a:	2f 77       	andi	r18, 0x7F	; 127
    319c:	33 27       	eor	r19, r19


  size-=5;
    319e:	d5 50       	subi	r29, 0x05	; 5
  TXENDDR |= 1<<TXENPIN;
    31a0:	8e 9a       	sbi	0x11, 6	; 17
  TXDISABLE;
    31a2:	96 98       	cbi	0x12, 6	; 18

  modb_type=type;
    31a4:	10 93 2f 01 	sts	0x012F, r17	; 0x80012f <modb_type>
  //длительность передачи одного бита == кол-во бит-в-символе(ASCII==10, RTU==11)/скорость
  //таймаут д.б. RTU>=3.5 символа (>38,5 бит), ASCII <=1000ms;
  //RTU = с запасом 40 бит=> 40/speed ==пауза, сек *1000 ==ms
//  val_timeout=(type ==ASCII)?(1000000):(40000000/speed);
  val_timeout=(type ==ASCII)?(1000):(2);	//при скоростях больше 19200 таймаут можно принять 2мс
    31a8:	11 30       	cpi	r17, 0x01	; 1
    31aa:	29 f0       	breq	.+10     	; 0x31b6 <MODB_init+0x5a>
    31ac:	82 e0       	ldi	r24, 0x02	; 2
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	a0 e0       	ldi	r26, 0x00	; 0
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	04 c0       	rjmp	.+8      	; 0x31be <MODB_init+0x62>
    31b6:	88 ee       	ldi	r24, 0xE8	; 232
    31b8:	93 e0       	ldi	r25, 0x03	; 3
    31ba:	a0 e0       	ldi	r26, 0x00	; 0
    31bc:	b0 e0       	ldi	r27, 0x00	; 0
    31be:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <val_timeout>
    31c2:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <val_timeout+0x1>
    31c6:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <val_timeout+0x2>
    31ca:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <val_timeout+0x3>

  //нога ТХ
  //When the USART Transmitter is enabled, this pin is configured as an output regardless of the value of DDD1.
  PORTD |= (1<<PORTD1);//PORTD.1=1 выход с "1"
    31ce:	91 9a       	sbi	0x12, 1	; 18
  DDRD |= (1<<DDD1);  //DDRD.1=1 выход
    31d0:	89 9a       	sbi	0x11, 1	; 17

  //нога RX
  PORTD |= (1<<PORTD0);//PORTD.1=1 вход с притяжкой
    31d2:	90 9a       	sbi	0x12, 0	; 18
  DDRD &= ~(1<<DDD0);  //DDD.1=0 вход
    31d4:	88 98       	cbi	0x11, 0	; 17

  UCSRA=0x00;
    31d6:	1b b8       	out	0x0b, r1	; 11
  //(7)вкл.прер.по приему, (6)откл.прер.по передаче, (5)откл.прер.по опустошению UDR, (4)вкл.передатчик и (3)приемник, (2)9бит откл.
  UCSRB=0b10011000;
    31d8:	88 e9       	ldi	r24, 0x98	; 152
    31da:	8a b9       	out	0x0a, r24	; 10
  //(7)?, (6)асинхронный режим, (5:4)четность(none), (3)1стоп, (2:1)8бит, (0)=0
  //	UCSRC=0b10000110;

  UCSRC=(1<<7) | parity | ((stop==2)?(1):(0) << 3) | (size<<1);
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	02 30       	cpi	r16, 0x02	; 2
    31e0:	09 f0       	breq	.+2      	; 0x31e4 <MODB_init+0x88>
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	c0 68       	ori	r28, 0x80	; 128
    31e6:	8c 2b       	or	r24, r28
    31e8:	cd 2f       	mov	r28, r29
    31ea:	cc 0f       	add	r28, r28
    31ec:	c8 2b       	or	r28, r24
    31ee:	c0 bd       	out	0x20, r28	; 32
//	//(7)?, (6)асинхронный режим, (5:4)четность(EVEN), (3)1стоп, (2:1)8бит, (0)=0
//	UCSRC=0b10100110;
  UBRRH=baud << 8;
    31f0:	10 bc       	out	0x20, r1	; 32
  UBRRL=baud & 0x00FF;
    31f2:	29 b9       	out	0x09, r18	; 9
//	//9600 bps
//	UBRRH=0x00;
//	UBRRL=0x67;

}
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	1f 91       	pop	r17
    31fa:	0f 91       	pop	r16
    31fc:	08 95       	ret

000031fe <putModbMsg>:

//отправить сообщение из модбас буфера. На входе RTU сообщение, передаем его длину
void putModbMsg(unsigned char lenght)
{
    31fe:	ef 92       	push	r14
    3200:	ff 92       	push	r15
    3202:	0f 93       	push	r16
    3204:	1f 93       	push	r17
    3206:	cf 93       	push	r28
    3208:	df 93       	push	r29
    320a:	c8 2f       	mov	r28, r24
  switch(modb_type)
    320c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <modb_type>
    3210:	88 23       	and	r24, r24
    3212:	41 f0       	breq	.+16     	; 0x3224 <putModbMsg+0x26>
    3214:	81 30       	cpi	r24, 0x01	; 1
    3216:	09 f0       	breq	.+2      	; 0x321a <putModbMsg+0x1c>
    3218:	8e c0       	rjmp	.+284    	; 0x3336 <putModbMsg+0x138>
    321a:	9c 2f       	mov	r25, r28
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	ee e7       	ldi	r30, 0x7E	; 126
    3220:	f5 e0       	ldi	r31, 0x05	; 5
    3222:	35 c0       	rjmp	.+106    	; 0x328e <putModbMsg+0x90>
  {
  case(RTU):
    {
    unsigned int crc=CRC(modb_message,lenght);
    3224:	8c 2f       	mov	r24, r28
    3226:	0e 94 90 18 	call	0x3120	; 0x3120 <CRC.constprop.0>
    322a:	f8 2e       	mov	r15, r24
    322c:	d9 2f       	mov	r29, r25
    unsigned char index=0;

    TXENABLE;
    322e:	96 9a       	sbi	0x12, 6	; 18
    3230:	0e e7       	ldi	r16, 0x7E	; 126
    3232:	15 e0       	ldi	r17, 0x05	; 5
    while(lenght--) modb_putchar(modb_message[index++]);
    3234:	cc 23       	and	r28, r28
    3236:	39 f0       	breq	.+14     	; 0x3246 <putModbMsg+0x48>
    3238:	f8 01       	movw	r30, r16
    323a:	81 91       	ld	r24, Z+
    323c:	8f 01       	movw	r16, r30
    323e:	0e 94 89 18 	call	0x3112	; 0x3112 <modb_putchar>
    3242:	c1 50       	subi	r28, 0x01	; 1
    3244:	f7 cf       	rjmp	.-18     	; 0x3234 <putModbMsg+0x36>
    modb_putchar(crc & 0x00FF);	//младшим байтом вперед
    3246:	8f 2d       	mov	r24, r15
    3248:	0e 94 89 18 	call	0x3112	; 0x3112 <modb_putchar>
    modb_putchar(crc>>8);
    324c:	8d 2f       	mov	r24, r29
    324e:	0e 94 89 18 	call	0x3112	; 0x3112 <modb_putchar>
    TXDISABLE;
    3252:	96 98       	cbi	0x12, 6	; 18
    MODB_timeout=val_timeout;
    3254:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <val_timeout>
    3258:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <val_timeout+0x1>
    325c:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <val_timeout+0x2>
    3260:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <val_timeout+0x3>
    3264:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <MODB_timeout>
    3268:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <MODB_timeout+0x1>
    326c:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <MODB_timeout+0x2>
    3270:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <MODB_timeout+0x3>
    while(MODB_timeout);
    3274:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MODB_timeout>
    3278:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <MODB_timeout+0x1>
    327c:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <MODB_timeout+0x2>
    3280:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <MODB_timeout+0x3>
    3284:	89 2b       	or	r24, r25
    3286:	8a 2b       	or	r24, r26
    3288:	8b 2b       	or	r24, r27
    328a:	a1 f7       	brne	.-24     	; 0x3274 <putModbMsg+0x76>
    328c:	54 c0       	rjmp	.+168    	; 0x3336 <putModbMsg+0x138>
//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;

  while(lenght--) {lrc+=*data++;}
    328e:	91 50       	subi	r25, 0x01	; 1
    3290:	20 f0       	brcs	.+8      	; 0x329a <putModbMsg+0x9c>
    3292:	20 81       	ld	r18, Z
    3294:	82 0f       	add	r24, r18
    3296:	31 96       	adiw	r30, 0x01	; 1
    3298:	fa cf       	rjmp	.-12     	; 0x328e <putModbMsg+0x90>
  return ((unsigned char) (-(signed char) lrc));
    329a:	d8 2f       	mov	r29, r24
    329c:	d1 95       	neg	r29
  case(ASCII):
    {
    unsigned char lrc=LRC(modb_message,lenght);
    unsigned char index=0;

    TXENABLE;
    329e:	96 9a       	sbi	0x12, 6	; 18
    32a0:	ff ef       	ldi	r31, 0xFF	; 255
    32a2:	29 ef       	ldi	r18, 0xF9	; 249
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	f1 50       	subi	r31, 0x01	; 1
    32a8:	20 40       	sbci	r18, 0x00	; 0
    32aa:	80 40       	sbci	r24, 0x00	; 0
    32ac:	e1 f7       	brne	.-8      	; 0x32a6 <putModbMsg+0xa8>
    32ae:	00 c0       	rjmp	.+0      	; 0x32b0 <putModbMsg+0xb2>
    32b0:	00 00       	nop
    _delay_ms(20);
    modb_putchar(':');
    32b2:	8a e3       	ldi	r24, 0x3A	; 58
    32b4:	0e 94 89 18 	call	0x3112	; 0x3112 <modb_putchar>
    32b8:	0e e7       	ldi	r16, 0x7E	; 126
    32ba:	15 e0       	ldi	r17, 0x05	; 5

    while(lenght--)
    32bc:	cc 23       	and	r28, r28
    32be:	f1 f0       	breq	.+60     	; 0x32fc <putModbMsg+0xfe>
    32c0:	78 01       	movw	r14, r16
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
    32c2:	f8 01       	movw	r30, r16
    32c4:	80 81       	ld	r24, Z
    32c6:	82 95       	swap	r24
    32c8:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    32ca:	90 e3       	ldi	r25, 0x30	; 48
    32cc:	98 0f       	add	r25, r24
  if(num>57)return num+7;
    32ce:	9a 33       	cpi	r25, 0x3A	; 58
    32d0:	10 f0       	brcs	.+4      	; 0x32d6 <putModbMsg+0xd8>
    32d2:	89 5c       	subi	r24, 0xC9	; 201
    32d4:	01 c0       	rjmp	.+2      	; 0x32d8 <putModbMsg+0xda>
    32d6:	89 2f       	mov	r24, r25
    _delay_ms(20);
    modb_putchar(':');

    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
    32d8:	0e 94 89 18 	call	0x3112	; 0x3112 <modb_putchar>
    32dc:	0f 5f       	subi	r16, 0xFF	; 255
    32de:	1f 4f       	sbci	r17, 0xFF	; 255
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
    32e0:	f7 01       	movw	r30, r14
    32e2:	80 81       	ld	r24, Z
    32e4:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    32e6:	90 e3       	ldi	r25, 0x30	; 48
    32e8:	98 0f       	add	r25, r24
  if(num>57)return num+7;
    32ea:	9a 33       	cpi	r25, 0x3A	; 58
    32ec:	10 f0       	brcs	.+4      	; 0x32f2 <putModbMsg+0xf4>
    32ee:	89 5c       	subi	r24, 0xC9	; 201
    32f0:	01 c0       	rjmp	.+2      	; 0x32f4 <putModbMsg+0xf6>
    32f2:	89 2f       	mov	r24, r25
    modb_putchar(':');

    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
    32f4:	0e 94 89 18 	call	0x3112	; 0x3112 <modb_putchar>
    32f8:	c1 50       	subi	r28, 0x01	; 1
    32fa:	e0 cf       	rjmp	.-64     	; 0x32bc <putModbMsg+0xbe>
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    32fc:	9d 2f       	mov	r25, r29
    32fe:	92 95       	swap	r25
    3300:	9f 70       	andi	r25, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    3302:	80 e3       	ldi	r24, 0x30	; 48
    3304:	89 0f       	add	r24, r25
  if(num>57)return num+7;
    3306:	8a 33       	cpi	r24, 0x3A	; 58
    3308:	10 f0       	brcs	.+4      	; 0x330e <putModbMsg+0x110>
    330a:	87 e3       	ldi	r24, 0x37	; 55
    330c:	89 0f       	add	r24, r25
    while(lenght--)
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    330e:	0e 94 89 18 	call	0x3112	; 0x3112 <modb_putchar>
    modb_putchar( dig_to_char(lrc& 0x0F) );
    3312:	8d 2f       	mov	r24, r29
    3314:	8f 70       	andi	r24, 0x0F	; 15
}

//преобразование числа в символ
static inline char dig_to_char(char num)
{
  num+='0'; //0=48
    3316:	d0 e3       	ldi	r29, 0x30	; 48
    3318:	d8 0f       	add	r29, r24
  if(num>57)return num+7;
    331a:	da 33       	cpi	r29, 0x3A	; 58
    331c:	10 f0       	brcs	.+4      	; 0x3322 <putModbMsg+0x124>
    331e:	89 5c       	subi	r24, 0xC9	; 201
    3320:	01 c0       	rjmp	.+2      	; 0x3324 <putModbMsg+0x126>
    3322:	8d 2f       	mov	r24, r29
      {
    	modb_putchar(dig_to_char(modb_message[index]>> 4));
		modb_putchar(dig_to_char(modb_message[index++]& 0x0F));
      }
    modb_putchar( dig_to_char(lrc>> 4) );
    modb_putchar( dig_to_char(lrc& 0x0F) );
    3324:	0e 94 89 18 	call	0x3112	; 0x3112 <modb_putchar>
    modb_putchar(0x0D);
    3328:	8d e0       	ldi	r24, 0x0D	; 13
    332a:	0e 94 89 18 	call	0x3112	; 0x3112 <modb_putchar>
    modb_putchar(0x0A);
    332e:	8a e0       	ldi	r24, 0x0A	; 10
    3330:	0e 94 89 18 	call	0x3112	; 0x3112 <modb_putchar>
    TXDISABLE;
    3334:	96 98       	cbi	0x12, 6	; 18
    }
   break;
  }
}
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	1f 91       	pop	r17
    333c:	0f 91       	pop	r16
    333e:	ff 90       	pop	r15
    3340:	ef 90       	pop	r14
    3342:	08 95       	ret

00003344 <getModbMsg>:

//получить сообщение из приемного буфера УАРТа. В итоге-в буфере RTU сообщение,вернули длину полученного сообщения или -1 (ошибка)
signed char getModbMsg(void)
{
    3344:	8f 92       	push	r8
    3346:	9f 92       	push	r9
    3348:	af 92       	push	r10
    334a:	bf 92       	push	r11
    334c:	cf 92       	push	r12
    334e:	df 92       	push	r13
    3350:	ef 92       	push	r14
    3352:	ff 92       	push	r15
    3354:	0f 93       	push	r16
    3356:	1f 93       	push	r17
    3358:	cf 93       	push	r28
	unsigned char flag_tout=0,index=0,pass=0;

	while(1)																		//пока не дочитаем до конца сообщения или до ошибки крутимся тут
	{
		MODB_timeout=val_timeout;
    335a:	c0 90 2b 01 	lds	r12, 0x012B	; 0x80012b <val_timeout>
    335e:	d0 90 2c 01 	lds	r13, 0x012C	; 0x80012c <val_timeout+0x1>
    3362:	e0 90 2d 01 	lds	r14, 0x012D	; 0x80012d <val_timeout+0x2>
    3366:	f0 90 2e 01 	lds	r15, 0x012E	; 0x80012e <val_timeout+0x3>
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    336a:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <modb_type>
    336e:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <rd_index>
}

//получить сообщение из приемного буфера УАРТа. В итоге-в буфере RTU сообщение,вернули длину полученного сообщения или -1 (ошибка)
signed char getModbMsg(void)
{
	unsigned char flag_tout=0,index=0,pass=0;
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	80 e0       	ldi	r24, 0x00	; 0

	while(1)																		//пока не дочитаем до конца сообщения или до ошибки крутимся тут
	{
		MODB_timeout=val_timeout;
    3376:	c0 92 32 01 	sts	0x0132, r12	; 0x800132 <MODB_timeout>
    337a:	d0 92 33 01 	sts	0x0133, r13	; 0x800133 <MODB_timeout+0x1>
    337e:	e0 92 34 01 	sts	0x0134, r14	; 0x800134 <MODB_timeout+0x2>
    3382:	f0 92 35 01 	sts	0x0135, r15	; 0x800135 <MODB_timeout+0x3>
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут
    3386:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <rx_counter>
    338a:	31 11       	cpse	r19, r1
    338c:	0d c0       	rjmp	.+26     	; 0x33a8 <getModbMsg+0x64>
    338e:	80 90 32 01 	lds	r8, 0x0132	; 0x800132 <MODB_timeout>
    3392:	90 90 33 01 	lds	r9, 0x0133	; 0x800133 <MODB_timeout+0x1>
    3396:	a0 90 34 01 	lds	r10, 0x0134	; 0x800134 <MODB_timeout+0x2>
    339a:	b0 90 35 01 	lds	r11, 0x0135	; 0x800135 <MODB_timeout+0x3>
    339e:	89 28       	or	r8, r9
    33a0:	8a 28       	or	r8, r10
    33a2:	8b 28       	or	r8, r11
    33a4:	81 f7       	brne	.-32     	; 0x3386 <getModbMsg+0x42>
    33a6:	34 c0       	rjmp	.+104    	; 0x3410 <getModbMsg+0xcc>
    33a8:	e9 2f       	mov	r30, r25
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	9f 5f       	subi	r25, 0xFF	; 255

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    33ae:	61 11       	cpse	r22, r1
    33b0:	0a c0       	rjmp	.+20     	; 0x33c6 <getModbMsg+0x82>
			{
				unsigned int crc= modb_message[index-1] <<8 | modb_message[index-2];//полученная CRC
				if(crc !=CRC(modb_message,index-2))	{MODB_ERR=MODBXRC;return -1;}	//сравниваем с фактической
				return index-2;														//длина сообщения минус 2 символа CRC
			}
			modb_message[index++]=rx_buffer[rd_index];								//если не таймаут принимаем след. символ
    33b2:	ea 5a       	subi	r30, 0xAA	; 170
    33b4:	fa 4f       	sbci	r31, 0xFA	; 250
    33b6:	30 81       	ld	r19, Z
    33b8:	e8 2f       	mov	r30, r24
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	e2 58       	subi	r30, 0x82	; 130
    33be:	fa 4f       	sbci	r31, 0xFA	; 250
    33c0:	30 83       	st	Z, r19
    33c2:	8f 5f       	subi	r24, 0xFF	; 255
    33c4:	1a c0       	rjmp	.+52     	; 0x33fa <getModbMsg+0xb6>

//////////////////////////////////если работаем в режиме ASCII
		else
		{
			if(flag_tout) {MODB_ERR=MODBTOUT;return -1;}							//таймаут в случае ASCII это ошибка
			switch(rx_buffer[rd_index])
    33c6:	ea 5a       	subi	r30, 0xAA	; 170
    33c8:	fa 4f       	sbci	r31, 0xFA	; 250
    33ca:	30 81       	ld	r19, Z
    33cc:	3d 30       	cpi	r19, 0x0D	; 13
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <getModbMsg+0x8e>
    33d0:	3c c0       	rjmp	.+120    	; 0x344a <getModbMsg+0x106>
    33d2:	3a 33       	cpi	r19, 0x3A	; 58
    33d4:	91 f0       	breq	.+36     	; 0x33fa <getModbMsg+0xb6>
    33d6:	48 2f       	mov	r20, r24
    33d8:	50 e0       	ldi	r21, 0x00	; 0
					return index-1;													// а возвращем длину без учета ЛРЦ
				}
				break;
				default:															//сборка ASCII-to-RTU
				{
					if(pass==0)														//первый проход- в буфер сообщения пишем первую тетраду
    33da:	21 11       	cpse	r18, r1
    33dc:	58 c0       	rjmp	.+176    	; 0x348e <getModbMsg+0x14a>
					{
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
    33de:	20 81       	ld	r18, Z
}

//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
    33e0:	30 ed       	ldi	r19, 0xD0	; 208
    33e2:	32 0f       	add	r19, r18
  if(sym>41) return sym-39;	/* a .. f */
    33e4:	3a 32       	cpi	r19, 0x2A	; 42
    33e6:	08 f4       	brcc	.+2      	; 0x33ea <getModbMsg+0xa6>
    33e8:	4c c0       	rjmp	.+152    	; 0x3482 <getModbMsg+0x13e>
    33ea:	27 55       	subi	r18, 0x57	; 87
				break;
				default:															//сборка ASCII-to-RTU
				{
					if(pass==0)														//первый проход- в буфер сообщения пишем первую тетраду
					{
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
    33ec:	fa 01       	movw	r30, r20
    33ee:	e2 58       	subi	r30, 0x82	; 130
    33f0:	fa 4f       	sbci	r31, 0xFA	; 250
    33f2:	22 95       	swap	r18
    33f4:	20 7f       	andi	r18, 0xF0	; 240
    33f6:	20 83       	st	Z, r18
						pass=1;
    33f8:	21 e0       	ldi	r18, 0x01	; 1
				}
				break;
			}
		}

		if (++rd_index == MODB_MESSSIZE) rd_index=0;
    33fa:	98 32       	cpi	r25, 0x28	; 40
    33fc:	09 f4       	brne	.+2      	; 0x3400 <getModbMsg+0xbc>
    33fe:	90 e0       	ldi	r25, 0x00	; 0
		asm("cli");
    3400:	f8 94       	cli
		--rx_counter;
    3402:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <rx_counter>
    3406:	31 50       	subi	r19, 0x01	; 1
    3408:	30 93 30 01 	sts	0x0130, r19	; 0x800130 <rx_counter>
		asm("sei");
    340c:	78 94       	sei
	}
    340e:	b3 cf       	rjmp	.-154    	; 0x3376 <getModbMsg+0x32>
	{
		MODB_timeout=val_timeout;
		while (rx_counter==0)	if(MODB_timeout==0){flag_tout=1;break;} 			//ждем символ или таймаут

//////////////////////////////////если работаем в режиме RTU
		if(modb_type==RTU)
    3410:	61 11       	cpse	r22, r1
    3412:	53 c0       	rjmp	.+166    	; 0x34ba <getModbMsg+0x176>
    3414:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <rd_index>
		{
			if(flag_tout)															//таймаут в случае RTU -это конец сообщения.Проверяем CRC
			{
				unsigned int crc= modb_message[index-1] <<8 | modb_message[index-2];//полученная CRC
    3418:	28 2f       	mov	r18, r24
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	22 58       	subi	r18, 0x82	; 130
    341e:	3a 4f       	sbci	r19, 0xFA	; 250
    3420:	f9 01       	movw	r30, r18
    3422:	31 97       	sbiw	r30, 0x01	; 1
    3424:	00 81       	ld	r16, Z
    3426:	10 e0       	ldi	r17, 0x00	; 0
    3428:	10 2f       	mov	r17, r16
    342a:	00 27       	eor	r16, r16
    342c:	31 97       	sbiw	r30, 0x01	; 1
    342e:	90 81       	ld	r25, Z
    3430:	09 2b       	or	r16, r25
				if(crc !=CRC(modb_message,index-2))	{MODB_ERR=MODBXRC;return -1;}	//сравниваем с фактической
    3432:	ce ef       	ldi	r28, 0xFE	; 254
    3434:	c8 0f       	add	r28, r24
    3436:	8c 2f       	mov	r24, r28
    3438:	0e 94 90 18 	call	0x3120	; 0x3120 <CRC.constprop.0>
    343c:	08 17       	cp	r16, r24
    343e:	19 07       	cpc	r17, r25
    3440:	11 f4       	brne	.+4      	; 0x3446 <getModbMsg+0x102>
				return index-2;														//длина сообщения минус 2 символа CRC
    3442:	8c 2f       	mov	r24, r28
    3444:	40 c0       	rjmp	.+128    	; 0x34c6 <getModbMsg+0x182>
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
					if(LRC(modb_message,index) !=0){MODB_ERR=MODBXRC;return -1;}	//для проверки ЛРЦ посылаем сообщение без ':' но с ЛРЦ
    3446:	85 e0       	ldi	r24, 0x05	; 5
    3448:	3b c0       	rjmp	.+118    	; 0x34c0 <getModbMsg+0x17c>
					;
				}
				break;
				case(0x0D):															//конец сообщения. Проверяем LRC и вываливаемся
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
    344a:	98 32       	cpi	r25, 0x28	; 40
    344c:	19 f0       	breq	.+6      	; 0x3454 <getModbMsg+0x110>
    344e:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <rd_index>
    3452:	02 c0       	rjmp	.+4      	; 0x3458 <getModbMsg+0x114>
    3454:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <rd_index>
					asm("cli");
    3458:	f8 94       	cli
					--rx_counter;
    345a:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <rx_counter>
    345e:	91 50       	subi	r25, 0x01	; 1
    3460:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <rx_counter>
					asm("sei");
    3464:	78 94       	sei
    3466:	28 2f       	mov	r18, r24
}

//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;
    3468:	90 e0       	ldi	r25, 0x00	; 0
				case(0x0D):															//конец сообщения. Проверяем LRC и вываливаемся
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
    346a:	ee e7       	ldi	r30, 0x7E	; 126
    346c:	f5 e0       	ldi	r31, 0x05	; 5
//вычисление LRC
static unsigned char LRC(volatile unsigned char *data, unsigned char lenght)
{
  unsigned char lrc = 0;

  while(lenght--) {lrc+=*data++;}
    346e:	21 50       	subi	r18, 0x01	; 1
    3470:	20 f0       	brcs	.+8      	; 0x347a <getModbMsg+0x136>
    3472:	30 81       	ld	r19, Z
    3474:	93 0f       	add	r25, r19
    3476:	31 96       	adiw	r30, 0x01	; 1
    3478:	fa cf       	rjmp	.-12     	; 0x346e <getModbMsg+0x12a>
				{
					if (++rd_index == MODB_MESSSIZE) rd_index=0;					//читаем 0x0A
					asm("cli");
					--rx_counter;
					asm("sei");
					if(LRC(modb_message,index) !=0){MODB_ERR=MODBXRC;return -1;}	//для проверки ЛРЦ посылаем сообщение без ':' но с ЛРЦ
    347a:	91 11       	cpse	r25, r1
    347c:	e4 cf       	rjmp	.-56     	; 0x3446 <getModbMsg+0x102>
					return index-1;													// а возвращем длину без учета ЛРЦ
    347e:	81 50       	subi	r24, 0x01	; 1
    3480:	22 c0       	rjmp	.+68     	; 0x34c6 <getModbMsg+0x182>
//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
  if(sym>41) return sym-39;	/* a .. f */
  if(sym>9) return sym-7;   	/* A .. F */
    3482:	3a 30       	cpi	r19, 0x0A	; 10
    3484:	10 f0       	brcs	.+4      	; 0x348a <getModbMsg+0x146>
    3486:	27 53       	subi	r18, 0x37	; 55
    3488:	b1 cf       	rjmp	.-158    	; 0x33ec <getModbMsg+0xa8>
    348a:	23 2f       	mov	r18, r19
    348c:	af cf       	rjmp	.-162    	; 0x33ec <getModbMsg+0xa8>
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
						pass=1;
					}
					else															//второй проход- в буфер сообщения пишем вторую тетраду
					{
						modb_message[index++] |= char_to_dig(rx_buffer[rd_index]) & 0x0F;
    348e:	20 81       	ld	r18, Z
}

//преобразование символа в число
static inline char char_to_dig(char sym)
{
  sym-='0';
    3490:	30 ed       	ldi	r19, 0xD0	; 208
    3492:	32 0f       	add	r19, r18
  if(sym>41) return sym-39;	/* a .. f */
    3494:	3a 32       	cpi	r19, 0x2A	; 42
    3496:	10 f0       	brcs	.+4      	; 0x349c <getModbMsg+0x158>
    3498:	27 55       	subi	r18, 0x57	; 87
    349a:	05 c0       	rjmp	.+10     	; 0x34a6 <getModbMsg+0x162>
  if(sym>9) return sym-7;   	/* A .. F */
    349c:	3a 30       	cpi	r19, 0x0A	; 10
    349e:	10 f0       	brcs	.+4      	; 0x34a4 <getModbMsg+0x160>
    34a0:	27 53       	subi	r18, 0x37	; 55
    34a2:	01 c0       	rjmp	.+2      	; 0x34a6 <getModbMsg+0x162>
    34a4:	23 2f       	mov	r18, r19
						modb_message[index] = char_to_dig(rx_buffer[rd_index]) << 4;
						pass=1;
					}
					else															//второй проход- в буфер сообщения пишем вторую тетраду
					{
						modb_message[index++] |= char_to_dig(rx_buffer[rd_index]) & 0x0F;
    34a6:	fa 01       	movw	r30, r20
    34a8:	e2 58       	subi	r30, 0x82	; 130
    34aa:	fa 4f       	sbci	r31, 0xFA	; 250
    34ac:	2f 70       	andi	r18, 0x0F	; 15
    34ae:	30 81       	ld	r19, Z
    34b0:	23 2b       	or	r18, r19
    34b2:	20 83       	st	Z, r18
    34b4:	8f 5f       	subi	r24, 0xFF	; 255
						pass=0;
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	a0 cf       	rjmp	.-192    	; 0x33fa <getModbMsg+0xb6>
    34ba:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <rd_index>
		}

//////////////////////////////////если работаем в режиме ASCII
		else
		{
			if(flag_tout) {MODB_ERR=MODBTOUT;return -1;}							//таймаут в случае ASCII это ошибка
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <MODB_ERR>
    34c4:	8f ef       	ldi	r24, 0xFF	; 255
		asm("cli");
		--rx_counter;
		asm("sei");
	}
	return -1;	//что то ваще пошло не так
}
    34c6:	cf 91       	pop	r28
    34c8:	1f 91       	pop	r17
    34ca:	0f 91       	pop	r16
    34cc:	ff 90       	pop	r15
    34ce:	ef 90       	pop	r14
    34d0:	df 90       	pop	r13
    34d2:	cf 90       	pop	r12
    34d4:	bf 90       	pop	r11
    34d6:	af 90       	pop	r10
    34d8:	9f 90       	pop	r9
    34da:	8f 90       	pop	r8
    34dc:	08 95       	ret

000034de <__udivmodqi4>:
    34de:	99 1b       	sub	r25, r25
    34e0:	79 e0       	ldi	r23, 0x09	; 9
    34e2:	04 c0       	rjmp	.+8      	; 0x34ec <__udivmodqi4_ep>

000034e4 <__udivmodqi4_loop>:
    34e4:	99 1f       	adc	r25, r25
    34e6:	96 17       	cp	r25, r22
    34e8:	08 f0       	brcs	.+2      	; 0x34ec <__udivmodqi4_ep>
    34ea:	96 1b       	sub	r25, r22

000034ec <__udivmodqi4_ep>:
    34ec:	88 1f       	adc	r24, r24
    34ee:	7a 95       	dec	r23
    34f0:	c9 f7       	brne	.-14     	; 0x34e4 <__udivmodqi4_loop>
    34f2:	80 95       	com	r24
    34f4:	08 95       	ret

000034f6 <__divmodhi4>:
    34f6:	97 fb       	bst	r25, 7
    34f8:	07 2e       	mov	r0, r23
    34fa:	16 f4       	brtc	.+4      	; 0x3500 <__divmodhi4+0xa>
    34fc:	00 94       	com	r0
    34fe:	07 d0       	rcall	.+14     	; 0x350e <__divmodhi4_neg1>
    3500:	77 fd       	sbrc	r23, 7
    3502:	09 d0       	rcall	.+18     	; 0x3516 <__divmodhi4_neg2>
    3504:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__udivmodhi4>
    3508:	07 fc       	sbrc	r0, 7
    350a:	05 d0       	rcall	.+10     	; 0x3516 <__divmodhi4_neg2>
    350c:	3e f4       	brtc	.+14     	; 0x351c <__divmodhi4_exit>

0000350e <__divmodhi4_neg1>:
    350e:	90 95       	com	r25
    3510:	81 95       	neg	r24
    3512:	9f 4f       	sbci	r25, 0xFF	; 255
    3514:	08 95       	ret

00003516 <__divmodhi4_neg2>:
    3516:	70 95       	com	r23
    3518:	61 95       	neg	r22
    351a:	7f 4f       	sbci	r23, 0xFF	; 255

0000351c <__divmodhi4_exit>:
    351c:	08 95       	ret

0000351e <__udivmodsi4>:
    351e:	a1 e2       	ldi	r26, 0x21	; 33
    3520:	1a 2e       	mov	r1, r26
    3522:	aa 1b       	sub	r26, r26
    3524:	bb 1b       	sub	r27, r27
    3526:	fd 01       	movw	r30, r26
    3528:	0d c0       	rjmp	.+26     	; 0x3544 <__udivmodsi4_ep>

0000352a <__udivmodsi4_loop>:
    352a:	aa 1f       	adc	r26, r26
    352c:	bb 1f       	adc	r27, r27
    352e:	ee 1f       	adc	r30, r30
    3530:	ff 1f       	adc	r31, r31
    3532:	a2 17       	cp	r26, r18
    3534:	b3 07       	cpc	r27, r19
    3536:	e4 07       	cpc	r30, r20
    3538:	f5 07       	cpc	r31, r21
    353a:	20 f0       	brcs	.+8      	; 0x3544 <__udivmodsi4_ep>
    353c:	a2 1b       	sub	r26, r18
    353e:	b3 0b       	sbc	r27, r19
    3540:	e4 0b       	sbc	r30, r20
    3542:	f5 0b       	sbc	r31, r21

00003544 <__udivmodsi4_ep>:
    3544:	66 1f       	adc	r22, r22
    3546:	77 1f       	adc	r23, r23
    3548:	88 1f       	adc	r24, r24
    354a:	99 1f       	adc	r25, r25
    354c:	1a 94       	dec	r1
    354e:	69 f7       	brne	.-38     	; 0x352a <__udivmodsi4_loop>
    3550:	60 95       	com	r22
    3552:	70 95       	com	r23
    3554:	80 95       	com	r24
    3556:	90 95       	com	r25
    3558:	9b 01       	movw	r18, r22
    355a:	ac 01       	movw	r20, r24
    355c:	bd 01       	movw	r22, r26
    355e:	cf 01       	movw	r24, r30
    3560:	08 95       	ret

00003562 <__udivmodhi4>:
    3562:	aa 1b       	sub	r26, r26
    3564:	bb 1b       	sub	r27, r27
    3566:	51 e1       	ldi	r21, 0x11	; 17
    3568:	07 c0       	rjmp	.+14     	; 0x3578 <__udivmodhi4_ep>

0000356a <__udivmodhi4_loop>:
    356a:	aa 1f       	adc	r26, r26
    356c:	bb 1f       	adc	r27, r27
    356e:	a6 17       	cp	r26, r22
    3570:	b7 07       	cpc	r27, r23
    3572:	10 f0       	brcs	.+4      	; 0x3578 <__udivmodhi4_ep>
    3574:	a6 1b       	sub	r26, r22
    3576:	b7 0b       	sbc	r27, r23

00003578 <__udivmodhi4_ep>:
    3578:	88 1f       	adc	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	5a 95       	dec	r21
    357e:	a9 f7       	brne	.-22     	; 0x356a <__udivmodhi4_loop>
    3580:	80 95       	com	r24
    3582:	90 95       	com	r25
    3584:	bc 01       	movw	r22, r24
    3586:	cd 01       	movw	r24, r26
    3588:	08 95       	ret

0000358a <strcat_P>:
    358a:	fb 01       	movw	r30, r22
    358c:	dc 01       	movw	r26, r24
    358e:	0d 90       	ld	r0, X+
    3590:	00 20       	and	r0, r0
    3592:	e9 f7       	brne	.-6      	; 0x358e <strcat_P+0x4>
    3594:	11 97       	sbiw	r26, 0x01	; 1
    3596:	05 90       	lpm	r0, Z+
    3598:	0d 92       	st	X+, r0
    359a:	00 20       	and	r0, r0
    359c:	e1 f7       	brne	.-8      	; 0x3596 <strcat_P+0xc>
    359e:	08 95       	ret

000035a0 <strcpy_P>:
    35a0:	fb 01       	movw	r30, r22
    35a2:	dc 01       	movw	r26, r24
    35a4:	05 90       	lpm	r0, Z+
    35a6:	0d 92       	st	X+, r0
    35a8:	00 20       	and	r0, r0
    35aa:	e1 f7       	brne	.-8      	; 0x35a4 <strcpy_P+0x4>
    35ac:	08 95       	ret

000035ae <__strlen_P>:
    35ae:	fc 01       	movw	r30, r24
    35b0:	05 90       	lpm	r0, Z+
    35b2:	00 20       	and	r0, r0
    35b4:	e9 f7       	brne	.-6      	; 0x35b0 <__strlen_P+0x2>
    35b6:	80 95       	com	r24
    35b8:	90 95       	com	r25
    35ba:	8e 0f       	add	r24, r30
    35bc:	9f 1f       	adc	r25, r31
    35be:	08 95       	ret

000035c0 <strcat>:
    35c0:	fb 01       	movw	r30, r22
    35c2:	dc 01       	movw	r26, r24
    35c4:	0d 90       	ld	r0, X+
    35c6:	00 20       	and	r0, r0
    35c8:	e9 f7       	brne	.-6      	; 0x35c4 <strcat+0x4>
    35ca:	11 97       	sbiw	r26, 0x01	; 1
    35cc:	01 90       	ld	r0, Z+
    35ce:	0d 92       	st	X+, r0
    35d0:	00 20       	and	r0, r0
    35d2:	e1 f7       	brne	.-8      	; 0x35cc <strcat+0xc>
    35d4:	08 95       	ret

000035d6 <__itoa_ncheck>:
    35d6:	bb 27       	eor	r27, r27
    35d8:	4a 30       	cpi	r20, 0x0A	; 10
    35da:	31 f4       	brne	.+12     	; 0x35e8 <__itoa_ncheck+0x12>
    35dc:	99 23       	and	r25, r25
    35de:	22 f4       	brpl	.+8      	; 0x35e8 <__itoa_ncheck+0x12>
    35e0:	bd e2       	ldi	r27, 0x2D	; 45
    35e2:	90 95       	com	r25
    35e4:	81 95       	neg	r24
    35e6:	9f 4f       	sbci	r25, 0xFF	; 255
    35e8:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <__utoa_common>

000035ec <__ltoa_ncheck>:
    35ec:	bb 27       	eor	r27, r27
    35ee:	2a 30       	cpi	r18, 0x0A	; 10
    35f0:	51 f4       	brne	.+20     	; 0x3606 <__ltoa_ncheck+0x1a>
    35f2:	99 23       	and	r25, r25
    35f4:	42 f4       	brpl	.+16     	; 0x3606 <__ltoa_ncheck+0x1a>
    35f6:	bd e2       	ldi	r27, 0x2D	; 45
    35f8:	90 95       	com	r25
    35fa:	80 95       	com	r24
    35fc:	70 95       	com	r23
    35fe:	61 95       	neg	r22
    3600:	7f 4f       	sbci	r23, 0xFF	; 255
    3602:	8f 4f       	sbci	r24, 0xFF	; 255
    3604:	9f 4f       	sbci	r25, 0xFF	; 255
    3606:	0c 94 06 1b 	jmp	0x360c	; 0x360c <__ultoa_common>

0000360a <__ultoa_ncheck>:
    360a:	bb 27       	eor	r27, r27

0000360c <__ultoa_common>:
    360c:	fa 01       	movw	r30, r20
    360e:	a6 2f       	mov	r26, r22
    3610:	62 17       	cp	r22, r18
    3612:	71 05       	cpc	r23, r1
    3614:	81 05       	cpc	r24, r1
    3616:	91 05       	cpc	r25, r1
    3618:	33 0b       	sbc	r19, r19
    361a:	30 fb       	bst	r19, 0
    361c:	66 f0       	brts	.+24     	; 0x3636 <__ultoa_common+0x2a>
    361e:	aa 27       	eor	r26, r26
    3620:	66 0f       	add	r22, r22
    3622:	77 1f       	adc	r23, r23
    3624:	88 1f       	adc	r24, r24
    3626:	99 1f       	adc	r25, r25
    3628:	aa 1f       	adc	r26, r26
    362a:	a2 17       	cp	r26, r18
    362c:	10 f0       	brcs	.+4      	; 0x3632 <__ultoa_common+0x26>
    362e:	a2 1b       	sub	r26, r18
    3630:	63 95       	inc	r22
    3632:	38 50       	subi	r19, 0x08	; 8
    3634:	a9 f7       	brne	.-22     	; 0x3620 <__ultoa_common+0x14>
    3636:	a0 5d       	subi	r26, 0xD0	; 208
    3638:	aa 33       	cpi	r26, 0x3A	; 58
    363a:	08 f0       	brcs	.+2      	; 0x363e <__ultoa_common+0x32>
    363c:	a9 5d       	subi	r26, 0xD9	; 217
    363e:	a1 93       	st	Z+, r26
    3640:	36 f7       	brtc	.-52     	; 0x360e <__ultoa_common+0x2>
    3642:	b1 11       	cpse	r27, r1
    3644:	b1 93       	st	Z+, r27
    3646:	10 82       	st	Z, r1
    3648:	ca 01       	movw	r24, r20
    364a:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <strrev>

0000364e <__utoa_ncheck>:
    364e:	bb 27       	eor	r27, r27

00003650 <__utoa_common>:
    3650:	fb 01       	movw	r30, r22
    3652:	55 27       	eor	r21, r21
    3654:	aa 27       	eor	r26, r26
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	aa 1f       	adc	r26, r26
    365c:	a4 17       	cp	r26, r20
    365e:	10 f0       	brcs	.+4      	; 0x3664 <__utoa_common+0x14>
    3660:	a4 1b       	sub	r26, r20
    3662:	83 95       	inc	r24
    3664:	50 51       	subi	r21, 0x10	; 16
    3666:	b9 f7       	brne	.-18     	; 0x3656 <__utoa_common+0x6>
    3668:	a0 5d       	subi	r26, 0xD0	; 208
    366a:	aa 33       	cpi	r26, 0x3A	; 58
    366c:	08 f0       	brcs	.+2      	; 0x3670 <__utoa_common+0x20>
    366e:	a9 5d       	subi	r26, 0xD9	; 217
    3670:	a1 93       	st	Z+, r26
    3672:	00 97       	sbiw	r24, 0x00	; 0
    3674:	79 f7       	brne	.-34     	; 0x3654 <__utoa_common+0x4>
    3676:	b1 11       	cpse	r27, r1
    3678:	b1 93       	st	Z+, r27
    367a:	11 92       	st	Z+, r1
    367c:	cb 01       	movw	r24, r22
    367e:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <strrev>

00003682 <sprintf>:
    3682:	ae e0       	ldi	r26, 0x0E	; 14
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	e7 e4       	ldi	r30, 0x47	; 71
    3688:	fb e1       	ldi	r31, 0x1B	; 27
    368a:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__prologue_saves__+0x1c>
    368e:	0d 89       	ldd	r16, Y+21	; 0x15
    3690:	1e 89       	ldd	r17, Y+22	; 0x16
    3692:	86 e0       	ldi	r24, 0x06	; 6
    3694:	8c 83       	std	Y+4, r24	; 0x04
    3696:	1a 83       	std	Y+2, r17	; 0x02
    3698:	09 83       	std	Y+1, r16	; 0x01
    369a:	8f ef       	ldi	r24, 0xFF	; 255
    369c:	9f e7       	ldi	r25, 0x7F	; 127
    369e:	9e 83       	std	Y+6, r25	; 0x06
    36a0:	8d 83       	std	Y+5, r24	; 0x05
    36a2:	ae 01       	movw	r20, r28
    36a4:	47 5e       	subi	r20, 0xE7	; 231
    36a6:	5f 4f       	sbci	r21, 0xFF	; 255
    36a8:	6f 89       	ldd	r22, Y+23	; 0x17
    36aa:	78 8d       	ldd	r23, Y+24	; 0x18
    36ac:	ce 01       	movw	r24, r28
    36ae:	01 96       	adiw	r24, 0x01	; 1
    36b0:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <vfprintf>
    36b4:	ef 81       	ldd	r30, Y+7	; 0x07
    36b6:	f8 85       	ldd	r31, Y+8	; 0x08
    36b8:	e0 0f       	add	r30, r16
    36ba:	f1 1f       	adc	r31, r17
    36bc:	10 82       	st	Z, r1
    36be:	2e 96       	adiw	r28, 0x0e	; 14
    36c0:	e4 e0       	ldi	r30, 0x04	; 4
    36c2:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__epilogue_restores__+0x1c>

000036c6 <vfprintf>:
    36c6:	ab e0       	ldi	r26, 0x0B	; 11
    36c8:	b0 e0       	ldi	r27, 0x00	; 0
    36ca:	e9 e6       	ldi	r30, 0x69	; 105
    36cc:	fb e1       	ldi	r31, 0x1B	; 27
    36ce:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <__prologue_saves__>
    36d2:	6c 01       	movw	r12, r24
    36d4:	7b 01       	movw	r14, r22
    36d6:	8a 01       	movw	r16, r20
    36d8:	fc 01       	movw	r30, r24
    36da:	17 82       	std	Z+7, r1	; 0x07
    36dc:	16 82       	std	Z+6, r1	; 0x06
    36de:	83 81       	ldd	r24, Z+3	; 0x03
    36e0:	81 ff       	sbrs	r24, 1
    36e2:	cc c1       	rjmp	.+920    	; 0x3a7c <vfprintf+0x3b6>
    36e4:	ce 01       	movw	r24, r28
    36e6:	01 96       	adiw	r24, 0x01	; 1
    36e8:	3c 01       	movw	r6, r24
    36ea:	f6 01       	movw	r30, r12
    36ec:	93 81       	ldd	r25, Z+3	; 0x03
    36ee:	f7 01       	movw	r30, r14
    36f0:	93 fd       	sbrc	r25, 3
    36f2:	85 91       	lpm	r24, Z+
    36f4:	93 ff       	sbrs	r25, 3
    36f6:	81 91       	ld	r24, Z+
    36f8:	7f 01       	movw	r14, r30
    36fa:	88 23       	and	r24, r24
    36fc:	09 f4       	brne	.+2      	; 0x3700 <vfprintf+0x3a>
    36fe:	ba c1       	rjmp	.+884    	; 0x3a74 <vfprintf+0x3ae>
    3700:	85 32       	cpi	r24, 0x25	; 37
    3702:	39 f4       	brne	.+14     	; 0x3712 <vfprintf+0x4c>
    3704:	93 fd       	sbrc	r25, 3
    3706:	85 91       	lpm	r24, Z+
    3708:	93 ff       	sbrs	r25, 3
    370a:	81 91       	ld	r24, Z+
    370c:	7f 01       	movw	r14, r30
    370e:	85 32       	cpi	r24, 0x25	; 37
    3710:	29 f4       	brne	.+10     	; 0x371c <vfprintf+0x56>
    3712:	b6 01       	movw	r22, r12
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    371a:	e7 cf       	rjmp	.-50     	; 0x36ea <vfprintf+0x24>
    371c:	91 2c       	mov	r9, r1
    371e:	21 2c       	mov	r2, r1
    3720:	31 2c       	mov	r3, r1
    3722:	ff e1       	ldi	r31, 0x1F	; 31
    3724:	f3 15       	cp	r31, r3
    3726:	d8 f0       	brcs	.+54     	; 0x375e <vfprintf+0x98>
    3728:	8b 32       	cpi	r24, 0x2B	; 43
    372a:	79 f0       	breq	.+30     	; 0x374a <vfprintf+0x84>
    372c:	38 f4       	brcc	.+14     	; 0x373c <vfprintf+0x76>
    372e:	80 32       	cpi	r24, 0x20	; 32
    3730:	79 f0       	breq	.+30     	; 0x3750 <vfprintf+0x8a>
    3732:	83 32       	cpi	r24, 0x23	; 35
    3734:	a1 f4       	brne	.+40     	; 0x375e <vfprintf+0x98>
    3736:	23 2d       	mov	r18, r3
    3738:	20 61       	ori	r18, 0x10	; 16
    373a:	1d c0       	rjmp	.+58     	; 0x3776 <vfprintf+0xb0>
    373c:	8d 32       	cpi	r24, 0x2D	; 45
    373e:	61 f0       	breq	.+24     	; 0x3758 <vfprintf+0x92>
    3740:	80 33       	cpi	r24, 0x30	; 48
    3742:	69 f4       	brne	.+26     	; 0x375e <vfprintf+0x98>
    3744:	23 2d       	mov	r18, r3
    3746:	21 60       	ori	r18, 0x01	; 1
    3748:	16 c0       	rjmp	.+44     	; 0x3776 <vfprintf+0xb0>
    374a:	83 2d       	mov	r24, r3
    374c:	82 60       	ori	r24, 0x02	; 2
    374e:	38 2e       	mov	r3, r24
    3750:	e3 2d       	mov	r30, r3
    3752:	e4 60       	ori	r30, 0x04	; 4
    3754:	3e 2e       	mov	r3, r30
    3756:	2a c0       	rjmp	.+84     	; 0x37ac <vfprintf+0xe6>
    3758:	f3 2d       	mov	r31, r3
    375a:	f8 60       	ori	r31, 0x08	; 8
    375c:	1d c0       	rjmp	.+58     	; 0x3798 <vfprintf+0xd2>
    375e:	37 fc       	sbrc	r3, 7
    3760:	2d c0       	rjmp	.+90     	; 0x37bc <vfprintf+0xf6>
    3762:	20 ed       	ldi	r18, 0xD0	; 208
    3764:	28 0f       	add	r18, r24
    3766:	2a 30       	cpi	r18, 0x0A	; 10
    3768:	40 f0       	brcs	.+16     	; 0x377a <vfprintf+0xb4>
    376a:	8e 32       	cpi	r24, 0x2E	; 46
    376c:	b9 f4       	brne	.+46     	; 0x379c <vfprintf+0xd6>
    376e:	36 fc       	sbrc	r3, 6
    3770:	81 c1       	rjmp	.+770    	; 0x3a74 <vfprintf+0x3ae>
    3772:	23 2d       	mov	r18, r3
    3774:	20 64       	ori	r18, 0x40	; 64
    3776:	32 2e       	mov	r3, r18
    3778:	19 c0       	rjmp	.+50     	; 0x37ac <vfprintf+0xe6>
    377a:	36 fe       	sbrs	r3, 6
    377c:	06 c0       	rjmp	.+12     	; 0x378a <vfprintf+0xc4>
    377e:	8a e0       	ldi	r24, 0x0A	; 10
    3780:	98 9e       	mul	r9, r24
    3782:	20 0d       	add	r18, r0
    3784:	11 24       	eor	r1, r1
    3786:	92 2e       	mov	r9, r18
    3788:	11 c0       	rjmp	.+34     	; 0x37ac <vfprintf+0xe6>
    378a:	ea e0       	ldi	r30, 0x0A	; 10
    378c:	2e 9e       	mul	r2, r30
    378e:	20 0d       	add	r18, r0
    3790:	11 24       	eor	r1, r1
    3792:	22 2e       	mov	r2, r18
    3794:	f3 2d       	mov	r31, r3
    3796:	f0 62       	ori	r31, 0x20	; 32
    3798:	3f 2e       	mov	r3, r31
    379a:	08 c0       	rjmp	.+16     	; 0x37ac <vfprintf+0xe6>
    379c:	8c 36       	cpi	r24, 0x6C	; 108
    379e:	21 f4       	brne	.+8      	; 0x37a8 <vfprintf+0xe2>
    37a0:	83 2d       	mov	r24, r3
    37a2:	80 68       	ori	r24, 0x80	; 128
    37a4:	38 2e       	mov	r3, r24
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <vfprintf+0xe6>
    37a8:	88 36       	cpi	r24, 0x68	; 104
    37aa:	41 f4       	brne	.+16     	; 0x37bc <vfprintf+0xf6>
    37ac:	f7 01       	movw	r30, r14
    37ae:	93 fd       	sbrc	r25, 3
    37b0:	85 91       	lpm	r24, Z+
    37b2:	93 ff       	sbrs	r25, 3
    37b4:	81 91       	ld	r24, Z+
    37b6:	7f 01       	movw	r14, r30
    37b8:	81 11       	cpse	r24, r1
    37ba:	b3 cf       	rjmp	.-154    	; 0x3722 <vfprintf+0x5c>
    37bc:	98 2f       	mov	r25, r24
    37be:	9f 7d       	andi	r25, 0xDF	; 223
    37c0:	95 54       	subi	r25, 0x45	; 69
    37c2:	93 30       	cpi	r25, 0x03	; 3
    37c4:	28 f4       	brcc	.+10     	; 0x37d0 <vfprintf+0x10a>
    37c6:	0c 5f       	subi	r16, 0xFC	; 252
    37c8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ca:	9f e3       	ldi	r25, 0x3F	; 63
    37cc:	99 83       	std	Y+1, r25	; 0x01
    37ce:	0d c0       	rjmp	.+26     	; 0x37ea <vfprintf+0x124>
    37d0:	83 36       	cpi	r24, 0x63	; 99
    37d2:	31 f0       	breq	.+12     	; 0x37e0 <vfprintf+0x11a>
    37d4:	83 37       	cpi	r24, 0x73	; 115
    37d6:	71 f0       	breq	.+28     	; 0x37f4 <vfprintf+0x12e>
    37d8:	83 35       	cpi	r24, 0x53	; 83
    37da:	09 f0       	breq	.+2      	; 0x37de <vfprintf+0x118>
    37dc:	59 c0       	rjmp	.+178    	; 0x3890 <vfprintf+0x1ca>
    37de:	21 c0       	rjmp	.+66     	; 0x3822 <vfprintf+0x15c>
    37e0:	f8 01       	movw	r30, r16
    37e2:	80 81       	ld	r24, Z
    37e4:	89 83       	std	Y+1, r24	; 0x01
    37e6:	0e 5f       	subi	r16, 0xFE	; 254
    37e8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ea:	88 24       	eor	r8, r8
    37ec:	83 94       	inc	r8
    37ee:	91 2c       	mov	r9, r1
    37f0:	53 01       	movw	r10, r6
    37f2:	13 c0       	rjmp	.+38     	; 0x381a <vfprintf+0x154>
    37f4:	28 01       	movw	r4, r16
    37f6:	f2 e0       	ldi	r31, 0x02	; 2
    37f8:	4f 0e       	add	r4, r31
    37fa:	51 1c       	adc	r5, r1
    37fc:	f8 01       	movw	r30, r16
    37fe:	a0 80       	ld	r10, Z
    3800:	b1 80       	ldd	r11, Z+1	; 0x01
    3802:	36 fe       	sbrs	r3, 6
    3804:	03 c0       	rjmp	.+6      	; 0x380c <vfprintf+0x146>
    3806:	69 2d       	mov	r22, r9
    3808:	70 e0       	ldi	r23, 0x00	; 0
    380a:	02 c0       	rjmp	.+4      	; 0x3810 <vfprintf+0x14a>
    380c:	6f ef       	ldi	r22, 0xFF	; 255
    380e:	7f ef       	ldi	r23, 0xFF	; 255
    3810:	c5 01       	movw	r24, r10
    3812:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <strnlen>
    3816:	4c 01       	movw	r8, r24
    3818:	82 01       	movw	r16, r4
    381a:	f3 2d       	mov	r31, r3
    381c:	ff 77       	andi	r31, 0x7F	; 127
    381e:	3f 2e       	mov	r3, r31
    3820:	16 c0       	rjmp	.+44     	; 0x384e <vfprintf+0x188>
    3822:	28 01       	movw	r4, r16
    3824:	22 e0       	ldi	r18, 0x02	; 2
    3826:	42 0e       	add	r4, r18
    3828:	51 1c       	adc	r5, r1
    382a:	f8 01       	movw	r30, r16
    382c:	a0 80       	ld	r10, Z
    382e:	b1 80       	ldd	r11, Z+1	; 0x01
    3830:	36 fe       	sbrs	r3, 6
    3832:	03 c0       	rjmp	.+6      	; 0x383a <vfprintf+0x174>
    3834:	69 2d       	mov	r22, r9
    3836:	70 e0       	ldi	r23, 0x00	; 0
    3838:	02 c0       	rjmp	.+4      	; 0x383e <vfprintf+0x178>
    383a:	6f ef       	ldi	r22, 0xFF	; 255
    383c:	7f ef       	ldi	r23, 0xFF	; 255
    383e:	c5 01       	movw	r24, r10
    3840:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <strnlen_P>
    3844:	4c 01       	movw	r8, r24
    3846:	f3 2d       	mov	r31, r3
    3848:	f0 68       	ori	r31, 0x80	; 128
    384a:	3f 2e       	mov	r3, r31
    384c:	82 01       	movw	r16, r4
    384e:	33 fc       	sbrc	r3, 3
    3850:	1b c0       	rjmp	.+54     	; 0x3888 <vfprintf+0x1c2>
    3852:	82 2d       	mov	r24, r2
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	88 16       	cp	r8, r24
    3858:	99 06       	cpc	r9, r25
    385a:	b0 f4       	brcc	.+44     	; 0x3888 <vfprintf+0x1c2>
    385c:	b6 01       	movw	r22, r12
    385e:	80 e2       	ldi	r24, 0x20	; 32
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3866:	2a 94       	dec	r2
    3868:	f4 cf       	rjmp	.-24     	; 0x3852 <vfprintf+0x18c>
    386a:	f5 01       	movw	r30, r10
    386c:	37 fc       	sbrc	r3, 7
    386e:	85 91       	lpm	r24, Z+
    3870:	37 fe       	sbrs	r3, 7
    3872:	81 91       	ld	r24, Z+
    3874:	5f 01       	movw	r10, r30
    3876:	b6 01       	movw	r22, r12
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    387e:	21 10       	cpse	r2, r1
    3880:	2a 94       	dec	r2
    3882:	21 e0       	ldi	r18, 0x01	; 1
    3884:	82 1a       	sub	r8, r18
    3886:	91 08       	sbc	r9, r1
    3888:	81 14       	cp	r8, r1
    388a:	91 04       	cpc	r9, r1
    388c:	71 f7       	brne	.-36     	; 0x386a <vfprintf+0x1a4>
    388e:	e8 c0       	rjmp	.+464    	; 0x3a60 <vfprintf+0x39a>
    3890:	84 36       	cpi	r24, 0x64	; 100
    3892:	11 f0       	breq	.+4      	; 0x3898 <vfprintf+0x1d2>
    3894:	89 36       	cpi	r24, 0x69	; 105
    3896:	41 f5       	brne	.+80     	; 0x38e8 <vfprintf+0x222>
    3898:	f8 01       	movw	r30, r16
    389a:	37 fe       	sbrs	r3, 7
    389c:	07 c0       	rjmp	.+14     	; 0x38ac <vfprintf+0x1e6>
    389e:	60 81       	ld	r22, Z
    38a0:	71 81       	ldd	r23, Z+1	; 0x01
    38a2:	82 81       	ldd	r24, Z+2	; 0x02
    38a4:	93 81       	ldd	r25, Z+3	; 0x03
    38a6:	0c 5f       	subi	r16, 0xFC	; 252
    38a8:	1f 4f       	sbci	r17, 0xFF	; 255
    38aa:	08 c0       	rjmp	.+16     	; 0x38bc <vfprintf+0x1f6>
    38ac:	60 81       	ld	r22, Z
    38ae:	71 81       	ldd	r23, Z+1	; 0x01
    38b0:	07 2e       	mov	r0, r23
    38b2:	00 0c       	add	r0, r0
    38b4:	88 0b       	sbc	r24, r24
    38b6:	99 0b       	sbc	r25, r25
    38b8:	0e 5f       	subi	r16, 0xFE	; 254
    38ba:	1f 4f       	sbci	r17, 0xFF	; 255
    38bc:	f3 2d       	mov	r31, r3
    38be:	ff 76       	andi	r31, 0x6F	; 111
    38c0:	3f 2e       	mov	r3, r31
    38c2:	97 ff       	sbrs	r25, 7
    38c4:	09 c0       	rjmp	.+18     	; 0x38d8 <vfprintf+0x212>
    38c6:	90 95       	com	r25
    38c8:	80 95       	com	r24
    38ca:	70 95       	com	r23
    38cc:	61 95       	neg	r22
    38ce:	7f 4f       	sbci	r23, 0xFF	; 255
    38d0:	8f 4f       	sbci	r24, 0xFF	; 255
    38d2:	9f 4f       	sbci	r25, 0xFF	; 255
    38d4:	f0 68       	ori	r31, 0x80	; 128
    38d6:	3f 2e       	mov	r3, r31
    38d8:	2a e0       	ldi	r18, 0x0A	; 10
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	a3 01       	movw	r20, r6
    38de:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__ultoa_invert>
    38e2:	88 2e       	mov	r8, r24
    38e4:	86 18       	sub	r8, r6
    38e6:	45 c0       	rjmp	.+138    	; 0x3972 <vfprintf+0x2ac>
    38e8:	85 37       	cpi	r24, 0x75	; 117
    38ea:	31 f4       	brne	.+12     	; 0x38f8 <vfprintf+0x232>
    38ec:	23 2d       	mov	r18, r3
    38ee:	2f 7e       	andi	r18, 0xEF	; 239
    38f0:	b2 2e       	mov	r11, r18
    38f2:	2a e0       	ldi	r18, 0x0A	; 10
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	25 c0       	rjmp	.+74     	; 0x3942 <vfprintf+0x27c>
    38f8:	93 2d       	mov	r25, r3
    38fa:	99 7f       	andi	r25, 0xF9	; 249
    38fc:	b9 2e       	mov	r11, r25
    38fe:	8f 36       	cpi	r24, 0x6F	; 111
    3900:	c1 f0       	breq	.+48     	; 0x3932 <vfprintf+0x26c>
    3902:	18 f4       	brcc	.+6      	; 0x390a <vfprintf+0x244>
    3904:	88 35       	cpi	r24, 0x58	; 88
    3906:	79 f0       	breq	.+30     	; 0x3926 <vfprintf+0x260>
    3908:	b5 c0       	rjmp	.+362    	; 0x3a74 <vfprintf+0x3ae>
    390a:	80 37       	cpi	r24, 0x70	; 112
    390c:	19 f0       	breq	.+6      	; 0x3914 <vfprintf+0x24e>
    390e:	88 37       	cpi	r24, 0x78	; 120
    3910:	21 f0       	breq	.+8      	; 0x391a <vfprintf+0x254>
    3912:	b0 c0       	rjmp	.+352    	; 0x3a74 <vfprintf+0x3ae>
    3914:	e9 2f       	mov	r30, r25
    3916:	e0 61       	ori	r30, 0x10	; 16
    3918:	be 2e       	mov	r11, r30
    391a:	b4 fe       	sbrs	r11, 4
    391c:	0d c0       	rjmp	.+26     	; 0x3938 <vfprintf+0x272>
    391e:	fb 2d       	mov	r31, r11
    3920:	f4 60       	ori	r31, 0x04	; 4
    3922:	bf 2e       	mov	r11, r31
    3924:	09 c0       	rjmp	.+18     	; 0x3938 <vfprintf+0x272>
    3926:	34 fe       	sbrs	r3, 4
    3928:	0a c0       	rjmp	.+20     	; 0x393e <vfprintf+0x278>
    392a:	29 2f       	mov	r18, r25
    392c:	26 60       	ori	r18, 0x06	; 6
    392e:	b2 2e       	mov	r11, r18
    3930:	06 c0       	rjmp	.+12     	; 0x393e <vfprintf+0x278>
    3932:	28 e0       	ldi	r18, 0x08	; 8
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	05 c0       	rjmp	.+10     	; 0x3942 <vfprintf+0x27c>
    3938:	20 e1       	ldi	r18, 0x10	; 16
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	02 c0       	rjmp	.+4      	; 0x3942 <vfprintf+0x27c>
    393e:	20 e1       	ldi	r18, 0x10	; 16
    3940:	32 e0       	ldi	r19, 0x02	; 2
    3942:	f8 01       	movw	r30, r16
    3944:	b7 fe       	sbrs	r11, 7
    3946:	07 c0       	rjmp	.+14     	; 0x3956 <vfprintf+0x290>
    3948:	60 81       	ld	r22, Z
    394a:	71 81       	ldd	r23, Z+1	; 0x01
    394c:	82 81       	ldd	r24, Z+2	; 0x02
    394e:	93 81       	ldd	r25, Z+3	; 0x03
    3950:	0c 5f       	subi	r16, 0xFC	; 252
    3952:	1f 4f       	sbci	r17, 0xFF	; 255
    3954:	06 c0       	rjmp	.+12     	; 0x3962 <vfprintf+0x29c>
    3956:	60 81       	ld	r22, Z
    3958:	71 81       	ldd	r23, Z+1	; 0x01
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	0e 5f       	subi	r16, 0xFE	; 254
    3960:	1f 4f       	sbci	r17, 0xFF	; 255
    3962:	a3 01       	movw	r20, r6
    3964:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__ultoa_invert>
    3968:	88 2e       	mov	r8, r24
    396a:	86 18       	sub	r8, r6
    396c:	fb 2d       	mov	r31, r11
    396e:	ff 77       	andi	r31, 0x7F	; 127
    3970:	3f 2e       	mov	r3, r31
    3972:	36 fe       	sbrs	r3, 6
    3974:	0d c0       	rjmp	.+26     	; 0x3990 <vfprintf+0x2ca>
    3976:	23 2d       	mov	r18, r3
    3978:	2e 7f       	andi	r18, 0xFE	; 254
    397a:	a2 2e       	mov	r10, r18
    397c:	89 14       	cp	r8, r9
    397e:	58 f4       	brcc	.+22     	; 0x3996 <vfprintf+0x2d0>
    3980:	34 fe       	sbrs	r3, 4
    3982:	0b c0       	rjmp	.+22     	; 0x399a <vfprintf+0x2d4>
    3984:	32 fc       	sbrc	r3, 2
    3986:	09 c0       	rjmp	.+18     	; 0x399a <vfprintf+0x2d4>
    3988:	83 2d       	mov	r24, r3
    398a:	8e 7e       	andi	r24, 0xEE	; 238
    398c:	a8 2e       	mov	r10, r24
    398e:	05 c0       	rjmp	.+10     	; 0x399a <vfprintf+0x2d4>
    3990:	b8 2c       	mov	r11, r8
    3992:	a3 2c       	mov	r10, r3
    3994:	03 c0       	rjmp	.+6      	; 0x399c <vfprintf+0x2d6>
    3996:	b8 2c       	mov	r11, r8
    3998:	01 c0       	rjmp	.+2      	; 0x399c <vfprintf+0x2d6>
    399a:	b9 2c       	mov	r11, r9
    399c:	a4 fe       	sbrs	r10, 4
    399e:	0f c0       	rjmp	.+30     	; 0x39be <vfprintf+0x2f8>
    39a0:	fe 01       	movw	r30, r28
    39a2:	e8 0d       	add	r30, r8
    39a4:	f1 1d       	adc	r31, r1
    39a6:	80 81       	ld	r24, Z
    39a8:	80 33       	cpi	r24, 0x30	; 48
    39aa:	21 f4       	brne	.+8      	; 0x39b4 <vfprintf+0x2ee>
    39ac:	9a 2d       	mov	r25, r10
    39ae:	99 7e       	andi	r25, 0xE9	; 233
    39b0:	a9 2e       	mov	r10, r25
    39b2:	09 c0       	rjmp	.+18     	; 0x39c6 <vfprintf+0x300>
    39b4:	a2 fe       	sbrs	r10, 2
    39b6:	06 c0       	rjmp	.+12     	; 0x39c4 <vfprintf+0x2fe>
    39b8:	b3 94       	inc	r11
    39ba:	b3 94       	inc	r11
    39bc:	04 c0       	rjmp	.+8      	; 0x39c6 <vfprintf+0x300>
    39be:	8a 2d       	mov	r24, r10
    39c0:	86 78       	andi	r24, 0x86	; 134
    39c2:	09 f0       	breq	.+2      	; 0x39c6 <vfprintf+0x300>
    39c4:	b3 94       	inc	r11
    39c6:	a3 fc       	sbrc	r10, 3
    39c8:	11 c0       	rjmp	.+34     	; 0x39ec <vfprintf+0x326>
    39ca:	a0 fe       	sbrs	r10, 0
    39cc:	06 c0       	rjmp	.+12     	; 0x39da <vfprintf+0x314>
    39ce:	b2 14       	cp	r11, r2
    39d0:	88 f4       	brcc	.+34     	; 0x39f4 <vfprintf+0x32e>
    39d2:	28 0c       	add	r2, r8
    39d4:	92 2c       	mov	r9, r2
    39d6:	9b 18       	sub	r9, r11
    39d8:	0e c0       	rjmp	.+28     	; 0x39f6 <vfprintf+0x330>
    39da:	b2 14       	cp	r11, r2
    39dc:	60 f4       	brcc	.+24     	; 0x39f6 <vfprintf+0x330>
    39de:	b6 01       	movw	r22, r12
    39e0:	80 e2       	ldi	r24, 0x20	; 32
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    39e8:	b3 94       	inc	r11
    39ea:	f7 cf       	rjmp	.-18     	; 0x39da <vfprintf+0x314>
    39ec:	b2 14       	cp	r11, r2
    39ee:	18 f4       	brcc	.+6      	; 0x39f6 <vfprintf+0x330>
    39f0:	2b 18       	sub	r2, r11
    39f2:	02 c0       	rjmp	.+4      	; 0x39f8 <vfprintf+0x332>
    39f4:	98 2c       	mov	r9, r8
    39f6:	21 2c       	mov	r2, r1
    39f8:	a4 fe       	sbrs	r10, 4
    39fa:	10 c0       	rjmp	.+32     	; 0x3a1c <vfprintf+0x356>
    39fc:	b6 01       	movw	r22, r12
    39fe:	80 e3       	ldi	r24, 0x30	; 48
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3a06:	a2 fe       	sbrs	r10, 2
    3a08:	17 c0       	rjmp	.+46     	; 0x3a38 <vfprintf+0x372>
    3a0a:	a1 fc       	sbrc	r10, 1
    3a0c:	03 c0       	rjmp	.+6      	; 0x3a14 <vfprintf+0x34e>
    3a0e:	88 e7       	ldi	r24, 0x78	; 120
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	02 c0       	rjmp	.+4      	; 0x3a18 <vfprintf+0x352>
    3a14:	88 e5       	ldi	r24, 0x58	; 88
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	b6 01       	movw	r22, r12
    3a1a:	0c c0       	rjmp	.+24     	; 0x3a34 <vfprintf+0x36e>
    3a1c:	8a 2d       	mov	r24, r10
    3a1e:	86 78       	andi	r24, 0x86	; 134
    3a20:	59 f0       	breq	.+22     	; 0x3a38 <vfprintf+0x372>
    3a22:	a1 fe       	sbrs	r10, 1
    3a24:	02 c0       	rjmp	.+4      	; 0x3a2a <vfprintf+0x364>
    3a26:	8b e2       	ldi	r24, 0x2B	; 43
    3a28:	01 c0       	rjmp	.+2      	; 0x3a2c <vfprintf+0x366>
    3a2a:	80 e2       	ldi	r24, 0x20	; 32
    3a2c:	a7 fc       	sbrc	r10, 7
    3a2e:	8d e2       	ldi	r24, 0x2D	; 45
    3a30:	b6 01       	movw	r22, r12
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3a38:	89 14       	cp	r8, r9
    3a3a:	38 f4       	brcc	.+14     	; 0x3a4a <vfprintf+0x384>
    3a3c:	b6 01       	movw	r22, r12
    3a3e:	80 e3       	ldi	r24, 0x30	; 48
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3a46:	9a 94       	dec	r9
    3a48:	f7 cf       	rjmp	.-18     	; 0x3a38 <vfprintf+0x372>
    3a4a:	8a 94       	dec	r8
    3a4c:	f3 01       	movw	r30, r6
    3a4e:	e8 0d       	add	r30, r8
    3a50:	f1 1d       	adc	r31, r1
    3a52:	80 81       	ld	r24, Z
    3a54:	b6 01       	movw	r22, r12
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3a5c:	81 10       	cpse	r8, r1
    3a5e:	f5 cf       	rjmp	.-22     	; 0x3a4a <vfprintf+0x384>
    3a60:	22 20       	and	r2, r2
    3a62:	09 f4       	brne	.+2      	; 0x3a66 <vfprintf+0x3a0>
    3a64:	42 ce       	rjmp	.-892    	; 0x36ea <vfprintf+0x24>
    3a66:	b6 01       	movw	r22, r12
    3a68:	80 e2       	ldi	r24, 0x20	; 32
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3a70:	2a 94       	dec	r2
    3a72:	f6 cf       	rjmp	.-20     	; 0x3a60 <vfprintf+0x39a>
    3a74:	f6 01       	movw	r30, r12
    3a76:	86 81       	ldd	r24, Z+6	; 0x06
    3a78:	97 81       	ldd	r25, Z+7	; 0x07
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <vfprintf+0x3ba>
    3a7c:	8f ef       	ldi	r24, 0xFF	; 255
    3a7e:	9f ef       	ldi	r25, 0xFF	; 255
    3a80:	2b 96       	adiw	r28, 0x0b	; 11
    3a82:	e2 e1       	ldi	r30, 0x12	; 18
    3a84:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__epilogue_restores__>

00003a88 <strnlen_P>:
    3a88:	fc 01       	movw	r30, r24
    3a8a:	05 90       	lpm	r0, Z+
    3a8c:	61 50       	subi	r22, 0x01	; 1
    3a8e:	70 40       	sbci	r23, 0x00	; 0
    3a90:	01 10       	cpse	r0, r1
    3a92:	d8 f7       	brcc	.-10     	; 0x3a8a <strnlen_P+0x2>
    3a94:	80 95       	com	r24
    3a96:	90 95       	com	r25
    3a98:	8e 0f       	add	r24, r30
    3a9a:	9f 1f       	adc	r25, r31
    3a9c:	08 95       	ret

00003a9e <strnlen>:
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	61 50       	subi	r22, 0x01	; 1
    3aa2:	70 40       	sbci	r23, 0x00	; 0
    3aa4:	01 90       	ld	r0, Z+
    3aa6:	01 10       	cpse	r0, r1
    3aa8:	d8 f7       	brcc	.-10     	; 0x3aa0 <strnlen+0x2>
    3aaa:	80 95       	com	r24
    3aac:	90 95       	com	r25
    3aae:	8e 0f       	add	r24, r30
    3ab0:	9f 1f       	adc	r25, r31
    3ab2:	08 95       	ret

00003ab4 <strrev>:
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	67 2f       	mov	r22, r23
    3aba:	71 91       	ld	r23, Z+
    3abc:	77 23       	and	r23, r23
    3abe:	e1 f7       	brne	.-8      	; 0x3ab8 <strrev+0x4>
    3ac0:	32 97       	sbiw	r30, 0x02	; 2
    3ac2:	04 c0       	rjmp	.+8      	; 0x3acc <strrev+0x18>
    3ac4:	7c 91       	ld	r23, X
    3ac6:	6d 93       	st	X+, r22
    3ac8:	70 83       	st	Z, r23
    3aca:	62 91       	ld	r22, -Z
    3acc:	ae 17       	cp	r26, r30
    3ace:	bf 07       	cpc	r27, r31
    3ad0:	c8 f3       	brcs	.-14     	; 0x3ac4 <strrev+0x10>
    3ad2:	08 95       	ret

00003ad4 <fputc>:
    3ad4:	0f 93       	push	r16
    3ad6:	1f 93       	push	r17
    3ad8:	cf 93       	push	r28
    3ada:	df 93       	push	r29
    3adc:	fb 01       	movw	r30, r22
    3ade:	23 81       	ldd	r18, Z+3	; 0x03
    3ae0:	21 fd       	sbrc	r18, 1
    3ae2:	03 c0       	rjmp	.+6      	; 0x3aea <fputc+0x16>
    3ae4:	8f ef       	ldi	r24, 0xFF	; 255
    3ae6:	9f ef       	ldi	r25, 0xFF	; 255
    3ae8:	2c c0       	rjmp	.+88     	; 0x3b42 <fputc+0x6e>
    3aea:	22 ff       	sbrs	r18, 2
    3aec:	16 c0       	rjmp	.+44     	; 0x3b1a <fputc+0x46>
    3aee:	46 81       	ldd	r20, Z+6	; 0x06
    3af0:	57 81       	ldd	r21, Z+7	; 0x07
    3af2:	24 81       	ldd	r18, Z+4	; 0x04
    3af4:	35 81       	ldd	r19, Z+5	; 0x05
    3af6:	42 17       	cp	r20, r18
    3af8:	53 07       	cpc	r21, r19
    3afa:	44 f4       	brge	.+16     	; 0x3b0c <fputc+0x38>
    3afc:	a0 81       	ld	r26, Z
    3afe:	b1 81       	ldd	r27, Z+1	; 0x01
    3b00:	9d 01       	movw	r18, r26
    3b02:	2f 5f       	subi	r18, 0xFF	; 255
    3b04:	3f 4f       	sbci	r19, 0xFF	; 255
    3b06:	31 83       	std	Z+1, r19	; 0x01
    3b08:	20 83       	st	Z, r18
    3b0a:	8c 93       	st	X, r24
    3b0c:	26 81       	ldd	r18, Z+6	; 0x06
    3b0e:	37 81       	ldd	r19, Z+7	; 0x07
    3b10:	2f 5f       	subi	r18, 0xFF	; 255
    3b12:	3f 4f       	sbci	r19, 0xFF	; 255
    3b14:	37 83       	std	Z+7, r19	; 0x07
    3b16:	26 83       	std	Z+6, r18	; 0x06
    3b18:	14 c0       	rjmp	.+40     	; 0x3b42 <fputc+0x6e>
    3b1a:	8b 01       	movw	r16, r22
    3b1c:	ec 01       	movw	r28, r24
    3b1e:	fb 01       	movw	r30, r22
    3b20:	00 84       	ldd	r0, Z+8	; 0x08
    3b22:	f1 85       	ldd	r31, Z+9	; 0x09
    3b24:	e0 2d       	mov	r30, r0
    3b26:	09 95       	icall
    3b28:	89 2b       	or	r24, r25
    3b2a:	e1 f6       	brne	.-72     	; 0x3ae4 <fputc+0x10>
    3b2c:	d8 01       	movw	r26, r16
    3b2e:	16 96       	adiw	r26, 0x06	; 6
    3b30:	8d 91       	ld	r24, X+
    3b32:	9c 91       	ld	r25, X
    3b34:	17 97       	sbiw	r26, 0x07	; 7
    3b36:	01 96       	adiw	r24, 0x01	; 1
    3b38:	17 96       	adiw	r26, 0x07	; 7
    3b3a:	9c 93       	st	X, r25
    3b3c:	8e 93       	st	-X, r24
    3b3e:	16 97       	sbiw	r26, 0x06	; 6
    3b40:	ce 01       	movw	r24, r28
    3b42:	df 91       	pop	r29
    3b44:	cf 91       	pop	r28
    3b46:	1f 91       	pop	r17
    3b48:	0f 91       	pop	r16
    3b4a:	08 95       	ret

00003b4c <__ultoa_invert>:
    3b4c:	fa 01       	movw	r30, r20
    3b4e:	aa 27       	eor	r26, r26
    3b50:	28 30       	cpi	r18, 0x08	; 8
    3b52:	51 f1       	breq	.+84     	; 0x3ba8 <__ultoa_invert+0x5c>
    3b54:	20 31       	cpi	r18, 0x10	; 16
    3b56:	81 f1       	breq	.+96     	; 0x3bb8 <__ultoa_invert+0x6c>
    3b58:	e8 94       	clt
    3b5a:	6f 93       	push	r22
    3b5c:	6e 7f       	andi	r22, 0xFE	; 254
    3b5e:	6e 5f       	subi	r22, 0xFE	; 254
    3b60:	7f 4f       	sbci	r23, 0xFF	; 255
    3b62:	8f 4f       	sbci	r24, 0xFF	; 255
    3b64:	9f 4f       	sbci	r25, 0xFF	; 255
    3b66:	af 4f       	sbci	r26, 0xFF	; 255
    3b68:	b1 e0       	ldi	r27, 0x01	; 1
    3b6a:	3e d0       	rcall	.+124    	; 0x3be8 <__ultoa_invert+0x9c>
    3b6c:	b4 e0       	ldi	r27, 0x04	; 4
    3b6e:	3c d0       	rcall	.+120    	; 0x3be8 <__ultoa_invert+0x9c>
    3b70:	67 0f       	add	r22, r23
    3b72:	78 1f       	adc	r23, r24
    3b74:	89 1f       	adc	r24, r25
    3b76:	9a 1f       	adc	r25, r26
    3b78:	a1 1d       	adc	r26, r1
    3b7a:	68 0f       	add	r22, r24
    3b7c:	79 1f       	adc	r23, r25
    3b7e:	8a 1f       	adc	r24, r26
    3b80:	91 1d       	adc	r25, r1
    3b82:	a1 1d       	adc	r26, r1
    3b84:	6a 0f       	add	r22, r26
    3b86:	71 1d       	adc	r23, r1
    3b88:	81 1d       	adc	r24, r1
    3b8a:	91 1d       	adc	r25, r1
    3b8c:	a1 1d       	adc	r26, r1
    3b8e:	20 d0       	rcall	.+64     	; 0x3bd0 <__ultoa_invert+0x84>
    3b90:	09 f4       	brne	.+2      	; 0x3b94 <__ultoa_invert+0x48>
    3b92:	68 94       	set
    3b94:	3f 91       	pop	r19
    3b96:	2a e0       	ldi	r18, 0x0A	; 10
    3b98:	26 9f       	mul	r18, r22
    3b9a:	11 24       	eor	r1, r1
    3b9c:	30 19       	sub	r19, r0
    3b9e:	30 5d       	subi	r19, 0xD0	; 208
    3ba0:	31 93       	st	Z+, r19
    3ba2:	de f6       	brtc	.-74     	; 0x3b5a <__ultoa_invert+0xe>
    3ba4:	cf 01       	movw	r24, r30
    3ba6:	08 95       	ret
    3ba8:	46 2f       	mov	r20, r22
    3baa:	47 70       	andi	r20, 0x07	; 7
    3bac:	40 5d       	subi	r20, 0xD0	; 208
    3bae:	41 93       	st	Z+, r20
    3bb0:	b3 e0       	ldi	r27, 0x03	; 3
    3bb2:	0f d0       	rcall	.+30     	; 0x3bd2 <__ultoa_invert+0x86>
    3bb4:	c9 f7       	brne	.-14     	; 0x3ba8 <__ultoa_invert+0x5c>
    3bb6:	f6 cf       	rjmp	.-20     	; 0x3ba4 <__ultoa_invert+0x58>
    3bb8:	46 2f       	mov	r20, r22
    3bba:	4f 70       	andi	r20, 0x0F	; 15
    3bbc:	40 5d       	subi	r20, 0xD0	; 208
    3bbe:	4a 33       	cpi	r20, 0x3A	; 58
    3bc0:	18 f0       	brcs	.+6      	; 0x3bc8 <__ultoa_invert+0x7c>
    3bc2:	49 5d       	subi	r20, 0xD9	; 217
    3bc4:	31 fd       	sbrc	r19, 1
    3bc6:	40 52       	subi	r20, 0x20	; 32
    3bc8:	41 93       	st	Z+, r20
    3bca:	02 d0       	rcall	.+4      	; 0x3bd0 <__ultoa_invert+0x84>
    3bcc:	a9 f7       	brne	.-22     	; 0x3bb8 <__ultoa_invert+0x6c>
    3bce:	ea cf       	rjmp	.-44     	; 0x3ba4 <__ultoa_invert+0x58>
    3bd0:	b4 e0       	ldi	r27, 0x04	; 4
    3bd2:	a6 95       	lsr	r26
    3bd4:	97 95       	ror	r25
    3bd6:	87 95       	ror	r24
    3bd8:	77 95       	ror	r23
    3bda:	67 95       	ror	r22
    3bdc:	ba 95       	dec	r27
    3bde:	c9 f7       	brne	.-14     	; 0x3bd2 <__ultoa_invert+0x86>
    3be0:	00 97       	sbiw	r24, 0x00	; 0
    3be2:	61 05       	cpc	r22, r1
    3be4:	71 05       	cpc	r23, r1
    3be6:	08 95       	ret
    3be8:	9b 01       	movw	r18, r22
    3bea:	ac 01       	movw	r20, r24
    3bec:	0a 2e       	mov	r0, r26
    3bee:	06 94       	lsr	r0
    3bf0:	57 95       	ror	r21
    3bf2:	47 95       	ror	r20
    3bf4:	37 95       	ror	r19
    3bf6:	27 95       	ror	r18
    3bf8:	ba 95       	dec	r27
    3bfa:	c9 f7       	brne	.-14     	; 0x3bee <__ultoa_invert+0xa2>
    3bfc:	62 0f       	add	r22, r18
    3bfe:	73 1f       	adc	r23, r19
    3c00:	84 1f       	adc	r24, r20
    3c02:	95 1f       	adc	r25, r21
    3c04:	a0 1d       	adc	r26, r0
    3c06:	08 95       	ret

00003c08 <eeprom_read_byte>:
    3c08:	e1 99       	sbic	0x1c, 1	; 28
    3c0a:	fe cf       	rjmp	.-4      	; 0x3c08 <eeprom_read_byte>
    3c0c:	9f bb       	out	0x1f, r25	; 31
    3c0e:	8e bb       	out	0x1e, r24	; 30
    3c10:	e0 9a       	sbi	0x1c, 0	; 28
    3c12:	99 27       	eor	r25, r25
    3c14:	8d b3       	in	r24, 0x1d	; 29
    3c16:	08 95       	ret

00003c18 <eeprom_read_dword>:
    3c18:	a6 e1       	ldi	r26, 0x16	; 22
    3c1a:	b0 e0       	ldi	r27, 0x00	; 0
    3c1c:	44 e0       	ldi	r20, 0x04	; 4
    3c1e:	50 e0       	ldi	r21, 0x00	; 0
    3c20:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <eeprom_read_blraw>

00003c24 <eeprom_read_word>:
    3c24:	a8 e1       	ldi	r26, 0x18	; 24
    3c26:	b0 e0       	ldi	r27, 0x00	; 0
    3c28:	42 e0       	ldi	r20, 0x02	; 2
    3c2a:	50 e0       	ldi	r21, 0x00	; 0
    3c2c:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <eeprom_read_blraw>

00003c30 <eeprom_write_byte>:
    3c30:	26 2f       	mov	r18, r22

00003c32 <eeprom_write_r18>:
    3c32:	e1 99       	sbic	0x1c, 1	; 28
    3c34:	fe cf       	rjmp	.-4      	; 0x3c32 <eeprom_write_r18>
    3c36:	9f bb       	out	0x1f, r25	; 31
    3c38:	8e bb       	out	0x1e, r24	; 30
    3c3a:	2d bb       	out	0x1d, r18	; 29
    3c3c:	0f b6       	in	r0, 0x3f	; 63
    3c3e:	f8 94       	cli
    3c40:	e2 9a       	sbi	0x1c, 2	; 28
    3c42:	e1 9a       	sbi	0x1c, 1	; 28
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	01 96       	adiw	r24, 0x01	; 1
    3c48:	08 95       	ret

00003c4a <eeprom_write_dword>:
    3c4a:	24 2f       	mov	r18, r20
    3c4c:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <eeprom_write_r18>
    3c50:	25 2f       	mov	r18, r21
    3c52:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <eeprom_write_r18>
    3c56:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <eeprom_write_word>

00003c5a <eeprom_write_word>:
    3c5a:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <eeprom_write_byte>
    3c5e:	27 2f       	mov	r18, r23
    3c60:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <eeprom_write_r18>

00003c64 <eeprom_read_block>:
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22

00003c68 <eeprom_read_blraw>:
    3c68:	fc 01       	movw	r30, r24
    3c6a:	e1 99       	sbic	0x1c, 1	; 28
    3c6c:	fe cf       	rjmp	.-4      	; 0x3c6a <eeprom_read_blraw+0x2>
    3c6e:	06 c0       	rjmp	.+12     	; 0x3c7c <eeprom_read_blraw+0x14>
    3c70:	ff bb       	out	0x1f, r31	; 31
    3c72:	ee bb       	out	0x1e, r30	; 30
    3c74:	e0 9a       	sbi	0x1c, 0	; 28
    3c76:	31 96       	adiw	r30, 0x01	; 1
    3c78:	0d b2       	in	r0, 0x1d	; 29
    3c7a:	0d 92       	st	X+, r0
    3c7c:	41 50       	subi	r20, 0x01	; 1
    3c7e:	50 40       	sbci	r21, 0x00	; 0
    3c80:	b8 f7       	brcc	.-18     	; 0x3c70 <eeprom_read_blraw+0x8>
    3c82:	08 95       	ret

00003c84 <__prologue_saves__>:
    3c84:	2f 92       	push	r2
    3c86:	3f 92       	push	r3
    3c88:	4f 92       	push	r4
    3c8a:	5f 92       	push	r5
    3c8c:	6f 92       	push	r6
    3c8e:	7f 92       	push	r7
    3c90:	8f 92       	push	r8
    3c92:	9f 92       	push	r9
    3c94:	af 92       	push	r10
    3c96:	bf 92       	push	r11
    3c98:	cf 92       	push	r12
    3c9a:	df 92       	push	r13
    3c9c:	ef 92       	push	r14
    3c9e:	ff 92       	push	r15
    3ca0:	0f 93       	push	r16
    3ca2:	1f 93       	push	r17
    3ca4:	cf 93       	push	r28
    3ca6:	df 93       	push	r29
    3ca8:	cd b7       	in	r28, 0x3d	; 61
    3caa:	de b7       	in	r29, 0x3e	; 62
    3cac:	ca 1b       	sub	r28, r26
    3cae:	db 0b       	sbc	r29, r27
    3cb0:	0f b6       	in	r0, 0x3f	; 63
    3cb2:	f8 94       	cli
    3cb4:	de bf       	out	0x3e, r29	; 62
    3cb6:	0f be       	out	0x3f, r0	; 63
    3cb8:	cd bf       	out	0x3d, r28	; 61
    3cba:	09 94       	ijmp

00003cbc <__epilogue_restores__>:
    3cbc:	2a 88       	ldd	r2, Y+18	; 0x12
    3cbe:	39 88       	ldd	r3, Y+17	; 0x11
    3cc0:	48 88       	ldd	r4, Y+16	; 0x10
    3cc2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cc4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cc6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cc8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cca:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ccc:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cce:	b9 84       	ldd	r11, Y+9	; 0x09
    3cd0:	c8 84       	ldd	r12, Y+8	; 0x08
    3cd2:	df 80       	ldd	r13, Y+7	; 0x07
    3cd4:	ee 80       	ldd	r14, Y+6	; 0x06
    3cd6:	fd 80       	ldd	r15, Y+5	; 0x05
    3cd8:	0c 81       	ldd	r16, Y+4	; 0x04
    3cda:	1b 81       	ldd	r17, Y+3	; 0x03
    3cdc:	aa 81       	ldd	r26, Y+2	; 0x02
    3cde:	b9 81       	ldd	r27, Y+1	; 0x01
    3ce0:	ce 0f       	add	r28, r30
    3ce2:	d1 1d       	adc	r29, r1
    3ce4:	0f b6       	in	r0, 0x3f	; 63
    3ce6:	f8 94       	cli
    3ce8:	de bf       	out	0x3e, r29	; 62
    3cea:	0f be       	out	0x3f, r0	; 63
    3cec:	cd bf       	out	0x3d, r28	; 61
    3cee:	ed 01       	movw	r28, r26
    3cf0:	08 95       	ret

00003cf2 <_exit>:
    3cf2:	f8 94       	cli

00003cf4 <__stop_program>:
    3cf4:	ff cf       	rjmp	.-2      	; 0x3cf4 <__stop_program>
